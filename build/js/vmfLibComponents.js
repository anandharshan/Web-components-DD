/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-flexboxlegacy-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-input-inputtypes-shiv-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-load
 */
;window.Modernizr=function(a,b,c){function A(a){j.cssText=a}function B(a,b){return A(n.join(a+";")+(b||""))}function C(a,b){return typeof a===b}function D(a,b){return!!~(""+a).indexOf(b)}function E(a,b){for(var d in a){var e=a[d];if(!D(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function F(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:C(f,"function")?f.bind(d||b):f}return!1}function G(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+p.join(d+" ")+d).split(" ");return C(b,"string")||C(b,"undefined")?E(e,b):(e=(a+" "+q.join(d+" ")+d).split(" "),F(e,b,c))}function H(){e.input=function(c){for(var d=0,e=c.length;d<e;d++)t[c[d]]=c[d]in k;return t.list&&(t.list=!!b.createElement("datalist")&&!!a.HTMLDataListElement),t}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),e.inputtypes=function(a){for(var d=0,e,f,h,i=a.length;d<i;d++)k.setAttribute("type",f=a[d]),e=k.type!=="text",e&&(k.value=l,k.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(f)&&k.style.WebkitAppearance!==c?(g.appendChild(k),h=b.defaultView,e=h.getComputedStyle&&h.getComputedStyle(k,null).WebkitAppearance!=="textfield"&&k.offsetHeight!==0,g.removeChild(k)):/^(search|tel)$/.test(f)||(/^(url|email)$/.test(f)?e=k.checkValidity&&k.checkValidity()===!1:e=k.value!=l)),s[a[d]]=!!e;return s}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var d="2.8.3",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k=b.createElement("input"),l=":)",m={}.toString,n=" -webkit- -moz- -o- -ms- ".split(" "),o="Webkit Moz O ms",p=o.split(" "),q=o.toLowerCase().split(" "),r={},s={},t={},u=[],v=u.slice,w,x=function(a,c,d,e){var f,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=["&#173;",'<style id="s',h,'">',a,"</style>"].join(""),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=g.style.overflow,g.style.overflow="hidden",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},y={}.hasOwnProperty,z;!C(y,"undefined")&&!C(y.call,"undefined")?z=function(a,b){return y.call(a,b)}:z=function(a,b){return b in a&&C(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=v.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(v.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(v.call(arguments)))};return e}),r.flexbox=function(){return G("flexWrap")},r.flexboxlegacy=function(){return G("boxDirection")},r.rgba=function(){return A("background-color:rgba(150,255,150,.5)"),D(j.backgroundColor,"rgba")},r.hsla=function(){return A("background-color:hsla(120,40%,100%,.5)"),D(j.backgroundColor,"rgba")||D(j.backgroundColor,"hsla")},r.multiplebgs=function(){return A("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(j.background)},r.backgroundsize=function(){return G("backgroundSize")},r.borderimage=function(){return G("borderImage")},r.borderradius=function(){return G("borderRadius")},r.boxshadow=function(){return G("boxShadow")},r.textshadow=function(){return b.createElement("div").style.textShadow===""},r.opacity=function(){return B("opacity:.55"),/^0.55$/.test(j.opacity)},r.cssanimations=function(){return G("animationName")},r.csscolumns=function(){return G("columnCount")},r.cssgradients=function(){var a="background-image:",b="gradient(linear,left top,right bottom,from(#9f9),to(white));",c="linear-gradient(left top,#9f9, white);";return A((a+"-webkit- ".split(" ").join(b+a)+n.join(c+a)).slice(0,-a.length)),D(j.backgroundImage,"gradient")},r.cssreflections=function(){return G("boxReflect")},r.csstransforms=function(){return!!G("transform")},r.csstransforms3d=function(){var a=!!G("perspective");return a&&"webkitPerspective"in g.style&&x("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(b,c){a=b.offsetLeft===9&&b.offsetHeight===3}),a},r.csstransitions=function(){return G("transition")},r.fontface=function(){var a;return x('@font-face {font-family:"font";src:url("https://")}',function(c,d){var e=b.getElementById("smodernizr"),f=e.sheet||e.styleSheet,g=f?f.cssRules&&f.cssRules[0]?f.cssRules[0].cssText:f.cssText||"":"";a=/src/i.test(g)&&g.indexOf(d.split(" ")[0])===0}),a},r.generatedcontent=function(){var a;return x(["#",h,"{font:0/0 a}#",h,':after{content:"',l,'";visibility:hidden;font:3px/1 a}'].join(""),function(b){a=b.offsetHeight>=3}),a};for(var I in r)z(r,I)&&(w=I.toLowerCase(),e[w]=r[I](),u.push((e[w]?"":"no-")+w));return e.input||H(),e.addTest=function(a,b){if(typeof a=="object")for(var d in a)z(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},A(""),i=k=null,function(a,b){function l(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x<style>"+b+"</style>",d.insertBefore(c.lastChild,d.firstChild)}function m(){var a=s.elements;return typeof a=="string"?a.split(" "):a}function n(a){var b=j[a[h]];return b||(b={},i++,a[h]=i,j[i]=b),b}function o(a,c,d){c||(c=b);if(k)return c.createElement(a);d||(d=n(c));var g;return d.cache[a]?g=d.cache[a].cloneNode():f.test(a)?g=(d.cache[a]=d.createElem(a)).cloneNode():g=d.createElem(a),g.canHaveChildren&&!e.test(a)&&!g.tagUrn?d.frag.appendChild(g):g}function p(a,c){a||(a=b);if(k)return a.createDocumentFragment();c=c||n(a);var d=c.frag.cloneNode(),e=0,f=m(),g=f.length;for(;e<g;e++)d.createElement(f[e]);return d}function q(a,b){b.cache||(b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag()),a.createElement=function(c){return s.shivMethods?o(c,a,b):b.createElem(c)},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+m().join().replace(/[\w\-]+/g,function(a){return b.createElem(a),b.frag.createElement(a),'c("'+a+'")'})+");return n}")(s,b.frag)}function r(a){a||(a=b);var c=n(a);return s.shivCSS&&!g&&!c.hasCSS&&(c.hasCSS=!!l(a,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),k||q(a,c),a}var c="3.7.0",d=a.html5||{},e=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,f=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,g,h="_html5shiv",i=0,j={},k;(function(){try{var a=b.createElement("a");a.innerHTML="<xyz></xyz>",g="hidden"in a,k=a.childNodes.length==1||function(){b.createElement("a");var a=b.createDocumentFragment();return typeof a.cloneNode=="undefined"||typeof a.createDocumentFragment=="undefined"||typeof a.createElement=="undefined"}()}catch(c){g=!0,k=!0}})();var s={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:c,shivCSS:d.shivCSS!==!1,supportsUnknownElements:k,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:r,createElement:o,createDocumentFragment:p};a.html5=s,r(b)}(this,b),e._version=d,e._prefixes=n,e._domPrefixes=q,e._cssomPrefixes=p,e.testProp=function(a){return E([a])},e.testAllProps=G,e.testStyles=x,g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+u.join(" "):""),e}(this,this.document),function(a,b,c){function d(a){return"[object Function]"==o.call(a)}function e(a){return"string"==typeof a}function f(){}function g(a){return!a||"loaded"==a||"complete"==a||"uninitialized"==a}function h(){var a=p.shift();q=1,a?a.t?m(function(){("c"==a.t?B.injectCss:B.injectJs)(a.s,0,a.a,a.x,a.e,1)},0):(a(),h()):q=0}function i(a,c,d,e,f,i,j){function k(b){if(!o&&g(l.readyState)&&(u.r=o=1,!q&&h(),l.onload=l.onreadystatechange=null,b)){"img"!=a&&m(function(){t.removeChild(l)},50);for(var d in y[c])y[c].hasOwnProperty(d)&&y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a),o=0,r=0,u={t:d,s:c,e:f,a:i,x:j};1===y[c]&&(r=1,y[c]=[]),"object"==a?l.data=c:(l.src=c,l.type=a),l.width=l.height="0",l.onerror=l.onload=l.onreadystatechange=function(){k.call(this,r)},p.splice(e,0,u),"img"!=a&&(r||2===y[c]?(t.insertBefore(l,s?null:n),m(k,j)):y[c].push(l))}function j(a,b,c,d,f){return q=0,b=b||"j",e(a)?i("c"==b?v:u,a,b,this.i++,c,d,f):(p.splice(this.i++,0,a),1==p.length&&h()),this}function k(){var a=B;return a.loader={load:j,i:0},a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&&!!b.createRange().compareNode,t=s?l:n.parentNode,l=a.opera&&"[object Opera]"==o.call(a.opera),l=!!b.attachEvent&&!l,u=r?"object":l?"script":"img",v=l?"script":u,w=Array.isArray||function(a){return"[object Array]"==o.call(a)},x=[],y={},z={timeout:function(a,b){return b.length&&(a.timeout=b[0]),a}},A,B;B=function(a){function b(a){var a=a.split("!"),b=x.length,c=a.pop(),d=a.length,c={url:c,origUrl:c,prefixes:a},e,f,g;for(f=0;f<d;f++)g=a[f].split("="),(e=z[g.shift()])&&(c=e(c,g));for(f=0;f<b;f++)c=x[f](c);return c}function g(a,e,f,g,h){var i=b(a),j=i.autoCallback;i.url.split(".").pop().split("?").shift(),i.bypass||(e&&(e=d(e)?e:e[a]||e[g]||e[a.split("/").pop().split("?")[0]]),i.instead?i.instead(a,e,f,g,h):(y[i.url]?i.noexec=!0:y[i.url]=1,f.load(i.url,i.forceCSS||!i.forceJS&&"css"==i.url.split(".").pop().split("?").shift()?"c":c,i.noexec,i.attrs,i.timeout),(d(e)||d(j))&&f.load(function(){k(),e&&e(i.origUrl,h,g),j&&j(i.origUrl,h,g),y[i.url]=2})))}function h(a,b){function c(a,c){if(a){if(e(a))c||(j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}),g(a,j,b,0,h);else if(Object(a)===a)for(n in m=function(){var b=0,c;for(c in a)a.hasOwnProperty(c)&&b++;return b}(),a)a.hasOwnProperty(n)&&(!c&&!--m&&(d(j)?j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}:j[n]=function(a){return function(){var b=[].slice.call(arguments);a&&a.apply(this,b),l()}}(k[n])),g(a[n],j,b,n,h))}else!c&&l()}var h=!!a.test,i=a.load||a.both,j=a.callback||f,k=j,l=a.complete||f,m,n;c(h?a.yep:a.nope,!!i),i&&c(i)}var i,j,l=this.yepnope.loader;if(e(a))g(a,0,l,0);else if(w(a))for(i=0;i<a.length;i++)j=a[i],e(j)?g(j,0,l,0):w(j)?B(j):Object(j)===j&&h(j,l);else Object(a)===a&&h(a,l)},B.addPrefix=function(a,b){z[a]=b},B.addFilter=function(a){x.push(a)},B.errorTimeout=1e4,null==b.readyState&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",A=function(){b.removeEventListener("DOMContentLoaded",A,0),b.readyState="complete"},0)),a.yepnope=k(),a.yepnope.executeStack=h,a.yepnope.injectJs=function(a,c,d,e,i,j){var k=b.createElement("script"),l,o,e=e||B.errorTimeout;k.src=a;for(o in d)k.setAttribute(o,d[o]);c=j?h:c||f,k.onreadystatechange=k.onload=function(){!l&&g(k.readyState)&&(l=1,c(),k.onload=k.onreadystatechange=null)},m(function(){l||(l=1,c(1))},e),i?k.onload():n.parentNode.insertBefore(k,n)},a.yepnope.injectCss=function(a,c,d,e,g,i){var e=b.createElement("link"),j,c=i?h:c||f;e.href=a,e.rel="stylesheet",e.type="text/css";for(j in d)e.setAttribute(j,d[j]);g||(n.parentNode.insertBefore(e,n),m(c,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};
// Composited file - DO NOT EDIT
//----------------------------------------------------------------------
//
// ECMAScript 5 Polyfills
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// ES5 15.2 Object Objects
//----------------------------------------------------------------------

//
// ES5 15.2.3 Properties of the Object Constructor
//

// ES5 15.2.3.2 Object.getPrototypeOf ( O )
// From http://ejohn.org/blog/objectgetprototypeof/
// NOTE: won't work for typical function T() {}; T.prototype = {}; new T; case
// since the constructor property is destroyed.
if (!Object.getPrototypeOf) {
  Object.getPrototypeOf = function (o) {
    if (o !== Object(o)) { throw TypeError("Object.getPrototypeOf called on non-object"); }
    return o.__proto__ || o.constructor.prototype || Object.prototype;
  };
}

//    // ES5 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P )
//    if (typeof Object.getOwnPropertyDescriptor !== "function") {
//        Object.getOwnPropertyDescriptor = function (o, name) {
//            if (o !== Object(o)) { throw TypeError(); }
//            if (o.hasOwnProperty(name)) {
//                return {
//                    value: o[name],
//                    enumerable: true,
//                    writable: true,
//                    configurable: true
//                };
//            }
//        };
//    }

// ES5 15.2.3.4 Object.getOwnPropertyNames ( O )
if (typeof Object.getOwnPropertyNames !== "function") {
  Object.getOwnPropertyNames = function (o) {
    if (o !== Object(o)) { throw TypeError("Object.getOwnPropertyNames called on non-object"); }
    var props = [], p;
    for (p in o) {
      if (Object.prototype.hasOwnProperty.call(o, p)) {
        props.push(p);
      }
    }
    return props;
  };
}

// ES5 15.2.3.5 Object.create ( O [, Properties] )
if (typeof Object.create !== "function") {
  Object.create = function (prototype, properties) {
    if (typeof prototype !== "object") { throw TypeError(); }
    function Ctor() {}
    Ctor.prototype = prototype;
    var o = new Ctor();
    if (prototype) { o.constructor = Ctor; }
    if (properties !== undefined) {
      if (properties !== Object(properties)) { throw TypeError(); }
      Object.defineProperties(o, properties);
    }
    return o;
  };
}

// ES 15.2.3.6 Object.defineProperty ( O, P, Attributes )
// Partial support for most common case - getters, setters, and values
(function() {
  if (!Object.defineProperty ||
      !(function () { try { Object.defineProperty({}, 'x', {}); return true; } catch (e) { return false; } } ())) {
    var orig = Object.defineProperty;
    Object.defineProperty = function (o, prop, desc) {
      // In IE8 try built-in implementation for defining properties on DOM prototypes.
      if (orig) { try { return orig(o, prop, desc); } catch (e) {} }

      if (o !== Object(o)) { throw TypeError("Object.defineProperty called on non-object"); }
      if (Object.prototype.__defineGetter__ && ('get' in desc)) {
        Object.prototype.__defineGetter__.call(o, prop, desc.get);
      }
      if (Object.prototype.__defineSetter__ && ('set' in desc)) {
        Object.prototype.__defineSetter__.call(o, prop, desc.set);
      }
      if ('value' in desc) {
        o[prop] = desc.value;
      }
      return o;
    };
  }
}());

// ES 15.2.3.7 Object.defineProperties ( O, Properties )
if (typeof Object.defineProperties !== "function") {
  Object.defineProperties = function (o, properties) {
    if (o !== Object(o)) { throw TypeError("Object.defineProperties called on non-object"); }
    var name;
    for (name in properties) {
      if (Object.prototype.hasOwnProperty.call(properties, name)) {
        Object.defineProperty(o, name, properties[name]);
      }
    }
    return o;
  };
}


// ES5 15.2.3.14 Object.keys ( O )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys
if (!Object.keys) {
  Object.keys = function (o) {
    if (o !== Object(o)) { throw TypeError('Object.keys called on non-object'); }
    var ret = [], p;
    for (p in o) {
      if (Object.prototype.hasOwnProperty.call(o, p)) {
        ret.push(p);
      }
    }
    return ret;
  };
}

//----------------------------------------------------------------------
// ES5 15.3 Function Objects
//----------------------------------------------------------------------

//
// ES5 15.3.4 Properties of the Function Prototype Object
//

// ES5 15.3.4.5 Function.prototype.bind ( thisArg [, arg1 [, arg2, ... ]] )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function (o) {
    if (typeof this !== 'function') { throw TypeError("Bind must be called on a function"); }
    var slice = [].slice,
        args = slice.call(arguments, 1),
        self = this,
        bound = function () {
          return self.apply(this instanceof nop ? this : o,
                            args.concat(slice.call(arguments)));
        };

    function nop() {}
    nop.prototype = self.prototype;
    bound.prototype = new nop();
    return bound;
  };
}


//----------------------------------------------------------------------
// ES5 15.4 Array Objects
//----------------------------------------------------------------------

//
// ES5 15.4.3 Properties of the Array Constructor
//


// ES5 15.4.3.2 Array.isArray ( arg )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
Array.isArray = Array.isArray || function (o) { return Boolean(o && Object.prototype.toString.call(Object(o)) === '[object Array]'); };


//
// ES5 15.4.4 Properties of the Array Prototype Object
//

// ES5 15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function (searchElement /*, fromIndex */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (len === 0) { return -1; }

    var n = 0;
    if (arguments.length > 0) {
      n = Number(arguments[1]);
      if (isNaN(n)) {
        n = 0;
      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
      }
    }

    if (n >= len) { return -1; }

    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);

    for (; k < len; k++) {
      if (k in t && t[k] === searchElement) {
        return k;
      }
    }
    return -1;
  };
}

// ES5 15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
if (!Array.prototype.lastIndexOf) {
  Array.prototype.lastIndexOf = function (searchElement /*, fromIndex*/) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (len === 0) { return -1; }

    var n = len;
    if (arguments.length > 1) {
      n = Number(arguments[1]);
      if (n !== n) {
        n = 0;
      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
      }
    }

    var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);

    for (; k >= 0; k--) {
      if (k in t && t[k] === searchElement) {
        return k;
      }
    }
    return -1;
  };
}

// ES5 15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
if (!Array.prototype.every) {
  Array.prototype.every = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t && !fun.call(thisp, t[i], i, t)) {
        return false;
      }
    }

    return true;
  };
}

// ES5 15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
if (!Array.prototype.some) {
  Array.prototype.some = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t && fun.call(thisp, t[i], i, t)) {
        return true;
      }
    }

    return false;
  };
}

// ES5 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach
if (!Array.prototype.forEach) {
  Array.prototype.forEach = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        fun.call(thisp, t[i], i, t);
      }
    }
  };
}


// ES5 15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Map
if (!Array.prototype.map) {
  Array.prototype.map = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var res = []; res.length = len;
    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        res[i] = fun.call(thisp, t[i], i, t);
      }
    }

    return res;
  };
}

// ES5 15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Filter
if (!Array.prototype.filter) {
  Array.prototype.filter = function (fun /*, thisp */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    var res = [];
    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        var val = t[i]; // in case fun mutates this
        if (fun.call(thisp, val, i, t)) {
          res.push(val);
        }
      }
    }

    return res;
  };
}


// ES5 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce
if (!Array.prototype.reduce) {
  Array.prototype.reduce = function (fun /*, initialValue */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw TypeError(); }

    // no value to return if no initial value and an empty array
    if (len === 0 && arguments.length === 1) { throw TypeError(); }

    var k = 0;
    var accumulator;
    if (arguments.length >= 2) {
      accumulator = arguments[1];
    } else {
      do {
        if (k in t) {
          accumulator = t[k++];
          break;
        }

        // if array contains no values, no initial value to return
        if (++k >= len) { throw TypeError(); }
      }
      while (true);
    }

    while (k < len) {
      if (k in t) {
        accumulator = fun.call(undefined, accumulator, t[k], k, t);
      }
      k++;
    }

    return accumulator;
  };
}


// ES5 15.4.4.22 Array.prototype.reduceRight ( callbackfn [, initialValue ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/ReduceRight
if (!Array.prototype.reduceRight) {
  Array.prototype.reduceRight = function (callbackfn /*, initialValue */) {
    if (this === void 0 || this === null) { throw TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof callbackfn !== "function") { throw TypeError(); }

    // no value to return if no initial value, empty array
    if (len === 0 && arguments.length === 1) { throw TypeError(); }

    var k = len - 1;
    var accumulator;
    if (arguments.length >= 2) {
      accumulator = arguments[1];
    } else {
      do {
        if (k in this) {
          accumulator = this[k--];
          break;
        }

        // if array contains no values, no initial value to return
        if (--k < 0) { throw TypeError(); }
      }
      while (true);
    }

    while (k >= 0) {
      if (k in t) {
        accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);
      }
      k--;
    }

    return accumulator;
  };
}


//----------------------------------------------------------------------
// ES5 15.5 String Objects
//----------------------------------------------------------------------

//
// ES5 15.5.4 Properties of the String Prototype Object
//


// ES5 15.5.4.20 String.prototype.trim()
if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return String(this).replace(/^\s+/, '').replace(/\s+$/, '');
  };
}



//----------------------------------------------------------------------
// ES5 15.9 Date Objects
//----------------------------------------------------------------------


//
// ES 15.9.4 Properties of the Date Constructor
//

// ES5 15.9.4.4 Date.now ( )
// From https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date/now
if (!Date.now) {
  Date.now = function now() {
    return Number(new Date());
  };
}


//
// ES5 15.9.5 Properties of the Date Prototype Object
//

// ES5 15.9.4.43 Date.prototype.toISOString ( )
// Inspired by http://www.json.org/json2.js
if (!Date.prototype.toISOString) {
  Date.prototype.toISOString = function () {
    function pad2(n) { return ('00' + n).slice(-2); }
    function pad3(n) { return ('000' + n).slice(-3); }

    return this.getUTCFullYear() + '-' +
      pad2(this.getUTCMonth() + 1) + '-' +
      pad2(this.getUTCDate()) + 'T' +
      pad2(this.getUTCHours()) + ':' +
      pad2(this.getUTCMinutes()) + ':' +
      pad2(this.getUTCSeconds()) + '.' +
      pad3(this.getUTCMilliseconds()) + 'Z';
  };
}
//----------------------------------------------------------------------
//
// Browser Polyfills
//
// This assumes ES5 or ES3 + es5.js
// (polyfill.js is es5.js + web.js for convenience)
//
//----------------------------------------------------------------------

(function(global) {
  if (!('window' in global && 'document' in global))
    return;

  //----------------------------------------------------------------------
  //
  // HTML - https://html.spec.whatwg.org
  //
  //----------------------------------------------------------------------

  // document.head attribute
  // Needed for: IE8-
  document.head = document.head || document.getElementsByTagName('head')[0];

  // Ensure correct parsing of newish elements ("shiv")
  // Needed for: IE8-
  [
    'abbr', 'article', 'aside', 'audio', 'bdi', 'canvas', 'data', 'datalist',
    'details', 'dialog', 'figcaption', 'figure', 'footer', 'header', 'hgroup',
    'main', 'mark', 'meter', 'nav', 'output', 'picture', 'progress', 'section',
    'summary', 'template', 'time', 'video'].forEach(function(tag) {
     document.createElement(tag);
   });

  // HTMLElement.dataset
  // Needed for: IE10-
  if (!('dataset' in document.createElement('span')) &&
      'Element' in global && Element.prototype && Object.defineProperty) {
    Object.defineProperty(Element.prototype, 'dataset', { get: function() {
      var result = Object.create(null);
      for (var i = 0; i < this.attributes.length; ++i) {
        var attr = this.attributes[i];
        if (attr.specified && attr.name.substring(0, 5) === 'data-') {
          (function(element, name) {
            result[name] = element.getAttribute('data-' + name); // Read-only, for IE8-
            Object.defineProperty(result, name, {
              get: function() {
                return element.getAttribute('data-' + name);
              },
              set: function(value) {
                element.setAttribute('data-' + name, value);
              }});
          }(this, attr.name.substring(5)));
        }
      }
      return result;
    }});
  }

  // Base64 utility methods
  // Needed for: IE9-
  (function() {
    if ('atob' in global && 'btoa' in global)
      return;

    var B64_ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    function atob(input) {
      input = String(input);
      var position = 0,
          output = [],
          buffer = 0, bits = 0, n;

      input = input.replace(/\s/g, '');
      if ((input.length % 4) === 0) { input = input.replace(/=+$/, ''); }
      if ((input.length % 4) === 1) { throw Error("InvalidCharacterError"); }
      if (/[^+/0-9A-Za-z]/.test(input)) { throw Error("InvalidCharacterError"); }

      while (position < input.length) {
        n = B64_ALPHABET.indexOf(input.charAt(position));
        buffer = (buffer << 6) | n;
        bits += 6;

        if (bits === 24) {
          output.push(String.fromCharCode((buffer >> 16) & 0xFF));
          output.push(String.fromCharCode((buffer >>  8) & 0xFF));
          output.push(String.fromCharCode(buffer & 0xFF));
          bits = 0;
          buffer = 0;
        }
        position += 1;
      }

      if (bits === 12) {
        buffer = buffer >> 4;
        output.push(String.fromCharCode(buffer & 0xFF));
      } else if (bits === 18) {
        buffer = buffer >> 2;
        output.push(String.fromCharCode((buffer >> 8) & 0xFF));
        output.push(String.fromCharCode(buffer & 0xFF));
      }

      return output.join('');
    };

    function btoa(input) {
      input = String(input);
      var position = 0,
          out = [],
          o1, o2, o3,
          e1, e2, e3, e4;

      if (/[^\x00-\xFF]/.test(input)) { throw Error("InvalidCharacterError"); }

      while (position < input.length) {
        o1 = input.charCodeAt(position++);
        o2 = input.charCodeAt(position++);
        o3 = input.charCodeAt(position++);

        // 111111 112222 222233 333333
        e1 = o1 >> 2;
        e2 = ((o1 & 0x3) << 4) | (o2 >> 4);
        e3 = ((o2 & 0xf) << 2) | (o3 >> 6);
        e4 = o3 & 0x3f;

        if (position === input.length + 2) {
          e3 = 64;
          e4 = 64;
        }
        else if (position === input.length + 1) {
          e4 = 64;
        }

        out.push(B64_ALPHABET.charAt(e1),
                 B64_ALPHABET.charAt(e2),
                 B64_ALPHABET.charAt(e3),
                 B64_ALPHABET.charAt(e4));
      }

      return out.join('');
    };

    global.atob = atob;
    global.btoa = btoa;
  }());

  //----------------------------------------------------------------------
  //
  // DOM - https://dom.spec.whatwg.org/
  //
  //----------------------------------------------------------------------

  // Document.querySelectorAll method
  // http://ajaxian.com/archives/creating-a-queryselector-for-ie-that-runs-at-native-speed
  // Needed for: IE7-
  if (!document.querySelectorAll) {
    document.querySelectorAll = function(selectors) {
      var style = document.createElement('style'), elements = [], element;
      document.documentElement.firstChild.appendChild(style);
      document._qsa = [];

      style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';
      window.scrollBy(0, 0);
      style.parentNode.removeChild(style);

      while (document._qsa.length) {
        element = document._qsa.shift();
        element.style.removeAttribute('x-qsa');
        elements.push(element);
      }
      document._qsa = null;
      return elements;
    };
  }

  // Document.querySelector method
  // Needed for: IE7-
  if (!document.querySelector) {
    document.querySelector = function(selectors) {
      var elements = document.querySelectorAll(selectors);
      return (elements.length) ? elements[0] : null;
    };
  }

  // Document.getElementsByClassName method
  // Needed for: IE8-
  if (!document.getElementsByClassName) {
    document.getElementsByClassName = function(classNames) {
      classNames = String(classNames).replace(/^|\s+/g, '.');
      return document.querySelectorAll(classNames);
    };
  }

  // Node interface constants
  // Needed for: IE8-
  global.Node = global.Node || function() { throw TypeError("Illegal constructor"); };
  Node.ELEMENT_NODE = 1;
  Node.ATTRIBUTE_NODE = 2;
  Node.TEXT_NODE = 3;
  Node.CDATA_SECTION_NODE = 4;
  Node.ENTITY_REFERENCE_NODE = 5;
  Node.ENTITY_NODE = 6;
  Node.PROCESSING_INSTRUCTION_NODE = 7;
  Node.COMMENT_NODE = 8;
  Node.DOCUMENT_NODE = 9;
  Node.DOCUMENT_TYPE_NODE = 10;
  Node.DOCUMENT_FRAGMENT_NODE = 11;
  Node.NOTATION_NODE = 12;

  // DOMException constants
  // Needed for: IE8-
  global.DOMException = global.DOMException || function() { throw TypeError("Illegal constructor"); };
  DOMException.INDEX_SIZE_ERR = 1;
  DOMException.DOMSTRING_SIZE_ERR = 2;
  DOMException.HIERARCHY_REQUEST_ERR = 3;
  DOMException.WRONG_DOCUMENT_ERR = 4;
  DOMException.INVALID_CHARACTER_ERR = 5;
  DOMException.NO_DATA_ALLOWED_ERR = 6;
  DOMException.NO_MODIFICATION_ALLOWED_ERR = 7;
  DOMException.NOT_FOUND_ERR = 8;
  DOMException.NOT_SUPPORTED_ERR = 9;
  DOMException.INUSE_ATTRIBUTE_ERR = 10;
  DOMException.INVALID_STATE_ERR = 11;
  DOMException.SYNTAX_ERR = 12;
  DOMException.INVALID_MODIFICATION_ERR = 13;
  DOMException.NAMESPACE_ERR = 14;
  DOMException.INVALID_ACCESS_ERR = 15;

  // Event and EventTargets interfaces
  // Needed for: IE8
  (function(){
    if (!('Element' in global) || Element.prototype.addEventListener || !Object.defineProperty)
      return;

    // interface Event

    // PhaseType (const unsigned short)
    Event.CAPTURING_PHASE = 1;
    Event.AT_TARGET       = 2;
    Event.BUBBLING_PHASE  = 3;

    Object.defineProperties(Event.prototype, {
      CAPTURING_PHASE: { get: function() { return 1; } },
      AT_TARGET:       { get: function() { return 2; } },
      BUBBLING_PHASE:   { get: function() { return 3; } },
      target: {
        get: function() {
          return this.srcElement;
        }},
      currentTarget: {
        get: function() {
          return this._currentTarget;
        }},
      eventPhase: {
        get: function() {
          return (this.srcElement === this.currentTarget) ? Event.AT_TARGET : Event.BUBBLING_PHASE;
        }},
      bubbles: {
        get: function() {
          switch (this.type) {
            // Mouse
          case 'click':
          case 'dblclick':
          case 'mousedown':
          case 'mouseup':
          case 'mouseover':
          case 'mousemove':
          case 'mouseout':
          case 'mousewheel':
            // Keyboard
          case 'keydown':
          case 'keypress':
          case 'keyup':
            // Frame/Object
          case 'resize':
          case 'scroll':
            // Form
          case 'select':
          case 'change':
          case 'submit':
          case 'reset':
            return true;
          }
          return false;
        }},
      cancelable: {
        get: function() {
          switch (this.type) {
            // Mouse
          case 'click':
          case 'dblclick':
          case 'mousedown':
          case 'mouseup':
          case 'mouseover':
          case 'mouseout':
          case 'mousewheel':
            // Keyboard
          case 'keydown':
          case 'keypress':
          case 'keyup':
            // Form
          case 'submit':
            return true;
          }
          return false;
        }},
      timeStamp: {
        get: function() {
          return this._timeStamp;
        }},
      stopPropagation: {
        value: function() {
          this.cancelBubble = true;
        }},
      preventDefault: {
        value: function() {
          this.returnValue = false;
        }},
      defaultPrevented: {
        get: function() {
          return this.returnValue === false;
        }}
    });

    // interface EventTarget

    function addEventListener(type, listener, useCapture) {
      if (typeof listener !== 'function') return;
      if (type === 'DOMContentLoaded') type = 'load';
      var target = this;
      var f = function(e) {
        e._timeStamp = Date.now();
        e._currentTarget = target;
        listener.call(this, e);
        e._currentTarget = null;
      };
      this['_' + type + listener] = f;
      this.attachEvent('on' + type, f);
    }

    function removeEventListener(type, listener, useCapture) {
      try{
        if (typeof listener !== 'function') return;
        if (type === 'DOMContentLoaded') type = 'load';
        var f = this['_' + type + listener];
        if (f) {
          this.detachEvent('on' + type, f);
          this['_' + type + listener] = null;
        }
      }catch(e){}
    }


    [Window, HTMLDocument, Element].forEach(function(o) {
      o.prototype.addEventListener = addEventListener;
      o.prototype.removeEventListener = removeEventListener;
    });
  }());

  // Shim for DOM Events for IE7-
  // http://www.quirksmode.org/blog/archives/2005/10/_and_the_winner_1.html
  // Use addEvent(object, event, handler) instead of object.addEventListener(event, handler)
  window.addEvent = function(obj, type, fn) {
    if (obj.addEventListener) {
      obj.addEventListener(type, fn, false);
    } else if (obj.attachEvent) {
      obj["e" + type + fn] = fn;
      obj[type + fn] = function() {
        var e = window.event;
        e.currentTarget = obj;
        e.preventDefault = function() { e.returnValue = false; };
        e.stopPropagation = function() { e.cancelBubble = true; };
        e.target = e.srcElement;
        e.timeStamp = Date.now();
        obj["e" + type + fn].call(this, e);
      };
      obj.attachEvent("on" + type, obj[type + fn]);
    }
  };

  window.removeEvent = function(obj, type, fn) {
    if (obj.removeEventListener) {
      obj.removeEventListener(type, fn, false);
    } else if (obj.detachEvent) {
      obj.detachEvent("on" + type, obj[type + fn]);
      obj[type + fn] = null;
      obj["e" + type + fn] = null;
    }
  };

  // DOMTokenList interface and Element.classList / Element.relList
  // Needed for: IE9-
  // Use getClassList(elem) instead of elem.classList() if IE7- support is needed
  // Use getRelList(elem) instead of elem.relList() if IE7- support is needed
  (function() {
    function DOMTokenListShim(o, p) {
      function split(s) { return s.length ? s.split(/\s+/g) : []; }

      // NOTE: This does not exactly match the spec.
      function removeTokenFromString(token, string) {
        var tokens = split(string),
            index = tokens.indexOf(token);
        if (index !== -1) {
          tokens.splice(index, 1);
        }
        return tokens.join(' ');
      }

      Object.defineProperties(
        this,
        {
          length: {
            get: function() { return split(o[p]).length; }
          },

          item: {
            value: function(idx) {
              var tokens = split(o[p]);
              return 0 <= idx && idx < tokens.length ? tokens[idx] : null;
            }
          },

          contains: {
            value: function(token) {
              token = String(token);
              if (token.length === 0) { throw SyntaxError(); }
              if (/\s/.test(token)) { throw Error("InvalidCharacterError"); }
              var tokens = split(o[p]);

              return tokens.indexOf(token) !== -1;
            }
          },

          add: {
            value: function(/*tokens...*/) {
              var tokens = Array.prototype.slice.call(arguments).map(String);
              if (tokens.some(function(token) { return token.length === 0; })) {
                throw SyntaxError();
              }
              if (tokens.some(function(token) { return (/\s/).test(token); })) {
                throw Error("InvalidCharacterError");
              }

              try {
                var underlying_string = o[p];
                var token_list = split(underlying_string);
                tokens = tokens.filter(function(token) { return token_list.indexOf(token) === -1; });
                if (tokens.length === 0) {
                  return;
                }
                if (underlying_string.length !== 0 && !(/\s$/).test(underlying_string)) {
                  underlying_string += ' ';
                }
                underlying_string += tokens.join(' ');
                o[p] = underlying_string;
              } finally {
                var length = split(o[p]).length;
                if (this.length !== length) { this.length = length; }
              }
            }
          },

          remove: {
            value: function(/*tokens...*/) {
              var tokens = Array.prototype.slice.call(arguments).map(String);
              if (tokens.some(function(token) { return token.length === 0; })) {
                throw SyntaxError();
              }
              if (tokens.some(function(token) { return (/\s/).test(token); })) {
                throw Error("InvalidCharacterError");
              }

              try {
                var underlying_string = o[p];
                tokens.forEach(function(token) {
                  underlying_string = removeTokenFromString(token, underlying_string);
                });
                o[p] = underlying_string;
              } finally {
                var length = split(o[p]).length;
                if (this.length !== length) { this.length = length; }
              }
            }
          },

          toggle: {
            value: function(token, force) {
              try {
                token = String(token);
                if (token.length === 0) { throw SyntaxError(); }
                if (/\s/.test(token)) { throw Error("InvalidCharacterError"); }
                var tokens = split(o[p]),
                    index = tokens.indexOf(token);

                if (index !== -1 && (!force || force === (void 0))) {
                  o[p] = removeTokenFromString(token, o[p]);
                  return false;
                }
                if (index !== -1 && force) {
                  return true;
                }
                var underlying_string = o[p];
                if (underlying_string.length !== 0 && !/\s$/.test(underlying_string)) {
                  underlying_string += ' ';
                }
                underlying_string += token;
                o[p] = underlying_string;
                return true;
              } finally {
                var length = split(o[p]).length;
                if (this.length !== length) { this.length = length; }
              }
            }
          },

          toString: {
            value: function() {
              return o[p];
            }
          }
        });
      if (!('length' in this)) {
        // In case getters are not supported
        this.length = split(o[p]).length;
      } else {
        // If they are, shim in index getters (up to 100)
        for (var i = 0; i < 100; ++i) {
          Object.defineProperty(this, String(i), {
            get: (function(n) { return function() { return this.item(n); }; }(i))
          });
        }
      }
    }

    function addToElementPrototype(p, f) {
      if ('Element' in global && Element.prototype && Object.defineProperty) {
        Object.defineProperty(Element.prototype, p, { get: f });
      }
    }

    // HTML - https://html.spec.whatwg.org
    // Element.classList
    if ('classList' in document.createElement('span')) {
      window.getClassList = function(elem) { return elem.classList; };
    } else {
      window.getClassList = function(elem) { return new DOMTokenListShim(elem, 'className'); };
      addToElementPrototype('classList', function() { return new DOMTokenListShim(this, 'className'); } );
    }

    // HTML - https://html.spec.whatwg.org
    // HTMLAnchorElement.relList
    // HTMLLinkElement.relList
    if ('relList' in document.createElement('link')) {
      window.getRelList = function(elem) { return elem.relList; };
    } else {
      window.getRelList = function(elem) { return new DOMTokenListShim(elem, 'rel'); };
      addToElementPrototype('relList', function() { return new DOMTokenListShim(this, 'rel'); } );
    }
  }());

  //----------------------------------------------------------------------
  //
  // XMLHttpRequest - https://xhr.spec.whatwg.org
  //
  //----------------------------------------------------------------------

  // XMLHttpRequest interface
  // Needed for: IE7-
  global.XMLHttpRequest = global.XMLHttpRequest || function() {
    try { return new ActiveXObject("Msxml2.XMLHTTP.6.0"); } catch (_) { }
    try { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); } catch (_) { }
    try { return new ActiveXObject("Msxml2.XMLHTTP"); } catch (_) { }
    throw Error("This browser does not support XMLHttpRequest.");
  };

  // XMLHttpRequest interface constants
  // Needed for IE8-
  XMLHttpRequest.UNSENT = 0;
  XMLHttpRequest.OPENED = 1;
  XMLHttpRequest.HEADERS_RECEIVED = 2;
  XMLHttpRequest.LOADING = 3;
  XMLHttpRequest.DONE = 4;

  // FormData interface
  // Needed for: IE9-
  (function() {
    if ('FormData' in global)
      return;

    function FormData(form) {
      this._data = [];
      if (!form) return;
      for (var i = 0; i < form.elements.length; ++i) {
        var element = form.elements[i];
        if (element.name !== '')
          this.append(element.name, element.value);
      }
    }

    FormData.prototype = {
      append: function(name, value /*, filename */) {
        if ('Blob' in global && value instanceof global.Blob)
          throw TypeError("Blob not supported");
        name = String(name);
        this._data.push([name, value]);
      },

      toString: function() {
        return this._data.map(function(pair) {
          return encodeURIComponent(pair[0]) + '=' + encodeURIComponent(pair[1]);
        }).join('&');
      }
    };

    global.FormData = FormData;
    var send = global.XMLHttpRequest.prototype.send;
    global.XMLHttpRequest.prototype.send = function(body) {
      if (body instanceof FormData) {
        this.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        arguments[0] = body.toString();
      }
      return send.apply(this, arguments);
    };
  }());

  //----------------------------------------------------------------------
  //
  // Other
  //
  //----------------------------------------------------------------------

  // requestAnimationFrame
  // http://www.w3.org/TR/animation-timing/
  // Needed for: IE9-
  (function() {
    if ('requestAnimationFrame' in global)
      return;

    var TARGET_FPS = 60,
        requests = Object.create(null),
        raf_handle = 0,
        timeout_handle = -1;

    function isVisible(element) {
      return element.offsetWidth > 0 && element.offsetHeight > 0;
    }

    function onFrameTimer() {
      var cur_requests = requests;
      requests = Object.create(null);
      timeout_handle = -1;
      Object.keys(cur_requests).forEach(function(id) {
        var request = cur_requests[id];
        if (!request.element || isVisible(request.element))
          request.callback(Date.now());
      });
    }

    function requestAnimationFrame(callback, element) {
      var cb_handle = ++raf_handle;
      requests[cb_handle] = {callback: callback, element: element};
      if (timeout_handle === -1)
        timeout_handle = global.setTimeout(onFrameTimer, 1000 / TARGET_FPS);
      return cb_handle;
    }

    function cancelAnimationFrame(handle) {
      delete requests[handle];
      if (Object.keys(requests).length === 0) {
        global.clearTimeout(timeout_handle);
        timeout_handle = -1;
      }
    }

    global.requestAnimationFrame = requestAnimationFrame;
    global.cancelAnimationFrame = cancelAnimationFrame;
  }());

  // CSSOM View Module - http://dev.w3.org/csswg/cssom-view/
  // Fix for IE8-'s Element.getBoundingClientRect()
  if ('TextRectangle' in this && !('width' in TextRectangle.prototype)) {
    Object.defineProperties(TextRectangle.prototype, {
      'width': { get: function() { return this.right - this.left; } },
      'height': { get: function() { return this.bottom - this.top; } }
    });
  }

  // setImmediate
  // https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html
  // (Not widely adopted.)
  (function() {
    if ('setImmediate' in global)
      return;

    function setImmediate(callback/*, args*/) {
      var params = [].slice.call(arguments, 1);
      return global.setTimeout(function() {
        callback.apply(null, params);
      }, 0);
    }

    function clearImmediate(handle) {
      global.clearTimeout(handle);
    }

    global.setImmediate = setImmediate;
    global.clearImmediate = clearImmediate;
  }());

}(this));
//----------------------------------------------------------------------
//
// Non-standard JavaScript (Mozilla) functions
//
//----------------------------------------------------------------------

(function () {
  // JavaScript 1.8.1
  String.prototype.trimLeft = String.prototype.trimLeft || function () {
    return String(this).replace(/^\s+/, '');
  };

  // JavaScript 1.8.1
  String.prototype.trimRight = String.prototype.trimRight || function () {
    return String(this).replace(/\s+$/, '');
  };

  // JavaScript 1.?
  var ESCAPES = {
    //'\x00': '\\0', Special case in FF3.6, removed by FF10
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '"' : '\\"',
    '\\': '\\\\'
  };
  String.prototype.quote = String.prototype.quote || function() {
    return '"' + String(this).replace(/[\x00-\x1F"\\\x7F-\uFFFF]/g, function(c) {
      if (Object.prototype.hasOwnProperty.call(ESCAPES, c))
        return ESCAPES[c];
      var cc = c.charCodeAt(0);
      if (cc <= 0xFF)
        return '\\x' + ('00' + cc.toString(16).toUpperCase()).slice(-2);
      return '\\u' + ('0000' + cc.toString(16).toUpperCase()).slice(-4);
    }) + '"';
  };
}());

/*
    json2.js
    2014-02-04

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx,
        escapable,
        gap,
        indent,
        meta,
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        };
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );

/*! jQuery UI - v1.11.2 - 2014-10-16
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

(function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define([ "jquery" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}(function( $ ) {
/*!
 * jQuery UI Core 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */


// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
	version: "1.11.2",

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	}
});

// plugins
$.fn.extend({
	scrollParent: function( includeHidden ) {
		var position = this.css( "position" ),
			excludeStaticParent = position === "absolute",
			overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
			scrollParent = this.parents().filter( function() {
				var parent = $( this );
				if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
					return false;
				}
				return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) + parent.css( "overflow-x" ) );
			}).eq( 0 );

		return position === "fixed" || !scrollParent.length ? $( this[ 0 ].ownerDocument || document ) : scrollParent;
	},

	uniqueId: (function() {
		var uuid = 0;

		return function() {
			return this.each(function() {
				if ( !this.id ) {
					this.id = "ui-id-" + ( ++uuid );
				}
			});
		};
	})(),

	removeUniqueId: function() {
		return this.each(function() {
			if ( /^ui-id-\d+$/.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" )[ 0 ];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}

// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),

	disableSelection: (function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.bind( eventType + ".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
		};
	})(),

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	}
});

// $.ui.plugin is deprecated. Use $.widget() extensions instead.
$.ui.plugin = {
	add: function( module, option, set ) {
		var i,
			proto = $.ui[ module ].prototype;
		for ( i in set ) {
			proto.plugins[ i ] = proto.plugins[ i ] || [];
			proto.plugins[ i ].push( [ option, set[ i ] ] );
		}
	},
	call: function( instance, name, args, allowDisconnected ) {
		var i,
			set = instance.plugins[ name ];

		if ( !set ) {
			return;
		}

		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
			return;
		}

		for ( i = 0; i < set.length; i++ ) {
			if ( instance.options[ set[ i ][ 0 ] ] ) {
				set[ i ][ 1 ].apply( instance.element, args );
			}
		}
	}
};


/*!
 * jQuery UI Widget 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */


var widget_uuid = 0,
	widget_slice = Array.prototype.slice;

$.cleanData = (function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; (elem = elems[i]) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// http://bugs.jquery.com/ticket/8235
			} catch ( e ) {}
		}
		orig( elems );
	};
})( $.cleanData );

$.widget = function( name, base, prototype ) {
	var fullName, existingConstructor, constructor, basePrototype,
		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple widgets (#8876)
		proxiedPrototype = {},
		namespace = name.split( "." )[ 0 ];

	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};
	// extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,
		// copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),
		// track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	});

	basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = (function() {
			var _super = function() {
					return base.prototype[ prop ].apply( this, arguments );
				},
				_superApply = function( args ) {
					return base.prototype[ prop ].apply( this, args );
				};
			return function() {
				var __super = this._super,
					__superApply = this._superApply,
					returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		})();
	});
	constructor.prototype = $.widget.extend( basePrototype, {
		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	});

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
		});
		// remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widget_slice.call( arguments, 1 ),
		inputIndex = 0,
		inputLength = input.length,
		key,
		value;
	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :
						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );
				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = widget_slice.call( arguments, 1 ),
			returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ?
			$.widget.extend.apply( null, [ options ].concat(args) ) :
			options;

		if ( isMethodCall ) {
			this.each(function() {
				var methodValue,
					instance = $.data( this, fullName );
				if ( options === "instance" ) {
					returnValue = instance;
					return false;
				}
				if ( !instance ) {
					return $.error( "cannot call methods on " + name + " prior to initialization; " +
						"attempted to call method '" + options + "'" );
				}
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name + " widget instance" );
				}
				methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",
	options: {
		disabled: false,

		// callbacks
		create: null
	},
	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widget_uuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();
		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},
	_getCreateOptions: $.noop,
	_getCreateEventData: $.noop,
	_create: $.noop,
	_init: $.noop,

	destroy: function() {
		this._destroy();
		// we can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.unbind( this.eventNamespace )
			.removeData( this.widgetFullName )
			// support: jquery <1.6.3
			// http://bugs.jquery.com/ticket/9413
			.removeData( $.camelCase( this.widgetFullName ) );
		this.widget()
			.unbind( this.eventNamespace )
			.removeAttr( "aria-disabled" )
			.removeClass(
				this.widgetFullName + "-disabled " +
				"ui-state-disabled" );

		// clean up events and states
		this.bindings.unbind( this.eventNamespace );
		this.hoverable.removeClass( "ui-state-hover" );
		this.focusable.removeClass( "ui-state-focus" );
	},
	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key,
			parts,
			curOption,
			i;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.widget()
				.toggleClass( this.widgetFullName + "-disabled", !!value );

			// If the widget is becoming disabled, then nothing is interactive
			if ( value ) {
				this.hoverable.removeClass( "ui-state-hover" );
				this.focusable.removeClass( "ui-state-focus" );
			}
		}

		return this;
	},

	enable: function() {
		return this._setOptions({ disabled: false });
	},
	disable: function() {
		return this._setOptions({ disabled: true });
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement,
			instance = this;

		// no suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// no element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {
				// allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
							$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ ),
				eventName = match[1] + instance.eventNamespace,
				selector = match[2];
			if ( selector ) {
				delegateElement.delegate( selector, eventName, handlerProxy );
			} else {
				element.bind( eventName, handlerProxy );
			}
		});
	},

	_off: function( element, eventName ) {
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.unbind( eventName ).undelegate( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-hover" );
			},
			mouseleave: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-hover" );
			}
		});
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-focus" );
			},
			focusout: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-focus" );
			}
		});
	},

	_trigger: function( type, event, data ) {
		var prop, orig,
			callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}
		var hasOptions,
			effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;
		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}
		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;
		if ( options.delay ) {
			element.delay( options.delay );
		}
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue(function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			});
		}
	};
});

var widget = $.widget;


/*!
 * jQuery UI Mouse 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/mouse/
 */


var mouseHandled = false;
$( document ).mouseup( function() {
	mouseHandled = false;
});

var mouse = $.widget("ui.mouse", {
	version: "1.11.2",
	options: {
		cancel: "input,textarea,button,select,option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.bind("mousedown." + this.widgetName, function(event) {
				return that._mouseDown(event);
			})
			.bind("click." + this.widgetName, function(event) {
				if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
					$.removeData(event.target, that.widgetName + ".preventClickEvent");
					event.stopImmediatePropagation();
					return false;
				}
			});

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.unbind("." + this.widgetName);
		if ( this._mouseMoveDelegate ) {
			this.document
				.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
				.unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
		}
	},

	_mouseDown: function(event) {
		// don't let more than one widget handle mouseStart
		if ( mouseHandled ) {
			return;
		}

		this._mouseMoved = false;

		// we may have missed mouseup (out of window)
		(this._mouseStarted && this._mouseUp(event));

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = (event.which === 1),
			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if (!this.mouseDelayMet) {
			this._mouseDelayTimer = setTimeout(function() {
				that.mouseDelayMet = true;
			}, this.options.delay);
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted = (this._mouseStart(event) !== false);
			if (!this._mouseStarted) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
			$.removeData(event.target, this.widgetName + ".preventClickEvent");
		}

		// these delegates are required to keep context
		this._mouseMoveDelegate = function(event) {
			return that._mouseMove(event);
		};
		this._mouseUpDelegate = function(event) {
			return that._mouseUp(event);
		};

		this.document
			.bind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.bind( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function(event) {
		// Only check for mouseups outside the document if you've moved inside the document
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will
		// fire a mousemove event if content is placed under the cursor. See #7778
		// Support: IE <9
		if ( this._mouseMoved ) {
			// IE mouseup check - mouseup happened when mouse was out of window
			if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
				return this._mouseUp(event);

			// Iframe mouseup check - mouseup occurred in another document
			} else if ( !event.which ) {
				return this._mouseUp( event );
			}
		}

		if ( event.which || event.button ) {
			this._mouseMoved = true;
		}

		if (this._mouseStarted) {
			this._mouseDrag(event);
			return event.preventDefault();
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted =
				(this._mouseStart(this._mouseDownEvent, event) !== false);
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
		}

		return !this._mouseStarted;
	},

	_mouseUp: function(event) {
		this.document
			.unbind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.unbind( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if (this._mouseStarted) {
			this._mouseStarted = false;

			if (event.target === this._mouseDownEvent.target) {
				$.data(event.target, this.widgetName + ".preventClickEvent", true);
			}

			this._mouseStop(event);
		}

		mouseHandled = false;
		return false;
	},

	_mouseDistanceMet: function(event) {
		return (Math.max(
				Math.abs(this._mouseDownEvent.pageX - event.pageX),
				Math.abs(this._mouseDownEvent.pageY - event.pageY)
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function(/* event */) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function(/* event */) {},
	_mouseDrag: function(/* event */) {},
	_mouseStop: function(/* event */) {},
	_mouseCapture: function(/* event */) { return true; }
});


/*!
 * jQuery UI Position 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

(function() {

$.ui = $.ui || {};

var cachedScrollbarWidth, supportsOffsetFractions,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[0];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[0].clientWidth;
		}

		div.remove();

		return (cachedScrollbarWidth = w1 - w2);
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[0] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: withinElement.offset() || { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),

			// support: jQuery 1.6.x
			// jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
			width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
			height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[0].preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;
	// clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each(function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// if the browser doesn't support fractions, then round for consistent results
		if ( !supportsOffsetFractions ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem: elem
				});
			}
		});

		if ( options.using ) {
			// adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// element is wider than within
			if ( data.collisionWidth > outerWidth ) {
				// element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
					position.left += overLeft - newOverRight;
				// element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;
				// element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}
			// too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;
			// too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;
			// adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// element is taller than within
			if ( data.collisionHeight > outerHeight ) {
				// element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
					position.top += overTop - newOverBottom;
				// element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;
				// element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}
			// too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;
			// too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;
			// adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			} else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;
				}
			} else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

// fraction support test
(function() {
	var testElement, testElementParent, testElementStyle, offsetLeft, i,
		body = document.getElementsByTagName( "body" )[ 0 ],
		div = document.createElement( "div" );

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px;";

	offsetLeft = $( div ).offset().left;
	supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );
})();

})();

var position = $.ui.position;


/*!
 * jQuery UI Accordion 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/accordion/
 */


var accordion = $.widget( "ui.accordion", {
	version: "1.11.2",
	options: {
		active: 0,
		animate: {},
		collapsible: false,
		event: "click",
		header: "> li > :first-child,> :not(li):even",
		heightStyle: "auto",
		icons: {
			activeHeader: "ui-icon-triangle-1-s",
			header: "ui-icon-triangle-1-e"
		},

		// callbacks
		activate: null,
		beforeActivate: null
	},

	hideProps: {
		borderTopWidth: "hide",
		borderBottomWidth: "hide",
		paddingTop: "hide",
		paddingBottom: "hide",
		height: "hide"
	},

	showProps: {
		borderTopWidth: "show",
		borderBottomWidth: "show",
		paddingTop: "show",
		paddingBottom: "show",
		height: "show"
	},

	_create: function() {
		var options = this.options;
		this.prevShow = this.prevHide = $();
		this.element.addClass( "ui-accordion ui-widget ui-helper-reset" )
			// ARIA
			.attr( "role", "tablist" );

		// don't allow collapsible: false and active: false / null
		if ( !options.collapsible && (options.active === false || options.active == null) ) {
			options.active = 0;
		}

		this._processPanels();
		// handle negative values
		if ( options.active < 0 ) {
			options.active += this.headers.length;
		}
		this._refresh();
	},

	_getCreateEventData: function() {
		return {
			header: this.active,
			panel: !this.active.length ? $() : this.active.next()
		};
	},

	_createIcons: function() {
		var icons = this.options.icons;
		if ( icons ) {
			$( "<span>" )
				.addClass( "ui-accordion-header-icon ui-icon " + icons.header )
				.prependTo( this.headers );
			this.active.children( ".ui-accordion-header-icon" )
				.removeClass( icons.header )
				.addClass( icons.activeHeader );
			this.headers.addClass( "ui-accordion-icons" );
		}
	},

	_destroyIcons: function() {
		this.headers
			.removeClass( "ui-accordion-icons" )
			.children( ".ui-accordion-header-icon" )
				.remove();
	},

	_destroy: function() {
		var contents;

		// clean up main element
		this.element
			.removeClass( "ui-accordion ui-widget ui-helper-reset" )
			.removeAttr( "role" );

		// clean up headers
		this.headers
			.removeClass( "ui-accordion-header ui-accordion-header-active ui-state-default " +
				"ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
			.removeAttr( "role" )
			.removeAttr( "aria-expanded" )
			.removeAttr( "aria-selected" )
			.removeAttr( "aria-controls" )
			.removeAttr( "tabIndex" )
			.removeUniqueId();

		this._destroyIcons();

		// clean up content panels
		contents = this.headers.next()
			.removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom " +
				"ui-accordion-content ui-accordion-content-active ui-state-disabled" )
			.css( "display", "" )
			.removeAttr( "role" )
			.removeAttr( "aria-hidden" )
			.removeAttr( "aria-labelledby" )
			.removeUniqueId();

		if ( this.options.heightStyle !== "content" ) {
			contents.css( "height", "" );
		}
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "event" ) {
			if ( this.options.event ) {
				this._off( this.headers, this.options.event );
			}
			this._setupEvents( value );
		}

		this._super( key, value );

		// setting collapsible: false while collapsed; open first panel
		if ( key === "collapsible" && !value && this.options.active === false ) {
			this._activate( 0 );
		}

		if ( key === "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}

		// #5332 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		if ( key === "disabled" ) {
			this.element
				.toggleClass( "ui-state-disabled", !!value )
				.attr( "aria-disabled", value );
			this.headers.add( this.headers.next() )
				.toggleClass( "ui-state-disabled", !!value );
		}
	},

	_keydown: function( event ) {
		if ( event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.ui.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
			case keyCode.RIGHT:
			case keyCode.DOWN:
				toFocus = this.headers[ ( currentIndex + 1 ) % length ];
				break;
			case keyCode.LEFT:
			case keyCode.UP:
				toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
				break;
			case keyCode.SPACE:
			case keyCode.ENTER:
				this._eventHandler( event );
				break;
			case keyCode.HOME:
				toFocus = this.headers[ 0 ];
				break;
			case keyCode.END:
				toFocus = this.headers[ length - 1 ];
				break;
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			toFocus.focus();
			event.preventDefault();
		}
	},

	_panelKeyDown: function( event ) {
		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
			$( event.currentTarget ).prev().focus();
		}
	},

	refresh: function() {
		var options = this.options;
		this._processPanels();

		// was collapsed or no panel
		if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
			options.active = false;
			this.active = $();
		// active false only when collapsible is true
		} else if ( options.active === false ) {
			this._activate( 0 );
		// was active, but active panel is gone
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			// all remaining panel are disabled
			if ( this.headers.length === this.headers.find(".ui-state-disabled").length ) {
				options.active = false;
				this.active = $();
			// activate previous panel
			} else {
				this._activate( Math.max( 0, options.active - 1 ) );
			}
		// was active, active panel still exists
		} else {
			// make sure active index is correct
			options.active = this.headers.index( this.active );
		}

		this._destroyIcons();

		this._refresh();
	},

	_processPanels: function() {
		var prevHeaders = this.headers,
			prevPanels = this.panels;

		this.headers = this.element.find( this.options.header )
			.addClass( "ui-accordion-header ui-state-default ui-corner-all" );

		this.panels = this.headers.next()
			.addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )
			.filter( ":not(.ui-accordion-content-active)" )
			.hide();

		// Avoid memory leaks (#10056)
		if ( prevPanels ) {
			this._off( prevHeaders.not( this.headers ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	_refresh: function() {
		var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.element.parent();

		this.active = this._findActive( options.active )
			.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" )
			.removeClass( "ui-corner-all" );
		this.active.next()
			.addClass( "ui-accordion-content-active" )
			.show();

		this.headers
			.attr( "role", "tab" )
			.each(function() {
				var header = $( this ),
					headerId = header.uniqueId().attr( "id" ),
					panel = header.next(),
					panelId = panel.uniqueId().attr( "id" );
				header.attr( "aria-controls", panelId );
				panel.attr( "aria-labelledby", headerId );
			})
			.next()
				.attr( "role", "tabpanel" );

		this.headers
			.not( this.active )
			.attr({
				"aria-selected": "false",
				"aria-expanded": "false",
				tabIndex: -1
			})
			.next()
				.attr({
					"aria-hidden": "true"
				})
				.hide();

		// make sure at least one header is in the tab order
		if ( !this.active.length ) {
			this.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active.attr({
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			})
			.next()
				.attr({
					"aria-hidden": "false"
				});
		}

		this._createIcons();

		this._setupEvents( options.event );

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			this.element.siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});

			this.headers.each(function() {
				maxHeight -= $( this ).outerHeight( true );
			});

			this.headers.next()
				.each(function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				})
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.headers.next()
				.each(function() {
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
				})
				.height( maxHeight );
		}
	},

	_activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		// trying to activate the already active panel
		if ( active === this.active[ 0 ] ) {
			return;
		}

		// trying to collapse, simulate a click on the currently active header
		active = active || this.active[ 0 ];

		this._eventHandler({
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		});
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},

	_setupEvents: function( event ) {
		var events = {
			keydown: "_keydown"
		};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.headers.add( this.headers.next() ) );
		this._on( this.headers, events );
		this._on( this.headers.next(), { keydown: "_panelKeyDown" });
		this._hoverable( this.headers );
		this._focusable( this.headers );
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			clicked = $( event.currentTarget ),
			clickedIsActive = clicked[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : clicked.next(),
			toHide = active.next(),
			eventData = {
				oldHeader: active,
				oldPanel: toHide,
				newHeader: collapsing ? $() : clicked,
				newPanel: toShow
			};

		event.preventDefault();

		if (
				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||
				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.headers.index( clicked );

		// when the call to ._toggle() comes after the class changes
		// it causes a very odd bug in IE 8 (see #6720)
		this.active = clickedIsActive ? $() : clicked;
		this._toggle( eventData );

		// switch classes
		// corner classes on the previously active header stay after the animation
		active.removeClass( "ui-accordion-header-active ui-state-active" );
		if ( options.icons ) {
			active.children( ".ui-accordion-header-icon" )
				.removeClass( options.icons.activeHeader )
				.addClass( options.icons.header );
		}

		if ( !clickedIsActive ) {
			clicked
				.removeClass( "ui-corner-all" )
				.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );
			if ( options.icons ) {
				clicked.children( ".ui-accordion-header-icon" )
					.removeClass( options.icons.header )
					.addClass( options.icons.activeHeader );
			}

			clicked
				.next()
				.addClass( "ui-accordion-content-active" );
		}
	},

	_toggle: function( data ) {
		var toShow = data.newPanel,
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

		// handle activating a panel during the animation for another activation
		this.prevShow.add( this.prevHide ).stop( true, true );
		this.prevShow = toShow;
		this.prevHide = toHide;

		if ( this.options.animate ) {
			this._animate( toShow, toHide, data );
		} else {
			toHide.hide();
			toShow.show();
			this._toggleComplete( data );
		}

		toHide.attr({
			"aria-hidden": "true"
		});
		toHide.prev().attr( "aria-selected", "false" );
		// if we're switching panels, remove the old header from the tab order
		// if we're opening from collapsed state, remove the previous header from the tab order
		// if we're collapsing, then keep the collapsing header in the tab order
		if ( toShow.length && toHide.length ) {
			toHide.prev().attr({
				"tabIndex": -1,
				"aria-expanded": "false"
			});
		} else if ( toShow.length ) {
			this.headers.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow
			.attr( "aria-hidden", "false" )
			.prev()
				.attr({
					"aria-selected": "true",
					tabIndex: 0,
					"aria-expanded": "true"
				});
	},

	_animate: function( toShow, toHide, data ) {
		var total, easing, duration,
			that = this,
			adjust = 0,
			down = toShow.length &&
				( !toHide.length || ( toShow.index() < toHide.index() ) ),
			animate = this.options.animate || {},
			options = down && animate.down || animate,
			complete = function() {
				that._toggleComplete( data );
			};

		if ( typeof options === "number" ) {
			duration = options;
		}
		if ( typeof options === "string" ) {
			easing = options;
		}
		// fall back from options to animation in case of partial down settings
		easing = easing || options.easing || animate.easing;
		duration = duration || options.duration || animate.duration;

		if ( !toHide.length ) {
			return toShow.animate( this.showProps, duration, easing, complete );
		}
		if ( !toShow.length ) {
			return toHide.animate( this.hideProps, duration, easing, complete );
		}

		total = toShow.show().outerHeight();
		toHide.animate( this.hideProps, {
			duration: duration,
			easing: easing,
			step: function( now, fx ) {
				fx.now = Math.round( now );
			}
		});
		toShow
			.hide()
			.animate( this.showProps, {
				duration: duration,
				easing: easing,
				complete: complete,
				step: function( now, fx ) {
					fx.now = Math.round( now );
					if ( fx.prop !== "height" ) {
						adjust += fx.now;
					} else if ( that.options.heightStyle !== "content" ) {
						fx.now = Math.round( total - toHide.outerHeight() - adjust );
						adjust = 0;
					}
				}
			});
	},

	_toggleComplete: function( data ) {
		var toHide = data.oldPanel;

		toHide
			.removeClass( "ui-accordion-content-active" )
			.prev()
				.removeClass( "ui-corner-top" )
				.addClass( "ui-corner-all" );

		// Work around for rendering bug in IE (#5421)
		if ( toHide.length ) {
			toHide.parent()[ 0 ].className = toHide.parent()[ 0 ].className;
		}
		this._trigger( "activate", null, data );
	}
});


/*!
 * jQuery UI Menu 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/menu/
 */


var menu = $.widget( "ui.menu", {
	version: "1.11.2",
	defaultElement: "<ul>",
	delay: 300,
	options: {
		icons: {
			submenu: "ui-icon-carat-1-e"
		},
		items: "> *",
		menus: "ul",
		position: {
			my: "left-1 top",
			at: "right top"
		},
		role: "menu",

		// callbacks
		blur: null,
		focus: null,
		select: null
	},

	_create: function() {
		this.activeMenu = this.element;

		// Flag used to prevent firing of the click handler
		// as the event bubbles up through nested menus
		this.mouseHandled = false;
		this.element
			.uniqueId()
			.addClass( "ui-menu ui-widget ui-widget-content" )
			.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
			.attr({
				role: this.options.role,
				tabIndex: 0
			});

		if ( this.options.disabled ) {
			this.element
				.addClass( "ui-state-disabled" )
				.attr( "aria-disabled", "true" );
		}

		this._on({
			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .ui-menu-item": function( event ) {
				event.preventDefault();
			},
			"click .ui-menu-item": function( event ) {
				var target = $( event.target );
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
					this.select( event );

					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}

					// Open submenu on click
					if ( target.has( ".ui-menu" ).length ) {
						this.expand( event );
					} else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".ui-menu" ).length ) {

						// Redirect focus to the menu
						this.element.trigger( "focus", [ true ] );

						// If the active item is on the top level, let it stay active.
						// Otherwise, blur the active item since it is no longer visible.
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
							clearTimeout( this.timer );
						}
					}
				}
			},
			"mouseenter .ui-menu-item": function( event ) {
				// Ignore mouse events while typeahead is active, see #10458.
				// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
				// is over an item in the menu
				if ( this.previousFilter ) {
					return;
				}
				var target = $( event.currentTarget );
				// Remove ui-state-active class from siblings of the newly focused menu item
				// to avoid a jump caused by adjacent elements both having a class with a border
				target.siblings( ".ui-state-active" ).removeClass( "ui-state-active" );
				this.focus( event, target );
			},
			mouseleave: "collapseAll",
			"mouseleave .ui-menu": "collapseAll",
			focus: function( event, keepActiveItem ) {
				// If there's already an active item, keep it active
				// If not, activate the first item
				var item = this.active || this.element.find( this.options.items ).eq( 0 );

				if ( !keepActiveItem ) {
					this.focus( event, item );
				}
			},
			blur: function( event ) {
				this._delay(function() {
					if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
						this.collapseAll( event );
					}
				});
			},
			keydown: "_keydown"
		});

		this.refresh();

		// Clicks outside of a menu collapse any open menus
		this._on( this.document, {
			click: function( event ) {
				if ( this._closeOnDocumentClick( event ) ) {
					this.collapseAll( event );
				}

				// Reset the mouseHandled flag
				this.mouseHandled = false;
			}
		});
	},

	_destroy: function() {
		// Destroy (sub)menus
		this.element
			.removeAttr( "aria-activedescendant" )
			.find( ".ui-menu" ).addBack()
				.removeClass( "ui-menu ui-widget ui-widget-content ui-menu-icons ui-front" )
				.removeAttr( "role" )
				.removeAttr( "tabIndex" )
				.removeAttr( "aria-labelledby" )
				.removeAttr( "aria-expanded" )
				.removeAttr( "aria-hidden" )
				.removeAttr( "aria-disabled" )
				.removeUniqueId()
				.show();

		// Destroy menu items
		this.element.find( ".ui-menu-item" )
			.removeClass( "ui-menu-item" )
			.removeAttr( "role" )
			.removeAttr( "aria-disabled" )
			.removeUniqueId()
			.removeClass( "ui-state-hover" )
			.removeAttr( "tabIndex" )
			.removeAttr( "role" )
			.removeAttr( "aria-haspopup" )
			.children().each( function() {
				var elem = $( this );
				if ( elem.data( "ui-menu-submenu-carat" ) ) {
					elem.remove();
				}
			});

		// Destroy menu dividers
		this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
	},

	_keydown: function( event ) {
		var match, prev, character, skip,
			preventDefault = true;

		switch ( event.keyCode ) {
		case $.ui.keyCode.PAGE_UP:
			this.previousPage( event );
			break;
		case $.ui.keyCode.PAGE_DOWN:
			this.nextPage( event );
			break;
		case $.ui.keyCode.HOME:
			this._move( "first", "first", event );
			break;
		case $.ui.keyCode.END:
			this._move( "last", "last", event );
			break;
		case $.ui.keyCode.UP:
			this.previous( event );
			break;
		case $.ui.keyCode.DOWN:
			this.next( event );
			break;
		case $.ui.keyCode.LEFT:
			this.collapse( event );
			break;
		case $.ui.keyCode.RIGHT:
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
				this.expand( event );
			}
			break;
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			this._activate( event );
			break;
		case $.ui.keyCode.ESCAPE:
			this.collapse( event );
			break;
		default:
			preventDefault = false;
			prev = this.previousFilter || "";
			character = String.fromCharCode( event.keyCode );
			skip = false;

			clearTimeout( this.filterTimer );

			if ( character === prev ) {
				skip = true;
			} else {
				character = prev + character;
			}

			match = this._filterMenuItems( character );
			match = skip && match.index( this.active.next() ) !== -1 ?
				this.active.nextAll( ".ui-menu-item" ) :
				match;

			// If no matches on the current filter, reset to the last character pressed
			// to move down the menu to the first item that starts with that character
			if ( !match.length ) {
				character = String.fromCharCode( event.keyCode );
				match = this._filterMenuItems( character );
			}

			if ( match.length ) {
				this.focus( event, match );
				this.previousFilter = character;
				this.filterTimer = this._delay(function() {
					delete this.previousFilter;
				}, 1000 );
			} else {
				delete this.previousFilter;
			}
		}

		if ( preventDefault ) {
			event.preventDefault();
		}
	},

	_activate: function( event ) {
		if ( !this.active.is( ".ui-state-disabled" ) ) {
			if ( this.active.is( "[aria-haspopup='true']" ) ) {
				this.expand( event );
			} else {
				this.select( event );
			}
		}
	},

	refresh: function() {
		var menus, items,
			that = this,
			icon = this.options.icons.submenu,
			submenus = this.element.find( this.options.menus );

		this.element.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length );

		// Initialize nested menus
		submenus.filter( ":not(.ui-menu)" )
			.addClass( "ui-menu ui-widget ui-widget-content ui-front" )
			.hide()
			.attr({
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			})
			.each(function() {
				var menu = $( this ),
					item = menu.parent(),
					submenuCarat = $( "<span>" )
						.addClass( "ui-menu-icon ui-icon " + icon )
						.data( "ui-menu-submenu-carat", true );

				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCarat );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			});

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );

		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".ui-menu-item" ).each(function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				item.addClass( "ui-widget-content ui-menu-divider" );
			}
		});

		// Don't refresh list items that are already adapted
		items.not( ".ui-menu-item, .ui-menu-divider" )
			.addClass( "ui-menu-item" )
			.uniqueId()
			.attr({
				tabIndex: -1,
				role: this._itemRole()
			});

		// Add aria-disabled attribute to any disabled menu item
		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

		// If the active item has been removed, blur the menu
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			this.blur();
		}
	},

	_itemRole: function() {
		return {
			menu: "menuitem",
			listbox: "option"
		}[ this.options.role ];
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			this.element.find( ".ui-menu-icon" )
				.removeClass( this.options.icons.submenu )
				.addClass( value.submenu );
		}
		if ( key === "disabled" ) {
			this.element
				.toggleClass( "ui-state-disabled", !!value )
				.attr( "aria-disabled", value );
		}
		this._super( key, value );
	},

	focus: function( event, item ) {
		var nested, focused;
		this.blur( event, event && event.type === "focus" );

		this._scrollIntoView( item );

		this.active = item.first();
		focused = this.active.addClass( "ui-state-focus" ).removeClass( "ui-state-active" );
		// Only update aria-activedescendant if there's a role
		// otherwise we assume focus is managed elsewhere
		if ( this.options.role ) {
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
		}

		// Highlight active parent menu item, if any
		this.active
			.parent()
			.closest( ".ui-menu-item" )
			.addClass( "ui-state-active" );

		if ( event && event.type === "keydown" ) {
			this._close();
		} else {
			this.timer = this._delay(function() {
				this._close();
			}, this.delay );
		}

		nested = item.children( ".ui-menu" );
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
			this._startOpening(nested);
		}
		this.activeMenu = item.parent();

		this._trigger( "focus", event, { item: item } );
	},

	_scrollIntoView: function( item ) {
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
		if ( this._hasScroll() ) {
			borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
			paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
			scroll = this.activeMenu.scrollTop();
			elementHeight = this.activeMenu.height();
			itemHeight = item.outerHeight();

			if ( offset < 0 ) {
				this.activeMenu.scrollTop( scroll + offset );
			} else if ( offset + itemHeight > elementHeight ) {
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
			}
		}
	},

	blur: function( event, fromFocus ) {
		if ( !fromFocus ) {
			clearTimeout( this.timer );
		}

		if ( !this.active ) {
			return;
		}

		this.active.removeClass( "ui-state-focus" );
		this.active = null;

		this._trigger( "blur", event, { item: this.active } );
	},

	_startOpening: function( submenu ) {
		clearTimeout( this.timer );

		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
		// shift in the submenu position when mousing over the carat icon
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
			return;
		}

		this.timer = this._delay(function() {
			this._close();
			this._open( submenu );
		}, this.delay );
	},

	_open: function( submenu ) {
		var position = $.extend({
			of: this.active
		}, this.options.position );

		clearTimeout( this.timer );
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
			.hide()
			.attr( "aria-hidden", "true" );

		submenu
			.show()
			.removeAttr( "aria-hidden" )
			.attr( "aria-expanded", "true" )
			.position( position );
	},

	collapseAll: function( event, all ) {
		clearTimeout( this.timer );
		this.timer = this._delay(function() {
			// If we were passed an event, look for the submenu that contains the event
			var currentMenu = all ? this.element :
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

			// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
			if ( !currentMenu.length ) {
				currentMenu = this.element;
			}

			this._close( currentMenu );

			this.blur( event );
			this.activeMenu = currentMenu;
		}, this.delay );
	},

	// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close: function( startMenu ) {
		if ( !startMenu ) {
			startMenu = this.active ? this.active.parent() : this.element;
		}

		startMenu
			.find( ".ui-menu" )
				.hide()
				.attr( "aria-hidden", "true" )
				.attr( "aria-expanded", "false" )
			.end()
			.find( ".ui-state-active" ).not( ".ui-state-focus" )
				.removeClass( "ui-state-active" );
	},

	_closeOnDocumentClick: function( event ) {
		return !$( event.target ).closest( ".ui-menu" ).length;
	},

	_isDivider: function( item ) {

		// Match hyphen, em dash, en dash
		return !/[^\-\u2014\u2013\s]/.test( item.text() );
	},

	collapse: function( event ) {
		var newItem = this.active &&
			this.active.parent().closest( ".ui-menu-item", this.element );
		if ( newItem && newItem.length ) {
			this._close();
			this.focus( event, newItem );
		}
	},

	expand: function( event ) {
		var newItem = this.active &&
			this.active
				.children( ".ui-menu " )
				.find( this.options.items )
				.first();

		if ( newItem && newItem.length ) {
			this._open( newItem.parent() );

			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
			this._delay(function() {
				this.focus( event, newItem );
			});
		}
	},

	next: function( event ) {
		this._move( "next", "first", event );
	},

	previous: function( event ) {
		this._move( "prev", "last", event );
	},

	isFirstItem: function() {
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
	},

	isLastItem: function() {
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
	},

	_move: function( direction, filter, event ) {
		var next;
		if ( this.active ) {
			if ( direction === "first" || direction === "last" ) {
				next = this.active
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
					.eq( -1 );
			} else {
				next = this.active
					[ direction + "All" ]( ".ui-menu-item" )
					.eq( 0 );
			}
		}
		if ( !next || !next.length || !this.active ) {
			next = this.activeMenu.find( this.options.items )[ filter ]();
		}

		this.focus( event, next );
	},

	nextPage: function( event ) {
		var item, base, height;

		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isLastItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.nextAll( ".ui-menu-item" ).each(function() {
				item = $( this );
				return item.offset().top - base - height < 0;
			});

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items )
				[ !this.active ? "first" : "last" ]() );
		}
	},

	previousPage: function( event ) {
		var item, base, height;
		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isFirstItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.prevAll( ".ui-menu-item" ).each(function() {
				item = $( this );
				return item.offset().top - base + height > 0;
			});

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items ).first() );
		}
	},

	_hasScroll: function() {
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
	},

	select: function( event ) {
		// TODO: It should never be possible to not have an active item at this
		// point, but the tests don't trigger mouseenter before click.
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
		var ui = { item: this.active };
		if ( !this.active.has( ".ui-menu" ).length ) {
			this.collapseAll( event, true );
		}
		this._trigger( "select", event, ui );
	},

	_filterMenuItems: function(character) {
		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
			regex = new RegExp( "^" + escapedCharacter, "i" );

		return this.activeMenu
			.find( this.options.items )

			// Only match on items, not dividers or other content (#10571)
			.filter( ".ui-menu-item" )
			.filter(function() {
				return regex.test( $.trim( $( this ).text() ) );
			});
	}
});


/*!
 * jQuery UI Autocomplete 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/autocomplete/
 */


$.widget( "ui.autocomplete", {
	version: "1.11.2",
	defaultElement: "<input>",
	options: {
		appendTo: null,
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,

		// callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		response: null,
		search: null,
		select: null
	},

	requestIndex: 0,
	pending: 0,

	_create: function() {
		// Some browsers only repeat keydown events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
			nodeName = this.element[ 0 ].nodeName.toLowerCase(),
			isTextarea = nodeName === "textarea",
			isInput = nodeName === "input";

		this.isMultiLine =
			// Textareas are always multi-line
			isTextarea ? true :
			// Inputs are always single-line, even if inside a contentEditable element
			// IE also treats inputs as contentEditable
			isInput ? false :
			// All other element types are determined by whether or not they're contentEditable
			this.element.prop( "isContentEditable" );

		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
		this.isNewMenu = true;

		this.element
			.addClass( "ui-autocomplete-input" )
			.attr( "autocomplete", "off" );

		this._on( this.element, {
			keydown: function( event ) {
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:
					// when menu is open and has focus
					if ( this.menu.active ) {
						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.isMultiLine ) {
							this._value( this.term );
						}
						this.close( event );
						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;
					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
			},
			keypress: function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}

				// replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				}
			},
			input: function( event ) {
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				this.selectedItem = null;
				this.previous = this._value();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				this._change( event );
			}
		});

		this._initSource();
		this.menu = $( "<ul>" )
			.addClass( "ui-autocomplete ui-front" )
			.appendTo( this._appendTo() )
			.menu({
				// disable ARIA support, the live region takes care of that
				role: null
			})
			.hide()
			.menu( "instance" );

		this._on( this.menu.element, {
			mousedown: function( event ) {
				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
				});

				// clicking on the scrollbar causes focus to shift to the body
				// but we can't detect a mouseup or a click immediately afterward
				// so we have to track the next mousedown and close the menu if
				// the user clicks somewhere outside of the autocomplete
				var menuElement = this.menu.element[ 0 ];
				if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
					this._delay(function() {
						var that = this;
						this.document.one( "mousedown", function( event ) {
							if ( event.target !== that.element[ 0 ] &&
									event.target !== menuElement &&
									!$.contains( menuElement, event.target ) ) {
								that.close();
							}
						});
					});
				}
			},
			menufocus: function( event, ui ) {
				var label, item;
				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						});

						return;
					}
				}

				item = ui.item.data( "ui-autocomplete-item" );
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {
					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						this._value( item.value );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item.value;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuselect: function( event, ui ) {
				var item = ui.item.data( "ui-autocomplete-item" ),
					previous = this.previous;

				// only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== this.document[ 0 ].activeElement ) {
					this.element.focus();
					this.previous = previous;
					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay(function() {
						this.previous = previous;
						this.selectedItem = item;
					});
				}

				if ( false !== this._trigger( "select", event, { item: item } ) ) {
					this._value( item.value );
				}
				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this._value();

				this.close( event );
				this.selectedItem = item;
			}
		});

		this.liveRegion = $( "<span>", {
				role: "status",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			})
			.addClass( "ui-helper-hidden-accessible" )
			.appendTo( this.document[ 0 ].body );

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
	},

	_destroy: function() {
		clearTimeout( this.searching );
		this.element
			.removeClass( "ui-autocomplete-input" )
			.removeAttr( "autocomplete" );
		this.menu.element.remove();
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter( array, request.term ) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				that.xhr = $.ajax({
					url: url,
					data: request,
					dataType: "json",
					success: function( data ) {
						response( data );
					},
					error: function() {
						response([]);
					}
				});
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay(function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._value(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},

	search: function( value, event ) {
		value = value != null ? value : this._value();

		// always save the actual value, not the one passed as an argument
		this.term = this._value();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this.element.addClass( "ui-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy(function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this.element.removeClass( "ui-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "open" );
		} else {
			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {
		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this._value() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {
		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			});
		});
	},

	_suggest: function( items ) {
		var ul = this.menu.element.empty();
		this._renderMenu( ul, items );
		this.isNewMenu = true;
		this.menu.refresh();

		// size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend({
			of: this.element
		}, this.options.position ) );

		if ( this.options.autoFocus ) {
			this.menu.next();
		}
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(
			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		});
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		return $( "<li>" ).text( item.label ).appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if ( !this.isMultiLine ) {
				this._value( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},

	_value: function() {
		return this.valueMethod.apply( this.element, arguments );
	},

	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	}
});

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term ) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
		return $.grep( array, function( value ) {
			return matcher.test( value.label || value.value || value );
		});
	}
});

// live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
});

var autocomplete = $.ui.autocomplete;


/*!
 * jQuery UI Button 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/button/
 */


var lastActive,
	baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
	typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
	formResetHandler = function() {
		var form = $( this );
		setTimeout(function() {
			form.find( ":ui-button" ).button( "refresh" );
		}, 1 );
	},
	radioGroup = function( radio ) {
		var name = radio.name,
			form = radio.form,
			radios = $( [] );
		if ( name ) {
			name = name.replace( /'/g, "\\'" );
			if ( form ) {
				radios = $( form ).find( "[name='" + name + "'][type=radio]" );
			} else {
				radios = $( "[name='" + name + "'][type=radio]", radio.ownerDocument )
					.filter(function() {
						return !this.form;
					});
			}
		}
		return radios;
	};

$.widget( "ui.button", {
	version: "1.11.2",
	defaultElement: "<button>",
	options: {
		disabled: null,
		text: true,
		label: null,
		icons: {
			primary: null,
			secondary: null
		}
	},
	_create: function() {
		this.element.closest( "form" )
			.unbind( "reset" + this.eventNamespace )
			.bind( "reset" + this.eventNamespace, formResetHandler );

		if ( typeof this.options.disabled !== "boolean" ) {
			this.options.disabled = !!this.element.prop( "disabled" );
		} else {
			this.element.prop( "disabled", this.options.disabled );
		}

		this._determineButtonType();
		this.hasTitle = !!this.buttonElement.attr( "title" );

		var that = this,
			options = this.options,
			toggleButton = this.type === "checkbox" || this.type === "radio",
			activeClass = !toggleButton ? "ui-state-active" : "";

		if ( options.label === null ) {
			options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
		}

		this._hoverable( this.buttonElement );

		this.buttonElement
			.addClass( baseClasses )
			.attr( "role", "button" )
			.bind( "mouseenter" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				if ( this === lastActive ) {
					$( this ).addClass( "ui-state-active" );
				}
			})
			.bind( "mouseleave" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).removeClass( activeClass );
			})
			.bind( "click" + this.eventNamespace, function( event ) {
				if ( options.disabled ) {
					event.preventDefault();
					event.stopImmediatePropagation();
				}
			});

		// Can't use _focusable() because the element that receives focus
		// and the element that gets the ui-state-focus class are different
		this._on({
			focus: function() {
				this.buttonElement.addClass( "ui-state-focus" );
			},
			blur: function() {
				this.buttonElement.removeClass( "ui-state-focus" );
			}
		});

		if ( toggleButton ) {
			this.element.bind( "change" + this.eventNamespace, function() {
				that.refresh();
			});
		}

		if ( this.type === "checkbox" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return false;
				}
			});
		} else if ( this.type === "radio" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return false;
				}
				$( this ).addClass( "ui-state-active" );
				that.buttonElement.attr( "aria-pressed", "true" );

				var radio = that.element[ 0 ];
				radioGroup( radio )
					.not( radio )
					.map(function() {
						return $( this ).button( "widget" )[ 0 ];
					})
					.removeClass( "ui-state-active" )
					.attr( "aria-pressed", "false" );
			});
		} else {
			this.buttonElement
				.bind( "mousedown" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).addClass( "ui-state-active" );
					lastActive = this;
					that.document.one( "mouseup", function() {
						lastActive = null;
					});
				})
				.bind( "mouseup" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).removeClass( "ui-state-active" );
				})
				.bind( "keydown" + this.eventNamespace, function(event) {
					if ( options.disabled ) {
						return false;
					}
					if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
						$( this ).addClass( "ui-state-active" );
					}
				})
				// see #8559, we bind to blur here in case the button element loses
				// focus between keydown and keyup, it would be left in an "active" state
				.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
					$( this ).removeClass( "ui-state-active" );
				});

			if ( this.buttonElement.is("a") ) {
				this.buttonElement.keyup(function(event) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						// TODO pass through original event correctly (just as 2nd argument doesn't work)
						$( this ).click();
					}
				});
			}
		}

		this._setOption( "disabled", options.disabled );
		this._resetButton();
	},

	_determineButtonType: function() {
		var ancestor, labelSelector, checked;

		if ( this.element.is("[type=checkbox]") ) {
			this.type = "checkbox";
		} else if ( this.element.is("[type=radio]") ) {
			this.type = "radio";
		} else if ( this.element.is("input") ) {
			this.type = "input";
		} else {
			this.type = "button";
		}

		if ( this.type === "checkbox" || this.type === "radio" ) {
			// we don't search against the document in case the element
			// is disconnected from the DOM
			ancestor = this.element.parents().last();
			labelSelector = "label[for='" + this.element.attr("id") + "']";
			this.buttonElement = ancestor.find( labelSelector );
			if ( !this.buttonElement.length ) {
				ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
				this.buttonElement = ancestor.filter( labelSelector );
				if ( !this.buttonElement.length ) {
					this.buttonElement = ancestor.find( labelSelector );
				}
			}
			this.element.addClass( "ui-helper-hidden-accessible" );

			checked = this.element.is( ":checked" );
			if ( checked ) {
				this.buttonElement.addClass( "ui-state-active" );
			}
			this.buttonElement.prop( "aria-pressed", checked );
		} else {
			this.buttonElement = this.element;
		}
	},

	widget: function() {
		return this.buttonElement;
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-helper-hidden-accessible" );
		this.buttonElement
			.removeClass( baseClasses + " ui-state-active " + typeClasses )
			.removeAttr( "role" )
			.removeAttr( "aria-pressed" )
			.html( this.buttonElement.find(".ui-button-text").html() );

		if ( !this.hasTitle ) {
			this.buttonElement.removeAttr( "title" );
		}
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "disabled" ) {
			this.widget().toggleClass( "ui-state-disabled", !!value );
			this.element.prop( "disabled", !!value );
			if ( value ) {
				if ( this.type === "checkbox" || this.type === "radio" ) {
					this.buttonElement.removeClass( "ui-state-focus" );
				} else {
					this.buttonElement.removeClass( "ui-state-focus ui-state-active" );
				}
			}
			return;
		}
		this._resetButton();
	},

	refresh: function() {
		//See #8237 & #8828
		var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOption( "disabled", isDisabled );
		}
		if ( this.type === "radio" ) {
			radioGroup( this.element[0] ).each(function() {
				if ( $( this ).is( ":checked" ) ) {
					$( this ).button( "widget" )
						.addClass( "ui-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					$( this ).button( "widget" )
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				}
			});
		} else if ( this.type === "checkbox" ) {
			if ( this.element.is( ":checked" ) ) {
				this.buttonElement
					.addClass( "ui-state-active" )
					.attr( "aria-pressed", "true" );
			} else {
				this.buttonElement
					.removeClass( "ui-state-active" )
					.attr( "aria-pressed", "false" );
			}
		}
	},

	_resetButton: function() {
		if ( this.type === "input" ) {
			if ( this.options.label ) {
				this.element.val( this.options.label );
			}
			return;
		}
		var buttonElement = this.buttonElement.removeClass( typeClasses ),
			buttonText = $( "<span></span>", this.document[0] )
				.addClass( "ui-button-text" )
				.html( this.options.label )
				.appendTo( buttonElement.empty() )
				.text(),
			icons = this.options.icons,
			multipleIcons = icons.primary && icons.secondary,
			buttonClasses = [];

		if ( icons.primary || icons.secondary ) {
			if ( this.options.text ) {
				buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
			}

			if ( icons.primary ) {
				buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
			}

			if ( icons.secondary ) {
				buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
			}

			if ( !this.options.text ) {
				buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

				if ( !this.hasTitle ) {
					buttonElement.attr( "title", $.trim( buttonText ) );
				}
			}
		} else {
			buttonClasses.push( "ui-button-text-only" );
		}
		buttonElement.addClass( buttonClasses.join( " " ) );
	}
});

$.widget( "ui.buttonset", {
	version: "1.11.2",
	options: {
		items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
	},

	_create: function() {
		this.element.addClass( "ui-buttonset" );
	},

	_init: function() {
		this.refresh();
	},

	_setOption: function( key, value ) {
		if ( key === "disabled" ) {
			this.buttons.button( "option", key, value );
		}

		this._super( key, value );
	},

	refresh: function() {
		var rtl = this.element.css( "direction" ) === "rtl",
			allButtons = this.element.find( this.options.items ),
			existingButtons = allButtons.filter( ":ui-button" );

		// Initialize new buttons
		allButtons.not( ":ui-button" ).button();

		// Refresh existing buttons
		existingButtons.button( "refresh" );

		this.buttons = allButtons
			.map(function() {
				return $( this ).button( "widget" )[ 0 ];
			})
				.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
				.filter( ":first" )
					.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
				.end()
				.filter( ":last" )
					.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
				.end()
			.end();
	},

	_destroy: function() {
		this.element.removeClass( "ui-buttonset" );
		this.buttons
			.map(function() {
				return $( this ).button( "widget" )[ 0 ];
			})
				.removeClass( "ui-corner-left ui-corner-right" )
			.end()
			.button( "destroy" );
	}
});

var button = $.ui.button;


/*!
 * jQuery UI Datepicker 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/datepicker/
 */


$.extend($.ui, { datepicker: { version: "1.11.2" } });

var datepicker_instActive;

function datepicker_getZindex( elem ) {
	var position, value;
	while ( elem.length && elem[ 0 ] !== document ) {
		// Ignore z-index if position is set to a value where z-index is ignored by the browser
		// This makes behavior of this function consistent across browsers
		// WebKit always returns auto if the element is positioned
		position = elem.css( "position" );
		if ( position === "absolute" || position === "relative" || position === "fixed" ) {
			// IE returns 0 when zIndex is not specified
			// other browsers return a string
			// we ignore the case of nested elements with an explicit value of 0
			// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
			value = parseInt( elem.css( "zIndex" ), 10 );
			if ( !isNaN( value ) && value !== 0 ) {
				return value;
			}
		}
		elem = elem.parent();
	}

	return 0;
}
/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[""] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: ["January","February","March","April","May","June",
			"July","August","September","October","November","December"], // Names of months for drop-down and formatting
		monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
		dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
		dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
		dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "" // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend(this._defaults, this.regional[""]);
	this.regional.en = $.extend( true, {}, this.regional[ "" ]);
	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
	this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function(settings) {
		datepicker_extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function(target, settings) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = (nodeName === "div" || nodeName === "span");
		if (!target.id) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {});
		if (nodeName === "input") {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName)) {
			return;
		}
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp);
		this._autoSize(inst);
		$.data(target, "datepicker", inst);
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var showOn, buttonText, buttonImage,
			appendText = this._get(inst, "appendText"),
			isRTL = this._get(inst, "isRTL");

		if (inst.append) {
			inst.append.remove();
		}
		if (appendText) {
			inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
			input[isRTL ? "before" : "after"](inst.append);
		}

		input.unbind("focus", this._showDatepicker);

		if (inst.trigger) {
			inst.trigger.remove();
		}

		showOn = this._get(inst, "showOn");
		if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		}
		if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
			buttonText = this._get(inst, "buttonText");
			buttonImage = this._get(inst, "buttonImage");
			inst.trigger = $(this._get(inst, "buttonImageOnly") ?
				$("<img/>").addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$("<button type='button'></button>").addClass(this._triggerClass).
					html(!buttonImage ? buttonText : $("<img/>").attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? "before" : "after"](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
					$.datepicker._hideDatepicker();
				} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker(input[0]);
				} else {
					$.datepicker._showDatepicker(input[0]);
				}
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, "autoSize") && !inst.inline) {
			var findMax, max, maxI, i,
				date = new Date(2009, 12 - 1, 20), // Ensure double digits
				dateFormat = this._get(inst, "dateFormat");

			if (dateFormat.match(/[DM]/)) {
				findMax = function(names) {
					max = 0;
					maxI = 0;
					for (i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					"monthNames" : "monthNamesShort"))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
			}
			inst.input.attr("size", this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName)) {
			return;
		}
		divSpan.addClass(this.markerClassName).append(inst.dpDiv);
		$.data(target, "datepicker", inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if (!inst) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $("<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>");
			this._dialogInput.keydown(this._doKeyDown);
			$("body").append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], "datepicker", inst);
		}
		datepicker_extendRemove(inst.settings, settings || {});
		date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI) {
			$.blockUI(this.dpDiv);
		}
		$.data(this._dialogInput[0], "datepicker", inst);
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function(target) {
		var nodeName,
			$target = $(target),
			inst = $.data(target, "datepicker");

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData(target, "datepicker");
		if (nodeName === "input") {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind("focus", this._showDatepicker).
				unbind("keydown", this._doKeyDown).
				unbind("keypress", this._doKeyPress).
				unbind("keyup", this._doKeyUp);
		} else if (nodeName === "div" || nodeName === "span") {
			$target.removeClass(this.markerClassName).empty();
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, "datepicker");

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = false;
			inst.trigger.filter("button").
				each(function() { this.disabled = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().removeClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", false);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, "datepicker");

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = true;
			inst.trigger.filter("button").
				each(function() { this.disabled = true; }).end().
				filter("img").css({opacity: "0.5", cursor: "default"});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().addClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", true);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] === target) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function(target) {
		try {
			return $.data(target, "datepicker");
		}
		catch (err) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function(target, name, value) {
		var settings, date, minDate, maxDate,
			inst = this._getInst(target);

		if (arguments.length === 2 && typeof name === "string") {
			return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name === "all" ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}

		settings = name || {};
		if (typeof name === "string") {
			settings = {};
			settings[name] = value;
		}

		if (inst) {
			if (this._curInst === inst) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker(target, true);
			minDate = this._getMinMaxDate(inst, "min");
			maxDate = this._getMinMaxDate(inst, "max");
			datepicker_extendRemove(inst.settings, settings);
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
				inst.settings.minDate = this._formatDate(inst, minDate);
			}
			if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker(target);
				} else {
					this._enableDatepicker(target);
				}
			}
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			this._updateAlternate(inst);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline) {
			this._setDateFromField(inst, noDefault);
		}
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst(event.target),
			handled = true,
			isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing) {
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv);
						if (sel[0]) {
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
						}

						onSelect = $.datepicker._get(inst, "onSelect");
						if (onSelect) {
							dateStr = $.datepicker._formatDate(inst);

							// trigger custom callback
							onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, "stepBigMonths") :
							-$.datepicker._get(inst, "stepMonths")), "M");
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, "stepBigMonths") :
							+$.datepicker._get(inst, "stepMonths")), "M");
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) {
							$.datepicker._clearDate(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) {
							$.datepicker._gotoToday(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, -7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, +7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		} else {
			handled = false;
		}

		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var chars, chr,
			inst = $.datepicker._getInst(event.target);

		if ($.datepicker._get(inst, "constrainInput")) {
			chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
			chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var date,
			inst = $.datepicker._getInst(event.target);

		if (inst.input.val() !== inst.lastVal) {
			try {
				date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));

				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (err) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
			$.datepicker._curInst.dpDiv.stop(true, true);
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
			}
		}

		beforeShow = $.datepicker._get(inst, "beforeShow");
		beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
		if(beforeShowSettings === false){
			return;
		}
		datepicker_extendRemove(inst.settings, beforeShowSettings);

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);

		if ($.datepicker._inDialog) { // hide cursor
			input.value = "";
		}
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css("position") === "fixed";
			return !isFixed;
		});

		offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px"});

		if (!inst.inline) {
			showAnim = $.datepicker._get(inst, "showAnim");
			duration = $.datepicker._get(inst, "duration");
			inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
			} else {
				inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		datepicker_instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		this._attachHandlers(inst);

		var origyearshtml,
			numMonths = this._getNumberOfMonths(inst),
			cols = numMonths[1],
			width = 17,
			activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );

		if ( activeCell.length > 0 ) {
			datepicker_handleMouseover.apply( activeCell.get( 0 ) );
		}

		inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
		if (cols > 1) {
			inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
		}
		inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
			"Class"]("ui-datepicker-multi");
		inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
			"Class"]("ui-datepicker-rtl");

		if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.focus();
		}

		// deffered render of the years select (to avoid flashes on Firefox)
		if( inst.yearshtml ){
			origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){
					inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
			viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var position,
			inst = this._getInst(obj),
			isRTL = this._get(inst, "isRTL");

		while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
			obj = obj[isRTL ? "previousSibling" : "nextSibling"];
		}

		position = $(obj).offset();
		return [position.left, position.top];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function(input) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if (!inst || (input && inst !== $.data(input, "datepicker"))) {
			return;
		}

		if (this._datepickerShowing) {
			showAnim = this._get(inst, "showAnim");
			duration = this._get(inst, "duration");
			postProcess = function() {
				$.datepicker._tidyDialog(inst);
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
			} else {
				inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
					(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
			}

			if (!showAnim) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get(inst, "onClose");
			if (onClose) {
				onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
			}

			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
				if ($.blockUI) {
					$.unblockUI();
					$("body").append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst) {
			return;
		}

		var $target = $(event.target),
			inst = $.datepicker._getInst($target[0]);

		if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
				$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.closest("." + $.datepicker._triggerClass).length &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var date,
			target = $(id),
			inst = this._getInst(target[0]);

		if (this._get(inst, "gotoCurrent") && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		inst["selected" + (period === "M" ? "Month" : "Year")] =
		inst["draw" + (period === "M" ? "Month" : "Year")] =
			parseInt(select.options[select.selectedIndex].value,10);

		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var inst,
			target = $(id);

		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}

		inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $("a", td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		this._selectDate(target, "");
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var onSelect,
			target = $(id),
			inst = this._getInst(target[0]);

		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input) {
			inst.input.val(dateStr);
		}
		this._updateAlternate(inst);

		onSelect = this._get(inst, "onSelect");
		if (onSelect) {
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		} else if (inst.input) {
			inst.input.trigger("change"); // fire the change event
		}

		if (inst.inline){
			this._updateDatepicker(inst);
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) !== "object") {
				inst.input.focus(); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altFormat, date, dateStr,
			altField = this._get(inst, "altField");

		if (altField) { // update alternate field too
			altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
			date = this._getDate(inst);
			dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ""];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function(date) {
		var time,
			checkDate = new Date(date.getTime());

		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

		time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function (format, value, settings) {
		if (format == null || value == null) {
			throw "Invalid arguments";
		}

		value = (typeof value === "object" ? value.toString() : value + "");
		if (value === "") {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
			shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Extract a number from the string value
			getNumber = function(match) {
				var isDoubled = lookAhead(match),
					size = (match === "@" ? 14 : (match === "!" ? 20 :
					(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
					minSize = (match === "y" ? size : 1),
					digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
					num = value.substring(iValue).match(digits);
				if (!num) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[0].length;
				return parseInt(num[0], 10);
			},
			// Extract a name from the string value and convert to an index
			getName = function(match, shortNames, longNames) {
				var index = -1,
					names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
						return [ [k, v] ];
					}).sort(function (a, b) {
						return -(a[1].length - b[1].length);
					});

				$.each(names, function (i, pair) {
					var name = pair[1];
					if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
						index = pair[0];
						iValue += name.length;
						return false;
					}
				});
				if (index !== -1) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},
			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if (value.charAt(iValue) !== format.charAt(iFormat)) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d":
						day = getNumber("d");
						break;
					case "D":
						getName("D", dayNamesShort, dayNames);
						break;
					case "o":
						doy = getNumber("o");
						break;
					case "m":
						month = getNumber("m");
						break;
					case "M":
						month = getName("M", monthNamesShort, monthNames);
						break;
					case "y":
						year = getNumber("y");
						break;
					case "@":
						date = new Date(getNumber("@"));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'")){
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if (iValue < value.length){
			extra = value.substr(iValue);
			if (!/^\s+/.test(extra)) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if (year === -1) {
			year = new Date().getFullYear();
		} else if (year < 100) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		}

		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim) {
					break;
				}
				month++;
				day -= dim;
			} while (true);
		}

		date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function (format, date, settings) {
		if (!date) {
			return "";
		}

		var iFormat,
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Format a number, with leading zero if necessary
			formatNumber = function(match, value, len) {
				var num = "" + value;
				if (lookAhead(match)) {
					while (num.length < len) {
						num = "0" + num;
					}
				}
				return num;
			},
			// Format a name, short or long as requested
			formatName = function(match, value, shortNames, longNames) {
				return (lookAhead(match) ? longNames[value] : shortNames[value]);
			},
			output = "",
			literal = false;

		if (date) {
			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						output += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							output += formatNumber("d", date.getDate(), 2);
							break;
						case "D":
							output += formatName("D", date.getDay(), dayNamesShort, dayNames);
							break;
						case "o":
							output += formatNumber("o",
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case "m":
							output += formatNumber("m", date.getMonth() + 1, 2);
							break;
						case "M":
							output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
							break;
						case "y":
							output += (lookAhead("y") ? date.getFullYear() :
								(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'")) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt(iFormat);
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var iFormat,
			chars = "",
			literal = false,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					chars += format.charAt(iFormat);
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if (lookAhead("'")) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt(iFormat);
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() === inst.lastVal) {
			return;
		}

		var dateFormat = this._get(inst, "dateFormat"),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate(inst),
			date = defaultDate,
			settings = this._getFormatConfig(inst);

		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			dates = (noDefault ? "" : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
				var date = new Date();
				date.setDate(date.getDate() + offset);
				return date;
			},
			offsetString = function(offset) {
				try {
					return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						offset, $.datepicker._getFormatConfig(inst));
				}
				catch (e) {
					// Ignore
				}

				var date = (offset.toLowerCase().match(/^c/) ?
					$.datepicker._getDate(inst) : null) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec(offset);

				while (matches) {
					switch (matches[2] || "d") {
						case "d" : case "D" :
							day += parseInt(matches[1],10); break;
						case "w" : case "W" :
							day += parseInt(matches[1],10) * 7; break;
						case "m" : case "M" :
							month += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
						case "y": case "Y" :
							year += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
					}
					matches = pattern.exec(offset);
				}
				return new Date(year, month, day);
			},
			newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
				(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

		newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function(date) {
		if (!date) {
			return null;
		}
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
			this._notifyChange(inst);
		}
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? "" : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function(inst) {
		var stepMonths = this._get(inst, "stepMonths"),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find("[data-handler]").map(function () {
			var handler = {
				prev: function () {
					$.datepicker._adjustDate(id, -stepMonths, "M");
				},
				next: function () {
					$.datepicker._adjustDate(id, +stepMonths, "M");
				},
				hide: function () {
					$.datepicker._hideDatepicker();
				},
				today: function () {
					$.datepicker._gotoToday(id);
				},
				selectDay: function () {
					$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
					return false;
				},
				selectMonth: function () {
					$.datepicker._selectMonthYear(id, this, "M");
					return false;
				},
				selectYear: function () {
					$.datepicker._selectMonthYear(id, this, "Y");
					return false;
				}
			};
			$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
		});
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
			isRTL = this._get(inst, "isRTL"),
			showButtonPanel = this._get(inst, "showButtonPanel"),
			hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
			navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
			numMonths = this._getNumberOfMonths(inst),
			showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
			stepMonths = this._get(inst, "stepMonths"),
			isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
			currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
				new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get(inst, "prevText");
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));

		prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

		nextText = this._get(inst, "nextText");
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));

		next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

		currentText = this._get(inst, "currentText");
		gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

		controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get(inst, "closeText") + "</button>" : "");

		buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
			(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

		firstDay = parseInt(this._get(inst, "firstDay"),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);

		showWeek = this._get(inst, "showWeek");
		dayNames = this._get(inst, "dayNames");
		dayNamesMin = this._get(inst, "dayNamesMin");
		monthNames = this._get(inst, "monthNames");
		monthNamesShort = this._get(inst, "monthNamesShort");
		beforeShowDay = this._get(inst, "beforeShowDay");
		showOtherMonths = this._get(inst, "showOtherMonths");
		selectOtherMonths = this._get(inst, "selectOtherMonths");
		defaultDate = this._getDefaultDate(inst);
		html = "";
		dow;
		for (row = 0; row < numMonths[0]; row++) {
			group = "";
			this.maxRows = 4;
			for (col = 0; col < numMonths[1]; col++) {
				selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				cornerClass = " ui-corner-all";
				calender = "";
				if (isMultiMonth) {
					calender += "<div class='ui-datepicker-group";
					if (numMonths[1] > 1) {
						switch (col) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
							case numMonths[1]-1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
					(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
				for (dow = 0; dow < 7; dow++) { // days of the week
					day = (dow + firstDay) % 7;
					thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
						"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				}
				leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += "<tr>";
					tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get(inst, "calculateWeek")(printDate) + "</td>");
					for (dow = 0; dow < 7; dow++) { // create date picker days
						daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
						otherMonth = (printDate.getMonth() !== drawMonth);
						unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
						tbody += "<td class='" +
							((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
							(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
							((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "") + // highlight selected day
							(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
							(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
							(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
							(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
							(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
							(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
							(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
							"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
							((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get(inst, "changeMonth"),
			changeYear = this._get(inst, "changeYear"),
			showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// month selection
		if (secondary || !changeMonth) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
		} else {
			inMinYear = (minDate && minDate.getFullYear() === drawYear);
			inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++) {
				if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
					monthHtml += "<option value='" + month + "'" +
						(month === drawMonth ? " selected='selected'" : "") +
						">" + monthNamesShort[month] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if (!showMonthAfterYear) {
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
		}

		// year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if (secondary || !changeYear) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {
				// determine range of years to display
				years = this._get(inst, "yearRange").split(":");
				thisYear = new Date().getFullYear();
				determineYear = function(value) {
					var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				year = determineYear(years[0]);
				endYear = Math.max(year, determineYear(years[1] || ""));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
				for (; year <= endYear; year++) {
					inst.yearshtml += "<option value='" + year + "'" +
						(year === drawYear ? " selected='selected'" : "") +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get(inst, "yearSuffix");
		if (showMonthAfterYear) {
			html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period === "Y" ? offset : 0),
			month = inst.drawMonth + (period === "M" ? offset : 0),
			day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
			date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period === "M" || period === "Y") {
			this._notifyChange(inst);
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			newDate = (minDate && date < minDate ? minDate : date);
		return (maxDate && newDate > maxDate ? maxDate : newDate);
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, "onChangeMonthYear");
		if (onChange) {
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, "numberOfMonths");
		return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst),
			date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

		if (offset < 0) {
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		}
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			minYear = null,
			maxYear = null,
			years = this._get(inst, "yearRange");
			if (years){
				yearSplit = years.split(":");
				currentYear = new Date().getFullYear();
				minYear = parseInt(yearSplit[0], 10);
				maxYear = parseInt(yearSplit[1], 10);
				if ( yearSplit[0].match(/[+\-].*/) ) {
					minYear += currentYear;
				}
				if ( yearSplit[1].match(/[+\-].*/) ) {
					maxYear += currentYear;
				}
			}

		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()) &&
			(!minYear || date.getFullYear() >= minYear) &&
			(!maxYear || date.getFullYear() <= maxYear));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, "shortYearCutoff");
		shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
			monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day === "object" ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
	}
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function datepicker_bindHover(dpDiv) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.delegate(selector, "mouseout", function() {
			$(this).removeClass("ui-state-hover");
			if (this.className.indexOf("ui-datepicker-prev") !== -1) {
				$(this).removeClass("ui-datepicker-prev-hover");
			}
			if (this.className.indexOf("ui-datepicker-next") !== -1) {
				$(this).removeClass("ui-datepicker-next-hover");
			}
		})
		.delegate( selector, "mouseover", datepicker_handleMouseover );
}

function datepicker_handleMouseover() {
	if (!$.datepicker._isDisabledDatepicker( datepicker_instActive.inline? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
		$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
		$(this).addClass("ui-state-hover");
		if (this.className.indexOf("ui-datepicker-prev") !== -1) {
			$(this).addClass("ui-datepicker-prev-hover");
		}
		if (this.className.indexOf("ui-datepicker-next") !== -1) {
			$(this).addClass("ui-datepicker-next-hover");
		}
	}
}

/* jQuery extend now ignores nulls! */
function datepicker_extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props) {
		if (props[name] == null) {
			target[name] = props[name];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick);
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ($("#"+$.datepicker._mainDivId).length === 0) {
		$("body").append($.datepicker.dpDiv);
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		typeof options === "string" ?
			$.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.11.2";

var datepicker = $.datepicker;


/*!
 * jQuery UI Draggable 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/draggable/
 */


$.widget("ui.draggable", $.ui.mouse, {
	version: "1.11.2",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if ( this.options.helper === "original" ) {
			this._setPositionRelative();
		}
		if (this.options.addClasses){
			this.element.addClass("ui-draggable");
		}
		if (this.options.disabled){
			this.element.addClass("ui-draggable-disabled");
		}
		this._setHandleClassName();

		this._mouseInit();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function(event) {
		var o = this.options;

		this._blurActiveElement( event );

		// among others, prevent a drag on a resizable-handle
		if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle(event);
		if (!this.handle) {
			return false;
		}

		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

		return true;

	},

	_blockFrames: function( selector ) {
		this.iframeBlocks = this.document.find( selector ).map(function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( "position", "absolute" )
				.appendTo( iframe.parent() )
				.outerWidth( iframe.outerWidth() )
				.outerHeight( iframe.outerHeight() )
				.offset( iframe.offset() )[ 0 ];
		});
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_blurActiveElement: function( event ) {
		var document = this.document[ 0 ];

		// Only need to blur if the event occurred on the draggable itself, see #10527
		if ( !this.handleElement.is( event.target ) ) {
			return;
		}

		// support: IE9
		// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
		try {

			// Support: IE9, IE10
			// If the <body> is blurred, IE will switch windows, see #9520
			if ( document.activeElement && document.activeElement.nodeName.toLowerCase() !== "body" ) {

				// Blur any element that currently has focus, see #4261
				$( document.activeElement ).blur();
			}
		} catch ( error ) {}
	},

	_mouseStart: function(event) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		this.helper.addClass("ui-draggable-dragging");

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ($.ui.ddmanager) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.hasFixedAncestor = this.helper.parents().filter(function() {
				return $( this ).css( "position" ) === "fixed";
			}).length > 0;

		//The element's absolute position on the page minus margins
		this.positionAbs = this.element.offset();
		this._refreshOffsets( event );

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if (this._trigger("start", event) === false) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ($.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(this, event);
		}

		// Reset helper's right/bottom css if they're set and set explicit width/height instead
		// as this prevents resizing of elements with right/bottom set (see #7772)
		this._normalizeRightBottom();

		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart(this, event);
		}

		return true;
	},

	_refreshOffsets: function( event ) {
		this.offset = {
			top: this.positionAbs.top - this.margins.top,
			left: this.positionAbs.left - this.margins.left,
			scroll: false,
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset()
		};

		this.offset.click = {
			left: event.pageX - this.offset.left,
			top: event.pageY - this.offset.top
		};
	},

	_mouseDrag: function(event, noPropagation) {
		// reset any necessary cached properties (see #5009)
		if ( this.hasFixedAncestor ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo("absolute");

		//Call plugins and callbacks and use the resulting position if something is returned
		if (!noPropagation) {
			var ui = this._uiHash();
			if (this._trigger("drag", event, ui) === false) {
				this._mouseUp({});
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";

		if ($.ui.ddmanager) {
			$.ui.ddmanager.drag(this, event);
		}

		return false;
	},

	_mouseStop: function(event) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ($.ui.ddmanager && !this.options.dropBehaviour) {
			dropped = $.ui.ddmanager.drop(this, event);
		}

		//if a drop comes from outside (a sortable)
		if (this.dropped) {
			dropped = this.dropped;
			this.dropped = false;
		}

		if ((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
				if (that._trigger("stop", event) !== false) {
					that._clear();
				}
			});
		} else {
			if (this._trigger("stop", event) !== false) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function( event ) {
		this._unblockFrames();

		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop(this, event);
		}

		// Only need to focus if the event occurred on the draggable itself, see #10527
		if ( this.handleElement.is( event.target ) ) {
			// The interaction is over; whether or not the click resulted in a drag, focus the element
			this.element.focus();
		}

		return $.ui.mouse.prototype._mouseUp.call(this, event);
	},

	cancel: function() {

		if (this.helper.is(".ui-draggable-dragging")) {
			this._mouseUp({});
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function(event) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
		this.handleElement.addClass( "ui-draggable-handle" );
	},

	_removeHandleClassName: function() {
		this.handleElement.removeClass( "ui-draggable-handle" );
	},

	_createHelper: function(event) {

		var o = this.options,
			helperIsFunction = $.isFunction( o.helper ),
			helper = helperIsFunction ?
				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
				( o.helper === "clone" ?
					this.element.clone().removeAttr( "id" ) :
					this.element );

		if (!helper.parents("body").length) {
			helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
		}

		// http://bugs.jqueryui.com/ticket/9446
		// a helper function can return the original element
		// which wouldn't have been set to relative in _create
		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
			this._setPositionRelative();
		}

		if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
			helper.css("position", "absolute");
		}

		return helper;

	},

	_setPositionRelative: function() {
		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
			this.element[ 0 ].style.position = "relative";
		}
	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = { left: +obj[0], top: +obj[1] || 0 };
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt(this.helper.css( "top" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt(this.helper.css( "left" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.element.css("marginLeft"), 10) || 0),
			top: (parseInt(this.element.css("marginTop"), 10) || 0),
			right: (parseInt(this.element.css("marginRight"), 10) || 0),
			bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var isUserScrollable, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document") {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
				this.helperProportions.width -
				this.margins.left -
				this.margins.right,
			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
				this.helperProportions.height -
				this.margins.top -
				this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function(d, pos) {

		if (!pos) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod)
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ){
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if (event.pageX - this.offset.click.left < containment[0]) {
					pageX = containment[0] + this.offset.click.left;
				}
				if (event.pageY - this.offset.click.top < containment[1]) {
					pageY = containment[1] + this.offset.click.top;
				}
				if (event.pageX - this.offset.click.left > containment[2]) {
					pageX = containment[2] + this.offset.click.left;
				}
				if (event.pageY - this.offset.click.top > containment[3]) {
					pageY = containment[3] + this.offset.click.top;
				}
			}

			if (o.grid) {
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (
				pageY -																	// The absolute mouse position
				this.offset.click.top	-												// Click offset (relative to the element)
				this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (
				pageX -																	// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this.helper.removeClass("ui-draggable-dragging");
		if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	_normalizeRightBottom: function() {
		if ( this.options.axis !== "y" && this.helper.css( "right" ) !== "auto" ) {
			this.helper.width( this.helper.width() );
			this.helper.css( "right", "auto" );
		}
		if ( this.options.axis !== "x" && this.helper.css( "bottom" ) !== "auto" ) {
			this.helper.height( this.helper.height() );
			this.helper.css( "bottom", "auto" );
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function( type, event, ui ) {
		ui = ui || this._uiHash();
		$.ui.plugin.call( this, type, [ event, ui, this ], true );

		// Absolute position and offset (see #6884 ) have to be recalculated after plugins
		if ( /^(drag|start|stop)/.test( type ) ) {
			this.positionAbs = this._convertPositionTo( "absolute" );
			ui.offset = this.positionAbs;
		}
		return $.Widget.prototype._trigger.call( this, type, event, ui );
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

});

$.ui.plugin.add( "draggable", "connectToSortable", {
	start: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		});

		draggable.sortables = [];
		$( draggable.options.connectToSortable ).each(function() {
			var sortable = $( this ).sortable( "instance" );

			if ( sortable && !sortable.options.disabled ) {
				draggable.sortables.push( sortable );

				// refreshPositions is called at drag start to refresh the containerCache
				// which is used in drag. This ensures it's initialized and synchronized
				// with any changes that might have happened on the page since initialization.
				sortable.refreshPositions();
				sortable._trigger("activate", event, uiSortable);
			}
		});
	},
	stop: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		});

		draggable.cancelHelperRemoval = false;

		$.each( draggable.sortables, function() {
			var sortable = this;

			if ( sortable.isOver ) {
				sortable.isOver = 0;

				// Allow this sortable to handle removing the helper
				draggable.cancelHelperRemoval = true;
				sortable.cancelHelperRemoval = false;

				// Use _storedCSS To restore properties in the sortable,
				// as this also handles revert (#9675) since the draggable
				// may have modified them in unexpected ways (#8809)
				sortable._storedCSS = {
					position: sortable.placeholder.css( "position" ),
					top: sortable.placeholder.css( "top" ),
					left: sortable.placeholder.css( "left" )
				};

				sortable._mouseStop(event);

				// Once drag has ended, the sortable should return to using
				// its original helper, not the shared helper from draggable
				sortable.options.helper = sortable.options._helper;
			} else {
				// Prevent this Sortable from removing the helper.
				// However, don't set the draggable to remove the helper
				// either as another connected Sortable may yet handle the removal.
				sortable.cancelHelperRemoval = true;

				sortable._trigger( "deactivate", event, uiSortable );
			}
		});
	},
	drag: function( event, ui, draggable ) {
		$.each( draggable.sortables, function() {
			var innermostIntersecting = false,
				sortable = this;

			// Copy over variables that sortable's _intersectsWith uses
			sortable.positionAbs = draggable.positionAbs;
			sortable.helperProportions = draggable.helperProportions;
			sortable.offset.click = draggable.offset.click;

			if ( sortable._intersectsWith( sortable.containerCache ) ) {
				innermostIntersecting = true;

				$.each( draggable.sortables, function() {
					// Copy over variables that sortable's _intersectsWith uses
					this.positionAbs = draggable.positionAbs;
					this.helperProportions = draggable.helperProportions;
					this.offset.click = draggable.offset.click;

					if ( this !== sortable &&
							this._intersectsWith( this.containerCache ) &&
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
						innermostIntersecting = false;
					}

					return innermostIntersecting;
				});
			}

			if ( innermostIntersecting ) {
				// If it intersects, we use a little isOver variable and set it once,
				// so that the move-in stuff gets fired only once.
				if ( !sortable.isOver ) {
					sortable.isOver = 1;

					sortable.currentItem = ui.helper
						.appendTo( sortable.element )
						.data( "ui-sortable-item", true );

					// Store helper option to later restore it
					sortable.options._helper = sortable.options.helper;

					sortable.options.helper = function() {
						return ui.helper[ 0 ];
					};

					// Fire the start events of the sortable with our passed browser event,
					// and our own helper (so it doesn't create a new one)
					event.target = sortable.currentItem[ 0 ];
					sortable._mouseCapture( event, true );
					sortable._mouseStart( event, true, true );

					// Because the browser event is way off the new appended portlet,
					// modify necessary variables to reflect the changes
					sortable.offset.click.top = draggable.offset.click.top;
					sortable.offset.click.left = draggable.offset.click.left;
					sortable.offset.parent.left -= draggable.offset.parent.left -
						sortable.offset.parent.left;
					sortable.offset.parent.top -= draggable.offset.parent.top -
						sortable.offset.parent.top;

					draggable._trigger( "toSortable", event );

					// Inform draggable that the helper is in a valid drop zone,
					// used solely in the revert option to handle "valid/invalid".
					draggable.dropped = sortable.element;

					// Need to refreshPositions of all sortables in the case that
					// adding to one sortable changes the location of the other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					});

					// hack so receive/update callbacks work (mostly)
					draggable.currentItem = draggable.element;
					sortable.fromOutside = draggable;
				}

				if ( sortable.currentItem ) {
					sortable._mouseDrag( event );
					// Copy the sortable's position because the draggable's can potentially reflect
					// a relative position, while sortable is always absolute, which the dragged
					// element has now become. (#8809)
					ui.position = sortable.position;
				}
			} else {
				// If it doesn't intersect with the sortable, and it intersected before,
				// we fake the drag stop of the sortable, but make sure it doesn't remove
				// the helper by using cancelHelperRemoval.
				if ( sortable.isOver ) {

					sortable.isOver = 0;
					sortable.cancelHelperRemoval = true;

					// Calling sortable's mouseStop would trigger a revert,
					// so revert must be temporarily false until after mouseStop is called.
					sortable.options._revert = sortable.options.revert;
					sortable.options.revert = false;

					sortable._trigger( "out", event, sortable._uiHash( sortable ) );
					sortable._mouseStop( event, true );

					// restore sortable behaviors that were modfied
					// when the draggable entered the sortable area (#9481)
					sortable.options.revert = sortable.options._revert;
					sortable.options.helper = sortable.options._helper;

					if ( sortable.placeholder ) {
						sortable.placeholder.remove();
					}

					// Recalculate the draggable's offset considering the sortable
					// may have modified them in unexpected ways (#8809)
					draggable._refreshOffsets( event );
					ui.position = draggable._generatePosition( event, true );

					draggable._trigger( "fromSortable", event );

					// Inform draggable that the helper is no longer in a valid drop zone
					draggable.dropped = false;

					// Need to refreshPositions of all sortables just in case removing
					// from one sortable changes the location of other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					});
				}
			}
		});
	}
});

$.ui.plugin.add("draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;

		if (t.css("cursor")) {
			o._cursor = t.css("cursor");
		}
		t.css("cursor", o.cursor);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if (o._cursor) {
			$("body").css("cursor", o._cursor);
		}
	}
});

$.ui.plugin.add("draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if (t.css("opacity")) {
			o._opacity = t.css("opacity");
		}
		t.css("opacity", o.opacity);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if (o._opacity) {
			$(ui.helper).css("opacity", o._opacity);
		}
	}
});

$.ui.plugin.add("draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] && i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if (!o.axis || o.axis !== "x") {
				if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}
			}

			if (!o.axis || o.axis !== "y") {
				if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}
			}

		}

		if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(i, event);
		}

	}
});

$.ui.plugin.add("draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
			var $t = $(this),
				$o = $t.offset();
			if (this !== i.element[0]) {
				i.snapElements.push({
					item: this,
					width: $t.outerWidth(), height: $t.outerHeight(),
					top: $o.top, left: $o.left
				});
			}
		});

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for (i = inst.snapElements.length - 1; i >= 0; i--){

			l = inst.snapElements[i].left - inst.margins.left;
			r = l + inst.snapElements[i].width;
			t = inst.snapElements[i].top - inst.margins.top;
			b = t + inst.snapElements[i].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
				if (inst.snapElements[i].snapping) {
					(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = false;
				continue;
			}

			if (o.snapMode !== "inner") {
				ts = Math.abs(t - y2) <= d;
				bs = Math.abs(b - y1) <= d;
				ls = Math.abs(l - x2) <= d;
				rs = Math.abs(r - x1) <= d;
				if (ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top;
				}
				if (bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top;
				}
				if (ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left;
				}
				if (rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left;
				}
			}

			first = (ts || bs || ls || rs);

			if (o.snapMode !== "outer") {
				ts = Math.abs(t - y1) <= d;
				bs = Math.abs(b - y2) <= d;
				ls = Math.abs(l - x1) <= d;
				rs = Math.abs(r - x2) <= d;
				if (ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top;
				}
				if (bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top;
				}
				if (ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left;
				}
				if (rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left;
				}
			}

			if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
				(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			}
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

		}

	}
});

$.ui.plugin.add("draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray($(o.stack)).sort(function(a, b) {
				return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
			});

		if (!group.length) { return; }

		min = parseInt($(group[0]).css("zIndex"), 10) || 0;
		$(group).each(function(i) {
			$(this).css("zIndex", min + i);
		});
		this.css("zIndex", (min + group.length));
	}
});

$.ui.plugin.add("draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if (t.css("zIndex")) {
			o._zIndex = t.css("zIndex");
		}
		t.css("zIndex", o.zIndex);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if (o._zIndex) {
			$(ui.helper).css("zIndex", o._zIndex);
		}
	}
});

var draggable = $.ui.draggable;


/*!
 * jQuery UI Resizable 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/resizable/
 */


$.widget("ui.resizable", $.ui.mouse, {
	version: "1.11.2",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,
		// See #7960
		zIndex: 90,

		// callbacks
		resize: null,
		start: null,
		stop: null
	},

	_num: function( value ) {
		return parseInt( value, 10 ) || 0;
	},

	_isNumber: function( value ) {
		return !isNaN( parseInt( value, 10 ) );
	},

	_hasScroll: function( el, a ) {

		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},

	_create: function() {

		var n, i, handle, axis, hname,
			that = this,
			o = this.options;
		this.element.addClass("ui-resizable");

		$.extend(this, {
			_aspectRatio: !!(o.aspectRatio),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		});

		// Wrap the element if it cannot hold child nodes
		if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

			this.element.wrap(
				$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
					position: this.element.css("position"),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css("top"),
					left: this.element.css("left")
				})
			);

			this.element = this.element.parent().data(
				"ui-resizable", this.element.resizable( "instance" )
			);

			this.elementIsWrapper = true;

			this.element.css({
				marginLeft: this.originalElement.css("marginLeft"),
				marginTop: this.originalElement.css("marginTop"),
				marginRight: this.originalElement.css("marginRight"),
				marginBottom: this.originalElement.css("marginBottom")
			});
			this.originalElement.css({
				marginLeft: 0,
				marginTop: 0,
				marginRight: 0,
				marginBottom: 0
			});
			// support: Safari
			// Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css("resize");
			this.originalElement.css("resize", "none");

			this._proportionallyResizeElements.push( this.originalElement.css({
				position: "static",
				zoom: 1,
				display: "block"
			}) );

			// support: IE9
			// avoid IE jump (hard set the margin)
			this.originalElement.css({ margin: this.originalElement.css("margin") });

			this._proportionallyResize();
		}

		this.handles = o.handles ||
			( !$(".ui-resizable-handle", this.element).length ?
				"e,s,se" : {
					n: ".ui-resizable-n",
					e: ".ui-resizable-e",
					s: ".ui-resizable-s",
					w: ".ui-resizable-w",
					se: ".ui-resizable-se",
					sw: ".ui-resizable-sw",
					ne: ".ui-resizable-ne",
					nw: ".ui-resizable-nw"
				} );

		if (this.handles.constructor === String) {

			if ( this.handles === "all") {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split(",");
			this.handles = {};

			for (i = 0; i < n.length; i++) {

				handle = $.trim(n[i]);
				hname = "ui-resizable-" + handle;
				axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

				axis.css({ zIndex: o.zIndex });

				// TODO : What's going on here?
				if ("se" === handle) {
					axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
				}

				this.handles[handle] = ".ui-resizable-" + handle;
				this.element.append(axis);
			}

		}

		this._renderAxis = function(target) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for (i in this.handles) {

				if (this.handles[i].constructor === String) {
					this.handles[i] = this.element.children( this.handles[ i ] ).first().show();
				}

				if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

					axis = $(this.handles[i], this.element);

					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

					padPos = [ "padding",
						/ne|nw|n/.test(i) ? "Top" :
						/se|sw|s/.test(i) ? "Bottom" :
						/^e$/.test(i) ? "Right" : "Left" ].join("");

					target.css(padPos, padWrapper);

					this._proportionallyResize();

				}

				// TODO: What's that good for? There's not anything to be executed left
				if (!$(this.handles[i]).length) {
					continue;
				}
			}
		};

		// TODO: make renderAxis a prototype function
		this._renderAxis(this.element);

		this._handles = $(".ui-resizable-handle", this.element)
			.disableSelection();

		this._handles.mouseover(function() {
			if (!that.resizing) {
				if (this.className) {
					axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
				}
				that.axis = axis && axis[1] ? axis[1] : "se";
			}
		});

		if (o.autoHide) {
			this._handles.hide();
			$(this.element)
				.addClass("ui-resizable-autohide")
				.mouseenter(function() {
					if (o.disabled) {
						return;
					}
					$(this).removeClass("ui-resizable-autohide");
					that._handles.show();
				})
				.mouseleave(function() {
					if (o.disabled) {
						return;
					}
					if (!that.resizing) {
						$(this).addClass("ui-resizable-autohide");
						that._handles.hide();
					}
				});
		}

		this._mouseInit();

	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function(exp) {
				$(exp)
					.removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
					.removeData("resizable")
					.removeData("ui-resizable")
					.unbind(".resizable")
					.find(".ui-resizable-handle")
						.remove();
			};

		// TODO: Unwrap at same DOM position
		if (this.elementIsWrapper) {
			_destroy(this.element);
			wrapper = this.element;
			this.originalElement.css({
				position: wrapper.css("position"),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css("top"),
				left: wrapper.css("left")
			}).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css("resize", this.originalResizeStyle);
		_destroy(this.originalElement);

		return this;
	},

	_mouseCapture: function(event) {
		var i, handle,
			capture = false;

		for (i in this.handles) {
			handle = $(this.handles[i])[0];
			if (handle === event.target || $.contains(handle, event.target)) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function(event) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = this._num(this.helper.css("left"));
		curtop = this._num(this.helper.css("top"));

		if (o.containment) {
			curleft += $(o.containment).scrollLeft() || 0;
			curtop += $(o.containment).scrollTop() || 0;
		}

		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };

		this.size = this._helper ? {
				width: this.helper.width(),
				height: this.helper.height()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.originalSize = this._helper ? {
				width: el.outerWidth(),
				height: el.outerHeight()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.sizeDiff = {
			width: el.outerWidth() - el.width(),
			height: el.outerHeight() - el.height()
		};

		this.originalPosition = { left: curleft, top: curtop };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		this.aspectRatio = (typeof o.aspectRatio === "number") ?
			o.aspectRatio :
			((this.originalSize.width / this.originalSize.height) || 1);

		cursor = $(".ui-resizable-" + this.axis).css("cursor");
		$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

		el.addClass("ui-resizable-resizing");
		this._propagate("start", event);
		return true;
	},

	_mouseDrag: function(event) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = (event.pageX - smp.left) || 0,
			dy = (event.pageY - smp.top) || 0,
			trigger = this._change[a];

		this._updatePrevProperties();

		if (!trigger) {
			return false;
		}

		data = trigger.apply(this, [ event, dx, dy ]);

		this._updateVirtualBoundaries(event.shiftKey);
		if (this._aspectRatio || event.shiftKey) {
			data = this._updateRatio(data, event);
		}

		data = this._respectSize(data, event);

		this._updateCache(data);

		this._propagate("resize", event);

		props = this._applyChanges();

		if ( !this._helper && this._proportionallyResizeElements.length ) {
			this._proportionallyResize();
		}

		if ( !$.isEmptyObject( props ) ) {
			this._updatePrevProperties();
			this._trigger( "resize", event, this.ui() );
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function(event) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if (this._helper) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && (/textarea/i).test(pr[0].nodeName);
			soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = {
				width: (that.helper.width()  - soffsetw),
				height: (that.helper.height() - soffseth)
			};
			left = (parseInt(that.element.css("left"), 10) +
				(that.position.left - that.originalPosition.left)) || null;
			top = (parseInt(that.element.css("top"), 10) +
				(that.position.top - that.originalPosition.top)) || null;

			if (!o.animate) {
				this.element.css($.extend(s, { top: top, left: left }));
			}

			that.helper.height(that.size.height);
			that.helper.width(that.size.width);

			if (this._helper && !o.animate) {
				this._proportionallyResize();
			}
		}

		$("body").css("cursor", "auto");

		this.element.removeClass("ui-resizable-resizing");

		this._propagate("stop", event);

		if (this._helper) {
			this.helper.remove();
		}

		return false;

	},

	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function(forceAspectRatio) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
			maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
			minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
			maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
		};

		if (this._aspectRatio || forceAspectRatio) {
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if (pMinWidth > b.minWidth) {
				b.minWidth = pMinWidth;
			}
			if (pMinHeight > b.minHeight) {
				b.minHeight = pMinHeight;
			}
			if (pMaxWidth < b.maxWidth) {
				b.maxWidth = pMaxWidth;
			}
			if (pMaxHeight < b.maxHeight) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function(data) {
		this.offset = this.helper.offset();
		if (this._isNumber(data.left)) {
			this.position.left = data.left;
		}
		if (this._isNumber(data.top)) {
			this.position.top = data.top;
		}
		if (this._isNumber(data.height)) {
			this.size.height = data.height;
		}
		if (this._isNumber(data.width)) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if (this._isNumber(data.height)) {
			data.width = (data.height * this.aspectRatio);
		} else if (this._isNumber(data.width)) {
			data.height = (data.width / this.aspectRatio);
		}

		if (a === "sw") {
			data.left = cpos.left + (csize.width - data.width);
			data.top = null;
		}
		if (a === "nw") {
			data.top = cpos.top + (csize.height - data.height);
			data.left = cpos.left + (csize.width - data.width);
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = this._isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width),
			ismaxh = this._isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
			isminw = this._isNumber(data.width) && o.minWidth && (o.minWidth > data.width),
			isminh = this._isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.position.top + this.size.height,
			cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
		if (isminw) {
			data.width = o.minWidth;
		}
		if (isminh) {
			data.height = o.minHeight;
		}
		if (ismaxw) {
			data.width = o.maxWidth;
		}
		if (ismaxh) {
			data.height = o.maxHeight;
		}

		if (isminw && cw) {
			data.left = dw - o.minWidth;
		}
		if (ismaxw && cw) {
			data.left = dw - o.maxWidth;
		}
		if (isminh && ch) {
			data.top = dh - o.minHeight;
		}
		if (ismaxh && ch) {
			data.top = dh - o.maxHeight;
		}

		// Fixing jump error on top/left - bug #2330
		if (!data.width && !data.height && !data.left && data.top) {
			data.top = null;
		} else if (!data.width && !data.height && !data.top && data.left) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseInt( borders[ i ], 10 ) || 0 );
			widths[ i ] += ( parseInt( paddings[ i ], 10 ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if (!this._proportionallyResizeElements.length) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++) {

			prel = this._proportionallyResizeElements[i];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if (!this.outerDimensions) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css({
				height: (element.height() - this.outerDimensions.height) || 0,
				width: (element.width() - this.outerDimensions.width) || 0
			});

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if (this._helper) {

			this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

			this.helper.addClass(this._helper).css({
				width: this.element.outerWidth() - 1,
				height: this.element.outerHeight() - 1,
				position: "absolute",
				left: this.elementOffset.left + "px",
				top: this.elementOffset.top + "px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			});

			this.helper
				.appendTo("body")
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function(event, dx) {
			return { width: this.originalSize.width + dx };
		},
		w: function(event, dx) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function(event, dx, dy) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function(event, dx, dy) {
			return { height: this.originalSize.height + dy };
		},
		se: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments),
				this._change.e.apply(this, [ event, dx, dy ]));
		},
		sw: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments),
				this._change.w.apply(this, [ event, dx, dy ]));
		},
		ne: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments),
				this._change.e.apply(this, [ event, dx, dy ]));
		},
		nw: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments),
				this._change.w.apply(this, [ event, dx, dy ]));
		}
	},

	_propagate: function(n, event) {
		$.ui.plugin.call(this, n, [ event, this.ui() ]);
		(n !== "resize" && this._trigger(n, event, this.ui()));
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

});

/*
 * Resizable Extensions
 */

$.ui.plugin.add("resizable", "animate", {

	stop: function( event ) {
		var that = $(this).resizable( "instance" ),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && (/textarea/i).test(pr[0].nodeName),
			soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
			left = (parseInt(that.element.css("left"), 10) +
				(that.position.left - that.originalPosition.left)) || null,
			top = (parseInt(that.element.css("top"), 10) +
				(that.position.top - that.originalPosition.top)) || null;

		that.element.animate(
			$.extend(style, top && left ? { top: top, left: left } : {}), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseInt(that.element.css("width"), 10),
						height: parseInt(that.element.css("height"), 10),
						top: parseInt(that.element.css("top"), 10),
						left: parseInt(that.element.css("left"), 10)
					};

					if (pr && pr.length) {
						$(pr[0]).css({ width: data.width, height: data.height });
					}

					// propagating resize, and updating values for each animation step
					that._updateCache(data);
					that._propagate("resize", event);

				}
			}
		);
	}

});

$.ui.plugin.add( "resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = ( oc instanceof $ ) ? oc.get( 0 ) : ( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

		if ( !ce ) {
			return;
		}

		that.containerElement = $( ce );

		if ( /document/.test( oc ) || oc === document ) {
			that.containerOffset = {
				left: 0,
				top: 0
			};
			that.containerPosition = {
				left: 0,
				top: 0
			};

			that.parentData = {
				element: $( document ),
				left: 0,
				top: 0,
				width: $( document ).width(),
				height: $( document ).height() || document.body.parentNode.scrollHeight
			};
		} else {
			element = $( ce );
			p = [];
			$([ "Top", "Right", "Left", "Bottom" ]).each(function( i, name ) {
				p[ i ] = that._num( element.css( "padding" + name ) );
			});

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = {
				height: ( element.innerHeight() - p[ 3 ] ),
				width: ( element.innerWidth() - p[ 1 ] )
			};

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );
			height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;

			that.parentData = {
				element: ce,
				left: co.left,
				top: co.top,
				width: width,
				height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			(that._helper ?
				that.offset.left - cop.left :
				(that.offset.left - co.left)) );

		hoset = Math.abs( that.sizeDiff.height +
			(that._helper ?
				that.offset.top - cop.top :
				(that.offset.top - co.top)) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ){
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css({
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			});
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css({
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			});
		}
	}
});

$.ui.plugin.add("resizable", "alsoResize", {

	start: function() {
		var that = $(this).resizable( "instance" ),
			o = that.options,
			_store = function(exp) {
				$(exp).each(function() {
					var el = $(this);
					el.data("ui-resizable-alsoresize", {
						width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
						left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
					});
				});
			};

		if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
			if (o.alsoResize.length) {
				o.alsoResize = o.alsoResize[0];
				_store(o.alsoResize);
			} else {
				$.each(o.alsoResize, function(exp) {
					_store(exp);
				});
			}
		} else {
			_store(o.alsoResize);
		}
	},

	resize: function(event, ui) {
		var that = $(this).resizable( "instance" ),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: (that.size.height - os.height) || 0,
				width: (that.size.width - os.width) || 0,
				top: (that.position.top - op.top) || 0,
				left: (that.position.left - op.left) || 0
			},

			_alsoResize = function(exp, c) {
				$(exp).each(function() {
					var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
						css = c && c.length ?
							c :
							el.parents(ui.originalElement[0]).length ?
								[ "width", "height" ] :
								[ "width", "height", "top", "left" ];

					$.each(css, function(i, prop) {
						var sum = (start[prop] || 0) + (delta[prop] || 0);
						if (sum && sum >= 0) {
							style[prop] = sum || null;
						}
					});

					el.css(style);
				});
			};

		if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
			$.each(o.alsoResize, function(exp, c) {
				_alsoResize(exp, c);
			});
		} else {
			_alsoResize(o.alsoResize);
		}
	},

	stop: function() {
		$(this).removeData("resizable-alsoresize");
	}
});

$.ui.plugin.add("resizable", "ghost", {

	start: function() {

		var that = $(this).resizable( "instance" ), o = that.options, cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost
			.css({
				opacity: 0.25,
				display: "block",
				position: "relative",
				height: cs.height,
				width: cs.width,
				margin: 0,
				left: 0,
				top: 0
			})
			.addClass("ui-resizable-ghost")
			.addClass(typeof o.ghost === "string" ? o.ghost : "");

		that.ghost.appendTo(that.helper);

	},

	resize: function() {
		var that = $(this).resizable( "instance" );
		if (that.ghost) {
			that.ghost.css({
				position: "relative",
				height: that.size.height,
				width: that.size.width
			});
		}
	},

	stop: function() {
		var that = $(this).resizable( "instance" );
		if (that.ghost && that.helper) {
			that.helper.get(0).removeChild(that.ghost.get(0));
		}
	}

});

$.ui.plugin.add("resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $(this).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
			gridX = (grid[0] || 1),
			gridY = (grid[1] || 1),
			ox = Math.round((cs.width - os.width) / gridX) * gridX,
			oy = Math.round((cs.height - os.height) / gridY) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
			isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
			isMinWidth = o.minWidth && (o.minWidth > newWidth),
			isMinHeight = o.minHeight && (o.minHeight > newHeight);

		o.grid = grid;

		if (isMinWidth) {
			newWidth += gridX;
		}
		if (isMinHeight) {
			newHeight += gridY;
		}
		if (isMaxWidth) {
			newWidth -= gridX;
		}
		if (isMaxHeight) {
			newHeight -= gridY;
		}

		if (/^(se|s|e)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if (/^(ne)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if (/^(sw)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}

			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridY - outerDimensions.height;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

});

var resizable = $.ui.resizable;


/*!
 * jQuery UI Dialog 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/dialog/
 */


var dialog = $.widget( "ui.dialog", {
	version: "1.11.2",
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		closeOnEscape: true,
		closeText: "Close",
		dialogClass: "",
		draggable: true,
		hide: null,
		height: "auto",
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",
			// Ensure the titlebar is always visible
			using: function( pos ) {
				var topOffset = $( this ).css( pos ).offset().top;
				if ( topOffset < 0 ) {
					$( this ).css( "top", pos.top - topOffset );
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		width: 300,

		// callbacks
		beforeClose: null,
		close: null,
		drag: null,
		dragStart: null,
		dragStop: null,
		focus: null,
		open: null,
		resize: null,
		resizeStart: null,
		resizeStop: null
	},

	sizeRelatedOptions: {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},

	resizableRelatedOptions: {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	},

	_create: function() {
		this.originalCss = {
			display: this.element[ 0 ].style.display,
			width: this.element[ 0 ].style.width,
			minHeight: this.element[ 0 ].style.minHeight,
			maxHeight: this.element[ 0 ].style.maxHeight,
			height: this.element[ 0 ].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr( "title" );
		this.options.title = this.options.title || this.originalTitle;

		this._createWrapper();

		this.element
			.show()
			.removeAttr( "title" )
			.addClass( "ui-dialog-content ui-widget-content" )
			.appendTo( this.uiDialog );

		this._createTitlebar();
		this._createButtonPane();

		if ( this.options.draggable && $.fn.draggable ) {
			this._makeDraggable();
		}
		if ( this.options.resizable && $.fn.resizable ) {
			this._makeResizable();
		}

		this._isOpen = false;

		this._trackFocus();
	},

	_init: function() {
		if ( this.options.autoOpen ) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if ( element && (element.jquery || element.nodeType) ) {
			return $( element );
		}
		return this.document.find( element || "body" ).eq( 0 );
	},

	_destroy: function() {
		var next,
			originalPosition = this.originalPosition;

		this._destroyOverlay();

		this.element
			.removeUniqueId()
			.removeClass( "ui-dialog-content ui-widget-content" )
			.css( this.originalCss )
			// Without detaching first, the following becomes really slow
			.detach();

		this.uiDialog.stop( true, true ).remove();

		if ( this.originalTitle ) {
			this.element.attr( "title", this.originalTitle );
		}

		next = originalPosition.parent.children().eq( originalPosition.index );
		// Don't try to place the dialog next to itself (#8613)
		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
			next.before( this.element );
		} else {
			originalPosition.parent.append( this.element );
		}
	},

	widget: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,

	close: function( event ) {
		var activeElement,
			that = this;

		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
			return;
		}

		this._isOpen = false;
		this._focusedElement = null;
		this._destroyOverlay();
		this._untrackInstance();

		if ( !this.opener.filter( ":focusable" ).focus().length ) {

			// support: IE9
			// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
			try {
				activeElement = this.document[ 0 ].activeElement;

				// Support: IE9, IE10
				// If the <body> is blurred, IE will switch windows, see #4520
				if ( activeElement && activeElement.nodeName.toLowerCase() !== "body" ) {

					// Hiding a focused element doesn't trigger blur in WebKit
					// so in case we have nothing to focus on, explicitly blur the active element
					// https://bugs.webkit.org/show_bug.cgi?id=47182
					$( activeElement ).blur();
				}
			} catch ( error ) {}
		}

		this._hide( this.uiDialog, this.options.hide, function() {
			that._trigger( "close", event );
		});
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function( event, silent ) {
		var moved = false,
			zIndicies = this.uiDialog.siblings( ".ui-front:visible" ).map(function() {
				return +$( this ).css( "z-index" );
			}).get(),
			zIndexMax = Math.max.apply( null, zIndicies );

		if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
			this.uiDialog.css( "z-index", zIndexMax + 1 );
			moved = true;
		}

		if ( moved && !silent ) {
			this._trigger( "focus", event );
		}
		return moved;
	},

	open: function() {
		var that = this;
		if ( this._isOpen ) {
			if ( this._moveToTop() ) {
				this._focusTabbable();
			}
			return;
		}

		this._isOpen = true;
		this.opener = $( this.document[ 0 ].activeElement );

		this._size();
		this._position();
		this._createOverlay();
		this._moveToTop( null, true );

		// Ensure the overlay is moved to the top with the dialog, but only when
		// opening. The overlay shouldn't move after the dialog is open so that
		// modeless dialogs opened after the modal dialog stack properly.
		if ( this.overlay ) {
			this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
		}

		this._show( this.uiDialog, this.options.show, function() {
			that._focusTabbable();
			that._trigger( "focus" );
		});

		// Track the dialog immediately upon openening in case a focus event
		// somehow occurs outside of the dialog before an element inside the
		// dialog is focused (#10152)
		this._makeFocusTarget();

		this._trigger( "open" );
	},

	_focusTabbable: function() {
		// Set focus to the first match:
		// 1. An element that was focused previously
		// 2. First element inside the dialog matching [autofocus]
		// 3. Tabbable element inside the content element
		// 4. Tabbable element inside the buttonpane
		// 5. The close button
		// 6. The dialog itself
		var hasFocus = this._focusedElement;
		if ( !hasFocus ) {
			hasFocus = this.element.find( "[autofocus]" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.element.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq( 0 ).focus();
	},

	_keepFocus: function( event ) {
		function checkFocus() {
			var activeElement = this.document[0].activeElement,
				isActive = this.uiDialog[0] === activeElement ||
					$.contains( this.uiDialog[0], activeElement );
			if ( !isActive ) {
				this._focusTabbable();
			}
		}
		event.preventDefault();
		checkFocus.call( this );
		// support: IE
		// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
		// so we check again later
		this._delay( checkFocus );
	},

	_createWrapper: function() {
		this.uiDialog = $("<div>")
			.addClass( "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +
				this.options.dialogClass )
			.hide()
			.attr({
				// Setting tabIndex makes the div focusable
				tabIndex: -1,
				role: "dialog"
			})
			.appendTo( this._appendTo() );

		this._on( this.uiDialog, {
			keydown: function( event ) {
				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
						event.keyCode === $.ui.keyCode.ESCAPE ) {
					event.preventDefault();
					this.close( event );
					return;
				}

				// prevent tabbing out of dialogs
				if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
					return;
				}
				var tabbables = this.uiDialog.find( ":tabbable" ),
					first = tabbables.filter( ":first" ),
					last = tabbables.filter( ":last" );

				if ( ( event.target === last[0] || event.target === this.uiDialog[0] ) && !event.shiftKey ) {
					this._delay(function() {
						first.focus();
					});
					event.preventDefault();
				} else if ( ( event.target === first[0] || event.target === this.uiDialog[0] ) && event.shiftKey ) {
					this._delay(function() {
						last.focus();
					});
					event.preventDefault();
				}
			},
			mousedown: function( event ) {
				if ( this._moveToTop( event ) ) {
					this._focusTabbable();
				}
			}
		});

		// We assume that any existing aria-describedby attribute means
		// that the dialog content is marked up properly
		// otherwise we brute force the content as the description
		if ( !this.element.find( "[aria-describedby]" ).length ) {
			this.uiDialog.attr({
				"aria-describedby": this.element.uniqueId().attr( "id" )
			});
		}
	},

	_createTitlebar: function() {
		var uiDialogTitle;

		this.uiDialogTitlebar = $( "<div>" )
			.addClass( "ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix" )
			.prependTo( this.uiDialog );
		this._on( this.uiDialogTitlebar, {
			mousedown: function( event ) {
				// Don't prevent click on close button (#8838)
				// Focusing a dialog that is partially scrolled out of view
				// causes the browser to scroll it into view, preventing the click event
				if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {
					// Dialog isn't getting focus when dragging (#8063)
					this.uiDialog.focus();
				}
			}
		});

		// support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)
		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
			.button({
				label: this.options.closeText,
				icons: {
					primary: "ui-icon-closethick"
				},
				text: false
			})
			.addClass( "ui-dialog-titlebar-close" )
			.appendTo( this.uiDialogTitlebar );
		this._on( this.uiDialogTitlebarClose, {
			click: function( event ) {
				event.preventDefault();
				this.close( event );
			}
		});

		uiDialogTitle = $( "<span>" )
			.uniqueId()
			.addClass( "ui-dialog-title" )
			.prependTo( this.uiDialogTitlebar );
		this._title( uiDialogTitle );

		this.uiDialog.attr({
			"aria-labelledby": uiDialogTitle.attr( "id" )
		});
	},

	_title: function( title ) {
		if ( !this.options.title ) {
			title.html( "&#160;" );
		}
		title.text( this.options.title );
	},

	_createButtonPane: function() {
		this.uiDialogButtonPane = $( "<div>" )
			.addClass( "ui-dialog-buttonpane ui-widget-content ui-helper-clearfix" );

		this.uiButtonSet = $( "<div>" )
			.addClass( "ui-dialog-buttonset" )
			.appendTo( this.uiDialogButtonPane );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons;

		// if we already have a button pane, remove it
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();

		if ( $.isEmptyObject( buttons ) || ($.isArray( buttons ) && !buttons.length) ) {
			this.uiDialog.removeClass( "ui-dialog-buttons" );
			return;
		}

		$.each( buttons, function( name, props ) {
			var click, buttonOptions;
			props = $.isFunction( props ) ?
				{ click: props, text: name } :
				props;
			// Default to a non-submitting button
			props = $.extend( { type: "button" }, props );
			// Change the context for the click callback to be the main element
			click = props.click;
			props.click = function() {
				click.apply( that.element[ 0 ], arguments );
			};
			buttonOptions = {
				icons: props.icons,
				text: props.showText
			};
			delete props.icons;
			delete props.showText;
			$( "<button></button>", props )
				.button( buttonOptions )
				.appendTo( that.uiButtonSet );
		});
		this.uiDialog.addClass( "ui-dialog-buttons" );
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable({
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
			handle: ".ui-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				$( this ).addClass( "ui-dialog-dragging" );
				that._blockFrames();
				that._trigger( "dragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				that._trigger( "drag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var left = ui.offset.left - that.document.scrollLeft(),
					top = ui.offset.top - that.document.scrollTop();

				options.position = {
					my: "left top",
					at: "left" + (left >= 0 ? "+" : "") + left + " " +
						"top" + (top >= 0 ? "+" : "") + top,
					of: that.window
				};
				$( this ).removeClass( "ui-dialog-dragging" );
				that._unblockFrames();
				that._trigger( "dragStop", event, filteredUi( ui ) );
			}
		});
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,
			// .ui-resizable has position: relative defined in the stylesheet
			// but dialogs have to use absolute or fixed positioning
			position = this.uiDialog.css("position"),
			resizeHandles = typeof handles === "string" ?
				handles	:
				"n,e,s,w,se,sw,ne,nw";

		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable({
			cancel: ".ui-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				$( this ).addClass( "ui-dialog-resizing" );
				that._blockFrames();
				that._trigger( "resizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				that._trigger( "resize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var offset = that.uiDialog.offset(),
					left = offset.left - that.document.scrollLeft(),
					top = offset.top - that.document.scrollTop();

				options.height = that.uiDialog.height();
				options.width = that.uiDialog.width();
				options.position = {
					my: "left top",
					at: "left" + (left >= 0 ? "+" : "") + left + " " +
						"top" + (top >= 0 ? "+" : "") + top,
					of: that.window
				};
				$( this ).removeClass( "ui-dialog-resizing" );
				that._unblockFrames();
				that._trigger( "resizeStop", event, filteredUi( ui ) );
			}
		})
		.css( "position", position );
	},

	_trackFocus: function() {
		this._on( this.widget(), {
			focusin: function( event ) {
				this._makeFocusTarget();
				this._focusedElement = $( event.target );
			}
		});
	},

	_makeFocusTarget: function() {
		this._untrackInstance();
		this._trackingInstances().unshift( this );
	},

	_untrackInstance: function() {
		var instances = this._trackingInstances(),
			exists = $.inArray( this, instances );
		if ( exists !== -1 ) {
			instances.splice( exists, 1 );
		}
	},

	_trackingInstances: function() {
		var instances = this.document.data( "ui-dialog-instances" );
		if ( !instances ) {
			instances = [];
			this.document.data( "ui-dialog-instances", instances );
		}
		return instances;
	},

	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {
		// Need to show the dialog to get the actual offset in the position plugin
		var isVisible = this.uiDialog.is( ":visible" );
		if ( !isVisible ) {
			this.uiDialog.show();
		}
		this.uiDialog.position( this.options.position );
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in that.sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in that.resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		});

		if ( resize ) {
			this._size();
			this._position();
		}
		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "dialogClass" ) {
			uiDialog
				.removeClass( this.options.dialogClass )
				.addClass( value );
		}

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button({
				// Ensure that we always pass a string
				label: "" + value
			});
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is( ":data(ui-draggable)" );
			if ( isDraggable && !value ) {
				uiDialog.draggable( "destroy" );
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}

		if ( key === "resizable" ) {
			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is( ":data(ui-resizable)" );
			if ( isResizable && !value ) {
				uiDialog.resizable( "destroy" );
			}

			// currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
		}
	},

	_size: function() {
		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		this.element.show().css({
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		});

		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css({
				height: "auto",
				width: options.width
			})
			.outerHeight();
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css({
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			});
		} else {
			this.element.height( Math.max( 0, options.height - nonContentHeight ) );
		}

		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map(function() {
			var iframe = $( this );

			return $( "<div>" )
				.css({
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				})
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[0];
		});
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest( ".ui-dialog" ).length ) {
			return true;
		}

		// TODO: Remove hack when datepicker implements
		// the .ui-front logic (#8989)
		return !!$( event.target ).closest( ".ui-datepicker" ).length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		// We use a delay in case the overlay is created from an
		// event that we're going to be cancelling (#2804)
		var isOpening = true;
		this._delay(function() {
			isOpening = false;
		});

		if ( !this.document.data( "ui-dialog-overlays" ) ) {

			// Prevent use of anchors and inputs
			// Using _on() for an event handler shared across many instances is
			// safe because the dialogs stack and must be closed in reverse order
			this._on( this.document, {
				focusin: function( event ) {
					if ( isOpening ) {
						return;
					}

					if ( !this._allowInteraction( event ) ) {
						event.preventDefault();
						this._trackingInstances()[ 0 ]._focusTabbable();
					}
				}
			});
		}

		this.overlay = $( "<div>" )
			.addClass( "ui-widget-overlay ui-front" )
			.appendTo( this._appendTo() );
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		});
		this.document.data( "ui-dialog-overlays",
			(this.document.data( "ui-dialog-overlays" ) || 0) + 1 );
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			var overlays = this.document.data( "ui-dialog-overlays" ) - 1;

			if ( !overlays ) {
				this.document
					.unbind( "focusin" )
					.removeData( "ui-dialog-overlays" );
			} else {
				this.document.data( "ui-dialog-overlays", overlays );
			}

			this.overlay.remove();
			this.overlay = null;
		}
	}
});


/*!
 * jQuery UI Droppable 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/droppable/
 */


$.widget( "ui.droppable", {
	version: "1.11.2",
	widgetEventPrefix: "drop",
	options: {
		accept: "*",
		activeClass: false,
		addClasses: true,
		greedy: false,
		hoverClass: false,
		scope: "default",
		tolerance: "intersect",

		// callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = $.isFunction( accept ) ? accept : function( d ) {
			return d.is( accept );
		};

		this.proportions = function( /* valueToWrite */ ) {
			if ( arguments.length ) {
				// Store the droppable's proportions
				proportions = arguments[ 0 ];
			} else {
				// Retrieve or derive the droppable's proportions
				return proportions ?
					proportions :
					proportions = {
						width: this.element[ 0 ].offsetWidth,
						height: this.element[ 0 ].offsetHeight
					};
			}
		};

		this._addToManager( o.scope );

		o.addClasses && this.element.addClass( "ui-droppable" );

	},

	_addToManager: function( scope ) {
		// Add the reference and positions to the manager
		$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
		$.ui.ddmanager.droppables[ scope ].push( this );
	},

	_splice: function( drop ) {
		var i = 0;
		for ( ; i < drop.length; i++ ) {
			if ( drop[ i ] === this ) {
				drop.splice( i, 1 );
			}
		}
	},

	_destroy: function() {
		var drop = $.ui.ddmanager.droppables[ this.options.scope ];

		this._splice( drop );

		this.element.removeClass( "ui-droppable ui-droppable-disabled" );
	},

	_setOption: function( key, value ) {

		if ( key === "accept" ) {
			this.accept = $.isFunction( value ) ? value : function( d ) {
				return d.is( value );
			};
		} else if ( key === "scope" ) {
			var drop = $.ui.ddmanager.droppables[ this.options.scope ];

			this._splice( drop );
			this._addToManager( value );
		}

		this._super( key, value );
	},

	_activate: function( event ) {
		var draggable = $.ui.ddmanager.current;
		if ( this.options.activeClass ) {
			this.element.addClass( this.options.activeClass );
		}
		if ( draggable ){
			this._trigger( "activate", event, this.ui( draggable ) );
		}
	},

	_deactivate: function( event ) {
		var draggable = $.ui.ddmanager.current;
		if ( this.options.activeClass ) {
			this.element.removeClass( this.options.activeClass );
		}
		if ( draggable ){
			this._trigger( "deactivate", event, this.ui( draggable ) );
		}
	},

	_over: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
			if ( this.options.hoverClass ) {
				this.element.addClass( this.options.hoverClass );
			}
			this._trigger( "over", event, this.ui( draggable ) );
		}

	},

	_out: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
			if ( this.options.hoverClass ) {
				this.element.removeClass( this.options.hoverClass );
			}
			this._trigger( "out", event, this.ui( draggable ) );
		}

	},

	_drop: function( event, custom ) {

		var draggable = custom || $.ui.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return false;
		}

		this.element.find( ":data(ui-droppable)" ).not( ".ui-draggable-dragging" ).each(function() {
			var inst = $( this ).droppable( "instance" );
			if (
				inst.options.greedy &&
				!inst.options.disabled &&
				inst.options.scope === draggable.options.scope &&
				inst.accept.call( inst.element[ 0 ], ( draggable.currentItem || draggable.element ) ) &&
				$.ui.intersect( draggable, $.extend( inst, { offset: inst.element.offset() } ), inst.options.tolerance, event )
			) { childrenIntersection = true; return false; }
		});
		if ( childrenIntersection ) {
			return false;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
			if ( this.options.activeClass ) {
				this.element.removeClass( this.options.activeClass );
			}
			if ( this.options.hoverClass ) {
				this.element.removeClass( this.options.hoverClass );
			}
			this._trigger( "drop", event, this.ui( draggable ) );
			return this.element;
		}

		return false;

	},

	ui: function( c ) {
		return {
			draggable: ( c.currentItem || c.element ),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	}

});

$.ui.intersect = (function() {
	function isOverAxis( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	}

	return function( draggable, droppable, toleranceMode, event ) {

		if ( !droppable.offset ) {
			return false;
		}

		var x1 = ( draggable.positionAbs || draggable.position.absolute ).left + draggable.margins.left,
			y1 = ( draggable.positionAbs || draggable.position.absolute ).top + draggable.margins.top,
			x2 = x1 + draggable.helperProportions.width,
			y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left,
			t = droppable.offset.top,
			r = l + droppable.proportions().width,
			b = t + droppable.proportions().height;

		switch ( toleranceMode ) {
		case "fit":
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
		case "intersect":
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
		case "pointer":
			return isOverAxis( event.pageY, t, droppable.proportions().height ) && isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":
			return (
				( y1 >= t && y1 <= b ) || // Top edge touching
				( y2 >= t && y2 <= b ) || // Bottom edge touching
				( y1 < t && y2 > b ) // Surrounded vertically
			) && (
				( x1 >= l && x1 <= r ) || // Left edge touching
				( x2 >= l && x2 <= r ) || // Right edge touching
				( x1 < l && x2 > r ) // Surrounded horizontally
			);
		default:
			return false;
		}
	};
})();

/*
	This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function( t, event ) {

		var i, j,
			m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
			type = event ? event.type : null, // workaround for #2317
			list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();

		droppablesLoop: for ( i = 0; i < m.length; i++ ) {

			// No disabled and non-accepted
			if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ], ( t.currentItem || t.element ) ) ) ) {
				continue;
			}

			// Filter out elements in the current dragged item
			for ( j = 0; j < list.length; j++ ) {
				if ( list[ j ] === m[ i ].element[ 0 ] ) {
					m[ i ].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
			if ( !m[ i ].visible ) {
				continue;
			}

			// Activate the droppable if used directly from draggables
			if ( type === "mousedown" ) {
				m[ i ]._activate.call( m[ i ], event );
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions({ width: m[ i ].element[ 0 ].offsetWidth, height: m[ i ].element[ 0 ].offsetHeight });

		}

	},
	drop: function( draggable, event ) {

		var dropped = false;
		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {

			if ( !this.options ) {
				return;
			}
			if ( !this.options.disabled && this.visible && $.ui.intersect( draggable, this, this.options.tolerance, event ) ) {
				dropped = this._drop.call( this, event ) || dropped;
			}

			if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call( this, event );
			}

		});
		return dropped;

	},
	dragStart: function( draggable, event ) {
		// Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
			if ( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		});
	},
	drag: function( draggable, event ) {

		// If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
		if ( draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}

		// Run through all droppables and check their positions based on specific tolerance options
		$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

			if ( this.options.disabled || this.greedyChild || !this.visible ) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = $.ui.intersect( draggable, this, this.options.tolerance, event ),
				c = !intersects && this.isover ? "isout" : ( intersects && !this.isover ? "isover" : null );
			if ( !c ) {
				return;
			}

			if ( this.options.greedy ) {
				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents( ":data(ui-droppable)" ).filter(function() {
					return $( this ).droppable( "instance" ).options.scope === scope;
				});

				if ( parent.length ) {
					parentInstance = $( parent[ 0 ] ).droppable( "instance" );
					parentInstance.greedyChild = ( c === "isover" );
				}
			}

			// we just moved into a greedy child
			if ( parentInstance && c === "isover" ) {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call( parentInstance, event );
			}

			this[ c ] = true;
			this[c === "isout" ? "isover" : "isout"] = false;
			this[c === "isover" ? "_over" : "_out"].call( this, event );

			// we just moved out of a greedy child
			if ( parentInstance && c === "isout" ) {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call( parentInstance, event );
			}
		});

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
		// Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
		if ( !draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

var droppable = $.ui.droppable;


/*!
 * jQuery UI Effects 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/effects-core/
 */


var dataSpace = "ui-effects-",

	// Create a local jQuery because jQuery Color relies on it and the
	// global may not exist with AMD and a custom build (#10199)
	jQuery = $;

$.effects = {
	effect: {}
};

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
(function( jQuery, undefined ) {

	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

	// plusequals test for += 100 -= 100
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
	// a set of RE's that can match strings and generate color tuples.
	stringParsers = [ {
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ],
					execResult[ 3 ],
					execResult[ 4 ]
				];
			}
		}, {
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ] * 2.55,
					execResult[ 2 ] * 2.55,
					execResult[ 3 ] * 2.55,
					execResult[ 4 ]
				];
			}
		}, {
			// this regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ], 16 )
				];
			}
		}, {
			// this regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
				];
			}
		}, {
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			space: "hsla",
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ] / 100,
					execResult[ 3 ] / 100,
					execResult[ 4 ]
				];
			}
		} ],

	// jQuery.Color( )
	color = jQuery.Color = function( color, green, blue, alpha ) {
		return new jQuery.Color.fn.parse( color, green, blue, alpha );
	},
	spaces = {
		rgba: {
			props: {
				red: {
					idx: 0,
					type: "byte"
				},
				green: {
					idx: 1,
					type: "byte"
				},
				blue: {
					idx: 2,
					type: "byte"
				}
			}
		},

		hsla: {
			props: {
				hue: {
					idx: 0,
					type: "degrees"
				},
				saturation: {
					idx: 1,
					type: "percent"
				},
				lightness: {
					idx: 2,
					type: "percent"
				}
			}
		}
	},
	propTypes = {
		"byte": {
			floor: true,
			max: 255
		},
		"percent": {
			max: 1
		},
		"degrees": {
			mod: 360,
			floor: true
		}
	},
	support = color.support = {},

	// element for support tests
	supportElem = jQuery( "<p>" )[ 0 ],

	// colors = jQuery.Color.names
	colors,

	// local aliases of functions called often
	each = jQuery.each;

// determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
	space.cache = "_" + spaceName;
	space.props.alpha = {
		idx: 3,
		type: "percent",
		def: 1
	};
});

function clamp( value, prop, allowEmpty ) {
	var type = propTypes[ prop.type ] || {};

	if ( value == null ) {
		return (allowEmpty || !prop.def) ? null : prop.def;
	}

	// ~~ is an short way of doing floor for positive numbers
	value = type.floor ? ~~value : parseFloat( value );

	// IE will pass in empty strings as value for alpha,
	// which will hit this case
	if ( isNaN( value ) ) {
		return prop.def;
	}

	if ( type.mod ) {
		// we add mod before modding to make sure that negatives values
		// get converted properly: -10 -> 350
		return (value + type.mod) % type.mod;
	}

	// for now all property types without mod have min and max
	return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
	var inst = color(),
		rgba = inst._rgba = [];

	string = string.toLowerCase();

	each( stringParsers, function( i, parser ) {
		var parsed,
			match = parser.re.exec( string ),
			values = match && parser.parse( match ),
			spaceName = parser.space || "rgba";

		if ( values ) {
			parsed = inst[ spaceName ]( values );

			// if this was an rgba parse the assignment might happen twice
			// oh well....
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
			rgba = inst._rgba = parsed._rgba;

			// exit each( stringParsers ) here because we matched
			return false;
		}
	});

	// Found a stringParser that handled it
	if ( rgba.length ) {

		// if this came from a parsed string, force "transparent" when alpha is 0
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
		if ( rgba.join() === "0,0,0,0" ) {
			jQuery.extend( rgba, colors.transparent );
		}
		return inst;
	}

	// named colors
	return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
	parse: function( red, green, blue, alpha ) {
		if ( red === undefined ) {
			this._rgba = [ null, null, null, null ];
			return this;
		}
		if ( red.jquery || red.nodeType ) {
			red = jQuery( red ).css( green );
			green = undefined;
		}

		var inst = this,
			type = jQuery.type( red ),
			rgba = this._rgba = [];

		// more than 1 argument specified - assume ( red, green, blue, alpha )
		if ( green !== undefined ) {
			red = [ red, green, blue, alpha ];
			type = "array";
		}

		if ( type === "string" ) {
			return this.parse( stringParse( red ) || colors._default );
		}

		if ( type === "array" ) {
			each( spaces.rgba.props, function( key, prop ) {
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
			});
			return this;
		}

		if ( type === "object" ) {
			if ( red instanceof color ) {
				each( spaces, function( spaceName, space ) {
					if ( red[ space.cache ] ) {
						inst[ space.cache ] = red[ space.cache ].slice();
					}
				});
			} else {
				each( spaces, function( spaceName, space ) {
					var cache = space.cache;
					each( space.props, function( key, prop ) {

						// if the cache doesn't exist, and we know how to convert
						if ( !inst[ cache ] && space.to ) {

							// if the value was null, we don't need to copy it
							// if the key was alpha, we don't need to copy it either
							if ( key === "alpha" || red[ key ] == null ) {
								return;
							}
							inst[ cache ] = space.to( inst._rgba );
						}

						// this is the only case where we allow nulls for ALL properties.
						// call clamp with alwaysAllowEmpty
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
					});

					// everything defined but alpha?
					if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
						// use the default of 1
						inst[ cache ][ 3 ] = 1;
						if ( space.from ) {
							inst._rgba = space.from( inst[ cache ] );
						}
					}
				});
			}
			return this;
		}
	},
	is: function( compare ) {
		var is = color( compare ),
			same = true,
			inst = this;

		each( spaces, function( _, space ) {
			var localCache,
				isCache = is[ space.cache ];
			if (isCache) {
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
				each( space.props, function( _, prop ) {
					if ( isCache[ prop.idx ] != null ) {
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
						return same;
					}
				});
			}
			return same;
		});
		return same;
	},
	_space: function() {
		var used = [],
			inst = this;
		each( spaces, function( spaceName, space ) {
			if ( inst[ space.cache ] ) {
				used.push( spaceName );
			}
		});
		return used.pop();
	},
	transition: function( other, distance ) {
		var end = color( other ),
			spaceName = end._space(),
			space = spaces[ spaceName ],
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
			start = startColor[ space.cache ] || space.to( startColor._rgba ),
			result = start.slice();

		end = end[ space.cache ];
		each( space.props, function( key, prop ) {
			var index = prop.idx,
				startValue = start[ index ],
				endValue = end[ index ],
				type = propTypes[ prop.type ] || {};

			// if null, don't override start value
			if ( endValue === null ) {
				return;
			}
			// if null - use end
			if ( startValue === null ) {
				result[ index ] = endValue;
			} else {
				if ( type.mod ) {
					if ( endValue - startValue > type.mod / 2 ) {
						startValue += type.mod;
					} else if ( startValue - endValue > type.mod / 2 ) {
						startValue -= type.mod;
					}
				}
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
			}
		});
		return this[ spaceName ]( result );
	},
	blend: function( opaque ) {
		// if we are already opaque - return ourself
		if ( this._rgba[ 3 ] === 1 ) {
			return this;
		}

		var rgb = this._rgba.slice(),
			a = rgb.pop(),
			blend = color( opaque )._rgba;

		return color( jQuery.map( rgb, function( v, i ) {
			return ( 1 - a ) * blend[ i ] + a * v;
		}));
	},
	toRgbaString: function() {
		var prefix = "rgba(",
			rgba = jQuery.map( this._rgba, function( v, i ) {
				return v == null ? ( i > 2 ? 1 : 0 ) : v;
			});

		if ( rgba[ 3 ] === 1 ) {
			rgba.pop();
			prefix = "rgb(";
		}

		return prefix + rgba.join() + ")";
	},
	toHslaString: function() {
		var prefix = "hsla(",
			hsla = jQuery.map( this.hsla(), function( v, i ) {
				if ( v == null ) {
					v = i > 2 ? 1 : 0;
				}

				// catch 1 and 2
				if ( i && i < 3 ) {
					v = Math.round( v * 100 ) + "%";
				}
				return v;
			});

		if ( hsla[ 3 ] === 1 ) {
			hsla.pop();
			prefix = "hsl(";
		}
		return prefix + hsla.join() + ")";
	},
	toHexString: function( includeAlpha ) {
		var rgba = this._rgba.slice(),
			alpha = rgba.pop();

		if ( includeAlpha ) {
			rgba.push( ~~( alpha * 255 ) );
		}

		return "#" + jQuery.map( rgba, function( v ) {

			// default to 0 when nulls exist
			v = ( v || 0 ).toString( 16 );
			return v.length === 1 ? "0" + v : v;
		}).join("");
	},
	toString: function() {
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
	}
});
color.fn.parse.prototype = color.fn;

// hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
	h = ( h + 1 ) % 1;
	if ( h * 6 < 1 ) {
		return p + ( q - p ) * h * 6;
	}
	if ( h * 2 < 1) {
		return q;
	}
	if ( h * 3 < 2 ) {
		return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
	}
	return p;
}

spaces.hsla.to = function( rgba ) {
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
		return [ null, null, null, rgba[ 3 ] ];
	}
	var r = rgba[ 0 ] / 255,
		g = rgba[ 1 ] / 255,
		b = rgba[ 2 ] / 255,
		a = rgba[ 3 ],
		max = Math.max( r, g, b ),
		min = Math.min( r, g, b ),
		diff = max - min,
		add = max + min,
		l = add * 0.5,
		h, s;

	if ( min === max ) {
		h = 0;
	} else if ( r === max ) {
		h = ( 60 * ( g - b ) / diff ) + 360;
	} else if ( g === max ) {
		h = ( 60 * ( b - r ) / diff ) + 120;
	} else {
		h = ( 60 * ( r - g ) / diff ) + 240;
	}

	// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
	if ( diff === 0 ) {
		s = 0;
	} else if ( l <= 0.5 ) {
		s = diff / add;
	} else {
		s = diff / ( 2 - add );
	}
	return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function( hsla ) {
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
		return [ null, null, null, hsla[ 3 ] ];
	}
	var h = hsla[ 0 ] / 360,
		s = hsla[ 1 ],
		l = hsla[ 2 ],
		a = hsla[ 3 ],
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
		p = 2 * l - q;

	return [
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
		Math.round( hue2rgb( p, q, h ) * 255 ),
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
		a
	];
};

each( spaces, function( spaceName, space ) {
	var props = space.props,
		cache = space.cache,
		to = space.to,
		from = space.from;

	// makes rgba() and hsla()
	color.fn[ spaceName ] = function( value ) {

		// generate a cache for this space if it doesn't exist
		if ( to && !this[ cache ] ) {
			this[ cache ] = to( this._rgba );
		}
		if ( value === undefined ) {
			return this[ cache ].slice();
		}

		var ret,
			type = jQuery.type( value ),
			arr = ( type === "array" || type === "object" ) ? value : arguments,
			local = this[ cache ].slice();

		each( props, function( key, prop ) {
			var val = arr[ type === "object" ? key : prop.idx ];
			if ( val == null ) {
				val = local[ prop.idx ];
			}
			local[ prop.idx ] = clamp( val, prop );
		});

		if ( from ) {
			ret = color( from( local ) );
			ret[ cache ] = local;
			return ret;
		} else {
			return color( local );
		}
	};

	// makes red() green() blue() alpha() hue() saturation() lightness()
	each( props, function( key, prop ) {
		// alpha is included in more than one space
		if ( color.fn[ key ] ) {
			return;
		}
		color.fn[ key ] = function( value ) {
			var vtype = jQuery.type( value ),
				fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
				local = this[ fn ](),
				cur = local[ prop.idx ],
				match;

			if ( vtype === "undefined" ) {
				return cur;
			}

			if ( vtype === "function" ) {
				value = value.call( this, cur );
				vtype = jQuery.type( value );
			}
			if ( value == null && prop.empty ) {
				return this;
			}
			if ( vtype === "string" ) {
				match = rplusequals.exec( value );
				if ( match ) {
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
				}
			}
			local[ prop.idx ] = value;
			return this[ fn ]( local );
		};
	});
});

// add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
	var hooks = hook.split( " " );
	each( hooks, function( i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, curElem,
					backgroundColor = "";

				if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						while (
							(backgroundColor === "" || backgroundColor === "transparent") &&
							curElem && curElem.style
						) {
							try {
								backgroundColor = jQuery.css( curElem, "backgroundColor" );
								curElem = curElem.parentNode;
							} catch ( e ) {
							}
						}

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				try {
					elem.style[ hook ] = value;
				} catch ( e ) {
					// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
				}
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	});

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
	expand: function( value ) {
		var expanded = {};

		each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
			expanded[ "border" + part + "Color" ] = value;
		});
		return expanded;
	}
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {
	// 4.1. Basic color keywords
	aqua: "#00ffff",
	black: "#000000",
	blue: "#0000ff",
	fuchsia: "#ff00ff",
	gray: "#808080",
	green: "#008000",
	lime: "#00ff00",
	maroon: "#800000",
	navy: "#000080",
	olive: "#808000",
	purple: "#800080",
	red: "#ff0000",
	silver: "#c0c0c0",
	teal: "#008080",
	white: "#ffffff",
	yellow: "#ffff00",

	// 4.2.3. "transparent" color keyword
	transparent: [ null, null, null, 0 ],

	_default: "#ffffff"
};

})( jQuery );

/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
(function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
	shorthandStyles = {
		border: 1,
		borderBottom: 1,
		borderColor: 1,
		borderLeft: 1,
		borderRight: 1,
		borderTop: 1,
		borderWidth: 1,
		margin: 1,
		padding: 1
	};

$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
	$.fx.step[ prop ] = function( fx ) {
		if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
			jQuery.style( fx.elem, prop, fx.end );
			fx.setAttr = true;
		}
	};
});

function getElementStyles( elem ) {
	var key, len,
		style = elem.ownerDocument.defaultView ?
			elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
			elem.currentStyle,
		styles = {};

	if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
		len = style.length;
		while ( len-- ) {
			key = style[ len ];
			if ( typeof style[ key ] === "string" ) {
				styles[ $.camelCase( key ) ] = style[ key ];
			}
		}
	// support: Opera, IE <9
	} else {
		for ( key in style ) {
			if ( typeof style[ key ] === "string" ) {
				styles[ key ] = style[ key ];
			}
		}
	}

	return styles;
}

function styleDifference( oldStyle, newStyle ) {
	var diff = {},
		name, value;

	for ( name in newStyle ) {
		value = newStyle[ name ];
		if ( oldStyle[ name ] !== value ) {
			if ( !shorthandStyles[ name ] ) {
				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
					diff[ name ] = value;
				}
			}
		}
	}

	return diff;
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

$.effects.animateClass = function( value, duration, easing, callback ) {
	var o = $.speed( duration, easing, callback );

	return this.queue( function() {
		var animated = $( this ),
			baseClass = animated.attr( "class" ) || "",
			applyClassChange,
			allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

		// map the animated objects to store the original styles.
		allAnimations = allAnimations.map(function() {
			var el = $( this );
			return {
				el: el,
				start: getElementStyles( this )
			};
		});

		// apply class change
		applyClassChange = function() {
			$.each( classAnimationActions, function(i, action) {
				if ( value[ action ] ) {
					animated[ action + "Class" ]( value[ action ] );
				}
			});
		};
		applyClassChange();

		// map all animated objects again - calculate new styles and diff
		allAnimations = allAnimations.map(function() {
			this.end = getElementStyles( this.el[ 0 ] );
			this.diff = styleDifference( this.start, this.end );
			return this;
		});

		// apply original class
		animated.attr( "class", baseClass );

		// map all animated objects again - this time collecting a promise
		allAnimations = allAnimations.map(function() {
			var styleInfo = this,
				dfd = $.Deferred(),
				opts = $.extend({}, o, {
					queue: false,
					complete: function() {
						dfd.resolve( styleInfo );
					}
				});

			this.el.animate( this.diff, opts );
			return dfd.promise();
		});

		// once all animations have completed:
		$.when.apply( $, allAnimations.get() ).done(function() {

			// set the final class
			applyClassChange();

			// for each animated element,
			// clear all css properties that were animated
			$.each( arguments, function() {
				var el = this.el;
				$.each( this.diff, function(key) {
					el.css( key, "" );
				});
			});

			// this is guarnteed to be there if you use jQuery.speed()
			// it also handles dequeuing the next anim...
			o.complete.call( animated[ 0 ] );
		});
	});
};

$.fn.extend({
	addClass: (function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return speed ?
				$.effects.animateClass.call( this,
					{ add: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	})( $.fn.addClass ),

	removeClass: (function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return arguments.length > 1 ?
				$.effects.animateClass.call( this,
					{ remove: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	})( $.fn.removeClass ),

	toggleClass: (function( orig ) {
		return function( classNames, force, speed, easing, callback ) {
			if ( typeof force === "boolean" || force === undefined ) {
				if ( !speed ) {
					// without speed parameter
					return orig.apply( this, arguments );
				} else {
					return $.effects.animateClass.call( this,
						(force ? { add: classNames } : { remove: classNames }),
						speed, easing, callback );
				}
			} else {
				// without force parameter
				return $.effects.animateClass.call( this,
					{ toggle: classNames }, force, speed, easing );
			}
		};
	})( $.fn.toggleClass ),

	switchClass: function( remove, add, speed, easing, callback) {
		return $.effects.animateClass.call( this, {
			add: add,
			remove: remove
		}, speed, easing, callback );
	}
});

})();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

(function() {

$.extend( $.effects, {
	version: "1.11.2",

	// Saves a set of properties in a data storage
	save: function( element, set ) {
		for ( var i = 0; i < set.length; i++ ) {
			if ( set[ i ] !== null ) {
				element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
			}
		}
	},

	// Restores a set of previously saved properties from a data storage
	restore: function( element, set ) {
		var val, i;
		for ( i = 0; i < set.length; i++ ) {
			if ( set[ i ] !== null ) {
				val = element.data( dataSpace + set[ i ] );
				// support: jQuery 1.6.2
				// http://bugs.jquery.com/ticket/9917
				// jQuery 1.6.2 incorrectly returns undefined for any falsy value.
				// We can't differentiate between "" and 0 here, so we just assume
				// empty string since it's likely to be a more common value...
				if ( val === undefined ) {
					val = "";
				}
				element.css( set[ i ], val );
			}
		}
	},

	setMode: function( el, mode ) {
		if (mode === "toggle") {
			mode = el.is( ":hidden" ) ? "show" : "hide";
		}
		return mode;
	},

	// Translates a [top,left] array into a baseline value
	// this should be a little more flexible in the future to handle a string & hash
	getBaseline: function( origin, original ) {
		var y, x;
		switch ( origin[ 0 ] ) {
			case "top": y = 0; break;
			case "middle": y = 0.5; break;
			case "bottom": y = 1; break;
			default: y = origin[ 0 ] / original.height;
		}
		switch ( origin[ 1 ] ) {
			case "left": x = 0; break;
			case "center": x = 0.5; break;
			case "right": x = 1; break;
			default: x = origin[ 1 ] / original.width;
		}
		return {
			x: x,
			y: y
		};
	},

	// Wraps the element around a wrapper that copies position properties
	createWrapper: function( element ) {

		// if the element is already wrapped, return it
		if ( element.parent().is( ".ui-effects-wrapper" )) {
			return element.parent();
		}

		// wrap the element
		var props = {
				width: element.outerWidth(true),
				height: element.outerHeight(true),
				"float": element.css( "float" )
			},
			wrapper = $( "<div></div>" )
				.addClass( "ui-effects-wrapper" )
				.css({
					fontSize: "100%",
					background: "transparent",
					border: "none",
					margin: 0,
					padding: 0
				}),
			// Store the size in case width/height are defined in % - Fixes #5245
			size = {
				width: element.width(),
				height: element.height()
			},
			active = document.activeElement;

		// support: Firefox
		// Firefox incorrectly exposes anonymous content
		// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
		try {
			active.id;
		} catch ( e ) {
			active = document.body;
		}

		element.wrap( wrapper );

		// Fixes #7595 - Elements lose focus when wrapped.
		if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
			$( active ).focus();
		}

		wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

		// transfer positioning properties to the wrapper
		if ( element.css( "position" ) === "static" ) {
			wrapper.css({ position: "relative" });
			element.css({ position: "relative" });
		} else {
			$.extend( props, {
				position: element.css( "position" ),
				zIndex: element.css( "z-index" )
			});
			$.each([ "top", "left", "bottom", "right" ], function(i, pos) {
				props[ pos ] = element.css( pos );
				if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
					props[ pos ] = "auto";
				}
			});
			element.css({
				position: "relative",
				top: 0,
				left: 0,
				right: "auto",
				bottom: "auto"
			});
		}
		element.css(size);

		return wrapper.css( props ).show();
	},

	removeWrapper: function( element ) {
		var active = document.activeElement;

		if ( element.parent().is( ".ui-effects-wrapper" ) ) {
			element.parent().replaceWith( element );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).focus();
			}
		}

		return element;
	},

	setTransition: function( element, list, factor, value ) {
		value = value || {};
		$.each( list, function( i, x ) {
			var unit = element.cssUnit( x );
			if ( unit[ 0 ] > 0 ) {
				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
			}
		});
		return value;
	}
});

// return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

	// allow passing all options as the first parameter
	if ( $.isPlainObject( effect ) ) {
		options = effect;
		effect = effect.effect;
	}

	// convert to an object
	effect = { effect: effect };

	// catch (effect, null, ...)
	if ( options == null ) {
		options = {};
	}

	// catch (effect, callback)
	if ( $.isFunction( options ) ) {
		callback = options;
		speed = null;
		options = {};
	}

	// catch (effect, speed, ?)
	if ( typeof options === "number" || $.fx.speeds[ options ] ) {
		callback = speed;
		speed = options;
		options = {};
	}

	// catch (effect, options, callback)
	if ( $.isFunction( speed ) ) {
		callback = speed;
		speed = null;
	}

	// add options to effect
	if ( options ) {
		$.extend( effect, options );
	}

	speed = speed || options.duration;
	effect.duration = $.fx.off ? 0 :
		typeof speed === "number" ? speed :
		speed in $.fx.speeds ? $.fx.speeds[ speed ] :
		$.fx.speeds._default;

	effect.complete = callback || options.complete;

	return effect;
}

function standardAnimationOption( option ) {
	// Valid standard speeds (nothing, number, named speed)
	if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
		return true;
	}

	// Invalid strings - treat as "normal" speed
	if ( typeof option === "string" && !$.effects.effect[ option ] ) {
		return true;
	}

	// Complete callback
	if ( $.isFunction( option ) ) {
		return true;
	}

	// Options hash (but not naming an effect)
	if ( typeof option === "object" && !option.effect ) {
		return true;
	}

	// Didn't match any standard API
	return false;
}

$.fn.extend({
	effect: function( /* effect, options, speed, callback */ ) {
		var args = _normalizeArguments.apply( this, arguments ),
			mode = args.mode,
			queue = args.queue,
			effectMethod = $.effects.effect[ args.effect ];

		if ( $.fx.off || !effectMethod ) {
			// delegate to the original method (e.g., .show()) if possible
			if ( mode ) {
				return this[ mode ]( args.duration, args.complete );
			} else {
				return this.each( function() {
					if ( args.complete ) {
						args.complete.call( this );
					}
				});
			}
		}

		function run( next ) {
			var elem = $( this ),
				complete = args.complete,
				mode = args.mode;

			function done() {
				if ( $.isFunction( complete ) ) {
					complete.call( elem[0] );
				}
				if ( $.isFunction( next ) ) {
					next();
				}
			}

			// If the element already has the correct final state, delegate to
			// the core methods so the internal tracking of "olddisplay" works.
			if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
				elem[ mode ]();
				done();
			} else {
				effectMethod.call( elem[0], args, done );
			}
		}

		return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
	},

	show: (function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "show";
				return this.effect.call( this, args );
			}
		};
	})( $.fn.show ),

	hide: (function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "hide";
				return this.effect.call( this, args );
			}
		};
	})( $.fn.hide ),

	toggle: (function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "toggle";
				return this.effect.call( this, args );
			}
		};
	})( $.fn.toggle ),

	// helper functions
	cssUnit: function(key) {
		var style = this.css( key ),
			val = [];

		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
			if ( style.indexOf( unit ) > 0 ) {
				val = [ parseFloat( style ), unit ];
			}
		});
		return val;
	}
});

})();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

(function() {

// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
});

$.extend( baseEasings, {
	Sine: function( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function( p ) {
		var pow2,
			bounce = 4;

		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
});

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p < 0.5 ?
			easeIn( p * 2 ) / 2 :
			1 - easeIn( p * -2 + 2 ) / 2;
	};
});

})();

var effect = $.effects;


/*!
 * jQuery UI Effects Blind 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/blind-effect/
 */


var effectBlind = $.effects.effect.blind = function( o, done ) {
	// Create element
	var el = $( this ),
		rvertical = /up|down|vertical/,
		rpositivemotion = /up|left|vertical|horizontal/,
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "hide" ),
		direction = o.direction || "up",
		vertical = rvertical.test( direction ),
		ref = vertical ? "height" : "width",
		ref2 = vertical ? "top" : "left",
		motion = rpositivemotion.test( direction ),
		animation = {},
		show = mode === "show",
		wrapper, distance, margin;

	// if already wrapped, the wrapper's properties are my property. #6245
	if ( el.parent().is( ".ui-effects-wrapper" ) ) {
		$.effects.save( el.parent(), props );
	} else {
		$.effects.save( el, props );
	}
	el.show();
	wrapper = $.effects.createWrapper( el ).css({
		overflow: "hidden"
	});

	distance = wrapper[ ref ]();
	margin = parseFloat( wrapper.css( ref2 ) ) || 0;

	animation[ ref ] = show ? distance : 0;
	if ( !motion ) {
		el
			.css( vertical ? "bottom" : "right", 0 )
			.css( vertical ? "top" : "left", "auto" )
			.css({ position: "absolute" });

		animation[ ref2 ] = show ? margin : distance + margin;
	}

	// start at 0 if we are showing
	if ( show ) {
		wrapper.css( ref, 0 );
		if ( !motion ) {
			wrapper.css( ref2, margin + distance );
		}
	}

	// Animate
	wrapper.animate( animation, {
		duration: o.duration,
		easing: o.easing,
		queue: false,
		complete: function() {
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		}
	});
};


/*!
 * jQuery UI Effects Bounce 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/bounce-effect/
 */


var effectBounce = $.effects.effect.bounce = function( o, done ) {
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],

		// defaults:
		mode = $.effects.setMode( el, o.mode || "effect" ),
		hide = mode === "hide",
		show = mode === "show",
		direction = o.direction || "up",
		distance = o.distance,
		times = o.times || 5,

		// number of internal animations
		anims = times * 2 + ( show || hide ? 1 : 0 ),
		speed = o.duration / anims,
		easing = o.easing,

		// utility:
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ),
		i,
		upAnim,
		downAnim,

		// we will need to re-assemble the queue to stack our animations in place
		queue = el.queue(),
		queuelen = queue.length;

	// Avoid touching opacity to prevent clearType and PNG issues in IE
	if ( show || hide ) {
		props.push( "opacity" );
	}

	$.effects.save( el, props );
	el.show();
	$.effects.createWrapper( el ); // Create Wrapper

	// default distance for the BIGGEST bounce is the outer Distance / 3
	if ( !distance ) {
		distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
	}

	if ( show ) {
		downAnim = { opacity: 1 };
		downAnim[ ref ] = 0;

		// if we are showing, force opacity 0 and set the initial position
		// then do the "first" animation
		el.css( "opacity", 0 )
			.css( ref, motion ? -distance * 2 : distance * 2 )
			.animate( downAnim, speed, easing );
	}

	// start at the smallest distance if we are hiding
	if ( hide ) {
		distance = distance / Math.pow( 2, times - 1 );
	}

	downAnim = {};
	downAnim[ ref ] = 0;
	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
	for ( i = 0; i < times; i++ ) {
		upAnim = {};
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		el.animate( upAnim, speed, easing )
			.animate( downAnim, speed, easing );

		distance = hide ? distance * 2 : distance / 2;
	}

	// Last Bounce when Hiding
	if ( hide ) {
		upAnim = { opacity: 0 };
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		el.animate( upAnim, speed, easing );
	}

	el.queue(function() {
		if ( hide ) {
			el.hide();
		}
		$.effects.restore( el, props );
		$.effects.removeWrapper( el );
		done();
	});

	// inject all the animations we just queued to be first in line (after "inprogress")
	if ( queuelen > 1) {
		queue.splice.apply( queue,
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
	}
	el.dequeue();

};


/*!
 * jQuery UI Effects Clip 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/clip-effect/
 */


var effectClip = $.effects.effect.clip = function( o, done ) {
	// Create element
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "hide" ),
		show = mode === "show",
		direction = o.direction || "vertical",
		vert = direction === "vertical",
		size = vert ? "height" : "width",
		position = vert ? "top" : "left",
		animation = {},
		wrapper, animate, distance;

	// Save & Show
	$.effects.save( el, props );
	el.show();

	// Create Wrapper
	wrapper = $.effects.createWrapper( el ).css({
		overflow: "hidden"
	});
	animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
	distance = animate[ size ]();

	// Shift
	if ( show ) {
		animate.css( size, 0 );
		animate.css( position, distance / 2 );
	}

	// Create Animation Object:
	animation[ size ] = show ? distance : 0;
	animation[ position ] = show ? 0 : distance / 2;

	// Animate
	animate.animate( animation, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: function() {
			if ( !show ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		}
	});

};


/*!
 * jQuery UI Effects Drop 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/drop-effect/
 */


var effectDrop = $.effects.effect.drop = function( o, done ) {

	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "hide" ),
		show = mode === "show",
		direction = o.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
		animation = {
			opacity: show ? 1 : 0
		},
		distance;

	// Adjust
	$.effects.save( el, props );
	el.show();
	$.effects.createWrapper( el );

	distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;

	if ( show ) {
		el
			.css( "opacity", 0 )
			.css( ref, motion === "pos" ? -distance : distance );
	}

	// Animation
	animation[ ref ] = ( show ?
		( motion === "pos" ? "+=" : "-=" ) :
		( motion === "pos" ? "-=" : "+=" ) ) +
		distance;

	// Animate
	el.animate( animation, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: function() {
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		}
	});
};


/*!
 * jQuery UI Effects Explode 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/explode-effect/
 */


var effectExplode = $.effects.effect.explode = function( o, done ) {

	var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
		cells = rows,
		el = $( this ),
		mode = $.effects.setMode( el, o.mode || "hide" ),
		show = mode === "show",

		// show and then visibility:hidden the element before calculating offset
		offset = el.show().css( "visibility", "hidden" ).offset(),

		// width and height of a piece
		width = Math.ceil( el.outerWidth() / cells ),
		height = Math.ceil( el.outerHeight() / rows ),
		pieces = [],

		// loop
		i, j, left, top, mx, my;

	// children animate complete:
	function childComplete() {
		pieces.push( this );
		if ( pieces.length === rows * cells ) {
			animComplete();
		}
	}

	// clone the element for each row and cell.
	for ( i = 0; i < rows ; i++ ) { // ===>
		top = offset.top + i * height;
		my = i - ( rows - 1 ) / 2 ;

		for ( j = 0; j < cells ; j++ ) { // |||
			left = offset.left + j * width;
			mx = j - ( cells - 1 ) / 2 ;

			// Create a clone of the now hidden main element that will be absolute positioned
			// within a wrapper div off the -left and -top equal to size of our pieces
			el
				.clone()
				.appendTo( "body" )
				.wrap( "<div></div>" )
				.css({
					position: "absolute",
					visibility: "visible",
					left: -j * width,
					top: -i * height
				})

			// select the wrapper - make it overflow: hidden and absolute positioned based on
			// where the original was located +left and +top equal to the size of pieces
				.parent()
				.addClass( "ui-effects-explode" )
				.css({
					position: "absolute",
					overflow: "hidden",
					width: width,
					height: height,
					left: left + ( show ? mx * width : 0 ),
					top: top + ( show ? my * height : 0 ),
					opacity: show ? 0 : 1
				}).animate({
					left: left + ( show ? 0 : mx * width ),
					top: top + ( show ? 0 : my * height ),
					opacity: show ? 1 : 0
				}, o.duration || 500, o.easing, childComplete );
		}
	}

	function animComplete() {
		el.css({
			visibility: "visible"
		});
		$( pieces ).remove();
		if ( !show ) {
			el.hide();
		}
		done();
	}
};


/*!
 * jQuery UI Effects Fade 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/fade-effect/
 */


var effectFade = $.effects.effect.fade = function( o, done ) {
	var el = $( this ),
		mode = $.effects.setMode( el, o.mode || "toggle" );

	el.animate({
		opacity: mode
	}, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: done
	});
};


/*!
 * jQuery UI Effects Fold 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/fold-effect/
 */


var effectFold = $.effects.effect.fold = function( o, done ) {

	// Create element
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "hide" ),
		show = mode === "show",
		hide = mode === "hide",
		size = o.size || 15,
		percent = /([0-9]+)%/.exec( size ),
		horizFirst = !!o.horizFirst,
		widthFirst = show !== horizFirst,
		ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
		duration = o.duration / 2,
		wrapper, distance,
		animation1 = {},
		animation2 = {};

	$.effects.save( el, props );
	el.show();

	// Create Wrapper
	wrapper = $.effects.createWrapper( el ).css({
		overflow: "hidden"
	});
	distance = widthFirst ?
		[ wrapper.width(), wrapper.height() ] :
		[ wrapper.height(), wrapper.width() ];

	if ( percent ) {
		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
	}
	if ( show ) {
		wrapper.css( horizFirst ? {
			height: 0,
			width: size
		} : {
			height: size,
			width: 0
		});
	}

	// Animation
	animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
	animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;

	// Animate
	wrapper
		.animate( animation1, duration, o.easing )
		.animate( animation2, duration, o.easing, function() {
			if ( hide ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		});

};


/*!
 * jQuery UI Effects Highlight 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/highlight-effect/
 */


var effectHighlight = $.effects.effect.highlight = function( o, done ) {
	var elem = $( this ),
		props = [ "backgroundImage", "backgroundColor", "opacity" ],
		mode = $.effects.setMode( elem, o.mode || "show" ),
		animation = {
			backgroundColor: elem.css( "backgroundColor" )
		};

	if (mode === "hide") {
		animation.opacity = 0;
	}

	$.effects.save( elem, props );

	elem
		.show()
		.css({
			backgroundImage: "none",
			backgroundColor: o.color || "#ffff99"
		})
		.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					elem.hide();
				}
				$.effects.restore( elem, props );
				done();
			}
		});
};


/*!
 * jQuery UI Effects Size 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/size-effect/
 */


var effectSize = $.effects.effect.size = function( o, done ) {

	// Create element
	var original, baseline, factor,
		el = $( this ),
		props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],

		// Always restore
		props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],

		// Copy for children
		props2 = [ "width", "height", "overflow" ],
		cProps = [ "fontSize" ],
		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

		// Set options
		mode = $.effects.setMode( el, o.mode || "effect" ),
		restore = o.restore || mode !== "effect",
		scale = o.scale || "both",
		origin = o.origin || [ "middle", "center" ],
		position = el.css( "position" ),
		props = restore ? props0 : props1,
		zero = {
			height: 0,
			width: 0,
			outerHeight: 0,
			outerWidth: 0
		};

	if ( mode === "show" ) {
		el.show();
	}
	original = {
		height: el.height(),
		width: el.width(),
		outerHeight: el.outerHeight(),
		outerWidth: el.outerWidth()
	};

	if ( o.mode === "toggle" && mode === "show" ) {
		el.from = o.to || zero;
		el.to = o.from || original;
	} else {
		el.from = o.from || ( mode === "show" ? zero : original );
		el.to = o.to || ( mode === "hide" ? zero : original );
	}

	// Set scaling factor
	factor = {
		from: {
			y: el.from.height / original.height,
			x: el.from.width / original.width
		},
		to: {
			y: el.to.height / original.height,
			x: el.to.width / original.width
		}
	};

	// Scale the css box
	if ( scale === "box" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			props = props.concat( vProps );
			el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
			el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
		}

		// Horizontal props scaling
		if ( factor.from.x !== factor.to.x ) {
			props = props.concat( hProps );
			el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
			el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
		}
	}

	// Scale the content
	if ( scale === "content" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			props = props.concat( cProps ).concat( props2 );
			el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
			el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
		}
	}

	$.effects.save( el, props );
	el.show();
	$.effects.createWrapper( el );
	el.css( "overflow", "hidden" ).css( el.from );

	// Adjust
	if (origin) { // Calculate baseline shifts
		baseline = $.effects.getBaseline( origin, original );
		el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
		el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
		el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
		el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
	}
	el.css( el.from ); // set top & left

	// Animate
	if ( scale === "content" || scale === "both" ) { // Scale the children

		// Add margins/font-size
		vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
		hProps = hProps.concat([ "marginLeft", "marginRight" ]);
		props2 = props0.concat(vProps).concat(hProps);

		el.find( "*[width]" ).each( function() {
			var child = $( this ),
				c_original = {
					height: child.height(),
					width: child.width(),
					outerHeight: child.outerHeight(),
					outerWidth: child.outerWidth()
				};
			if (restore) {
				$.effects.save(child, props2);
			}

			child.from = {
				height: c_original.height * factor.from.y,
				width: c_original.width * factor.from.x,
				outerHeight: c_original.outerHeight * factor.from.y,
				outerWidth: c_original.outerWidth * factor.from.x
			};
			child.to = {
				height: c_original.height * factor.to.y,
				width: c_original.width * factor.to.x,
				outerHeight: c_original.height * factor.to.y,
				outerWidth: c_original.width * factor.to.x
			};

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
				child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
				child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
			}

			// Animate children
			child.css( child.from );
			child.animate( child.to, o.duration, o.easing, function() {

				// Restore children
				if ( restore ) {
					$.effects.restore( child, props2 );
				}
			});
		});
	}

	// Animate
	el.animate( el.to, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: function() {
			if ( el.to.opacity === 0 ) {
				el.css( "opacity", el.from.opacity );
			}
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			if ( !restore ) {

				// we need to calculate our new positioning based on the scaling
				if ( position === "static" ) {
					el.css({
						position: "relative",
						top: el.to.top,
						left: el.to.left
					});
				} else {
					$.each([ "top", "left" ], function( idx, pos ) {
						el.css( pos, function( _, str ) {
							var val = parseInt( str, 10 ),
								toRef = idx ? el.to.left : el.to.top;

							// if original was "auto", recalculate the new value from wrapper
							if ( str === "auto" ) {
								return toRef + "px";
							}

							return val + toRef + "px";
						});
					});
				}
			}

			$.effects.removeWrapper( el );
			done();
		}
	});

};


/*!
 * jQuery UI Effects Scale 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/scale-effect/
 */


var effectScale = $.effects.effect.scale = function( o, done ) {

	// Create element
	var el = $( this ),
		options = $.extend( true, {}, o ),
		mode = $.effects.setMode( el, o.mode || "effect" ),
		percent = parseInt( o.percent, 10 ) ||
			( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
		direction = o.direction || "both",
		origin = o.origin,
		original = {
			height: el.height(),
			width: el.width(),
			outerHeight: el.outerHeight(),
			outerWidth: el.outerWidth()
		},
		factor = {
			y: direction !== "horizontal" ? (percent / 100) : 1,
			x: direction !== "vertical" ? (percent / 100) : 1
		};

	// We are going to pass this effect to the size effect:
	options.effect = "size";
	options.queue = false;
	options.complete = done;

	// Set default origin and restore for show/hide
	if ( mode !== "effect" ) {
		options.origin = origin || [ "middle", "center" ];
		options.restore = true;
	}

	options.from = o.from || ( mode === "show" ? {
		height: 0,
		width: 0,
		outerHeight: 0,
		outerWidth: 0
	} : original );
	options.to = {
		height: original.height * factor.y,
		width: original.width * factor.x,
		outerHeight: original.outerHeight * factor.y,
		outerWidth: original.outerWidth * factor.x
	};

	// Fade option to support puff
	if ( options.fade ) {
		if ( mode === "show" ) {
			options.from.opacity = 0;
			options.to.opacity = 1;
		}
		if ( mode === "hide" ) {
			options.from.opacity = 1;
			options.to.opacity = 0;
		}
	}

	// Animate
	el.effect( options );

};


/*!
 * jQuery UI Effects Puff 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/puff-effect/
 */


var effectPuff = $.effects.effect.puff = function( o, done ) {
	var elem = $( this ),
		mode = $.effects.setMode( elem, o.mode || "hide" ),
		hide = mode === "hide",
		percent = parseInt( o.percent, 10 ) || 150,
		factor = percent / 100,
		original = {
			height: elem.height(),
			width: elem.width(),
			outerHeight: elem.outerHeight(),
			outerWidth: elem.outerWidth()
		};

	$.extend( o, {
		effect: "scale",
		queue: false,
		fade: true,
		mode: mode,
		complete: done,
		percent: hide ? percent : 100,
		from: hide ?
			original :
			{
				height: original.height * factor,
				width: original.width * factor,
				outerHeight: original.outerHeight * factor,
				outerWidth: original.outerWidth * factor
			}
	});

	elem.effect( o );
};


/*!
 * jQuery UI Effects Pulsate 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/pulsate-effect/
 */


var effectPulsate = $.effects.effect.pulsate = function( o, done ) {
	var elem = $( this ),
		mode = $.effects.setMode( elem, o.mode || "show" ),
		show = mode === "show",
		hide = mode === "hide",
		showhide = ( show || mode === "hide" ),

		// showing or hiding leaves of the "last" animation
		anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
		duration = o.duration / anims,
		animateTo = 0,
		queue = elem.queue(),
		queuelen = queue.length,
		i;

	if ( show || !elem.is(":visible")) {
		elem.css( "opacity", 0 ).show();
		animateTo = 1;
	}

	// anims - 1 opacity "toggles"
	for ( i = 1; i < anims; i++ ) {
		elem.animate({
			opacity: animateTo
		}, duration, o.easing );
		animateTo = 1 - animateTo;
	}

	elem.animate({
		opacity: animateTo
	}, duration, o.easing);

	elem.queue(function() {
		if ( hide ) {
			elem.hide();
		}
		done();
	});

	// We just queued up "anims" animations, we need to put them next in the queue
	if ( queuelen > 1 ) {
		queue.splice.apply( queue,
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
	}
	elem.dequeue();
};


/*!
 * jQuery UI Effects Shake 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/shake-effect/
 */


var effectShake = $.effects.effect.shake = function( o, done ) {

	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "effect" ),
		direction = o.direction || "left",
		distance = o.distance || 20,
		times = o.times || 3,
		anims = times * 2 + 1,
		speed = Math.round( o.duration / anims ),
		ref = (direction === "up" || direction === "down") ? "top" : "left",
		positiveMotion = (direction === "up" || direction === "left"),
		animation = {},
		animation1 = {},
		animation2 = {},
		i,

		// we will need to re-assemble the queue to stack our animations in place
		queue = el.queue(),
		queuelen = queue.length;

	$.effects.save( el, props );
	el.show();
	$.effects.createWrapper( el );

	// Animation
	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

	// Animate
	el.animate( animation, speed, o.easing );

	// Shakes
	for ( i = 1; i < times; i++ ) {
		el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
	}
	el
		.animate( animation1, speed, o.easing )
		.animate( animation, speed / 2, o.easing )
		.queue(function() {
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		});

	// inject all the animations we just queued to be first in line (after "inprogress")
	if ( queuelen > 1) {
		queue.splice.apply( queue,
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
	}
	el.dequeue();

};


/*!
 * jQuery UI Effects Slide 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/slide-effect/
 */


var effectSlide = $.effects.effect.slide = function( o, done ) {

	// Create element
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
		mode = $.effects.setMode( el, o.mode || "show" ),
		show = mode === "show",
		direction = o.direction || "left",
		ref = (direction === "up" || direction === "down") ? "top" : "left",
		positiveMotion = (direction === "up" || direction === "left"),
		distance,
		animation = {};

	// Adjust
	$.effects.save( el, props );
	el.show();
	distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );

	$.effects.createWrapper( el ).css({
		overflow: "hidden"
	});

	if ( show ) {
		el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
	}

	// Animation
	animation[ ref ] = ( show ?
		( positiveMotion ? "+=" : "-=") :
		( positiveMotion ? "-=" : "+=")) +
		distance;

	// Animate
	el.animate( animation, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: function() {
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		}
	});
};


/*!
 * jQuery UI Effects Transfer 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/transfer-effect/
 */


var effectTransfer = $.effects.effect.transfer = function( o, done ) {
	var elem = $( this ),
		target = $( o.to ),
		targetFixed = target.css( "position" ) === "fixed",
		body = $("body"),
		fixTop = targetFixed ? body.scrollTop() : 0,
		fixLeft = targetFixed ? body.scrollLeft() : 0,
		endPosition = target.offset(),
		animation = {
			top: endPosition.top - fixTop,
			left: endPosition.left - fixLeft,
			height: target.innerHeight(),
			width: target.innerWidth()
		},
		startPosition = elem.offset(),
		transfer = $( "<div class='ui-effects-transfer'></div>" )
			.appendTo( document.body )
			.addClass( o.className )
			.css({
				top: startPosition.top - fixTop,
				left: startPosition.left - fixLeft,
				height: elem.innerHeight(),
				width: elem.innerWidth(),
				position: targetFixed ? "fixed" : "absolute"
			})
			.animate( animation, o.duration, o.easing, function() {
				transfer.remove();
				done();
			});
};


/*!
 * jQuery UI Progressbar 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/progressbar/
 */


var progressbar = $.widget( "ui.progressbar", {
	version: "1.11.2",
	options: {
		max: 100,
		value: 0,

		change: null,
		complete: null
	},

	min: 0,

	_create: function() {
		// Constrain initial value
		this.oldValue = this.options.value = this._constrainedValue();

		this.element
			.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
			.attr({
				// Only set static values, aria-valuenow and aria-valuemax are
				// set inside _refreshValue()
				role: "progressbar",
				"aria-valuemin": this.min
			});

		this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
			.appendTo( this.element );

		this._refreshValue();
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
			.removeAttr( "role" )
			.removeAttr( "aria-valuemin" )
			.removeAttr( "aria-valuemax" )
			.removeAttr( "aria-valuenow" );

		this.valueDiv.remove();
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this.options.value;
		}

		this.options.value = this._constrainedValue( newValue );
		this._refreshValue();
	},

	_constrainedValue: function( newValue ) {
		if ( newValue === undefined ) {
			newValue = this.options.value;
		}

		this.indeterminate = newValue === false;

		// sanitize value
		if ( typeof newValue !== "number" ) {
			newValue = 0;
		}

		return this.indeterminate ? false :
			Math.min( this.options.max, Math.max( this.min, newValue ) );
	},

	_setOptions: function( options ) {
		// Ensure "value" option is set after other values (like max)
		var value = options.value;
		delete options.value;

		this._super( options );

		this.options.value = this._constrainedValue( value );
		this._refreshValue();
	},

	_setOption: function( key, value ) {
		if ( key === "max" ) {
			// Don't allow a max less than min
			value = Math.max( this.min, value );
		}
		if ( key === "disabled" ) {
			this.element
				.toggleClass( "ui-state-disabled", !!value )
				.attr( "aria-disabled", value );
		}
		this._super( key, value );
	},

	_percentage: function() {
		return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
	},

	_refreshValue: function() {
		var value = this.options.value,
			percentage = this._percentage();

		this.valueDiv
			.toggle( this.indeterminate || value > this.min )
			.toggleClass( "ui-corner-right", value === this.options.max )
			.width( percentage.toFixed(0) + "%" );

		this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );

		if ( this.indeterminate ) {
			this.element.removeAttr( "aria-valuenow" );
			if ( !this.overlayDiv ) {
				this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
			}
		} else {
			this.element.attr({
				"aria-valuemax": this.options.max,
				"aria-valuenow": value
			});
			if ( this.overlayDiv ) {
				this.overlayDiv.remove();
				this.overlayDiv = null;
			}
		}

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "change" );
		}
		if ( value === this.options.max ) {
			this._trigger( "complete" );
		}
	}
});


/*!
 * jQuery UI Selectable 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/selectable/
 */


var selectable = $.widget("ui.selectable", $.ui.mouse, {
	version: "1.11.2",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var selectees,
			that = this;

		this.element.addClass("ui-selectable");

		this.dragged = false;

		// cache selectee children based on filter
		this.refresh = function() {
			selectees = $(that.options.filter, that.element[0]);
			selectees.addClass("ui-selectee");
			selectees.each(function() {
				var $this = $(this),
					pos = $this.offset();
				$.data(this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass("ui-selected"),
					selecting: $this.hasClass("ui-selecting"),
					unselecting: $this.hasClass("ui-unselecting")
				});
			});
		};
		this.refresh();

		this.selectees = selectees.addClass("ui-selectee");

		this._mouseInit();

		this.helper = $("<div class='ui-selectable-helper'></div>");
	},

	_destroy: function() {
		this.selectees
			.removeClass("ui-selectee")
			.removeData("selectable-item");
		this.element
			.removeClass("ui-selectable ui-selectable-disabled");
		this._mouseDestroy();
	},

	_mouseStart: function(event) {
		var that = this,
			options = this.options;

		this.opos = [ event.pageX, event.pageY ];

		if (this.options.disabled) {
			return;
		}

		this.selectees = $(options.filter, this.element[0]);

		this._trigger("start", event);

		$(options.appendTo).append(this.helper);
		// position helper (lasso)
		this.helper.css({
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		});

		if (options.autoRefresh) {
			this.refresh();
		}

		this.selectees.filter(".ui-selected").each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.startselected = true;
			if (!event.metaKey && !event.ctrlKey) {
				selectee.$element.removeClass("ui-selected");
				selectee.selected = false;
				selectee.$element.addClass("ui-unselecting");
				selectee.unselecting = true;
				// selectable UNSELECTING callback
				that._trigger("unselecting", event, {
					unselecting: selectee.element
				});
			}
		});

		$(event.target).parents().addBack().each(function() {
			var doSelect,
				selectee = $.data(this, "selectable-item");
			if (selectee) {
				doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
				selectee.$element
					.removeClass(doSelect ? "ui-unselecting" : "ui-selected")
					.addClass(doSelect ? "ui-selecting" : "ui-unselecting");
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;
				// selectable (UN)SELECTING callback
				if (doSelect) {
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				} else {
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
				return false;
			}
		});

	},

	_mouseDrag: function(event) {

		this.dragged = true;

		if (this.options.disabled) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[0],
			y1 = this.opos[1],
			x2 = event.pageX,
			y2 = event.pageY;

		if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
		if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });

		this.selectees.each(function() {
			var selectee = $.data(this, "selectable-item"),
				hit = false;

			//prevent helper from being selected if appendTo: selectable
			if (!selectee || selectee.element === that.element[0]) {
				return;
			}

			if (options.tolerance === "touch") {
				hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
			} else if (options.tolerance === "fit") {
				hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
			}

			if (hit) {
				// SELECT
				if (selectee.selected) {
					selectee.$element.removeClass("ui-selected");
					selectee.selected = false;
				}
				if (selectee.unselecting) {
					selectee.$element.removeClass("ui-unselecting");
					selectee.unselecting = false;
				}
				if (!selectee.selecting) {
					selectee.$element.addClass("ui-selecting");
					selectee.selecting = true;
					// selectable SELECTING callback
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				}
			} else {
				// UNSELECT
				if (selectee.selecting) {
					if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
						selectee.$element.removeClass("ui-selecting");
						selectee.selecting = false;
						selectee.$element.addClass("ui-selected");
						selectee.selected = true;
					} else {
						selectee.$element.removeClass("ui-selecting");
						selectee.selecting = false;
						if (selectee.startselected) {
							selectee.$element.addClass("ui-unselecting");
							selectee.unselecting = true;
						}
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
				if (selectee.selected) {
					if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
						selectee.$element.removeClass("ui-selected");
						selectee.selected = false;

						selectee.$element.addClass("ui-unselecting");
						selectee.unselecting = true;
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
			}
		});

		return false;
	},

	_mouseStop: function(event) {
		var that = this;

		this.dragged = false;

		$(".ui-unselecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("ui-unselecting");
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger("unselected", event, {
				unselected: selectee.element
			});
		});
		$(".ui-selecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger("selected", event, {
				selected: selectee.element
			});
		});
		this._trigger("stop", event);

		this.helper.remove();

		return false;
	}

});


/*!
 * jQuery UI Selectmenu 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/selectmenu
 */


var selectmenu = $.widget( "ui.selectmenu", {
	version: "1.11.2",
	defaultElement: "<select>",
	options: {
		appendTo: null,
		disabled: null,
		icons: {
			button: "ui-icon-triangle-1-s"
		},
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		width: null,

		// callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		select: null
	},

	_create: function() {
		var selectmenuId = this.element.uniqueId().attr( "id" );
		this.ids = {
			element: selectmenuId,
			button: selectmenuId + "-button",
			menu: selectmenuId + "-menu"
		};

		this._drawButton();
		this._drawMenu();

		if ( this.options.disabled ) {
			this.disable();
		}
	},

	_drawButton: function() {
		var that = this,
			tabindex = this.element.attr( "tabindex" );

		// Associate existing label with the new button
		this.label = $( "label[for='" + this.ids.element + "']" ).attr( "for", this.ids.button );
		this._on( this.label, {
			click: function( event ) {
				this.button.focus();
				event.preventDefault();
			}
		});

		// Hide original select element
		this.element.hide();

		// Create button
		this.button = $( "<span>", {
			"class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",
			tabindex: tabindex || this.options.disabled ? -1 : 0,
			id: this.ids.button,
			role: "combobox",
			"aria-expanded": "false",
			"aria-autocomplete": "list",
			"aria-owns": this.ids.menu,
			"aria-haspopup": "true"
		})
			.insertAfter( this.element );

		$( "<span>", {
			"class": "ui-icon " + this.options.icons.button
		})
			.prependTo( this.button );

		this.buttonText = $( "<span>", {
			"class": "ui-selectmenu-text"
		})
			.appendTo( this.button );

		this._setText( this.buttonText, this.element.find( "option:selected" ).text() );
		this._resizeButton();

		this._on( this.button, this._buttonEvents );
		this.button.one( "focusin", function() {

			// Delay rendering the menu items until the button receives focus.
			// The menu may have already been rendered via a programmatic open.
			if ( !that.menuItems ) {
				that._refreshMenu();
			}
		});
		this._hoverable( this.button );
		this._focusable( this.button );
	},

	_drawMenu: function() {
		var that = this;

		// Create menu
		this.menu = $( "<ul>", {
			"aria-hidden": "true",
			"aria-labelledby": this.ids.button,
			id: this.ids.menu
		});

		// Wrap menu
		this.menuWrap = $( "<div>", {
			"class": "ui-selectmenu-menu ui-front"
		})
			.append( this.menu )
			.appendTo( this._appendTo() );

		// Initialize menu widget
		this.menuInstance = this.menu
			.menu({
				role: "listbox",
				select: function( event, ui ) {
					event.preventDefault();

					// support: IE8
					// If the item was selected via a click, the text selection
					// will be destroyed in IE
					that._setSelection();

					that._select( ui.item.data( "ui-selectmenu-item" ), event );
				},
				focus: function( event, ui ) {
					var item = ui.item.data( "ui-selectmenu-item" );

					// Prevent inital focus from firing and check if its a newly focused item
					if ( that.focusIndex != null && item.index !== that.focusIndex ) {
						that._trigger( "focus", event, { item: item } );
						if ( !that.isOpen ) {
							that._select( item, event );
						}
					}
					that.focusIndex = item.index;

					that.button.attr( "aria-activedescendant",
						that.menuItems.eq( item.index ).attr( "id" ) );
				}
			})
			.menu( "instance" );

		// Adjust menu styles to dropdown
		this.menu
			.addClass( "ui-corner-bottom" )
			.removeClass( "ui-corner-all" );

		// Don't close the menu on mouseleave
		this.menuInstance._off( this.menu, "mouseleave" );

		// Cancel the menu's collapseAll on document click
		this.menuInstance._closeOnDocumentClick = function() {
			return false;
		};

		// Selects often contain empty items, but never contain dividers
		this.menuInstance._isDivider = function() {
			return false;
		};
	},

	refresh: function() {
		this._refreshMenu();
		this._setText( this.buttonText, this._getSelectedItem().text() );
		if ( !this.options.width ) {
			this._resizeButton();
		}
	},

	_refreshMenu: function() {
		this.menu.empty();

		var item,
			options = this.element.find( "option" );

		if ( !options.length ) {
			return;
		}

		this._parseOptions( options );
		this._renderMenu( this.menu, this.items );

		this.menuInstance.refresh();
		this.menuItems = this.menu.find( "li" ).not( ".ui-selectmenu-optgroup" );

		item = this._getSelectedItem();

		// Update the menu to have the correct item focused
		this.menuInstance.focus( null, item );
		this._setAria( item.data( "ui-selectmenu-item" ) );

		// Set disabled state
		this._setOption( "disabled", this.element.prop( "disabled" ) );
	},

	open: function( event ) {
		if ( this.options.disabled ) {
			return;
		}

		// If this is the first time the menu is being opened, render the items
		if ( !this.menuItems ) {
			this._refreshMenu();
		} else {

			// Menu clears focus on close, reset focus to selected item
			this.menu.find( ".ui-state-focus" ).removeClass( "ui-state-focus" );
			this.menuInstance.focus( null, this._getSelectedItem() );
		}

		this.isOpen = true;
		this._toggleAttr();
		this._resizeMenu();
		this._position();

		this._on( this.document, this._documentClick );

		this._trigger( "open", event );
	},

	_position: function() {
		this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );
	},

	close: function( event ) {
		if ( !this.isOpen ) {
			return;
		}

		this.isOpen = false;
		this._toggleAttr();

		this.range = null;
		this._off( this.document );

		this._trigger( "close", event );
	},

	widget: function() {
		return this.button;
	},

	menuWidget: function() {
		return this.menu;
	},

	_renderMenu: function( ul, items ) {
		var that = this,
			currentOptgroup = "";

		$.each( items, function( index, item ) {
			if ( item.optgroup !== currentOptgroup ) {
				$( "<li>", {
					"class": "ui-selectmenu-optgroup ui-menu-divider" +
						( item.element.parent( "optgroup" ).prop( "disabled" ) ?
							" ui-state-disabled" :
							"" ),
					text: item.optgroup
				})
					.appendTo( ul );

				currentOptgroup = item.optgroup;
			}

			that._renderItemData( ul, item );
		});
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );
	},

	_renderItem: function( ul, item ) {
		var li = $( "<li>" );

		if ( item.disabled ) {
			li.addClass( "ui-state-disabled" );
		}
		this._setText( li, item.label );

		return li.appendTo( ul );
	},

	_setText: function( element, value ) {
		if ( value ) {
			element.text( value );
		} else {
			element.html( "&#160;" );
		}
	},

	_move: function( direction, event ) {
		var item, next,
			filter = ".ui-menu-item";

		if ( this.isOpen ) {
			item = this.menuItems.eq( this.focusIndex );
		} else {
			item = this.menuItems.eq( this.element[ 0 ].selectedIndex );
			filter += ":not(.ui-state-disabled)";
		}

		if ( direction === "first" || direction === "last" ) {
			next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );
		} else {
			next = item[ direction + "All" ]( filter ).eq( 0 );
		}

		if ( next.length ) {
			this.menuInstance.focus( event, next );
		}
	},

	_getSelectedItem: function() {
		return this.menuItems.eq( this.element[ 0 ].selectedIndex );
	},

	_toggle: function( event ) {
		this[ this.isOpen ? "close" : "open" ]( event );
	},

	_setSelection: function() {
		var selection;

		if ( !this.range ) {
			return;
		}

		if ( window.getSelection ) {
			selection = window.getSelection();
			selection.removeAllRanges();
			selection.addRange( this.range );

		// support: IE8
		} else {
			this.range.select();
		}

		// support: IE
		// Setting the text selection kills the button focus in IE, but
		// restoring the focus doesn't kill the selection.
		this.button.focus();
	},

	_documentClick: {
		mousedown: function( event ) {
			if ( !this.isOpen ) {
				return;
			}

			if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" + this.ids.button ).length ) {
				this.close( event );
			}
		}
	},

	_buttonEvents: {

		// Prevent text selection from being reset when interacting with the selectmenu (#10144)
		mousedown: function() {
			var selection;

			if ( window.getSelection ) {
				selection = window.getSelection();
				if ( selection.rangeCount ) {
					this.range = selection.getRangeAt( 0 );
				}

			// support: IE8
			} else {
				this.range = document.selection.createRange();
			}
		},

		click: function( event ) {
			this._setSelection();
			this._toggle( event );
		},

		keydown: function( event ) {
			var preventDefault = true;
			switch ( event.keyCode ) {
				case $.ui.keyCode.TAB:
				case $.ui.keyCode.ESCAPE:
					this.close( event );
					preventDefault = false;
					break;
				case $.ui.keyCode.ENTER:
					if ( this.isOpen ) {
						this._selectFocusedItem( event );
					}
					break;
				case $.ui.keyCode.UP:
					if ( event.altKey ) {
						this._toggle( event );
					} else {
						this._move( "prev", event );
					}
					break;
				case $.ui.keyCode.DOWN:
					if ( event.altKey ) {
						this._toggle( event );
					} else {
						this._move( "next", event );
					}
					break;
				case $.ui.keyCode.SPACE:
					if ( this.isOpen ) {
						this._selectFocusedItem( event );
					} else {
						this._toggle( event );
					}
					break;
				case $.ui.keyCode.LEFT:
					this._move( "prev", event );
					break;
				case $.ui.keyCode.RIGHT:
					this._move( "next", event );
					break;
				case $.ui.keyCode.HOME:
				case $.ui.keyCode.PAGE_UP:
					this._move( "first", event );
					break;
				case $.ui.keyCode.END:
				case $.ui.keyCode.PAGE_DOWN:
					this._move( "last", event );
					break;
				default:
					this.menu.trigger( event );
					preventDefault = false;
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		}
	},

	_selectFocusedItem: function( event ) {
		var item = this.menuItems.eq( this.focusIndex );
		if ( !item.hasClass( "ui-state-disabled" ) ) {
			this._select( item.data( "ui-selectmenu-item" ), event );
		}
	},

	_select: function( item, event ) {
		var oldIndex = this.element[ 0 ].selectedIndex;

		// Change native select element
		this.element[ 0 ].selectedIndex = item.index;
		this._setText( this.buttonText, item.label );
		this._setAria( item );
		this._trigger( "select", event, { item: item } );

		if ( item.index !== oldIndex ) {
			this._trigger( "change", event, { item: item } );
		}

		this.close( event );
	},

	_setAria: function( item ) {
		var id = this.menuItems.eq( item.index ).attr( "id" );

		this.button.attr({
			"aria-labelledby": id,
			"aria-activedescendant": id
		});
		this.menu.attr( "aria-activedescendant", id );
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			this.button.find( "span.ui-icon" )
				.removeClass( this.options.icons.button )
				.addClass( value.button );
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.menuWrap.appendTo( this._appendTo() );
		}

		if ( key === "disabled" ) {
			this.menuInstance.option( "disabled", value );
			this.button
				.toggleClass( "ui-state-disabled", value )
				.attr( "aria-disabled", value );

			this.element.prop( "disabled", value );
			if ( value ) {
				this.button.attr( "tabindex", -1 );
				this.close();
			} else {
				this.button.attr( "tabindex", 0 );
			}
		}

		if ( key === "width" ) {
			this._resizeButton();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_toggleAttr: function() {
		this.button
			.toggleClass( "ui-corner-top", this.isOpen )
			.toggleClass( "ui-corner-all", !this.isOpen )
			.attr( "aria-expanded", this.isOpen );
		this.menuWrap.toggleClass( "ui-selectmenu-open", this.isOpen );
		this.menu.attr( "aria-hidden", !this.isOpen );
	},

	_resizeButton: function() {
		var width = this.options.width;

		if ( !width ) {
			width = this.element.show().outerWidth();
			this.element.hide();
		}

		this.button.outerWidth( width );
	},

	_resizeMenu: function() {
		this.menu.outerWidth( Math.max(
			this.button.outerWidth(),

			// support: IE10
			// IE10 wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping
			this.menu.width( "" ).outerWidth() + 1
		) );
	},

	_getCreateOptions: function() {
		return { disabled: this.element.prop( "disabled" ) };
	},

	_parseOptions: function( options ) {
		var data = [];
		options.each(function( index, item ) {
			var option = $( item ),
				optgroup = option.parent( "optgroup" );
			data.push({
				element: option,
				index: index,
				value: option.attr( "value" ),
				label: option.text(),
				optgroup: optgroup.attr( "label" ) || "",
				disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )
			});
		});
		this.items = data;
	},

	_destroy: function() {
		this.menuWrap.remove();
		this.button.remove();
		this.element.show();
		this.element.removeUniqueId();
		this.label.attr( "for", this.ids.element );
	}
});


/*!
 * jQuery UI Slider 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/slider/
 */


var slider = $.widget( "ui.slider", $.ui.mouse, {
	version: "1.11.2",
	widgetEventPrefix: "slide",

	options: {
		animate: false,
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null,

		// callbacks
		change: null,
		slide: null,
		start: null,
		stop: null
	},

	// number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	numPages: 5,

	_create: function() {
		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();
		this._calculateNewMax();

		this.element
			.addClass( "ui-slider" +
				" ui-slider-" + this.orientation +
				" ui-widget" +
				" ui-widget-content" +
				" ui-corner-all");

		this._refresh();
		this._setOption( "disabled", this.options.disabled );

		this._animateOff = false;
	},

	_refresh: function() {
		this._createRange();
		this._createHandles();
		this._setupEvents();
		this._refreshValue();
	},

	_createHandles: function() {
		var i, handleCount,
			options = this.options,
			existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
			handle = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>",
			handles = [];

		handleCount = ( options.values && options.values.length ) || 1;

		if ( existingHandles.length > handleCount ) {
			existingHandles.slice( handleCount ).remove();
			existingHandles = existingHandles.slice( 0, handleCount );
		}

		for ( i = existingHandles.length; i < handleCount; i++ ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

		this.handle = this.handles.eq( 0 );

		this.handles.each(function( i ) {
			$( this ).data( "ui-slider-handle-index", i );
		});
	},

	_createRange: function() {
		var options = this.options,
			classes = "";

		if ( options.range ) {
			if ( options.range === true ) {
				if ( !options.values ) {
					options.values = [ this._valueMin(), this._valueMin() ];
				} else if ( options.values.length && options.values.length !== 2 ) {
					options.values = [ options.values[0], options.values[0] ];
				} else if ( $.isArray( options.values ) ) {
					options.values = options.values.slice(0);
				}
			}

			if ( !this.range || !this.range.length ) {
				this.range = $( "<div></div>" )
					.appendTo( this.element );

				classes = "ui-slider-range" +
				// note: this isn't the most fittingly semantic framework class for this element,
				// but worked best visually with a variety of themes
				" ui-widget-header ui-corner-all";
			} else {
				this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )
					// Handle range switching from true to min/max
					.css({
						"left": "",
						"bottom": ""
					});
			}

			this.range.addClass( classes +
				( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );
		} else {
			if ( this.range ) {
				this.range.remove();
			}
			this.range = null;
		}
	},

	_setupEvents: function() {
		this._off( this.handles );
		this._on( this.handles, this._handleEvents );
		this._hoverable( this.handles );
		this._focusable( this.handles );
	},

	_destroy: function() {
		this.handles.remove();
		if ( this.range ) {
			this.range.remove();
		}

		this.element
			.removeClass( "ui-slider" +
				" ui-slider-horizontal" +
				" ui-slider-vertical" +
				" ui-widget" +
				" ui-widget-content" +
				" ui-corner-all" );

		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
			that = this,
			o = this.options;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		this.handles.each(function( i ) {
			var thisDistance = Math.abs( normValue - that.values(i) );
			if (( distance > thisDistance ) ||
				( distance === thisDistance &&
					(i === that._lastChangedValue || that.values(i) === o.min ))) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		});

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		this._handleIndex = index;

		closestHandle
			.addClass( "ui-state-active" )
			.focus();

		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
				( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
				( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
		};

		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function() {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );

		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this.handles.removeClass( "ui-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},

	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_start: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}
		return this._trigger( "start", event, uiHash );
	},

	_slide: function( event, index, newVal ) {
		var otherVal,
			newValues,
			allowed;

		if ( this.options.values && this.options.values.length ) {
			otherVal = this.values( index ? 0 : 1 );

			if ( ( this.options.values.length === 2 && this.options.range === true ) &&
					( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
				) {
				newVal = otherVal;
			}

			if ( newVal !== this.values( index ) ) {
				newValues = this.values();
				newValues[ index ] = newVal;
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal,
					values: newValues
				} );
				otherVal = this.values( index ? 0 : 1 );
				if ( allowed !== false ) {
					this.values( index, newVal );
				}
			}
		} else {
			if ( newVal !== this.value() ) {
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal
				} );
				if ( allowed !== false ) {
					this.value( newVal );
				}
			}
		}
	},

	_stop: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}

		this._trigger( "stop", event, uiHash );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}

			//store the last changed value index for reference when handles overlap
			this._lastChangedValue = index;

			this._trigger( "change", event, uiHash );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this.options.values && this.options.values.length ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( key === "range" && this.options.range === true ) {
			if ( value === "min" ) {
				this.options.value = this._values( 0 );
				this.options.values = null;
			} else if ( value === "max" ) {
				this.options.value = this._values( this.options.values.length - 1 );
				this.options.values = null;
			}
		}

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		if ( key === "disabled" ) {
			this.element.toggleClass( "ui-state-disabled", !!value );
		}

		this._super( key, value );

		switch ( key ) {
			case "orientation":
				this._detectOrientation();
				this.element
					.removeClass( "ui-slider-horizontal ui-slider-vertical" )
					.addClass( "ui-slider-" + this.orientation );
				this._refreshValue();

				// Reset positioning from previous orientation
				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();
				for ( i = 0; i < valsLength; i += 1 ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
			case "step":
			case "min":
			case "max":
				this._animateOff = true;
				this._calculateNewMax();
				this._refreshValue();
				this._animateOff = false;
				break;
			case "range":
				this._animateOff = true;
				this._refresh();
				this._animateOff = false;
				break;
		}
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else if ( this.options.values && this.options.values.length ) {
			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i += 1) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		} else {
			return [];
		}
	},

	// returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = (val - this._valueMin()) % step,
			alignValue = val - valModStep;

		if ( Math.abs(valModStep) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed(5) );
	},

	_calculateNewMax: function() {
		var remainder = ( this.options.max - this._valueMin() ) % this.options.step;
		this.max = this.options.max - remainder;
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.max;
	},

	_refreshValue: function() {
		var lastValPercent, valPercent, value, valueMin, valueMax,
			oRange = this.options.range,
			o = this.options,
			that = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			_set = {};

		if ( this.options.values && this.options.values.length ) {
			this.handles.each(function( i ) {
				valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( that.options.range === true ) {
					if ( that.orientation === "horizontal" ) {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					} else {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					}
				}
				lastValPercent = valPercent;
			});
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
		}
	},

	_handleEvents: {
		keydown: function( event ) {
			var allowed, curVal, newVal, step,
				index = $( event.target ).data( "ui-slider-handle-index" );

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
				case $.ui.keyCode.END:
				case $.ui.keyCode.PAGE_UP:
				case $.ui.keyCode.PAGE_DOWN:
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					event.preventDefault();
					if ( !this._keySliding ) {
						this._keySliding = true;
						$( event.target ).addClass( "ui-state-active" );
						allowed = this._start( event, index );
						if ( allowed === false ) {
							return;
						}
					}
					break;
			}

			step = this.options.step;
			if ( this.options.values && this.options.values.length ) {
				curVal = newVal = this.values( index );
			} else {
				curVal = newVal = this.value();
			}

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
					newVal = this._valueMin();
					break;
				case $.ui.keyCode.END:
					newVal = this._valueMax();
					break;
				case $.ui.keyCode.PAGE_UP:
					newVal = this._trimAlignValue(
						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
					);
					break;
				case $.ui.keyCode.PAGE_DOWN:
					newVal = this._trimAlignValue(
						curVal - ( (this._valueMax() - this._valueMin()) / this.numPages ) );
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
					if ( curVal === this._valueMax() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal + step );
					break;
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					if ( curVal === this._valueMin() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal - step );
					break;
			}

			this._slide( event, index, newVal );
		},
		keyup: function( event ) {
			var index = $( event.target ).data( "ui-slider-handle-index" );

			if ( this._keySliding ) {
				this._keySliding = false;
				this._stop( event, index );
				this._change( event, index );
				$( event.target ).removeClass( "ui-state-active" );
			}
		}
	}
});


/*!
 * jQuery UI Sortable 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/sortable/
 */


var sortable = $.widget("ui.sortable", $.ui.mouse, {
	version: "1.11.2",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},

	_isOverAxis: function( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	},

	_isFloating: function( item ) {
		return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
	},

	_create: function() {

		var o = this.options;
		this.containerCache = {};
		this.element.addClass("ui-sortable");

		//Get the items
		this.refresh();

		//Let's determine if the items are being displayed horizontally
		this.floating = this.items.length ? o.axis === "x" || this._isFloating(this.items[0].item) : false;

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();

		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		this.element.find( ".ui-sortable-handle" ).removeClass( "ui-sortable-handle" );
		$.each( this.items, function() {
			( this.instance.options.handle ?
				this.item.find( this.instance.options.handle ) : this.item )
				.addClass( "ui-sortable-handle" );
		});
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-sortable ui-sortable-disabled" )
			.find( ".ui-sortable-handle" )
				.removeClass( "ui-sortable-handle" );
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[i].item.removeData(this.widgetName + "-item");
		}

		return this;
	},

	_mouseCapture: function(event, overrideHandle) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if (this.reverting) {
			return false;
		}

		if(this.options.disabled || this.options.type === "static") {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems(event);

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$(event.target).parents().each(function() {
			if($.data(this, that.widgetName + "-item") === that) {
				currentItem = $(this);
				return false;
			}
		});
		if($.data(event.target, that.widgetName + "-item") === that) {
			currentItem = $(event.target);
		}

		if(!currentItem) {
			return false;
		}
		if(this.options.handle && !overrideHandle) {
			$(this.options.handle, currentItem).find("*").addBack().each(function() {
				if(this === event.target) {
					validHandle = true;
				}
			});
			if(!validHandle) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function(event, overrideHandle, noActivation) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css("position", "absolute");
		this.cssPosition = this.helper.css("position");

		//Generate the original position
		this.originalPosition = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Cache the former DOM position
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] !== this.currentItem[0]) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if(o.containment) {
			this._setContainment();
		}

		if( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
		}

		if(o.opacity) { // opacity option
			if (this.helper.css("opacity")) {
				this._storedOpacity = this.helper.css("opacity");
			}
			this.helper.css("opacity", o.opacity);
		}

		if(o.zIndex) { // zIndex option
			if (this.helper.css("zIndex")) {
				this._storedZIndex = this.helper.css("zIndex");
			}
			this.helper.css("zIndex", o.zIndex);
		}

		//Prepare scrolling
		if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger("start", event, this._uiHash());

		//Recache the helper size
		if(!this._preserveHelperProportions) {
			this._cacheHelperProportions();
		}


		//Post "activate" events to possible containers
		if( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if($.ui.ddmanager) {
			$.ui.ddmanager.current = this;
		}

		if ($.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(this, event);
		}

		this.dragging = true;

		this.helper.addClass("ui-sortable-helper");
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;

	},

	_mouseDrag: function(event) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		if (!this.lastPositionAbs) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if(this.options.scroll) {
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
				} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
				}

				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
				} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
				}

			} else {

				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}

				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}

			}

			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo("absolute");

		//Set the helper position
		if(!this.options.axis || this.options.axis !== "y") {
			this.helper[0].style.left = this.position.left+"px";
		}
		if(!this.options.axis || this.options.axis !== "x") {
			this.helper[0].style.top = this.position.top+"px";
		}

		//Rearrange
		for (i = this.items.length - 1; i >= 0; i--) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[i];
			itemElement = item.item[0];
			intersection = this._intersectsWithPointer(item);
			if (!intersection) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter between the outer and inner container.
			if (item.instance !== this.currentContainer) {
				continue;
			}

			// cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if (itemElement !== this.currentItem[0] &&
				this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
				!$.contains(this.placeholder[0], itemElement) &&
				(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
					this._rearrange(event, item);
				} else {
					break;
				}

				this._trigger("change", event, this._uiHash());
				break;
			}
		}

		//Post events to containers
		this._contactContainers(event);

		//Interconnect with droppables
		if($.ui.ddmanager) {
			$.ui.ddmanager.drag(this, event);
		}

		//Call callbacks
		this._trigger("sort", event, this._uiHash());

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function(event, noPropagation) {

		if(!event) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ($.ui.ddmanager && !this.options.dropBehaviour) {
			$.ui.ddmanager.drop(this, event);
		}

		if(this.options.revert) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
			}
			this.reverting = true;
			$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
				that._clear(event);
			});
		} else {
			this._clear(event, noPropagation);
		}

		return false;

	},

	cancel: function() {

		if(this.dragging) {

			this._mouseUp({ target: null });

			if(this.options.helper === "original") {
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for (var i = this.containers.length - 1; i >= 0; i--){
				this.containers[i]._trigger("deactivate", null, this._uiHash(this));
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", null, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		if (this.placeholder) {
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) {
				this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
			}
			if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
				this.helper.remove();
			}

			$.extend(this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			});

			if(this.domPosition.prev) {
				$(this.domPosition.prev).after(this.currentItem);
			} else {
				$(this.domPosition.parent).prepend(this.currentItem);
			}
		}

		return this;

	},

	serialize: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			str = [];
		o = o || {};

		$(items).each(function() {
			var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
			if (res) {
				str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
			}
		});

		if(!str.length && o.key) {
			str.push(o.key + "=");
		}

		return str.join("&");

	},

	toArray: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			ret = [];

		o = o || {};

		items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function(item) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
		) {
			return isOverElement;
		} else {

			return (l < x1 + (this.helperProportions.width / 2) && // Right Half
				x2 - (this.helperProportions.width / 2) < r && // Left Half
				t < y1 + (this.helperProportions.height / 2) && // Bottom Half
				y2 - (this.helperProportions.height / 2) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function(item) {

		var isOverElementHeight = (this.options.axis === "x") || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === "y") || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight && isOverElementWidth,
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (!isOverElement) {
			return false;
		}

		return this.floating ?
			( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
			: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

	},

	_intersectsWithSides: function(item) {

		var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (this.floating && horizontalDirection) {
			return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
		} else {
			return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && (delta > 0 ? "down" : "up");
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && (delta > 0 ? "right" : "left");
	},

	refresh: function(event) {
		this._refreshItems(event);
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
	},

	_getItemsAsjQuery: function(connected) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if(connectWith && connected) {
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for ( j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.widgetFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
					}
				}
			}
		}

		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

		function addItems() {
			items.push( this );
		}
		for (i = queries.length - 1; i >= 0; i--){
			queries[i][0].each( addItems );
		}

		return $(items);

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

		this.items = $.grep(this.items, function (item) {
			for (var j=0; j < list.length; j++) {
				if(list[j] === item.item[0]) {
					return false;
				}
			}
			return true;
		});

	},

	_refreshItems: function(event) {

		this.items = [];
		this.containers = [this];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
			connectWith = this._connectWith();

		if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for (j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.widgetFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);
					}
				}
			}
		}

		for (i = queries.length - 1; i >= 0; i--) {
			targetData = queries[i][1];
			_queries = queries[i][0];

			for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
				item = $(_queries[j]);

				item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

				items.push({
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				});
			}
		}

	},

	refreshPositions: function(fast) {

		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent && this.helper) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for (i = this.items.length - 1; i >= 0; i--){
			item = this.items[i];

			//We ignore calculating positions of all connected containers when we're not over them
			if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
				continue;
			}

			t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

			if (!fast) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if(this.options.custom && this.options.custom.refreshContainers) {
			this.options.custom.refreshContainers.call(this);
		} else {
			for (i = this.containers.length - 1; i >= 0; i--){
				p = this.containers[i].element.offset();
				this.containers[i].containerCache.left = p.left;
				this.containers[i].containerCache.top = p.top;
				this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function(that) {
		that = that || this;
		var className,
			o = that.options;

		if(!o.placeholder || o.placeholder.constructor === String) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[0].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[0] )
							.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
							.removeClass("ui-sortable-helper");

					if ( nodeName === "tr" ) {
						that.currentItem.children().each(function() {
							$( "<td>&#160;</td>", that.document[0] )
								.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
								.appendTo( element );
						});
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function(container, p) {

					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
					if(className && !o.forcePlaceholderSize) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
					if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
				}
			};
		}

		//Create the placeholder
		that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

		//Append it after the actual current item
		that.currentItem.after(that.placeholder);

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update(that, that.placeholder);

	},

	_contactContainers: function(event) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// get innermost container that intersects with item
		for (i = this.containers.length - 1; i >= 0; i--) {

			// never consider a container that's located within the item itself
			if($.contains(this.currentItem[0], this.containers[i].element[0])) {
				continue;
			}

			if(this._intersectsWith(this.containers[i].containerCache)) {

				// if we've already found a container and it's more "inner" than this, then continue
				if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
					continue;
				}

				innermostContainer = this.containers[i];
				innermostIndex = i;

			} else {
				// container doesn't intersect. trigger "out" event if necessary
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", event, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		// if no intersecting containers found, return
		if(!innermostContainer) {
			return;
		}

		// move the item into the container if it's not there already
		if(this.containers.length === 1) {
			if (!this.containers[innermostIndex].containerCache.over) {
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}
		} else {

			//When entering a new container, we will find the item with the least distance and append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || this._isFloating(this.currentItem);
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "clientX" : "clientY";

			for (j = this.items.length - 1; j >= 0; j--) {
				if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
					continue;
				}
				if(this.items[j].item[0] === this.currentItem[0]) {
					continue;
				}

				cur = this.items[j].item.offset()[posProperty];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up": "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
				return;
			}

			if(this.currentContainer === this.containers[innermostIndex]) {
				if ( !this.currentContainer.containerCache.over ) {
					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
					this.currentContainer.containerCache.over = 1;
				}
				return;
			}

			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
			this.currentContainer = this.containers[innermostIndex];

			//Update the placeholder
			this.options.placeholder.update(this.currentContainer, this.placeholder);

			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
			this.containers[innermostIndex].containerCache.over = 1;
		}


	},

	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

		//Add the helper to the DOM if that didn't happen already
		if(!helper.parents("body").length) {
			$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
		}

		if(helper[0] === this.currentItem[0]) {
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
		}

		if(!helper[0].style.width || o.forceHelperSize) {
			helper.width(this.currentItem.width());
		}
		if(!helper[0].style.height || o.forceHelperSize) {
			helper.height(this.currentItem.height());
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {


		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this information
		// with an ugly IE fix
		if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition === "relative") {
			var p = this.currentItem.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if(o.containment === "parent") {
			o.containment = this.helper[0].parentNode;
		}
		if(o.containment === "document" || o.containment === "window") {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
				($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
			];
		}

		if(!(/^(document|window|parent)$/).test(o.containment)) {
			ce = $(o.containment)[0];
			co = $(o.containment).offset();
			over = ($(ce).css("overflow") !== "hidden");

			this.containment = [
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function(d, pos) {

		if(!pos) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)
		};

	},

	_generatePosition: function(event) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if(this.originalPosition) { //If we are not dragging yet, we won't check for options

			if(this.containment) {
				if(event.pageX - this.offset.click.left < this.containment[0]) {
					pageX = this.containment[0] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top < this.containment[1]) {
					pageY = this.containment[1] + this.offset.click.top;
				}
				if(event.pageX - this.offset.click.left > this.containment[2]) {
					pageX = this.containment[2] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top > this.containment[3]) {
					pageY = this.containment[3] + this.offset.click.top;
				}
			}

			if(o.grid) {
				top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
				pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
				pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY -																// The absolute mouse position
				this.offset.click.top -													// Click offset (relative to the element)
				this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),
			left: (
				pageX -																// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)
		};

	},

	_rearrange: function(event, i, a, hardRefresh) {

		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay(function() {
			if(counter === this.counter) {
				this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
			}
		});

	},

	_clear: function(event, noPropagation) {

		this.reverting = false;
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and
		// everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
		if(!this._noFinalSort && this.currentItem.parent().length) {
			this.placeholder.before(this.currentItem);
		}
		this._noFinalSort = null;

		if(this.helper[0] === this.currentItem[0]) {
			for(i in this._storedCSS) {
				if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
					this._storedCSS[i] = "";
				}
			}
			this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
		} else {
			this.currentItem.show();
		}

		if(this.fromOutside && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
		}
		if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if (this !== this.currentContainer) {
			if(!noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}
		}


		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for (i = this.containers.length - 1; i >= 0; i--){
			if (!noPropagation) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if(this.containers[i].containerCache.over) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[i].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if(this._storedOpacity) {
			this.helper.css("opacity", this._storedOpacity);
		}
		if(this._storedZIndex) {
			this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
		}

		this.dragging = false;

		if(!noPropagation) {
			this._trigger("beforeStop", event, this._uiHash());
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

		if ( !this.cancelHelperRemoval ) {
			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
				this.helper.remove();
			}
			this.helper = null;
		}

		if(!noPropagation) {
			for (i=0; i < delayedTriggers.length; i++) {
				delayedTriggers[i].call(this, event);
			} //Trigger all delayed events
			this._trigger("stop", event, this._uiHash());
		}

		this.fromOutside = false;
		return !this.cancelHelperRemoval;

	},

	_trigger: function() {
		if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
			this.cancel();
		}
	},

	_uiHash: function(_inst) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $([]),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

});


/*!
 * jQuery UI Spinner 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/spinner/
 */


function spinner_modifier( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "change" );
		}
	};
}

var spinner = $.widget( "ui.spinner", {
	version: "1.11.2",
	defaultElement: "<input>",
	widgetEventPrefix: "spin",
	options: {
		culture: null,
		icons: {
			down: "ui-icon-triangle-1-s",
			up: "ui-icon-triangle-1-n"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		change: null,
		spin: null,
		start: null,
		stop: null
	},

	_create: function() {
		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );

		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {
			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}

		this._draw();
		this._on( this._events );
		this._refresh();

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
	},

	_getCreateOptions: function() {
		var options = {},
			element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value !== undefined && value.length ) {
				options[ option ] = value;
			}
		});

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "change", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay(function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .ui-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[0] === this.document[0].activeElement ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[0] === this.document[0].activeElement;
				if ( !isActive ) {
					this.element.focus();
					this.previous = previous;
					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay(function() {
						this.previous = previous;
					});
				}
			}

			// ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay(function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			});

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .ui-spinner-button": "_stop",
		"mouseenter .ui-spinner-button": function( event ) {
			// button will add ui-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .ui-spinner-button": "_stop"
	},

	_draw: function() {
		var uiSpinner = this.uiSpinner = this.element
			.addClass( "ui-spinner-input" )
			.attr( "autocomplete", "off" )
			.wrap( this._uiSpinnerHtml() )
			.parent()
				// add buttons
				.append( this._buttonHtml() );

		this.element.attr( "role", "spinbutton" );

		// button bindings
		this.buttons = uiSpinner.find( ".ui-spinner-button" )
			.attr( "tabIndex", -1 )
			.button()
			.removeClass( "ui-corner-all" );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
				uiSpinner.height() > 0 ) {
			uiSpinner.height( uiSpinner.height() );
		}

		// disable spinner if element was already disabled
		if ( this.options.disabled ) {
			this.disable();
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.ui.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_uiSpinnerHtml: function() {
		return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
	},

	_buttonHtml: function() {
		return "" +
			"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
				"<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
			"</a>" +
			"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
				"<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
			"</a>";
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "start", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay(function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;
		// - round to the nearest step
		aboveMin = Math.round(aboveMin / options.step) * options.step;
		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// clamp the value
		if ( options.max !== null && value > options.max) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "stop", event );
	},

	_setOption: function( key, value ) {
		if ( key === "culture" || key === "numberFormat" ) {
			var prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			this.buttons.first().find( ".ui-icon" )
				.removeClass( this.options.icons.up )
				.addClass( value.up );
			this.buttons.last().find( ".ui-icon" )
				.removeClass( this.options.icons.down )
				.addClass( value.down );
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this.widget().toggleClass( "ui-state-disabled", !!value );
			this.element.prop( "disabled", !!value );
			this.buttons.button( value ? "disable" : "enable" );
		}
	},

	_setOptions: spinner_modifier(function( options ) {
		this._super( options );
	}),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr({
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,
			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		});
	},

	isValid: function() {
		var value = this.value();

		// null is invalid
		if ( value === null ) {
			return false;
		}

		// if value gets adjusted, it's invalid
		return value === this._adjustValue( value );
	},

	// update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-spinner-input" )
			.prop( "disabled", false )
			.removeAttr( "autocomplete" )
			.removeAttr( "role" )
			.removeAttr( "aria-valuemin" )
			.removeAttr( "aria-valuemax" )
			.removeAttr( "aria-valuenow" );
		this.uiSpinner.replaceWith( this.element );
	},

	stepUp: spinner_modifier(function( steps ) {
		this._stepUp( steps );
	}),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * this.options.step );
			this._stop();
		}
	},

	stepDown: spinner_modifier(function( steps ) {
		this._stepDown( steps );
	}),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * -this.options.step );
			this._stop();
		}
	},

	pageUp: spinner_modifier(function( pages ) {
		this._stepUp( (pages || 1) * this.options.page );
	}),

	pageDown: spinner_modifier(function( pages ) {
		this._stepDown( (pages || 1) * this.options.page );
	}),

	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		spinner_modifier( this._value ).call( this, newVal );
	},

	widget: function() {
		return this.uiSpinner;
	}
});


/*!
 * jQuery UI Tabs 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/tabs/
 */


var tabs = $.widget( "ui.tabs", {
	version: "1.11.2",
	delay: 300,
	options: {
		active: null,
		collapsible: false,
		event: "click",
		heightStyle: "content",
		hide: null,
		show: null,

		// callbacks
		activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null
	},

	_isLocal: (function() {
		var rhash = /#.*$/;

		return function( anchor ) {
			var anchorUrl, locationUrl;

			// support: IE7
			// IE7 doesn't normalize the href property when set via script (#9317)
			anchor = anchor.cloneNode( false );

			anchorUrl = anchor.href.replace( rhash, "" );
			locationUrl = location.href.replace( rhash, "" );

			// decoding may throw an error if the URL isn't UTF-8 (#9518)
			try {
				anchorUrl = decodeURIComponent( anchorUrl );
			} catch ( error ) {}
			try {
				locationUrl = decodeURIComponent( locationUrl );
			} catch ( error ) {}

			return anchor.hash.length > 1 && anchorUrl === locationUrl;
		};
	})(),

	_create: function() {
		var that = this,
			options = this.options;

		this.running = false;

		this.element
			.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
			.toggleClass( "ui-tabs-collapsible", options.collapsible );

		this._processTabs();
		options.active = this._initialActive();

		// Take disabling tabs via class attribute from HTML
		// into account and update option properly.
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				})
			) ).sort();
		}

		// check for length avoids error when initializing empty list
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
	},

	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {
			// check the fragment identifier in the URL
			if ( locationHash ) {
				this.tabs.each(function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				});
			}

			// check for a tab marked active via a class
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
			}

			// no active tab, set to false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}

		// handle numbers: negative, out of range
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// don't allow collapsible: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
			case $.ui.keyCode.RIGHT:
			case $.ui.keyCode.DOWN:
				selectedIndex++;
				break;
			case $.ui.keyCode.UP:
			case $.ui.keyCode.LEFT:
				goingForward = false;
				selectedIndex--;
				break;
			case $.ui.keyCode.END:
				selectedIndex = this.anchors.length - 1;
				break;
			case $.ui.keyCode.HOME:
				selectedIndex = 0;
				break;
			case $.ui.keyCode.SPACE:
				// Activate only, no collapsing
				event.preventDefault();
				clearTimeout( this.activating );
				this._activate( selectedIndex );
				return;
			case $.ui.keyCode.ENTER:
				// Toggle (cancel delayed activation, allow collapsing)
				event.preventDefault();
				clearTimeout( this.activating );
				// Determine if we should collapse or activate
				this._activate( selectedIndex === this.options.active ? false : selectedIndex );
				return;
			default:
				return;
		}

		// Focus the appropriate tab, based on which key was pressed
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// Navigating with control key will prevent automatic activation
		if ( !event.ctrlKey ) {
			// Update aria-selected immediately so that AT think the tab is already selected.
			// Otherwise AT may confuse the user by stating that they need to activate the tab,
			// but the tab will already be activated by the time the announcement finishes.
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay(function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up moves focus to the current tab
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
			event.preventDefault();
			this.active.focus();
		}
	},

	// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).focus();
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "disabled" ) {
			// don't use the widget factory's disabled handling
			this._setupDisabled( value );
			return;
		}

		this._super( key, value);

		if ( key === "collapsible" ) {
			this.element.toggleClass( "ui-tabs-collapsible", value );
			// Setting collapsible: false while collapsed; open first panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// get disabled tabs from class attribute from HTML
		// this will get converted to a boolean if needed in _refresh()
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
			return lis.index( tab );
		});

		this._processTabs();

		// was collapsed or no tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();
		// was active, but active tab is gone
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
			// all remaining tabs are disabled
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();
			// activate previous tab
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}
		// was active, active tab still exists
		} else {
			// make sure active index is correct
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		this._setupDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr({
			"aria-selected": "false",
			"aria-expanded": "false",
			tabIndex: -1
		});
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr({
				"aria-hidden": "true"
			});

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.addClass( "ui-tabs-active ui-state-active" )
				.attr({
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				});
			this._getPanelForTab( this.active )
				.show()
				.attr({
					"aria-hidden": "false"
				});
		}
	},

	_processTabs: function() {
		var that = this,
			prevTabs = this.tabs,
			prevAnchors = this.anchors,
			prevPanels = this.panels;

		this.tablist = this._getList()
			.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
			.attr( "role", "tablist" )

			// Prevent users from focusing disabled tabs via click
			.delegate( "> li", "mousedown" + this.eventNamespace, function( event ) {
				if ( $( this ).is( ".ui-state-disabled" ) ) {
					event.preventDefault();
				}
			})

			// support: IE <9
			// Preventing the default action in mousedown doesn't prevent IE
			// from focusing the element, so if the anchor gets focused, blur.
			// We don't have to worry about focusing the previously focused
			// element since clicking on a non-focusable element should focus
			// the body anyway.
			.delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
					this.blur();
				}
			});

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.addClass( "ui-state-default ui-corner-top" )
			.attr({
				role: "tab",
				tabIndex: -1
			});

		this.anchors = this.tabs.map(function() {
				return $( "a", this )[ 0 ];
			})
			.addClass( "ui-tabs-anchor" )
			.attr({
				role: "presentation",
				tabIndex: -1
			});

		this.panels = $();

		this.anchors.each(function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			// inline tab
			if ( that._isLocal( anchor ) ) {
				selector = anchor.hash;
				panelId = selector.substring( 1 );
				panel = that.element.find( that._sanitizeSelector( selector ) );
			// remote tab
			} else {
				// If the tab doesn't already have aria-controls,
				// generate an id by using a throw-away element
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "ui-tabs-aria-controls", originalAriaControls );
			}
			tab.attr({
				"aria-controls": panelId,
				"aria-labelledby": anchorId
			});
			panel.attr( "aria-labelledby", anchorId );
		});

		this.panels
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
			.attr( "role", "tabpanel" );

		// Avoid memory leaks (#10056)
		if ( prevTabs ) {
			this._off( prevTabs.not( this.tabs ) );
			this._off( prevAnchors.not( this.anchors ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	// allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( "ol,ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
			.data( "ui-tabs-destroy", true );
	},

	_setupDisabled: function( disabled ) {
		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// disable tabs
		for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				$( li )
					.addClass( "ui-state-disabled" )
					.attr( "aria-disabled", "true" );
			} else {
				$( li )
					.removeClass( "ui-state-disabled" )
					.removeAttr( "aria-disabled" );
			}
		}

		this.options.disabled = disabled;
	},

	_setupEvents: function( event ) {
		var events = {};
		if ( event ) {
			$.each( event.split(" "), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ) );
		// Always prevent the default action, even when disabled
		this._on( true, this.anchors, {
			click: function( event ) {
				event.preventDefault();
			}
		});
		this._on( this.anchors, events );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );

		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},

	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			maxHeight -= this.element.outerHeight() - this.element.height();

			this.element.siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});

			this.element.children().not( this.panels ).each(function() {
				maxHeight -= $( this ).outerHeight( true );
			});

			this.panels.each(function() {
				$( this ).height( Math.max( 0, maxHeight -
					$( this ).innerHeight() + $( this ).height() ) );
			})
			.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each(function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
			}).height( maxHeight );
		}
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "ui-state-disabled" ) ||
				// tab is already loading
				tab.hasClass( "ui-tabs-loading" ) ||
				// can't switch durning an animation
				this.running ||
				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||
				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// handles show/hide for selecting tabs
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "activate", event, eventData );
		}

		function show() {
			eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}

		// start out by hiding, then showing, then completing
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
				show();
			});
		} else {
			eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr( "aria-hidden", "true" );
		eventData.oldTab.attr({
			"aria-selected": "false",
			"aria-expanded": "false"
		});
		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow.attr( "aria-hidden", "false" );
		eventData.newTab.attr({
			"aria-selected": "true",
			"aria-expanded": "true",
			tabIndex: 0
		});
	},

	_activate: function( index ) {
		var anchor,
			active = this._findActive( index );

		// trying to activate the already active panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}

		// trying to collapse, simulate a click on the current active header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
		this._eventHandler({
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		});
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},

	_getIndex: function( index ) {
		// meta-function to give users option to provide a href string instead of a numerical index.
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
		}

		return index;
	},

	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );

		this.tablist
			.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
			.removeAttr( "role" );

		this.anchors
			.removeClass( "ui-tabs-anchor" )
			.removeAttr( "role" )
			.removeAttr( "tabIndex" )
			.removeUniqueId();

		this.tablist.unbind( this.eventNamespace );

		this.tabs.add( this.panels ).each(function() {
			if ( $.data( this, "ui-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this )
					.removeClass( "ui-state-default ui-state-active ui-state-disabled " +
						"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-live" )
					.removeAttr( "aria-busy" )
					.removeAttr( "aria-selected" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "role" );
			}
		});

		this.tabs.each(function() {
			var li = $( this ),
				prev = li.data( "ui-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "ui-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		});

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				});
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				});
			}
		}
		this._setupDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setupDisabled( disabled );
	},

	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".ui-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			};

		// not remote
		if ( this._isLocal( anchor[ 0 ] ) ) {
			return;
		}

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

		// support: jQuery <1.8
		// jQuery <1.8 returns false if the request is canceled in beforeSend,
		// but as of 1.8, $.ajax() always returns a jqXHR object.
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			tab.addClass( "ui-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.success(function( response ) {
					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						panel.html( response );
						that._trigger( "load", event, eventData );
					}, 1 );
				})
				.complete(function( jqXHR, status ) {
					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						if ( status === "abort" ) {
							that.panels.stop( false, true );
						}

						tab.removeClass( "ui-tabs-loading" );
						panel.removeAttr( "aria-busy" );

						if ( jqXHR === that.xhr ) {
							delete that.xhr;
						}
					}, 1 );
				});
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {
			url: anchor.attr( "href" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
			}
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	}
});


/*!
 * jQuery UI Tooltip 1.11.2
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/tooltip/
 */


var tooltip = $.widget( "ui.tooltip", {
	version: "1.11.2",
	options: {
		content: function() {
			// support: IE<9, Opera in jQuery <1.7
			// .text() can't accept undefined, so coerce to a string
			var title = $( this ).attr( "title" ) || "";
			// Escape title, since we're going from an attribute to raw HTML
			return $( "<a>" ).text( title ).html();
		},
		hide: true,
		// Disabled elements have inconsistent behavior across browsers (#8661)
		items: "[title]:not([disabled])",
		position: {
			my: "left top+15",
			at: "left bottom",
			collision: "flipfit flip"
		},
		show: true,
		tooltipClass: null,
		track: false,

		// callbacks
		close: null,
		open: null
	},

	_addDescribedBy: function( elem, id ) {
		var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
		describedby.push( id );
		elem
			.data( "ui-tooltip-id", id )
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
	},

	_removeDescribedBy: function( elem ) {
		var id = elem.data( "ui-tooltip-id" ),
			describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
			index = $.inArray( id, describedby );

		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "ui-tooltip-id" );
		describedby = $.trim( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	},

	_create: function() {
		this._on({
			mouseover: "open",
			focusin: "open"
		});

		// IDs of generated tooltips, needed for destroy
		this.tooltips = {};

		// IDs of parent tooltips where we removed the title attribute
		this.parents = {};

		if ( this.options.disabled ) {
			this._disable();
		}

		// Append the aria-live region so tooltips announce correctly
		this.liveRegion = $( "<div>" )
			.attr({
				role: "log",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			})
			.addClass( "ui-helper-hidden-accessible" )
			.appendTo( this.document[ 0 ].body );
	},

	_setOption: function( key, value ) {
		var that = this;

		if ( key === "disabled" ) {
			this[ value ? "_disable" : "_enable" ]();
			this.options[ key ] = value;
			// disable element style changes
			return;
		}

		this._super( key, value );

		if ( key === "content" ) {
			$.each( this.tooltips, function( id, tooltipData ) {
				that._updateContent( tooltipData.element );
			});
		}
	},

	_disable: function() {
		var that = this;

		// close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {
			var event = $.Event( "blur" );
			event.target = event.currentTarget = tooltipData.element[ 0 ];
			that.close( event, true );
		});

		// remove title attributes to prevent native tooltips
		this.element.find( this.options.items ).addBack().each(function() {
			var element = $( this );
			if ( element.is( "[title]" ) ) {
				element
					.data( "ui-tooltip-title", element.attr( "title" ) )
					.removeAttr( "title" );
			}
		});
	},

	_enable: function() {
		// restore title attributes
		this.element.find( this.options.items ).addBack().each(function() {
			var element = $( this );
			if ( element.data( "ui-tooltip-title" ) ) {
				element.attr( "title", element.data( "ui-tooltip-title" ) );
			}
		});
	},

	open: function( event ) {
		var that = this,
			target = $( event ? event.target : this.element )
				// we need closest here due to mouseover bubbling,
				// but always pointing at the same event target
				.closest( this.options.items );

		// No element to show a tooltip for or the tooltip is already open
		if ( !target.length || target.data( "ui-tooltip-id" ) ) {
			return;
		}

		if ( target.attr( "title" ) ) {
			target.data( "ui-tooltip-title", target.attr( "title" ) );
		}

		target.data( "ui-tooltip-open", true );

		// kill parent tooltips, custom or native, for hover
		if ( event && event.type === "mouseover" ) {
			target.parents().each(function() {
				var parent = $( this ),
					blurEvent;
				if ( parent.data( "ui-tooltip-open" ) ) {
					blurEvent = $.Event( "blur" );
					blurEvent.target = blurEvent.currentTarget = this;
					that.close( blurEvent, true );
				}
				if ( parent.attr( "title" ) ) {
					parent.uniqueId();
					that.parents[ this.id ] = {
						element: this,
						title: parent.attr( "title" )
					};
					parent.attr( "title", "" );
				}
			});
		}

		this._updateContent( target, event );
	},

	_updateContent: function( target, event ) {
		var content,
			contentOption = this.options.content,
			that = this,
			eventType = event ? event.type : null;

		if ( typeof contentOption === "string" ) {
			return this._open( event, target, contentOption );
		}

		content = contentOption.call( target[0], function( response ) {
			// ignore async response if tooltip was closed already
			if ( !target.data( "ui-tooltip-open" ) ) {
				return;
			}
			// IE may instantly serve a cached response for ajax requests
			// delay this call to _open so the other call to _open runs first
			that._delay(function() {
				// jQuery creates a special event for focusin when it doesn't
				// exist natively. To improve performance, the native event
				// object is reused and the type is changed. Therefore, we can't
				// rely on the type being correct after the event finished
				// bubbling, so we set it back to the previous value. (#8740)
				if ( event ) {
					event.type = eventType;
				}
				this._open( event, target, response );
			});
		});
		if ( content ) {
			this._open( event, target, content );
		}
	},

	_open: function( event, target, content ) {
		var tooltipData, tooltip, events, delayedShow, a11yContent,
			positionOption = $.extend( {}, this.options.position );

		if ( !content ) {
			return;
		}

		// Content can be updated multiple times. If the tooltip already
		// exists, then just update the content and bail.
		tooltipData = this._find( target );
		if ( tooltipData ) {
			tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );
			return;
		}

		// if we have a title, clear it to prevent the native tooltip
		// we have to check first to avoid defining a title if none exists
		// (we don't want to cause an element to start matching [title])
		//
		// We use removeAttr only for key events, to allow IE to export the correct
		// accessible attributes. For mouse events, set to empty string to avoid
		// native tooltip showing up (happens only when removing inside mouseover).
		if ( target.is( "[title]" ) ) {
			if ( event && event.type === "mouseover" ) {
				target.attr( "title", "" );
			} else {
				target.removeAttr( "title" );
			}
		}

		tooltipData = this._tooltip( target );
		tooltip = tooltipData.tooltip;
		this._addDescribedBy( target, tooltip.attr( "id" ) );
		tooltip.find( ".ui-tooltip-content" ).html( content );

		// Support: Voiceover on OS X, JAWS on IE <= 9
		// JAWS announces deletions even when aria-relevant="additions"
		// Voiceover will sometimes re-read the entire log region's contents from the beginning
		this.liveRegion.children().hide();
		if ( content.clone ) {
			a11yContent = content.clone();
			a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
		} else {
			a11yContent = content;
		}
		$( "<div>" ).html( a11yContent ).appendTo( this.liveRegion );

		function position( event ) {
			positionOption.of = event;
			if ( tooltip.is( ":hidden" ) ) {
				return;
			}
			tooltip.position( positionOption );
		}
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
			this._on( this.document, {
				mousemove: position
			});
			// trigger once to override element-relative positioning
			position( event );
		} else {
			tooltip.position( $.extend({
				of: target
			}, this.options.position ) );
		}

		tooltip.hide();

		this._show( tooltip, this.options.show );
		// Handle tracking tooltips that are shown with a delay (#8644). As soon
		// as the tooltip is visible, position the tooltip using the most recent
		// event.
		if ( this.options.show && this.options.show.delay ) {
			delayedShow = this.delayedShow = setInterval(function() {
				if ( tooltip.is( ":visible" ) ) {
					position( positionOption.of );
					clearInterval( delayedShow );
				}
			}, $.fx.interval );
		}

		this._trigger( "open", event, { tooltip: tooltip } );

		events = {
			keyup: function( event ) {
				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
					var fakeEvent = $.Event(event);
					fakeEvent.currentTarget = target[0];
					this.close( fakeEvent, true );
				}
			}
		};

		// Only bind remove handler for delegated targets. Non-delegated
		// tooltips will handle this in destroy.
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			events.remove = function() {
				this._removeTooltip( tooltip );
			};
		}

		if ( !event || event.type === "mouseover" ) {
			events.mouseleave = "close";
		}
		if ( !event || event.type === "focusin" ) {
			events.focusout = "close";
		}
		this._on( true, target, events );
	},

	close: function( event ) {
		var tooltip,
			that = this,
			target = $( event ? event.currentTarget : this.element ),
			tooltipData = this._find( target );

		// The tooltip may already be closed
		if ( !tooltipData ) {
			return;
		}

		tooltip = tooltipData.tooltip;

		// disabling closes the tooltip, so we need to track when we're closing
		// to avoid an infinite loop in case the tooltip becomes disabled on close
		if ( tooltipData.closing ) {
			return;
		}

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		// only set title if we had one before (see comment in _open())
		// If the title attribute has changed since open(), don't restore
		if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {
			target.attr( "title", target.data( "ui-tooltip-title" ) );
		}

		this._removeDescribedBy( target );

		tooltipData.hiding = true;
		tooltip.stop( true );
		this._hide( tooltip, this.options.hide, function() {
			that._removeTooltip( $( this ) );
		});

		target.removeData( "ui-tooltip-open" );
		this._off( target, "mouseleave focusout keyup" );

		// Remove 'remove' binding only on delegated targets
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			this._off( target, "remove" );
		}
		this._off( this.document, "mousemove" );

		if ( event && event.type === "mouseleave" ) {
			$.each( this.parents, function( id, parent ) {
				$( parent.element ).attr( "title", parent.title );
				delete that.parents[ id ];
			});
		}

		tooltipData.closing = true;
		this._trigger( "close", event, { tooltip: tooltip } );
		if ( !tooltipData.hiding ) {
			tooltipData.closing = false;
		}
	},

	_tooltip: function( element ) {
		var tooltip = $( "<div>" )
				.attr( "role", "tooltip" )
				.addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
					( this.options.tooltipClass || "" ) ),
			id = tooltip.uniqueId().attr( "id" );

		$( "<div>" )
			.addClass( "ui-tooltip-content" )
			.appendTo( tooltip );

		tooltip.appendTo( this.document[0].body );

		return this.tooltips[ id ] = {
			element: element,
			tooltip: tooltip
		};
	},

	_find: function( target ) {
		var id = target.data( "ui-tooltip-id" );
		return id ? this.tooltips[ id ] : null;
	},

	_removeTooltip: function( tooltip ) {
		tooltip.remove();
		delete this.tooltips[ tooltip.attr( "id" ) ];
	},

	_destroy: function() {
		var that = this;

		// close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {
			// Delegate to close method to handle common cleanup
			var event = $.Event( "blur" ),
				element = tooltipData.element;
			event.target = event.currentTarget = element[ 0 ];
			that.close( event, true );

			// Remove immediately; destroying an open tooltip doesn't use the
			// hide animation
			$( "#" + id ).remove();

			// Restore the title
			if ( element.data( "ui-tooltip-title" ) ) {
				// If the title attribute has changed since open(), don't restore
				if ( !element.attr( "title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
				}
				element.removeData( "ui-tooltip-title" );
			}
		});
		this.liveRegion.remove();
	}
});



}));
/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 3.1.9
 *
 * Requires: jQuery 1.2.2+
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.9',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
        },

        getLineHeight: function(elem) {
            return parseInt($(elem)['offsetParent' in $.fn ? 'offsetParent' : 'parent']().css('fontSize'), 10);
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));


/*!
 * jScrollPane - v2.0.20 - 2014-10-23
 * http://jscrollpane.kelvinluck.com/
 *
 * Copyright (c) 2014 Kelvin Luck
 * Dual licensed under the MIT or GPL licenses.
 */

// Script: jScrollPane - cross browser customisable scrollbars
//
// *Version: 2.0.20, Last updated: 2014-10-23*
//
// Project Home - http://jscrollpane.kelvinluck.com/
// GitHub       - http://github.com/vitch/jScrollPane
// Source       - http://github.com/vitch/jScrollPane/raw/master/script/jquery.jscrollpane.js
// (Minified)   - http://github.com/vitch/jScrollPane/raw/master/script/jquery.jscrollpane.min.js
//
// About: License
//
// Copyright (c) 2014 Kelvin Luck
// Dual licensed under the MIT or GPL Version 2 licenses.
// http://jscrollpane.kelvinluck.com/MIT-LICENSE.txt
// http://jscrollpane.kelvinluck.com/GPL-LICENSE.txt
//
// About: Examples
//
// All examples and demos are available through the jScrollPane example site at:
// http://jscrollpane.kelvinluck.com/
//
// About: Support and Testing
//
// This plugin is tested on the browsers below and has been found to work reliably on them. If you run
// into a problem on one of the supported browsers then please visit the support section on the jScrollPane
// website (http://jscrollpane.kelvinluck.com/) for more information on getting support. You are also
// welcome to fork the project on GitHub if you can contribute a fix for a given issue. 
//
// jQuery Versions - tested in 1.4.2+ - reported to work in 1.3.x
// Browsers Tested - Firefox 3.6.8, Safari 5, Opera 10.6, Chrome 5.0, IE 6, 7, 8
//
// About: Release History
//
// 2.0.20 - (2014-10-23) Adds AMD support (thanks @carlosrberto) and support for overflow-x/overflow-y (thanks @darimpulso)
// 2.0.19 - (2013-11-16) Changes for more reliable scroll amount with latest mousewheel plugin (thanks @brandonaaron)
// 2.0.18 - (2013-10-23) Fix for issue with gutters and scrollToElement (thanks @Dubiy)
// 2.0.17 - (2013-08-17) Working correctly when box-sizing is set to border-box (thanks @pieht)
// 2.0.16 - (2013-07-30) Resetting left position when scroll is removed. Fixes #189
// 2.0.15 - (2013-07-29) Fixed issue with scrollToElement where the destX and destY are undefined.
// 2.0.14 - (2013-05-01) Updated to most recent mouse wheel plugin (see #106) and related changes for sensible scroll speed
// 2.0.13 - (2013-05-01) Switched to semver compatible version name
// 2.0.0beta12 - (2012-09-27) fix for jQuery 1.8+
// 2.0.0beta11 - (2012-05-14)
// 2.0.0beta10 - (2011-04-17) cleaner required size calculation, improved keyboard support, stickToBottom/Left, other small fixes
// 2.0.0beta9 - (2011-01-31) new API methods, bug fixes and correct keyboard support for FF/OSX
// 2.0.0beta8 - (2011-01-29) touchscreen support, improved keyboard support
// 2.0.0beta7 - (2011-01-23) scroll speed consistent (thanks Aivo Paas)
// 2.0.0beta6 - (2010-12-07) scrollToElement horizontal support
// 2.0.0beta5 - (2010-10-18) jQuery 1.4.3 support, various bug fixes
// 2.0.0beta4 - (2010-09-17) clickOnTrack support, bug fixes
// 2.0.0beta3 - (2010-08-27) Horizontal mousewheel, mwheelIntent, keyboard support, bug fixes
// 2.0.0beta2 - (2010-08-21) Bug fixes
// 2.0.0beta1 - (2010-08-17) Rewrite to follow modern best practices and enable horizontal scrolling, initially hidden
//							 elements and dynamically sized elements.
// 1.x - (2006-12-31 - 2010-07-31) Initial version, hosted at googlecode, deprecated

(function (plugin, window) {
	var factory = function($){
		return plugin($, window);
	}
  if ( typeof define === 'function' && define.amd ) {
      // AMD. Register as an anonymous module.
      define(['jquery'], factory);
  } else if (typeof exports === 'object') {
      // Node/CommonJS style for Browserify
      module.exports = factory;
  } else {
      // Browser globals
      factory(jQuery);
  }
}(function($,window,undefined){

	$.fn.jScrollPane = function(settings)
	{
		// JScrollPane "class" - public methods are available through $('selector').data('jsp')
		function JScrollPane(elem, s)
		{
			var settings, jsp = this, pane, paneWidth, paneHeight, container, contentWidth, contentHeight,
				percentInViewH, percentInViewV, isScrollableV, isScrollableH, verticalDrag, dragMaxY,
				verticalDragPosition, horizontalDrag, dragMaxX, horizontalDragPosition,
				verticalBar, verticalTrack, scrollbarWidth, verticalTrackHeight, verticalDragHeight, arrowUp, arrowDown,
				horizontalBar, horizontalTrack, horizontalTrackWidth, horizontalDragWidth, arrowLeft, arrowRight,
				reinitialiseInterval, originalPadding, originalPaddingTotalWidth, previousContentWidth,
				wasAtTop = true, wasAtLeft = true, wasAtBottom = false, wasAtRight = false,
				originalElement = elem.clone(false, false).empty(),
				mwEvent = $.fn.mwheelIntent ? 'mwheelIntent.jsp' : 'mousewheel.jsp';

			if (elem.css('box-sizing') === 'border-box') {
				originalPadding = 0;
				originalPaddingTotalWidth = 0;
			} else {
				originalPadding = elem.css('paddingTop') + ' ' +
									elem.css('paddingRight') + ' ' +
									elem.css('paddingBottom') + ' ' +
									elem.css('paddingLeft');	
				originalPaddingTotalWidth = (parseInt(elem.css('paddingLeft'), 10) || 0) +
											(parseInt(elem.css('paddingRight'), 10) || 0);

				/*
				* paddingLeft is read wrongly as 40px in IE 8 and above in dropdown component
				*/

				if(elem.hasClass('dropDownListItems') && parseInt(elem.css('paddingLeft'), 10) === 40) {
					originalPaddingTotalWidth = 0; 
				}											
			}

			function initialise(s)
			{

				var /*firstChild, lastChild, */isMaintainingPositon, lastContentX, lastContentY,
						hasContainingSpaceChanged, originalScrollTop, originalScrollLeft,
						maintainAtBottom = false, maintainAtRight = false;

				settings = s;

				if (pane === undefined) {
					originalScrollTop = elem.scrollTop();
					originalScrollLeft = elem.scrollLeft();

					elem.css(
						{
							overflow: 'hidden',
							padding: 0
						}
					);
					// TODO: Deal with where width/ height is 0 as it probably means the element is hidden and we should
					// come back to it later and check once it is unhidden...
					paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
					paneHeight = elem.innerHeight();

					elem.width(paneWidth);


					pane = $('<div class="jspPane" />').css('padding', originalPadding).append(elem.children());
					container = $('<div class="jspContainer" />')
						.css({
							'width': paneWidth + 'px',
							'height': paneHeight + 'px'
						}
					).append(pane).appendTo(elem);

					/*
					// Move any margins from the first and last children up to the container so they can still
					// collapse with neighbouring elements as they would before jScrollPane 
					firstChild = pane.find(':first-child');
					lastChild = pane.find(':last-child');
					elem.css(
						{
							'margin-top': firstChild.css('margin-top'),
							'margin-bottom': lastChild.css('margin-bottom')
						}
					);
					firstChild.css('margin-top', 0);
					lastChild.css('margin-bottom', 0);
					*/
				} else {
					elem.css('width', '');

					maintainAtBottom = settings.stickToBottom && isCloseToBottom();
					maintainAtRight  = settings.stickToRight  && isCloseToRight();

					hasContainingSpaceChanged = elem.innerWidth() + originalPaddingTotalWidth != paneWidth || elem.outerHeight() != paneHeight;

					if (hasContainingSpaceChanged) {
						paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
						paneHeight = elem.innerHeight();
						container.css({
							width: paneWidth + 'px',
							height: paneHeight + 'px'
						});
					}

					// If nothing changed since last check...
					if (!hasContainingSpaceChanged && previousContentWidth == contentWidth && pane.outerHeight() == contentHeight) {
						elem.width(paneWidth);
						return;
					}
					previousContentWidth = contentWidth;
					
					pane.css('width', '');
					elem.width(paneWidth);

					container.find('>.jspVerticalBar,>.jspHorizontalBar').remove().end();
				}

				pane.css('overflow', 'auto');
				if (s.contentWidth) {
					contentWidth = s.contentWidth;
				} else {
					contentWidth = pane[0].scrollWidth;
				}
				contentHeight = pane[0].scrollHeight;
				pane.css('overflow', '');

				percentInViewH = contentWidth / paneWidth;
				percentInViewV = contentHeight / paneHeight;
				isScrollableV = percentInViewV > 1;

				isScrollableH = percentInViewH > 1;

				//console.log(paneWidth, paneHeight, contentWidth, contentHeight, percentInViewH, percentInViewV, isScrollableH, isScrollableV);

				if (!(isScrollableH || isScrollableV)) {
					elem.removeClass('jspScrollable');
					pane.css({
            top: 0,
            left: 0,
						width: container.width() - originalPaddingTotalWidth
					});
					removeMousewheel();
					removeFocusHandler();
					removeKeyboardNav();
					removeClickOnTrack();
				} else {
					elem.addClass('jspScrollable');

					isMaintainingPositon = settings.maintainPosition && (verticalDragPosition || horizontalDragPosition);
					if (isMaintainingPositon) {
						lastContentX = contentPositionX();
						lastContentY = contentPositionY();
					}

					initialiseVerticalScroll();
					initialiseHorizontalScroll();
					resizeScrollbars();

					if (isMaintainingPositon) {
						scrollToX(maintainAtRight  ? (contentWidth  - paneWidth ) : lastContentX, false);
						scrollToY(maintainAtBottom ? (contentHeight - paneHeight) : lastContentY, false);
					}

					initFocusHandler();
					initMousewheel();
					initTouch();
					
					if (settings.enableKeyboardNavigation) {
						initKeyboardNav();
					}
					if (settings.clickOnTrack) {
						initClickOnTrack();
					}
					
					observeHash();
					if (settings.hijackInternalLinks) {
						hijackInternalLinks();
					}
				}

				if (settings.autoReinitialise && !reinitialiseInterval) {
					reinitialiseInterval = setInterval(
						function()
						{
							initialise(settings);
						},
						settings.autoReinitialiseDelay
					);
				} else if (!settings.autoReinitialise && reinitialiseInterval) {
					clearInterval(reinitialiseInterval);
				}

				originalScrollTop && elem.scrollTop(0) && scrollToY(originalScrollTop, false);
				originalScrollLeft && elem.scrollLeft(0) && scrollToX(originalScrollLeft, false);

				elem.trigger('jsp-initialised', [isScrollableH || isScrollableV]);
			}

			function initialiseVerticalScroll()
			{
				if (isScrollableV) {

					container.append(
						$('<div class="jspVerticalBar" />').append(
							$('<div class="jspCap jspCapTop" />'),
							$('<div class="jspTrack" />').append(
								$('<div class="jspDrag" />').append(
									$('<div class="jspDragTop" />'),
									$('<div class="jspDragBottom" />')
								)
							),
							$('<div class="jspCap jspCapBottom" />')
						)
					);

					verticalBar = container.find('>.jspVerticalBar');
					verticalTrack = verticalBar.find('>.jspTrack');
					verticalDrag = verticalTrack.find('>.jspDrag');

					if (settings.showArrows) {
						arrowUp = $('<a class="jspArrow jspArrowUp" />').bind(
							'mousedown.jsp', getArrowScroll(0, -1)
						).bind('click.jsp', nil);
						arrowDown = $('<a class="jspArrow jspArrowDown" />').bind(
							'mousedown.jsp', getArrowScroll(0, 1)
						).bind('click.jsp', nil);
						if (settings.arrowScrollOnHover) {
							arrowUp.bind('mouseover.jsp', getArrowScroll(0, -1, arrowUp));
							arrowDown.bind('mouseover.jsp', getArrowScroll(0, 1, arrowDown));
						}

						appendArrows(verticalTrack, settings.verticalArrowPositions, arrowUp, arrowDown);
					}

					verticalTrackHeight = paneHeight;
					container.find('>.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow').each(
						function()
						{
							verticalTrackHeight -= $(this).outerHeight();
						}
					);


					verticalDrag.hover(
						function()
						{
							verticalDrag.addClass('jspHover');
						},
						function()
						{
							verticalDrag.removeClass('jspHover');
						}
					).bind(
						'mousedown.jsp',
						function(e)
						{
							// Stop IE from allowing text selection
							$('html').bind('dragstart.jsp selectstart.jsp', nil);

							verticalDrag.addClass('jspActive');

							var startY = e.pageY - verticalDrag.position().top;

							$('html').bind(
								'mousemove.jsp',
								function(e)
								{
									positionDragY(e.pageY - startY, false);
								}
							).bind('mouseup.jsp mouseleave.jsp', cancelDrag);
							return false;
						}
					);
					sizeVerticalScrollbar();
				}
			}

			function sizeVerticalScrollbar()
			{
				verticalTrack.height(verticalTrackHeight + 'px');
				verticalDragPosition = 0;
				scrollbarWidth = settings.verticalGutter + verticalTrack.outerWidth();

				// Make the pane thinner to allow for the vertical scrollbar
				pane.width(paneWidth - scrollbarWidth - originalPaddingTotalWidth);

				// Add margin to the left of the pane if scrollbars are on that side (to position
				// the scrollbar on the left or right set it's left or right property in CSS)
				try {
					if (verticalBar.position().left === 0) {

						pane.css('margin-left', scrollbarWidth + 'px');
						if(elem.hasClass('dropDownListItems') && scrollbarWidth === 26) {
							pane.css('margin-left', '0 px');
						}	
					}
				} catch (err) {
				}
			}

			function initialiseHorizontalScroll()
			{
				if (isScrollableH) {

					container.append(
						$('<div class="jspHorizontalBar" />').append(
							$('<div class="jspCap jspCapLeft" />'),
							$('<div class="jspTrack" />').append(
								$('<div class="jspDrag" />').append(
									$('<div class="jspDragLeft" />'),
									$('<div class="jspDragRight" />')
								)
							),
							$('<div class="jspCap jspCapRight" />')
						)
					);

					horizontalBar = container.find('>.jspHorizontalBar');
					horizontalTrack = horizontalBar.find('>.jspTrack');
					horizontalDrag = horizontalTrack.find('>.jspDrag');

					if (settings.showArrows) {
						arrowLeft = $('<a class="jspArrow jspArrowLeft" />').bind(
							'mousedown.jsp', getArrowScroll(-1, 0)
						).bind('click.jsp', nil);
						arrowRight = $('<a class="jspArrow jspArrowRight" />').bind(
							'mousedown.jsp', getArrowScroll(1, 0)
						).bind('click.jsp', nil);
						if (settings.arrowScrollOnHover) {
							arrowLeft.bind('mouseover.jsp', getArrowScroll(-1, 0, arrowLeft));
							arrowRight.bind('mouseover.jsp', getArrowScroll(1, 0, arrowRight));
						}
						appendArrows(horizontalTrack, settings.horizontalArrowPositions, arrowLeft, arrowRight);
					}

					horizontalDrag.hover(
						function()
						{
							horizontalDrag.addClass('jspHover');
						},
						function()
						{
							horizontalDrag.removeClass('jspHover');
						}
					).bind(
						'mousedown.jsp',
						function(e)
						{
							// Stop IE from allowing text selection
							$('html').bind('dragstart.jsp selectstart.jsp', nil);

							horizontalDrag.addClass('jspActive');

							var startX = e.pageX - horizontalDrag.position().left;

							$('html').bind(
								'mousemove.jsp',
								function(e)
								{
									positionDragX(e.pageX - startX, false);
								}
							).bind('mouseup.jsp mouseleave.jsp', cancelDrag);
							return false;
						}
					);
					horizontalTrackWidth = container.innerWidth();
					sizeHorizontalScrollbar();
				}
			}

			function sizeHorizontalScrollbar()
			{
				container.find('>.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow').each(
					function()
					{
						horizontalTrackWidth -= $(this).outerWidth();
					}
				);

				horizontalTrack.width(horizontalTrackWidth + 'px');
				horizontalDragPosition = 0;
			}

			function resizeScrollbars()
			{
				if (isScrollableH && isScrollableV) {
					var horizontalTrackHeight = horizontalTrack.outerHeight(),
						verticalTrackWidth = verticalTrack.outerWidth();
					verticalTrackHeight -= horizontalTrackHeight;
					$(horizontalBar).find('>.jspCap:visible,>.jspArrow').each(
						function()
						{
							horizontalTrackWidth += $(this).outerWidth();
						}
					);
					horizontalTrackWidth -= verticalTrackWidth;
					paneHeight -= verticalTrackWidth;
					paneWidth -= horizontalTrackHeight;
					horizontalTrack.parent().append(
						$('<div class="jspCorner" />').css('width', horizontalTrackHeight + 'px')
					);
					sizeVerticalScrollbar();
					sizeHorizontalScrollbar();
				}
				// reflow content
				if (isScrollableH) {
					pane.width((container.outerWidth() - originalPaddingTotalWidth) + 'px');
				}
				contentHeight = pane.outerHeight();
				percentInViewV = contentHeight / paneHeight;

				if (isScrollableH) {
					horizontalDragWidth = Math.ceil(1 / percentInViewH * horizontalTrackWidth);
					if (horizontalDragWidth > settings.horizontalDragMaxWidth) {
						horizontalDragWidth = settings.horizontalDragMaxWidth;
					} else if (horizontalDragWidth < settings.horizontalDragMinWidth) {
						horizontalDragWidth = settings.horizontalDragMinWidth;
					}
					horizontalDrag.width(horizontalDragWidth + 'px');
					dragMaxX = horizontalTrackWidth - horizontalDragWidth;
					_positionDragX(horizontalDragPosition); // To update the state for the arrow buttons
				}
				if (isScrollableV) {
					verticalDragHeight = Math.ceil(1 / percentInViewV * verticalTrackHeight);
					if (verticalDragHeight > settings.verticalDragMaxHeight) {
						verticalDragHeight = settings.verticalDragMaxHeight;
					} else if (verticalDragHeight < settings.verticalDragMinHeight) {
						verticalDragHeight = settings.verticalDragMinHeight;
					}
					verticalDrag.height(verticalDragHeight + 'px');
					dragMaxY = verticalTrackHeight - verticalDragHeight;
					_positionDragY(verticalDragPosition); // To update the state for the arrow buttons
				}
			}

			function appendArrows(ele, p, a1, a2)
			{
				var p1 = "before", p2 = "after", aTemp;
				
				// Sniff for mac... Is there a better way to determine whether the arrows would naturally appear
				// at the top or the bottom of the bar?
				if (p == "os") {
					p = /Mac/.test(navigator.platform) ? "after" : "split";
				}
				if (p == p1) {
					p2 = p;
				} else if (p == p2) {
					p1 = p;
					aTemp = a1;
					a1 = a2;
					a2 = aTemp;
				}

				ele[p1](a1)[p2](a2);
			}

			function getArrowScroll(dirX, dirY, ele)
			{
				return function()
				{
					arrowScroll(dirX, dirY, this, ele);
					this.blur();
					return false;
				};
			}

			function arrowScroll(dirX, dirY, arrow, ele)
			{
				arrow = $(arrow).addClass('jspActive');

				var eve,
					scrollTimeout,
					isFirst = true,
					doScroll = function()
					{
						if (dirX !== 0) {
							jsp.scrollByX(dirX * settings.arrowButtonSpeed);
						}
						if (dirY !== 0) {
							jsp.scrollByY(dirY * settings.arrowButtonSpeed);
						}
						scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.arrowRepeatFreq);
						isFirst = false;
					};

				doScroll();

				eve = ele ? 'mouseout.jsp' : 'mouseup.jsp';
				ele = ele || $('html');
				ele.bind(
					eve,
					function()
					{
						arrow.removeClass('jspActive');
						scrollTimeout && clearTimeout(scrollTimeout);
						scrollTimeout = null;
						ele.unbind(eve);
					}
				);
			}

			function initClickOnTrack()
			{
				removeClickOnTrack();
				if (isScrollableV) {
					verticalTrack.bind(
						'mousedown.jsp',
						function(e)
						{
							if (e.originalTarget === undefined || e.originalTarget == e.currentTarget) {
								var clickedTrack = $(this),
									offset = clickedTrack.offset(),
									direction = e.pageY - offset.top - verticalDragPosition,
									scrollTimeout,
									isFirst = true,
									doScroll = function()
									{
										var offset = clickedTrack.offset(),
											pos = e.pageY - offset.top - verticalDragHeight / 2,
											contentDragY = paneHeight * settings.scrollPagePercent,
											dragY = dragMaxY * contentDragY / (contentHeight - paneHeight);
										if (direction < 0) {
											if (verticalDragPosition - dragY > pos) {
												jsp.scrollByY(-contentDragY);
											} else {
												positionDragY(pos);
											}
										} else if (direction > 0) {
											if (verticalDragPosition + dragY < pos) {
												jsp.scrollByY(contentDragY);
											} else {
												positionDragY(pos);
											}
										} else {
											cancelClick();
											return;
										}
										scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
										isFirst = false;
									},
									cancelClick = function()
									{
										scrollTimeout && clearTimeout(scrollTimeout);
										scrollTimeout = null;
										$(document).unbind('mouseup.jsp', cancelClick);
									};
								doScroll();
								$(document).bind('mouseup.jsp', cancelClick);
								return false;
							}
						}
					);
				}
				
				if (isScrollableH) {
					horizontalTrack.bind(
						'mousedown.jsp',
						function(e)
						{
							if (e.originalTarget === undefined || e.originalTarget == e.currentTarget) {
								var clickedTrack = $(this),
									offset = clickedTrack.offset(),
									direction = e.pageX - offset.left - horizontalDragPosition,
									scrollTimeout,
									isFirst = true,
									doScroll = function()
									{
										var offset = clickedTrack.offset(),
											pos = e.pageX - offset.left - horizontalDragWidth / 2,
											contentDragX = paneWidth * settings.scrollPagePercent,
											dragX = dragMaxX * contentDragX / (contentWidth - paneWidth);
										if (direction < 0) {
											if (horizontalDragPosition - dragX > pos) {
												jsp.scrollByX(-contentDragX);
											} else {
												positionDragX(pos);
											}
										} else if (direction > 0) {
											if (horizontalDragPosition + dragX < pos) {
												jsp.scrollByX(contentDragX);
											} else {
												positionDragX(pos);
											}
										} else {
											cancelClick();
											return;
										}
										scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
										isFirst = false;
									},
									cancelClick = function()
									{
										scrollTimeout && clearTimeout(scrollTimeout);
										scrollTimeout = null;
										$(document).unbind('mouseup.jsp', cancelClick);
									};
								doScroll();
								$(document).bind('mouseup.jsp', cancelClick);
								return false;
							}
						}
					);
				}
			}

			function removeClickOnTrack()
			{
				if (horizontalTrack) {
					horizontalTrack.unbind('mousedown.jsp');
				}
				if (verticalTrack) {
					verticalTrack.unbind('mousedown.jsp');
				}
			}

			function cancelDrag()
			{
				$('html').unbind('dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp');

				if (verticalDrag) {
					verticalDrag.removeClass('jspActive');
				}
				if (horizontalDrag) {
					horizontalDrag.removeClass('jspActive');
				}
			}

			function positionDragY(destY, animate)
			{
				if (!isScrollableV) {
					return;
				}
				if (destY < 0) {
					destY = 0;
				} else if (destY > dragMaxY) {
					destY = dragMaxY;
				}

				// can't just check if(animate) because false is a valid value that could be passed in...
				if (animate === undefined) {
					animate = settings.animateScroll;
				}
				if (animate) {
					jsp.animate(verticalDrag, 'top', destY,	_positionDragY);
				} else {
					verticalDrag.css('top', destY);
					_positionDragY(destY);
				}

			}

			function _positionDragY(destY)
			{
				if (destY === undefined) {
					destY = verticalDrag.position().top;
				}

				container.scrollTop(0);
				verticalDragPosition = destY || 0;

				var isAtTop = verticalDragPosition === 0,
					isAtBottom = verticalDragPosition == dragMaxY,
					percentScrolled = destY/ dragMaxY,
					destTop = -percentScrolled * (contentHeight - paneHeight);

				if (wasAtTop != isAtTop || wasAtBottom != isAtBottom) {
					wasAtTop = isAtTop;
					wasAtBottom = isAtBottom;
					elem.trigger('jsp-arrow-change', [wasAtTop, wasAtBottom, wasAtLeft, wasAtRight]);
				}
				
				updateVerticalArrows(isAtTop, isAtBottom);
				pane.css('top', destTop);
				elem.trigger('jsp-scroll-y', [-destTop, isAtTop, isAtBottom]).trigger('scroll');
			}

			function positionDragX(destX, animate)
			{
				if (!isScrollableH) {
					return;
				}
				if (destX < 0) {
					destX = 0;
				} else if (destX > dragMaxX) {
					destX = dragMaxX;
				}

				if (animate === undefined) {
					animate = settings.animateScroll;
				}
				if (animate) {
					jsp.animate(horizontalDrag, 'left', destX,	_positionDragX);
				} else {
					horizontalDrag.css('left', destX);
					_positionDragX(destX);
				}
			}

			function _positionDragX(destX)
			{
				if (destX === undefined) {
					destX = horizontalDrag.position().left;
				}

				container.scrollTop(0);
				horizontalDragPosition = destX ||0;

				var isAtLeft = horizontalDragPosition === 0,
					isAtRight = horizontalDragPosition == dragMaxX,
					percentScrolled = destX / dragMaxX,
					destLeft = -percentScrolled * (contentWidth - paneWidth);

				if (wasAtLeft != isAtLeft || wasAtRight != isAtRight) {
					wasAtLeft = isAtLeft;
					wasAtRight = isAtRight;
					elem.trigger('jsp-arrow-change', [wasAtTop, wasAtBottom, wasAtLeft, wasAtRight]);
				}
				
				updateHorizontalArrows(isAtLeft, isAtRight);
				pane.css('left', destLeft);
				elem.trigger('jsp-scroll-x', [-destLeft, isAtLeft, isAtRight]).trigger('scroll');
			}

			function updateVerticalArrows(isAtTop, isAtBottom)
			{
				if (settings.showArrows) {
					arrowUp[isAtTop ? 'addClass' : 'removeClass']('jspDisabled');
					arrowDown[isAtBottom ? 'addClass' : 'removeClass']('jspDisabled');
				}
			}

			function updateHorizontalArrows(isAtLeft, isAtRight)
			{
				if (settings.showArrows) {
					arrowLeft[isAtLeft ? 'addClass' : 'removeClass']('jspDisabled');
					arrowRight[isAtRight ? 'addClass' : 'removeClass']('jspDisabled');
				}
			}

			function scrollToY(destY, animate)
			{
				var percentScrolled = destY / (contentHeight - paneHeight);
				positionDragY(percentScrolled * dragMaxY, animate);
			}

			function scrollToX(destX, animate)
			{
				var percentScrolled = destX / (contentWidth - paneWidth);
				positionDragX(percentScrolled * dragMaxX, animate);
			}

			function scrollToElement(ele, stickToTop, animate)
			{
				var e, eleHeight, eleWidth, eleTop = 0, eleLeft = 0, viewportTop, viewportLeft, maxVisibleEleTop, maxVisibleEleLeft, destY, destX;

				// Legal hash values aren't necessarily legal jQuery selectors so we need to catch any
				// errors from the lookup...
				try {
					e = $(ele);
				} catch (err) {
					return;
				}
				eleHeight = e.outerHeight();
				eleWidth= e.outerWidth();

				container.scrollTop(0);
				container.scrollLeft(0);
				
				// loop through parents adding the offset top of any elements that are relatively positioned between
				// the focused element and the jspPane so we can get the true distance from the top
				// of the focused element to the top of the scrollpane...
				while (!e.is('.jspPane')) {
					eleTop += e.position().top;
					eleLeft += e.position().left;
					e = e.offsetParent();
					if (/^body|html$/i.test(e[0].nodeName)) {
						// we ended up too high in the document structure. Quit!
						return;
					}
				}

				viewportTop = contentPositionY();
				maxVisibleEleTop = viewportTop + paneHeight;
				if (eleTop < viewportTop || stickToTop) { // element is above viewport
					destY = eleTop - settings.horizontalGutter;
				} else if (eleTop + eleHeight > maxVisibleEleTop) { // element is below viewport
					destY = eleTop - paneHeight + eleHeight + settings.horizontalGutter;
				}
				if (!isNaN(destY)) {
					scrollToY(destY, animate);
				}
				
				viewportLeft = contentPositionX();
	            maxVisibleEleLeft = viewportLeft + paneWidth;
	            if (eleLeft < viewportLeft || stickToTop) { // element is to the left of viewport
	                destX = eleLeft - settings.horizontalGutter;
	            } else if (eleLeft + eleWidth > maxVisibleEleLeft) { // element is to the right viewport
	                destX = eleLeft - paneWidth + eleWidth + settings.horizontalGutter;
	            }
	            if (!isNaN(destX)) {
	                scrollToX(destX, animate);
	            }

			}

			function contentPositionX()
			{
				return -pane.position().left;
			}

			function contentPositionY()
			{
				return -pane.position().top;
			}

			function isCloseToBottom()
			{
				var scrollableHeight = contentHeight - paneHeight;
				return (scrollableHeight > 20) && (scrollableHeight - contentPositionY() < 10);
			}

			function isCloseToRight()
			{
				var scrollableWidth = contentWidth - paneWidth;
				return (scrollableWidth > 20) && (scrollableWidth - contentPositionX() < 10);
			}

			function initMousewheel()
			{
				container.unbind(mwEvent).bind(
					mwEvent,
					function (event, delta, deltaX, deltaY) {

                        if (!horizontalDragPosition) horizontalDragPosition = 0;
                        if (!verticalDragPosition) verticalDragPosition = 0;

						var dX = horizontalDragPosition, dY = verticalDragPosition, factor = event.deltaFactor || settings.mouseWheelSpeed;
						jsp.scrollBy(deltaX * factor, -deltaY * factor, false);
						// return true if there was no movement so rest of screen can scroll
						return dX == horizontalDragPosition && dY == verticalDragPosition;
					}
				);
			}

			function removeMousewheel()
			{
				container.unbind(mwEvent);
			}

			function nil()
			{
				return false;
			}

			function initFocusHandler()
			{
				pane.find(':input,a').unbind('focus.jsp').bind(
					'focus.jsp',
					function(e)
					{
						scrollToElement(e.target, false);
					}
				);
			}

			function removeFocusHandler()
			{
				pane.find(':input,a').unbind('focus.jsp');
			}
			
			function initKeyboardNav()
			{
				var keyDown, elementHasScrolled, validParents = [];
				isScrollableH && validParents.push(horizontalBar[0]);
				isScrollableV && validParents.push(verticalBar[0]);
				
				// IE also focuses elements that don't have tabindex set.
				pane.focus(
					function()
					{
						elem.focus();
					}
				);
				
				elem.attr('tabindex', 0)
					.unbind('keydown.jsp keypress.jsp')
					.bind(
						'keydown.jsp',
						function(e)
						{
							if (e.target !== this && !(validParents.length && $(e.target).closest(validParents).length)){
								return;
							}
							var dX = horizontalDragPosition, dY = verticalDragPosition;
							switch(e.keyCode) {
								case 40: // down
								case 38: // up
								case 34: // page down
								case 32: // space
								case 33: // page up
								case 39: // right
								case 37: // left
									keyDown = e.keyCode;
									keyDownHandler();
									break;
								case 35: // end
									scrollToY(contentHeight - paneHeight);
									keyDown = null;
									break;
								case 36: // home
									scrollToY(0);
									keyDown = null;
									break;
							}

							elementHasScrolled = e.keyCode == keyDown && dX != horizontalDragPosition || dY != verticalDragPosition;
							return !elementHasScrolled;
						}
					).bind(
						'keypress.jsp', // For FF/ OSX so that we can cancel the repeat key presses if the JSP scrolls...
						function(e)
						{
							if (e.keyCode == keyDown) {
								keyDownHandler();
							}
							return !elementHasScrolled;
						}
					);
				
				if (settings.hideFocus) {
					elem.css('outline', 'none');
					if ('hideFocus' in container[0]){
						elem.attr('hideFocus', true);
					}
				} else {
					elem.css('outline', '');
					if ('hideFocus' in container[0]){
						elem.attr('hideFocus', false);
					}
				}
				
				function keyDownHandler()
				{
					var dX = horizontalDragPosition, dY = verticalDragPosition;
					switch(keyDown) {
						case 40: // down
							jsp.scrollByY(settings.keyboardSpeed, false);
							break;
						case 38: // up
							jsp.scrollByY(-settings.keyboardSpeed, false);
							break;
						case 34: // page down
						case 32: // space
							jsp.scrollByY(paneHeight * settings.scrollPagePercent, false);
							break;
						case 33: // page up
							jsp.scrollByY(-paneHeight * settings.scrollPagePercent, false);
							break;
						case 39: // right
							jsp.scrollByX(settings.keyboardSpeed, false);
							break;
						case 37: // left
							jsp.scrollByX(-settings.keyboardSpeed, false);
							break;
					}

					elementHasScrolled = dX != horizontalDragPosition || dY != verticalDragPosition;
					return elementHasScrolled;
				}
			}
			
			function removeKeyboardNav()
			{
				elem.attr('tabindex', '-1')
					.removeAttr('tabindex')
					.unbind('keydown.jsp keypress.jsp');
			}

			function observeHash()
			{
				if (location.hash && location.hash.length > 1) {
					var e,
						retryInt,
						hash = escape(location.hash.substr(1)) // hash must be escaped to prevent XSS
						;
					try {
						e = $('#' + hash + ', a[name="' + hash + '"]');
					} catch (err) {
						return;
					}

					if (e.length && pane.find(hash)) {
						// nasty workaround but it appears to take a little while before the hash has done its thing
						// to the rendered page so we just wait until the container's scrollTop has been messed up.
						if (container.scrollTop() === 0) {
							retryInt = setInterval(
								function()
								{
									if (container.scrollTop() > 0) {
										scrollToElement(e, true);
										$(document).scrollTop(container.position().top);
										clearInterval(retryInt);
									}
								},
								50
							);
						} else {
							scrollToElement(e, true);
							$(document).scrollTop(container.position().top);
						}
					}
				}
			}

			function hijackInternalLinks()
			{
				// only register the link handler once
				if ($(document.body).data('jspHijack')) {
					return;
				}

				// remember that the handler was bound
				$(document.body).data('jspHijack', true);

				// use live handler to also capture newly created links
				$(document.body).delegate('a[href*=#]', 'click', function(event) {
					// does the link point to the same page?
					// this also takes care of cases with a <base>-Tag or Links not starting with the hash #
					// e.g. <a href="index.html#test"> when the current url already is index.html
					var href = this.href.substr(0, this.href.indexOf('#')),
						locationHref = location.href,
						hash,
						element,
						container,
						jsp,
						scrollTop,
						elementTop;
					if (location.href.indexOf('#') !== -1) {
						locationHref = location.href.substr(0, location.href.indexOf('#'));
					}
					if (href !== locationHref) {
						// the link points to another page
						return;
					}

					// check if jScrollPane should handle this click event
					hash = escape(this.href.substr(this.href.indexOf('#') + 1));

					// find the element on the page
					element;
					try {
						element = $('#' + hash + ', a[name="' + hash + '"]');
					} catch (e) {
						// hash is not a valid jQuery identifier
						return;
					}

					if (!element.length) {
						// this link does not point to an element on this page
						return;
					}

					container = element.closest('.jspScrollable');
					jsp = container.data('jsp');

					// jsp might be another jsp instance than the one, that bound this event
					// remember: this event is only bound once for all instances.
					jsp.scrollToElement(element, true);

					if (container[0].scrollIntoView) {
						// also scroll to the top of the container (if it is not visible)
						scrollTop = $(window).scrollTop();
						elementTop = element.offset().top;
						if (elementTop < scrollTop || elementTop > scrollTop + $(window).height()) {
							container[0].scrollIntoView();
						}
					}

					// jsp handled this event, prevent the browser default (scrolling :P)
					event.preventDefault();
				});
			}
			
			// Init touch on iPad, iPhone, iPod, Android
			function initTouch()
			{
				var startX,
					startY,
					touchStartX,
					touchStartY,
					moved,
					moving = false;
  
				container.unbind('touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick').bind(
					'touchstart.jsp',
					function(e)
					{
						var touch = e.originalEvent.touches[0];
						startX = contentPositionX();
						startY = contentPositionY();
						touchStartX = touch.pageX;
						touchStartY = touch.pageY;
						moved = false;
						moving = true;
					}
				).bind(
					'touchmove.jsp',
					function(ev)
					{
						if(!moving) {
							return;
						}
						
						var touchPos = ev.originalEvent.touches[0],
							dX = horizontalDragPosition, dY = verticalDragPosition;
						
						jsp.scrollTo(startX + touchStartX - touchPos.pageX, startY + touchStartY - touchPos.pageY);
						
						moved = moved || Math.abs(touchStartX - touchPos.pageX) > 5 || Math.abs(touchStartY - touchPos.pageY) > 5;
						
						// return true if there was no movement so rest of screen can scroll
						return dX == horizontalDragPosition && dY == verticalDragPosition;
					}
				).bind(
					'touchend.jsp',
					function(e)
					{
						moving = false;
						/*if(moved) {
							return false;
						}*/
					}
				).bind(
					'click.jsp-touchclick',
					function(e)
					{
						if(moved) {
							moved = false;
							return false;
						}
					}
				);
			}
			
			function destroy(){
				var currentY = contentPositionY(),
					currentX = contentPositionX();
				elem.removeClass('jspScrollable').unbind('.jsp');
				elem.replaceWith(originalElement.append(pane.children()));
				originalElement.scrollTop(currentY);
				originalElement.scrollLeft(currentX);

				// clear reinitialize timer if active
				if (reinitialiseInterval) {
					clearInterval(reinitialiseInterval);
				}
			}

			// Public API
			$.extend(
				jsp,
				{
					// Reinitialises the scroll pane (if it's internal dimensions have changed since the last time it
					// was initialised). The settings object which is passed in will override any settings from the
					// previous time it was initialised - if you don't pass any settings then the ones from the previous
					// initialisation will be used.
					reinitialise: function(s)
					{
						s = $.extend({}, settings, s);
						initialise(s);
					},
					// Scrolls the specified element (a jQuery object, DOM node or jQuery selector string) into view so
					// that it can be seen within the viewport. If stickToTop is true then the element will appear at
					// the top of the viewport, if it is false then the viewport will scroll as little as possible to
					// show the element. You can also specify if you want animation to occur. If you don't provide this
					// argument then the animateScroll value from the settings object is used instead.
					scrollToElement: function(ele, stickToTop, animate)
					{
						scrollToElement(ele, stickToTop, animate);
					},
					// Scrolls the pane so that the specified co-ordinates within the content are at the top left
					// of the viewport. animate is optional and if not passed then the value of animateScroll from
					// the settings object this jScrollPane was initialised with is used.
					scrollTo: function(destX, destY, animate)
					{
						scrollToX(destX, animate);
						scrollToY(destY, animate);
					},
					// Scrolls the pane so that the specified co-ordinate within the content is at the left of the
					// viewport. animate is optional and if not passed then the value of animateScroll from the settings
					// object this jScrollPane was initialised with is used.
					scrollToX: function(destX, animate)
					{
						scrollToX(destX, animate);
					},
					// Scrolls the pane so that the specified co-ordinate within the content is at the top of the
					// viewport. animate is optional and if not passed then the value of animateScroll from the settings
					// object this jScrollPane was initialised with is used.
					scrollToY: function(destY, animate)
					{
						scrollToY(destY, animate);
					},
					// Scrolls the pane to the specified percentage of its maximum horizontal scroll position. animate
					// is optional and if not passed then the value of animateScroll from the settings object this
					// jScrollPane was initialised with is used.
					scrollToPercentX: function(destPercentX, animate)
					{
						scrollToX(destPercentX * (contentWidth - paneWidth), animate);
					},
					// Scrolls the pane to the specified percentage of its maximum vertical scroll position. animate
					// is optional and if not passed then the value of animateScroll from the settings object this
					// jScrollPane was initialised with is used.
					scrollToPercentY: function(destPercentY, animate)
					{
						scrollToY(destPercentY * (contentHeight - paneHeight), animate);
					},
					// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
					// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
					scrollBy: function(deltaX, deltaY, animate)
					{
						jsp.scrollByX(deltaX, animate);
						jsp.scrollByY(deltaY, animate);
					},
					// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
					// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
					scrollByX: function(deltaX, animate)
					{
						var destX = contentPositionX() + Math[deltaX<0 ? 'floor' : 'ceil'](deltaX),
							percentScrolled = destX / (contentWidth - paneWidth);
						positionDragX(percentScrolled * dragMaxX, animate);
					},
					// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
					// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
					scrollByY: function(deltaY, animate)
					{
						var destY = contentPositionY() + Math[deltaY<0 ? 'floor' : 'ceil'](deltaY),
							percentScrolled = destY / (contentHeight - paneHeight);
						positionDragY(percentScrolled * dragMaxY, animate);
					},
					// Positions the horizontal drag at the specified x position (and updates the viewport to reflect
					// this). animate is optional and if not passed then the value of animateScroll from the settings
					// object this jScrollPane was initialised with is used.
					positionDragX: function(x, animate)
					{
						positionDragX(x, animate);
					},
					// Positions the vertical drag at the specified y position (and updates the viewport to reflect
					// this). animate is optional and if not passed then the value of animateScroll from the settings
					// object this jScrollPane was initialised with is used.
					positionDragY: function(y, animate)
					{
						positionDragY(y, animate);
					},
					// This method is called when jScrollPane is trying to animate to a new position. You can override
					// it if you want to provide advanced animation functionality. It is passed the following arguments:
					//  * ele          - the element whose position is being animated
					//  * prop         - the property that is being animated
					//  * value        - the value it's being animated to
					//  * stepCallback - a function that you must execute each time you update the value of the property
					// You can use the default implementation (below) as a starting point for your own implementation.
					animate: function(ele, prop, value, stepCallback)
					{
						var params = {};
						params[prop] = value;
						ele.animate(
							params,
							{
								'duration'	: settings.animateDuration,
								'easing'	: settings.animateEase,
								'queue'		: false,
								'step'		: stepCallback
							}
						);
					},
					// Returns the current x position of the viewport with regards to the content pane.
					getContentPositionX: function()
					{
						return contentPositionX();
					},
					// Returns the current y position of the viewport with regards to the content pane.
					getContentPositionY: function()
					{
						return contentPositionY();
					},
					// Returns the width of the content within the scroll pane.
					getContentWidth: function()
					{
						return contentWidth;
					},
					// Returns the height of the content within the scroll pane.
					getContentHeight: function()
					{
						return contentHeight;
					},
					// Returns the horizontal position of the viewport within the pane content.
					getPercentScrolledX: function()
					{
						return contentPositionX() / (contentWidth - paneWidth);
					},
					// Returns the vertical position of the viewport within the pane content.
					getPercentScrolledY: function()
					{
						return contentPositionY() / (contentHeight - paneHeight);
					},
					// Returns whether or not this scrollpane has a horizontal scrollbar.
					getIsScrollableH: function()
					{
						return isScrollableH;
					},
					// Returns whether or not this scrollpane has a vertical scrollbar.
					getIsScrollableV: function()
					{
						return isScrollableV;
					},
					// Gets a reference to the content pane. It is important that you use this method if you want to
					// edit the content of your jScrollPane as if you access the element directly then you may have some
					// problems (as your original element has had additional elements for the scrollbars etc added into
					// it).
					getContentPane: function()
					{
						return pane;
					},
					// Scrolls this jScrollPane down as far as it can currently scroll. If animate isn't passed then the
					// animateScroll value from settings is used instead.
					scrollToBottom: function(animate)
					{
						positionDragY(dragMaxY, animate);
					},
					// Hijacks the links on the page which link to content inside the scrollpane. If you have changed
					// the content of your page (e.g. via AJAX) and want to make sure any new anchor links to the
					// contents of your scroll pane will work then call this function.
					hijackInternalLinks: $.noop,
					// Removes the jScrollPane and returns the page to the state it was in before jScrollPane was
					// initialised.
					destroy: function()
					{
							destroy();
					}
				}
			);
			
			initialise(s);
		}

		// Pluginifying code...
		settings = $.extend({}, $.fn.jScrollPane.defaults, settings);
		
		// Apply default speed
		$.each(['arrowButtonSpeed', 'trackClickSpeed', 'keyboardSpeed'], function() {
			settings[this] = settings[this] || settings.speed;
		});

		return this.each(
			function()
			{
				var elem = $(this), jspApi = elem.data('jsp');
				if (jspApi) {
					jspApi.reinitialise(settings);
				} else {
					$("script",elem).filter('[type="text/javascript"],:not([type])').remove();
					jspApi = new JScrollPane(elem, settings);
					elem.data('jsp', jspApi);
				}
			}
		);
	};

	$.fn.jScrollPane.defaults = {
		showArrows					: false,
		maintainPosition			: true,
		stickToBottom				: false,
		stickToRight				: false,
		clickOnTrack				: true,
		autoReinitialise			: false,
		autoReinitialiseDelay		: 500,
		verticalDragMinHeight		: 0,
		verticalDragMaxHeight		: 99999,
		horizontalDragMinWidth		: 0,
		horizontalDragMaxWidth		: 99999,
		contentWidth				: undefined,
		animateScroll				: false,
		animateDuration				: 300,
		animateEase					: 'linear',
		hijackInternalLinks			: false,
		verticalGutter				: 4,
		horizontalGutter			: 4,
		mouseWheelSpeed				: 3,
		arrowButtonSpeed			: 0,
		arrowRepeatFreq				: 50,
		arrowScrollOnHover			: false,
		trackClickSpeed				: 0,
		trackClickRepeatFreq		: 70,
		verticalArrowPositions		: 'split',
		horizontalArrowPositions	: 'split',
		enableKeyboardNavigation	: true,
		hideFocus					: false,
		keyboardSpeed				: 0,
		initialDelay                : 300,        // Delay before starting repeating
		speed						: 30,		// Default speed when others falsey
		scrollPagePercent			: .8		// Percent of visible area scrolled when pageUp/Down or track area pressed
	};

},this));
/*!
 * Bootstrap v3.2.0 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.2.0",d.prototype.close=function(b){function c(){f.detach().trigger("closed.bs.alert").remove()}var d=a(this),e=d.attr("data-target");e||(e=d.attr("href"),e=e&&e.replace(/.*(?=#[^\s]*$)/,""));var f=a(e);b&&b.preventDefault(),f.length||(f=d.hasClass("alert")?d:d.parent()),f.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",c).emulateTransitionEnd(150):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.2.0",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),d[e](null==f[b]?this.options[b]:f[b]),setTimeout(a.proxy(function(){"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")&&(c.prop("checked")&&this.$element.hasClass("active")?a=!1:b.find(".active").removeClass("active")),a&&c.prop("checked",!this.$element.hasClass("active")).trigger("change")}a&&this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target);d.hasClass("btn")||(d=d.closest(".btn")),b.call(d,"toggle"),c.preventDefault()})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b).on("keydown.bs.carousel",a.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.2.0",c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},c.prototype.keydown=function(a){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.to=function(b){var c=this,d=this.getItemIndex(this.$active=this.$element.find(".item.active"));return b>this.$items.length-1||0>b?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){c.to(b)}):d==b?this.pause().cycle():this.slide(b>d?"next":"prev",a(this.$items[b]))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){return this.sliding?void 0:this.slide("next")},c.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},c.prototype.slide=function(b,c){var d=this.$element.find(".item.active"),e=c||d[b](),f=this.interval,g="next"==b?"left":"right",h="next"==b?"first":"last",i=this;if(!e.length){if(!this.options.wrap)return;e=this.$element.find(".item")[h]()}if(e.hasClass("active"))return this.sliding=!1;var j=e[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:g});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,f&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(e)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:g});return a.support.transition&&this.$element.hasClass("slide")?(e.addClass(b),e[0].offsetWidth,d.addClass(g),e.addClass(g),d.one("bsTransitionEnd",function(){e.removeClass([b,g].join(" ")).addClass("active"),d.removeClass(["active",g].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(1e3*d.css("transition-duration").slice(0,-1))):(d.removeClass("active"),e.addClass("active"),this.sliding=!1,this.$element.trigger(m)),f&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this},a(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}}),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.collapse"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b);!e&&f.toggle&&"show"==b&&(b=!b),e||d.data("bs.collapse",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.transitioning=null,this.options.parent&&(this.$parent=a(this.options.parent)),this.options.toggle&&this.toggle()};c.VERSION="3.2.0",c.DEFAULTS={toggle:!0},c.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},c.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var c=a.Event("show.bs.collapse");if(this.$element.trigger(c),!c.isDefaultPrevented()){var d=this.$parent&&this.$parent.find("> .panel > .in");if(d&&d.length){var e=d.data("bs.collapse");if(e&&e.transitioning)return;b.call(d,"hide"),e||d.data("bs.collapse",null)}var f=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[f](0),this.transitioning=1;var g=function(){this.$element.removeClass("collapsing").addClass("collapse in")[f](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return g.call(this);var h=a.camelCase(["scroll",f].join("-"));this.$element.one("bsTransitionEnd",a.proxy(g,this)).emulateTransitionEnd(350)[f](this.$element[0][h])}}},c.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var d=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(d,this)).emulateTransitionEnd(350):d.call(this)}}},c.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var d=a.fn.collapse;a.fn.collapse=b,a.fn.collapse.Constructor=c,a.fn.collapse.noConflict=function(){return a.fn.collapse=d,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(c){var d,e=a(this),f=e.attr("data-target")||c.preventDefault()||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""),g=a(f),h=g.data("bs.collapse"),i=h?"toggle":e.data(),j=e.attr("data-parent"),k=j&&a(j);h&&h.transitioning||(k&&k.find('[data-toggle="collapse"][data-parent="'+j+'"]').not(e).addClass("collapsed"),e[g.hasClass("in")?"addClass":"removeClass"]("collapsed")),b.call(g,i)})}(jQuery),+function(a){"use strict";function b(b){b&&3===b.which||(a(e).remove(),a(f).each(function(){var d=c(a(this)),e={relatedTarget:this};d.hasClass("open")&&(d.trigger(b=a.Event("hide.bs.dropdown",e)),b.isDefaultPrevented()||d.removeClass("open").trigger("hidden.bs.dropdown",e))}))}function c(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.2.0",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=c(e),g=f.hasClass("open");if(b(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click",b);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus"),f.toggleClass("open").trigger("shown.bs.dropdown",h)}return!1}},g.prototype.keydown=function(b){if(/(38|40|27)/.test(b.keyCode)){var d=a(this);if(b.preventDefault(),b.stopPropagation(),!d.is(".disabled, :disabled")){var e=c(d),g=e.hasClass("open");if(!g||g&&27==b.keyCode)return 27==b.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.divider):visible a",i=e.find('[role="menu"]'+h+', [role="listbox"]'+h);if(i.length){var j=i.index(i.filter(":focus"));38==b.keyCode&&j>0&&j--,40==b.keyCode&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",b).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f+', [role="menu"], [role="listbox"]',g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.2.0",c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var c=this,d=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(d),this.isShown||d.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.backdrop(function(){var d=a.support.transition&&c.$element.hasClass("fade");c.$element.parent().length||c.$element.appendTo(c.$body),c.$element.show().scrollTop(0),d&&c.$element[0].offsetWidth,c.$element.addClass("in").attr("aria-hidden",!1),c.enforceFocus();var e=a.Event("shown.bs.modal",{relatedTarget:b});d?c.$element.find(".modal-dialog").one("bsTransitionEnd",function(){c.$element.trigger("focus").trigger(e)}).emulateTransitionEnd(300):c.$element.trigger("focus").trigger(e)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var c=this,d=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var e=a.support.transition&&d;if(this.$backdrop=a('<div class="modal-backdrop '+d+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),e&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;e?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(150):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var f=function(){c.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",f).emulateTransitionEnd(150):f()}else b&&b()},c.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;(e||"destroy"!=b)&&(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",a,b)};c.VERSION="3.2.0",c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(this.options.viewport.selector||this.options.viewport);for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show()},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var c=a.contains(document.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!c)return;var d=this,e=this.tip(),f=this.getUID(this.type);this.setContent(),e.attr("id",f),this.$element.attr("aria-describedby",f),this.options.animation&&e.addClass("fade");var g="function"==typeof this.options.placement?this.options.placement.call(this,e[0],this.$element[0]):this.options.placement,h=/\s?auto?\s?/i,i=h.test(g);i&&(g=g.replace(h,"")||"top"),e.detach().css({top:0,left:0,display:"block"}).addClass(g).data("bs."+this.type,this),this.options.container?e.appendTo(this.options.container):e.insertAfter(this.$element);var j=this.getPosition(),k=e[0].offsetWidth,l=e[0].offsetHeight;if(i){var m=g,n=this.$element.parent(),o=this.getPosition(n);g="bottom"==g&&j.top+j.height+l-o.scroll>o.height?"top":"top"==g&&j.top-o.scroll-l<0?"bottom":"right"==g&&j.right+k>o.width?"left":"left"==g&&j.left-k<o.left?"right":g,e.removeClass(m).addClass(g)}var p=this.getCalculatedOffset(g,j,k,l);this.applyPlacement(p,g);var q=function(){d.$element.trigger("shown.bs."+d.type),d.hoverState=null};a.support.transition&&this.$tip.hasClass("fade")?e.one("bsTransitionEnd",q).emulateTransitionEnd(150):q()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top=b.top+g,b.left=b.left+h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=k.left?2*k.left-e+i:2*k.top-f+j,m=k.left?"left":"top",n=k.left?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(l,d[0][n],m)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c,a?50*(1-a/b)+"%":"")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(){function b(){"in"!=c.hoverState&&d.detach(),c.$element.trigger("hidden.bs."+c.type)}var c=this,d=this.tip(),e=a.Event("hide.bs."+this.type);return this.$element.removeAttr("aria-describedby"),this.$element.trigger(e),e.isDefaultPrevented()?void 0:(d.removeClass("in"),a.support.transition&&this.$tip.hasClass("fade")?d.one("bsTransitionEnd",b).emulateTransitionEnd(150):b(),this.hoverState=null,this)},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName;return a.extend({},"function"==typeof c.getBoundingClientRect?c.getBoundingClientRect():null,{scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop(),width:d?a(window).width():b.outerWidth(),height:d?a(window).height():b.outerHeight()},d?{top:0,left:0}:b.offset())},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.width&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;(e||"destroy"!=b)&&(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.2.0",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").empty()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},c.prototype.tip=function(){return this.$tip||(this.$tip=a(this.options.template)),this.$tip};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){var e=a.proxy(this.process,this);this.$body=a("body"),this.$scrollElement=a(a(c).is("body")?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",e),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.2.0",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b="offset",c=0;a.isWindow(this.$scrollElement[0])||(b="position",c=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var d=this;this.$body.find(this.selector).map(function(){var d=a(this),e=d.data("target")||d.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[b]().top+c,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){d.offsets.push(this[0]),d.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<=e[0])return g!=(a=f[0])&&this.activate(a);for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(!e[a+1]||b<=e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,a(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.2.0",c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a")[0],f=a.Event("show.bs.tab",{relatedTarget:e});if(b.trigger(f),!f.isDefaultPrevented()){var g=a(d);this.activate(b.closest("li"),c),this.activate(g,g.parent(),function(){b.trigger({type:"shown.bs.tab",relatedTarget:e})})}}},c.prototype.activate=function(b,c,d){function e(){f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),b.addClass("active"),g?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu")&&b.closest("li.dropdown").addClass("active"),d&&d()}var f=c.find("> .active"),g=d&&a.support.transition&&f.hasClass("fade");g?f.one("bsTransitionEnd",e).emulateTransitionEnd(150):e(),f.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this},a(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(c){c.preventDefault(),b.call(a(this),"show")})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.2.0",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=a(document).height(),d=this.$target.scrollTop(),e=this.$element.offset(),f=this.options.offset,g=f.top,h=f.bottom;"object"!=typeof f&&(h=g=f),"function"==typeof g&&(g=f.top(this.$element)),"function"==typeof h&&(h=f.bottom(this.$element));var i=null!=this.unpin&&d+this.unpin<=e.top?!1:null!=h&&e.top+this.$element.height()>=b-h?"bottom":null!=g&&g>=d?"top":!1;if(this.affixed!==i){null!=this.unpin&&this.$element.css("top","");var j="affix"+(i?"-"+i:""),k=a.Event(j+".bs.affix");this.$element.trigger(k),k.isDefaultPrevented()||(this.affixed=i,this.unpin="bottom"==i?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(j).trigger(a.Event(j.replace("affix","affixed"))),"bottom"==i&&this.$element.offset({top:b-this.$element.height()-h}))}}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},d.offsetBottom&&(d.offset.bottom=d.offsetBottom),d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
/*
 AngularJS v1.2.27
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(W,X,u){'use strict';function z(b){return function(){var a=arguments[0],c,a="["+(b?b+":":"")+a+"] http://errors.angularjs.org/1.2.27/"+(b?b+"/":"")+a;for(c=1;c<arguments.length;c++)a=a+(1==c?"?":"&")+"p"+(c-1)+"="+encodeURIComponent("function"==typeof arguments[c]?arguments[c].toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof arguments[c]?"undefined":"string"!=typeof arguments[c]?JSON.stringify(arguments[c]):arguments[c]);return Error(a)}}function Sa(b){if(null==b||Ja(b))return!1;
var a=b.length;return 1===b.nodeType&&a?!0:G(b)||L(b)||0===a||"number"===typeof a&&0<a&&a-1 in b}function r(b,a,c){var d;if(b)if(N(b))for(d in b)"prototype"==d||("length"==d||"name"==d||b.hasOwnProperty&&!b.hasOwnProperty(d))||a.call(c,b[d],d);else if(L(b)||Sa(b))for(d=0;d<b.length;d++)a.call(c,b[d],d);else if(b.forEach&&b.forEach!==r)b.forEach(a,c);else for(d in b)b.hasOwnProperty(d)&&a.call(c,b[d],d);return b}function Xb(b){var a=[],c;for(c in b)b.hasOwnProperty(c)&&a.push(c);return a.sort()}function Sc(b,
a,c){for(var d=Xb(b),e=0;e<d.length;e++)a.call(c,b[d[e]],d[e]);return d}function Yb(b){return function(a,c){b(c,a)}}function ib(){for(var b=na.length,a;b;){b--;a=na[b].charCodeAt(0);if(57==a)return na[b]="A",na.join("");if(90==a)na[b]="0";else return na[b]=String.fromCharCode(a+1),na.join("")}na.unshift("0");return na.join("")}function Zb(b,a){a?b.$$hashKey=a:delete b.$$hashKey}function E(b){var a=b.$$hashKey;r(arguments,function(a){a!==b&&r(a,function(a,c){b[c]=a})});Zb(b,a);return b}function U(b){return parseInt(b,
10)}function $b(b,a){return E(new (E(function(){},{prototype:b})),a)}function v(){}function ga(b){return b}function aa(b){return function(){return b}}function F(b){return"undefined"===typeof b}function D(b){return"undefined"!==typeof b}function T(b){return null!=b&&"object"===typeof b}function G(b){return"string"===typeof b}function jb(b){return"number"===typeof b}function va(b){return"[object Date]"===Ba.call(b)}function N(b){return"function"===typeof b}function kb(b){return"[object RegExp]"===Ba.call(b)}
function Ja(b){return b&&b.document&&b.location&&b.alert&&b.setInterval}function Tc(b){return!(!b||!(b.nodeName||b.prop&&b.attr&&b.find))}function Uc(b,a,c){var d=[];r(b,function(b,f,g){d.push(a.call(c,b,f,g))});return d}function Ta(b,a){if(b.indexOf)return b.indexOf(a);for(var c=0;c<b.length;c++)if(a===b[c])return c;return-1}function Ua(b,a){var c=Ta(b,a);0<=c&&b.splice(c,1);return a}function Ka(b,a,c,d){if(Ja(b)||b&&b.$evalAsync&&b.$watch)throw Va("cpws");if(a){if(b===a)throw Va("cpi");c=c||[];
d=d||[];if(T(b)){var e=Ta(c,b);if(-1!==e)return d[e];c.push(b);d.push(a)}if(L(b))for(var f=a.length=0;f<b.length;f++)e=Ka(b[f],null,c,d),T(b[f])&&(c.push(b[f]),d.push(e)),a.push(e);else{var g=a.$$hashKey;L(a)?a.length=0:r(a,function(b,c){delete a[c]});for(f in b)e=Ka(b[f],null,c,d),T(b[f])&&(c.push(b[f]),d.push(e)),a[f]=e;Zb(a,g)}}else if(a=b)L(b)?a=Ka(b,[],c,d):va(b)?a=new Date(b.getTime()):kb(b)?(a=RegExp(b.source,b.toString().match(/[^\/]*$/)[0]),a.lastIndex=b.lastIndex):T(b)&&(a=Ka(b,{},c,d));
return a}function ha(b,a){if(L(b)){a=a||[];for(var c=0;c<b.length;c++)a[c]=b[c]}else if(T(b))for(c in a=a||{},b)!lb.call(b,c)||"$"===c.charAt(0)&&"$"===c.charAt(1)||(a[c]=b[c]);return a||b}function Ca(b,a){if(b===a)return!0;if(null===b||null===a)return!1;if(b!==b&&a!==a)return!0;var c=typeof b,d;if(c==typeof a&&"object"==c)if(L(b)){if(!L(a))return!1;if((c=b.length)==a.length){for(d=0;d<c;d++)if(!Ca(b[d],a[d]))return!1;return!0}}else{if(va(b))return va(a)?isNaN(b.getTime())&&isNaN(a.getTime())||b.getTime()===
a.getTime():!1;if(kb(b)&&kb(a))return b.toString()==a.toString();if(b&&b.$evalAsync&&b.$watch||a&&a.$evalAsync&&a.$watch||Ja(b)||Ja(a)||L(a))return!1;c={};for(d in b)if("$"!==d.charAt(0)&&!N(b[d])){if(!Ca(b[d],a[d]))return!1;c[d]=!0}for(d in a)if(!c.hasOwnProperty(d)&&"$"!==d.charAt(0)&&a[d]!==u&&!N(a[d]))return!1;return!0}return!1}function Bb(b,a){var c=2<arguments.length?wa.call(arguments,2):[];return!N(a)||a instanceof RegExp?a:c.length?function(){return arguments.length?a.apply(b,c.concat(wa.call(arguments,
0))):a.apply(b,c)}:function(){return arguments.length?a.apply(b,arguments):a.call(b)}}function Vc(b,a){var c=a;"string"===typeof b&&"$"===b.charAt(0)?c=u:Ja(a)?c="$WINDOW":a&&X===a?c="$DOCUMENT":a&&(a.$evalAsync&&a.$watch)&&(c="$SCOPE");return c}function oa(b,a){return"undefined"===typeof b?u:JSON.stringify(b,Vc,a?"  ":null)}function ac(b){return G(b)?JSON.parse(b):b}function Wa(b){"function"===typeof b?b=!0:b&&0!==b.length?(b=x(""+b),b=!("f"==b||"0"==b||"false"==b||"no"==b||"n"==b||"[]"==b)):b=!1;
return b}function ia(b){b=A(b).clone();try{b.empty()}catch(a){}var c=A("<div>").append(b).html();try{return 3===b[0].nodeType?x(c):c.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(a,b){return"<"+x(b)})}catch(d){return x(c)}}function bc(b){try{return decodeURIComponent(b)}catch(a){}}function cc(b){var a={},c,d;r((b||"").split("&"),function(b){b&&(c=b.replace(/\+/g,"%20").split("="),d=bc(c[0]),D(d)&&(b=D(c[1])?bc(c[1]):!0,lb.call(a,d)?L(a[d])?a[d].push(b):a[d]=[a[d],b]:a[d]=b))});return a}function Cb(b){var a=
[];r(b,function(b,d){L(b)?r(b,function(b){a.push(Da(d,!0)+(!0===b?"":"="+Da(b,!0)))}):a.push(Da(d,!0)+(!0===b?"":"="+Da(b,!0)))});return a.length?a.join("&"):""}function mb(b){return Da(b,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Da(b,a){return encodeURIComponent(b).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,a?"%20":"+")}function Wc(b,a){function c(a){a&&d.push(a)}var d=[b],e,f,g=["ng:app","ng-app","x-ng-app",
"data-ng-app"],h=/\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;r(g,function(a){g[a]=!0;c(X.getElementById(a));a=a.replace(":","\\:");b.querySelectorAll&&(r(b.querySelectorAll("."+a),c),r(b.querySelectorAll("."+a+"\\:"),c),r(b.querySelectorAll("["+a+"]"),c))});r(d,function(a){if(!e){var b=h.exec(" "+a.className+" ");b?(e=a,f=(b[2]||"").replace(/\s+/g,",")):r(a.attributes,function(b){!e&&g[b.name]&&(e=a,f=b.value)})}});e&&a(e,f?[f]:[])}function dc(b,a){var c=function(){b=A(b);if(b.injector()){var c=b[0]===X?
"document":ia(b);throw Va("btstrpd",c.replace(/</,"&lt;").replace(/>/,"&gt;"));}a=a||[];a.unshift(["$provide",function(a){a.value("$rootElement",b)}]);a.unshift("ng");c=ec(a);c.invoke(["$rootScope","$rootElement","$compile","$injector","$animate",function(a,b,c,d,e){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return c},d=/^NG_DEFER_BOOTSTRAP!/;if(W&&!d.test(W.name))return c();W.name=W.name.replace(d,"");Xa.resumeBootstrap=function(b){r(b,function(b){a.push(b)});c()}}function nb(b,a){a=
a||"_";return b.replace(Xc,function(b,d){return(d?a:"")+b.toLowerCase()})}function Db(b,a,c){if(!b)throw Va("areq",a||"?",c||"required");return b}function Ya(b,a,c){c&&L(b)&&(b=b[b.length-1]);Db(N(b),a,"not a function, got "+(b&&"object"===typeof b?b.constructor.name||"Object":typeof b));return b}function Ea(b,a){if("hasOwnProperty"===b)throw Va("badname",a);}function fc(b,a,c){if(!a)return b;a=a.split(".");for(var d,e=b,f=a.length,g=0;g<f;g++)d=a[g],b&&(b=(e=b)[d]);return!c&&N(b)?Bb(e,b):b}function Eb(b){var a=
b[0];b=b[b.length-1];if(a===b)return A(a);var c=[a];do{a=a.nextSibling;if(!a)break;c.push(a)}while(a!==b);return A(c)}function Yc(b){var a=z("$injector"),c=z("ng");b=b.angular||(b.angular={});b.$$minErr=b.$$minErr||z;return b.module||(b.module=function(){var b={};return function(e,f,g){if("hasOwnProperty"===e)throw c("badname","module");f&&b.hasOwnProperty(e)&&(b[e]=null);return b[e]||(b[e]=function(){function b(a,d,e){return function(){c[e||"push"]([a,d,arguments]);return n}}if(!f)throw a("nomod",
e);var c=[],d=[],l=b("$injector","invoke"),n={_invokeQueue:c,_runBlocks:d,requires:f,name:e,provider:b("$provide","provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:b("$provide","value"),constant:b("$provide","constant","unshift"),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider","register"),directive:b("$compileProvider","directive"),config:l,run:function(a){d.push(a);return this}};g&&l(g);return n}())}}())}
function Zc(b){E(b,{bootstrap:dc,copy:Ka,extend:E,equals:Ca,element:A,forEach:r,injector:ec,noop:v,bind:Bb,toJson:oa,fromJson:ac,identity:ga,isUndefined:F,isDefined:D,isString:G,isFunction:N,isObject:T,isNumber:jb,isElement:Tc,isArray:L,version:$c,isDate:va,lowercase:x,uppercase:La,callbacks:{counter:0},$$minErr:z,$$csp:Za});$a=Yc(W);try{$a("ngLocale")}catch(a){$a("ngLocale",[]).provider("$locale",ad)}$a("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:bd});a.provider("$compile",
gc).directive({a:cd,input:hc,textarea:hc,form:dd,script:ed,select:fd,style:gd,option:hd,ngBind:id,ngBindHtml:jd,ngBindTemplate:kd,ngClass:ld,ngClassEven:md,ngClassOdd:nd,ngCloak:od,ngController:pd,ngForm:qd,ngHide:rd,ngIf:sd,ngInclude:td,ngInit:ud,ngNonBindable:vd,ngPluralize:wd,ngRepeat:xd,ngShow:yd,ngStyle:zd,ngSwitch:Ad,ngSwitchWhen:Bd,ngSwitchDefault:Cd,ngOptions:Dd,ngTransclude:Ed,ngModel:Fd,ngList:Gd,ngChange:Hd,required:ic,ngRequired:ic,ngValue:Id}).directive({ngInclude:Jd}).directive(Fb).directive(jc);
a.provider({$anchorScroll:Kd,$animate:Ld,$browser:Md,$cacheFactory:Nd,$controller:Od,$document:Pd,$exceptionHandler:Qd,$filter:kc,$interpolate:Rd,$interval:Sd,$http:Td,$httpBackend:Ud,$location:Vd,$log:Wd,$parse:Xd,$rootScope:Yd,$q:Zd,$sce:$d,$sceDelegate:ae,$sniffer:be,$templateCache:ce,$timeout:de,$window:ee,$$rAF:fe,$$asyncCallback:ge})}])}function ab(b){return b.replace(he,function(a,b,d,e){return e?d.toUpperCase():d}).replace(ie,"Moz$1")}function Gb(b,a,c,d){function e(b){var e=c&&b?[this.filter(b)]:
[this],k=a,m,l,n,q,p,s;if(!d||null!=b)for(;e.length;)for(m=e.shift(),l=0,n=m.length;l<n;l++)for(q=A(m[l]),k?q.triggerHandler("$destroy"):k=!k,p=0,q=(s=q.children()).length;p<q;p++)e.push(Fa(s[p]));return f.apply(this,arguments)}var f=Fa.fn[b],f=f.$original||f;e.$original=f;Fa.fn[b]=e}function S(b){if(b instanceof S)return b;G(b)&&(b=$(b));if(!(this instanceof S)){if(G(b)&&"<"!=b.charAt(0))throw Hb("nosel");return new S(b)}if(G(b)){var a=b;b=X;var c;if(c=je.exec(a))b=[b.createElement(c[1])];else{var d=
b,e;b=d.createDocumentFragment();c=[];if(Ib.test(a)){d=b.appendChild(d.createElement("div"));e=(ke.exec(a)||["",""])[1].toLowerCase();e=da[e]||da._default;d.innerHTML="<div>&#160;</div>"+e[1]+a.replace(le,"<$1></$2>")+e[2];d.removeChild(d.firstChild);for(a=e[0];a--;)d=d.lastChild;a=0;for(e=d.childNodes.length;a<e;++a)c.push(d.childNodes[a]);d=b.firstChild;d.textContent=""}else c.push(d.createTextNode(a));b.textContent="";b.innerHTML="";b=c}Jb(this,b);A(X.createDocumentFragment()).append(this)}else Jb(this,
b)}function Kb(b){return b.cloneNode(!0)}function Ma(b){Lb(b);var a=0;for(b=b.childNodes||[];a<b.length;a++)Ma(b[a])}function lc(b,a,c,d){if(D(d))throw Hb("offargs");var e=pa(b,"events");pa(b,"handle")&&(F(a)?r(e,function(a,c){bb(b,c,a);delete e[c]}):r(a.split(" "),function(a){F(c)?(bb(b,a,e[a]),delete e[a]):Ua(e[a]||[],c)}))}function Lb(b,a){var c=b.ng339,d=cb[c];d&&(a?delete cb[c].data[a]:(d.handle&&(d.events.$destroy&&d.handle({},"$destroy"),lc(b)),delete cb[c],b.ng339=u))}function pa(b,a,c){var d=
b.ng339,d=cb[d||-1];if(D(c))d||(b.ng339=d=++me,d=cb[d]={}),d[a]=c;else return d&&d[a]}function Mb(b,a,c){var d=pa(b,"data"),e=D(c),f=!e&&D(a),g=f&&!T(a);d||g||pa(b,"data",d={});if(e)d[a]=c;else if(f){if(g)return d&&d[a];E(d,a)}else return d}function Nb(b,a){return b.getAttribute?-1<(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+a+" "):!1}function ob(b,a){a&&b.setAttribute&&r(a.split(" "),function(a){b.setAttribute("class",$((" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g,
" ").replace(" "+$(a)+" "," ")))})}function pb(b,a){if(a&&b.setAttribute){var c=(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");r(a.split(" "),function(a){a=$(a);-1===c.indexOf(" "+a+" ")&&(c+=a+" ")});b.setAttribute("class",$(c))}}function Jb(b,a){if(a){a=a.nodeName||!D(a.length)||Ja(a)?[a]:a;for(var c=0;c<a.length;c++)b.push(a[c])}}function mc(b,a){return qb(b,"$"+(a||"ngController")+"Controller")}function qb(b,a,c){9==b.nodeType&&(b=b.documentElement);for(a=L(a)?a:[a];b;){for(var d=
0,e=a.length;d<e;d++)if((c=A.data(b,a[d]))!==u)return c;b=b.parentNode||11===b.nodeType&&b.host}}function nc(b){for(var a=0,c=b.childNodes;a<c.length;a++)Ma(c[a]);for(;b.firstChild;)b.removeChild(b.firstChild)}function oc(b,a){var c=rb[a.toLowerCase()];return c&&pc[b.nodeName]&&c}function ne(b,a){var c=function(c,e){c.preventDefault||(c.preventDefault=function(){c.returnValue=!1});c.stopPropagation||(c.stopPropagation=function(){c.cancelBubble=!0});c.target||(c.target=c.srcElement||X);if(F(c.defaultPrevented)){var f=
c.preventDefault;c.preventDefault=function(){c.defaultPrevented=!0;f.call(c)};c.defaultPrevented=!1}c.isDefaultPrevented=function(){return c.defaultPrevented||!1===c.returnValue};var g=ha(a[e||c.type]||[]);r(g,function(a){a.call(b,c)});8>=R?(c.preventDefault=null,c.stopPropagation=null,c.isDefaultPrevented=null):(delete c.preventDefault,delete c.stopPropagation,delete c.isDefaultPrevented)};c.elem=b;return c}function Na(b,a){var c=typeof b,d;"function"==c||"object"==c&&null!==b?"function"==typeof(d=
b.$$hashKey)?d=b.$$hashKey():d===u&&(d=b.$$hashKey=(a||ib)()):d=b;return c+":"+d}function db(b,a){if(a){var c=0;this.nextUid=function(){return++c}}r(b,this.put,this)}function qc(b){var a,c;"function"===typeof b?(a=b.$inject)||(a=[],b.length&&(c=b.toString().replace(oe,""),c=c.match(pe),r(c[1].split(qe),function(b){b.replace(re,function(b,c,d){a.push(d)})})),b.$inject=a):L(b)?(c=b.length-1,Ya(b[c],"fn"),a=b.slice(0,c)):Ya(b,"fn",!0);return a}function ec(b){function a(a){return function(b,c){if(T(b))r(b,
Yb(a));else return a(b,c)}}function c(a,b){Ea(a,"service");if(N(b)||L(b))b=n.instantiate(b);if(!b.$get)throw eb("pget",a);return l[a+h]=b}function d(a,b){return c(a,{$get:b})}function e(a){var b=[],c,d,f,h;r(a,function(a){if(!m.get(a)){m.put(a,!0);try{if(G(a))for(c=$a(a),b=b.concat(e(c.requires)).concat(c._runBlocks),d=c._invokeQueue,f=0,h=d.length;f<h;f++){var g=d[f],k=n.get(g[0]);k[g[1]].apply(k,g[2])}else N(a)?b.push(n.invoke(a)):L(a)?b.push(n.invoke(a)):Ya(a,"module")}catch(p){throw L(a)&&(a=
a[a.length-1]),p.message&&(p.stack&&-1==p.stack.indexOf(p.message))&&(p=p.message+"\n"+p.stack),eb("modulerr",a,p.stack||p.message||p);}}});return b}function f(a,b){function c(d){if(a.hasOwnProperty(d)){if(a[d]===g)throw eb("cdep",d+" <- "+k.join(" <- "));return a[d]}try{return k.unshift(d),a[d]=g,a[d]=b(d)}catch(e){throw a[d]===g&&delete a[d],e;}finally{k.shift()}}function d(a,b,e){var f=[],h=qc(a),g,k,p;k=0;for(g=h.length;k<g;k++){p=h[k];if("string"!==typeof p)throw eb("itkn",p);f.push(e&&e.hasOwnProperty(p)?
e[p]:c(p))}L(a)&&(a=a[g]);return a.apply(b,f)}return{invoke:d,instantiate:function(a,b){var c=function(){},e;c.prototype=(L(a)?a[a.length-1]:a).prototype;c=new c;e=d(a,c,b);return T(e)||N(e)?e:c},get:c,annotate:qc,has:function(b){return l.hasOwnProperty(b+h)||a.hasOwnProperty(b)}}}var g={},h="Provider",k=[],m=new db([],!0),l={$provide:{provider:a(c),factory:a(d),service:a(function(a,b){return d(a,["$injector",function(a){return a.instantiate(b)}])}),value:a(function(a,b){return d(a,aa(b))}),constant:a(function(a,
b){Ea(a,"constant");l[a]=b;q[a]=b}),decorator:function(a,b){var c=n.get(a+h),d=c.$get;c.$get=function(){var a=p.invoke(d,c);return p.invoke(b,null,{$delegate:a})}}}},n=l.$injector=f(l,function(){throw eb("unpr",k.join(" <- "));}),q={},p=q.$injector=f(q,function(a){a=n.get(a+h);return p.invoke(a.$get,a)});r(e(b),function(a){p.invoke(a||v)});return p}function Kd(){var b=!0;this.disableAutoScrolling=function(){b=!1};this.$get=["$window","$location","$rootScope",function(a,c,d){function e(a){var b=null;
r(a,function(a){b||"a"!==x(a.nodeName)||(b=a)});return b}function f(){var b=c.hash(),d;b?(d=g.getElementById(b))?d.scrollIntoView():(d=e(g.getElementsByName(b)))?d.scrollIntoView():"top"===b&&a.scrollTo(0,0):a.scrollTo(0,0)}var g=a.document;b&&d.$watch(function(){return c.hash()},function(){d.$evalAsync(f)});return f}]}function ge(){this.$get=["$$rAF","$timeout",function(b,a){return b.supported?function(a){return b(a)}:function(b){return a(b,0,!1)}}]}function se(b,a,c,d){function e(a){try{a.apply(null,
wa.call(arguments,1))}finally{if(s--,0===s)for(;J.length;)try{J.pop()()}catch(b){c.error(b)}}}function f(a,b){(function ea(){r(w,function(a){a()});t=b(ea,a)})()}function g(){y!=h.url()&&(y=h.url(),r(ba,function(a){a(h.url())}))}var h=this,k=a[0],m=b.location,l=b.history,n=b.setTimeout,q=b.clearTimeout,p={};h.isMock=!1;var s=0,J=[];h.$$completeOutstandingRequest=e;h.$$incOutstandingRequestCount=function(){s++};h.notifyWhenNoOutstandingRequests=function(a){r(w,function(a){a()});0===s?a():J.push(a)};
var w=[],t;h.addPollFn=function(a){F(t)&&f(100,n);w.push(a);return a};var y=m.href,K=a.find("base"),B=null;h.url=function(a,c){m!==b.location&&(m=b.location);l!==b.history&&(l=b.history);if(a){if(y!=a){var e=y&&Ga(y)===Ga(a);y=a;!e&&d.history?c?l.replaceState(null,"",a):(l.pushState(null,"",a),K.attr("href",K.attr("href"))):(e||(B=a),c?m.replace(a):m.href=a);return h}}else return B||m.href.replace(/%27/g,"'")};var ba=[],O=!1;h.onUrlChange=function(a){if(!O){if(d.history)A(b).on("popstate",g);if(d.hashchange)A(b).on("hashchange",
g);else h.addPollFn(g);O=!0}ba.push(a);return a};h.$$checkUrlChange=g;h.baseHref=function(){var a=K.attr("href");return a?a.replace(/^(https?\:)?\/\/[^\/]*/,""):""};var M={},ca="",P=h.baseHref();h.cookies=function(a,b){var d,e,f,h;if(a)b===u?k.cookie=escape(a)+"=;path="+P+";expires=Thu, 01 Jan 1970 00:00:00 GMT":G(b)&&(d=(k.cookie=escape(a)+"="+escape(b)+";path="+P).length+1,4096<d&&c.warn("Cookie '"+a+"' possibly not set or overflowed because it was too large ("+d+" > 4096 bytes)!"));else{if(k.cookie!==
ca)for(ca=k.cookie,d=ca.split("; "),M={},f=0;f<d.length;f++)e=d[f],h=e.indexOf("="),0<h&&(a=unescape(e.substring(0,h)),M[a]===u&&(M[a]=unescape(e.substring(h+1))));return M}};h.defer=function(a,b){var c;s++;c=n(function(){delete p[c];e(a)},b||0);p[c]=!0;return c};h.defer.cancel=function(a){return p[a]?(delete p[a],q(a),e(v),!0):!1}}function Md(){this.$get=["$window","$log","$sniffer","$document",function(b,a,c,d){return new se(b,d,a,c)}]}function Nd(){this.$get=function(){function b(b,d){function e(a){a!=
n&&(q?q==a&&(q=a.n):q=a,f(a.n,a.p),f(a,n),n=a,n.n=null)}function f(a,b){a!=b&&(a&&(a.p=b),b&&(b.n=a))}if(b in a)throw z("$cacheFactory")("iid",b);var g=0,h=E({},d,{id:b}),k={},m=d&&d.capacity||Number.MAX_VALUE,l={},n=null,q=null;return a[b]={put:function(a,b){if(m<Number.MAX_VALUE){var c=l[a]||(l[a]={key:a});e(c)}if(!F(b))return a in k||g++,k[a]=b,g>m&&this.remove(q.key),b},get:function(a){if(m<Number.MAX_VALUE){var b=l[a];if(!b)return;e(b)}return k[a]},remove:function(a){if(m<Number.MAX_VALUE){var b=
l[a];if(!b)return;b==n&&(n=b.p);b==q&&(q=b.n);f(b.n,b.p);delete l[a]}delete k[a];g--},removeAll:function(){k={};g=0;l={};n=q=null},destroy:function(){l=h=k=null;delete a[b]},info:function(){return E({},h,{size:g})}}}var a={};b.info=function(){var b={};r(a,function(a,e){b[e]=a.info()});return b};b.get=function(b){return a[b]};return b}}function ce(){this.$get=["$cacheFactory",function(b){return b("templates")}]}function gc(b,a){var c={},d="Directive",e=/^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/,f=/(([\d\w_\-]+)(?:\:([^;]+))?;?)/,
g=/^(on[a-z]+|formaction)$/;this.directive=function k(a,e){Ea(a,"directive");G(a)?(Db(e,"directiveFactory"),c.hasOwnProperty(a)||(c[a]=[],b.factory(a+d,["$injector","$exceptionHandler",function(b,d){var e=[];r(c[a],function(c,f){try{var g=b.invoke(c);N(g)?g={compile:aa(g)}:!g.compile&&g.link&&(g.compile=aa(g.link));g.priority=g.priority||0;g.index=f;g.name=g.name||a;g.require=g.require||g.controller&&g.name;g.restrict=g.restrict||"A";e.push(g)}catch(k){d(k)}});return e}])),c[a].push(e)):r(a,Yb(k));
return this};this.aHrefSanitizationWhitelist=function(b){return D(b)?(a.aHrefSanitizationWhitelist(b),this):a.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(b){return D(b)?(a.imgSrcSanitizationWhitelist(b),this):a.imgSrcSanitizationWhitelist()};this.$get=["$injector","$interpolate","$exceptionHandler","$http","$templateCache","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(a,b,l,n,q,p,s,J,w,t,y,K){function B(a,b,c,d,e){a instanceof
A||(a=A(a));r(a,function(b,c){3==b.nodeType&&b.nodeValue.match(/\S+/)&&(a[c]=A(b).wrap("<span></span>").parent()[0])});var f=O(a,b,a,c,d,e);ba(a,"ng-scope");return function(b,c,d,e){Db(b,"scope");var g=c?Oa.clone.call(a):a;r(d,function(a,b){g.data("$"+b+"Controller",a)});d=0;for(var k=g.length;d<k;d++){var p=g[d].nodeType;1!==p&&9!==p||g.eq(d).data("$scope",b)}c&&c(g,b);f&&f(b,g,g,e);return g}}function ba(a,b){try{a.addClass(b)}catch(c){}}function O(a,b,c,d,e,f){function g(a,c,d,e){var f,p,l,m,q,
n,w;f=c.length;var s=Array(f);for(m=0;m<f;m++)s[m]=c[m];n=m=0;for(q=k.length;m<q;n++)p=s[n],c=k[m++],f=k[m++],c?(c.scope?(l=a.$new(),A.data(p,"$scope",l)):l=a,w=c.transcludeOnThisElement?M(a,c.transclude,e):!c.templateOnThisElement&&e?e:!e&&b?M(a,b):null,c(f,l,p,d,w)):f&&f(a,p.childNodes,u,e)}for(var k=[],p,l,m,q,n=0;n<a.length;n++)p=new Ob,l=ca(a[n],[],p,0===n?d:u,e),(f=l.length?I(l,a[n],p,b,c,null,[],[],f):null)&&f.scope&&ba(p.$$element,"ng-scope"),p=f&&f.terminal||!(m=a[n].childNodes)||!m.length?
null:O(m,f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:b),k.push(f,p),q=q||f||p,f=null;return q?g:null}function M(a,b,c){return function(d,e,f){var g=!1;d||(d=a.$new(),g=d.$$transcluded=!0);e=b(d,e,f,c);if(g)e.on("$destroy",function(){d.$destroy()});return e}}function ca(a,b,c,d,g){var k=c.$attr,p;switch(a.nodeType){case 1:ea(b,qa(Pa(a).toLowerCase()),"E",d,g);for(var l,m,q,n=a.attributes,w=0,s=n&&n.length;w<s;w++){var t=!1,J=!1;l=n[w];if(!R||8<=R||l.specified){p=l.name;m=
$(l.value);l=qa(p);if(q=U.test(l))p=nb(l.substr(6),"-");var y=l.replace(/(Start|End)$/,"");l===y+"Start"&&(t=p,J=p.substr(0,p.length-5)+"end",p=p.substr(0,p.length-6));l=qa(p.toLowerCase());k[l]=p;if(q||!c.hasOwnProperty(l))c[l]=m,oc(a,l)&&(c[l]=!0);S(a,b,m,l);ea(b,l,"A",d,g,t,J)}}a=a.className;if(G(a)&&""!==a)for(;p=f.exec(a);)l=qa(p[2]),ea(b,l,"C",d,g)&&(c[l]=$(p[3])),a=a.substr(p.index+p[0].length);break;case 3:x(b,a.nodeValue);break;case 8:try{if(p=e.exec(a.nodeValue))l=qa(p[1]),ea(b,l,"M",d,
g)&&(c[l]=$(p[2]))}catch(B){}}b.sort(F);return b}function P(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw ja("uterdir",b,c);1==a.nodeType&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return A(d)}function C(a,b,c){return function(d,e,f,g,k){e=P(e[0],b,c);return a(d,e,f,g,k)}}function I(a,c,d,e,f,g,k,q,n){function w(a,b,c,d){if(a){c&&(a=C(a,c,d));a.require=H.require;a.directiveName=z;if(K===H||H.$$isolateScope)a=rc(a,
{isolateScope:!0});k.push(a)}if(b){c&&(b=C(b,c,d));b.require=H.require;b.directiveName=z;if(K===H||H.$$isolateScope)b=rc(b,{isolateScope:!0});q.push(b)}}function t(a,b,c,d){var e,f="data",g=!1;if(G(b)){for(;"^"==(e=b.charAt(0))||"?"==e;)b=b.substr(1),"^"==e&&(f="inheritedData"),g=g||"?"==e;e=null;d&&"data"===f&&(e=d[b]);e=e||c[f]("$"+b+"Controller");if(!e&&!g)throw ja("ctreq",b,a);}else L(b)&&(e=[],r(b,function(b){e.push(t(a,b,c,d))}));return e}function J(a,e,f,g,n){function w(a,b){var c;2>arguments.length&&
(b=a,a=u);Ia&&(c=ca);return n(a,b,c)}var y,Q,B,M,C,P,ca={},ra;y=c===f?d:ha(d,new Ob(A(f),d.$attr));Q=y.$$element;if(K){var ue=/^\s*([@=&])(\??)\s*(\w*)\s*$/;P=e.$new(!0);!I||I!==K&&I!==K.$$originalDirective?Q.data("$isolateScopeNoTemplate",P):Q.data("$isolateScope",P);ba(Q,"ng-isolate-scope");r(K.scope,function(a,c){var d=a.match(ue)||[],f=d[3]||c,g="?"==d[2],d=d[1],k,l,n,q;P.$$isolateBindings[c]=d+f;switch(d){case "@":y.$observe(f,function(a){P[c]=a});y.$$observers[f].$$scope=e;y[f]&&(P[c]=b(y[f])(e));
break;case "=":if(g&&!y[f])break;l=p(y[f]);q=l.literal?Ca:function(a,b){return a===b||a!==a&&b!==b};n=l.assign||function(){k=P[c]=l(e);throw ja("nonassign",y[f],K.name);};k=P[c]=l(e);P.$watch(function(){var a=l(e);q(a,P[c])||(q(a,k)?n(e,a=P[c]):P[c]=a);return k=a},null,l.literal);break;case "&":l=p(y[f]);P[c]=function(a){return l(e,a)};break;default:throw ja("iscp",K.name,c,a);}})}ra=n&&w;O&&r(O,function(a){var b={$scope:a===K||a.$$isolateScope?P:e,$element:Q,$attrs:y,$transclude:ra},c;C=a.controller;
"@"==C&&(C=y[a.name]);c=s(C,b);ca[a.name]=c;Ia||Q.data("$"+a.name+"Controller",c);a.controllerAs&&(b.$scope[a.controllerAs]=c)});g=0;for(B=k.length;g<B;g++)try{M=k[g],M(M.isolateScope?P:e,Q,y,M.require&&t(M.directiveName,M.require,Q,ca),ra)}catch(H){l(H,ia(Q))}g=e;K&&(K.template||null===K.templateUrl)&&(g=P);a&&a(g,f.childNodes,u,n);for(g=q.length-1;0<=g;g--)try{M=q[g],M(M.isolateScope?P:e,Q,y,M.require&&t(M.directiveName,M.require,Q,ca),ra)}catch(D){l(D,ia(Q))}}n=n||{};for(var y=-Number.MAX_VALUE,
M,O=n.controllerDirectives,K=n.newIsolateScopeDirective,I=n.templateDirective,ea=n.nonTlbTranscludeDirective,F=!1,E=!1,Ia=n.hasElementTranscludeDirective,x=d.$$element=A(c),H,z,V,S=e,R,Ha=0,sa=a.length;Ha<sa;Ha++){H=a[Ha];var U=H.$$start,Y=H.$$end;U&&(x=P(c,U,Y));V=u;if(y>H.priority)break;if(V=H.scope)M=M||H,H.templateUrl||(fb("new/isolated scope",K,H,x),T(V)&&(K=H));z=H.name;!H.templateUrl&&H.controller&&(V=H.controller,O=O||{},fb("'"+z+"' controller",O[z],H,x),O[z]=H);if(V=H.transclude)F=!0,H.$$tlb||
(fb("transclusion",ea,H,x),ea=H),"element"==V?(Ia=!0,y=H.priority,V=x,x=d.$$element=A(X.createComment(" "+z+": "+d[z]+" ")),c=x[0],ra(f,wa.call(V,0),c),S=B(V,e,y,g&&g.name,{nonTlbTranscludeDirective:ea})):(V=A(Kb(c)).contents(),x.empty(),S=B(V,e));if(H.template)if(E=!0,fb("template",I,H,x),I=H,V=N(H.template)?H.template(x,d):H.template,V=W(V),H.replace){g=H;V=Ib.test(V)?A($(V)):[];c=V[0];if(1!=V.length||1!==c.nodeType)throw ja("tplrt",z,"");ra(f,x,c);sa={$attr:{}};V=ca(c,[],sa);var Z=a.splice(Ha+
1,a.length-(Ha+1));K&&D(V);a=a.concat(V).concat(Z);v(d,sa);sa=a.length}else x.html(V);if(H.templateUrl)E=!0,fb("template",I,H,x),I=H,H.replace&&(g=H),J=te(a.splice(Ha,a.length-Ha),x,d,f,F&&S,k,q,{controllerDirectives:O,newIsolateScopeDirective:K,templateDirective:I,nonTlbTranscludeDirective:ea}),sa=a.length;else if(H.compile)try{R=H.compile(x,d,S),N(R)?w(null,R,U,Y):R&&w(R.pre,R.post,U,Y)}catch(ve){l(ve,ia(x))}H.terminal&&(J.terminal=!0,y=Math.max(y,H.priority))}J.scope=M&&!0===M.scope;J.transcludeOnThisElement=
F;J.templateOnThisElement=E;J.transclude=S;n.hasElementTranscludeDirective=Ia;return J}function D(a){for(var b=0,c=a.length;b<c;b++)a[b]=$b(a[b],{$$isolateScope:!0})}function ea(b,e,f,g,p,m,n){if(e===p)return null;p=null;if(c.hasOwnProperty(e)){var q;e=a.get(e+d);for(var w=0,s=e.length;w<s;w++)try{q=e[w],(g===u||g>q.priority)&&-1!=q.restrict.indexOf(f)&&(m&&(q=$b(q,{$$start:m,$$end:n})),b.push(q),p=q)}catch(y){l(y)}}return p}function v(a,b){var c=b.$attr,d=a.$attr,e=a.$$element;r(a,function(d,e){"$"!=
e.charAt(0)&&(b[e]&&b[e]!==d&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});r(b,function(b,f){"class"==f?(ba(e,b),a["class"]=(a["class"]?a["class"]+" ":"")+b):"style"==f?(e.attr("style",e.attr("style")+";"+b),a.style=(a.style?a.style+";":"")+b):"$"==f.charAt(0)||a.hasOwnProperty(f)||(a[f]=b,d[f]=c[f])})}function te(a,b,c,d,e,f,g,k){var p=[],l,m,w=b[0],s=a.shift(),y=E({},s,{templateUrl:null,transclude:null,replace:null,$$originalDirective:s}),J=N(s.templateUrl)?s.templateUrl(b,c):s.templateUrl;
b.empty();n.get(t.getTrustedResourceUrl(J),{cache:q}).success(function(q){var n,t;q=W(q);if(s.replace){q=Ib.test(q)?A($(q)):[];n=q[0];if(1!=q.length||1!==n.nodeType)throw ja("tplrt",s.name,J);q={$attr:{}};ra(d,b,n);var B=ca(n,[],q);T(s.scope)&&D(B);a=B.concat(a);v(c,q)}else n=w,b.html(q);a.unshift(y);l=I(a,n,c,e,b,s,f,g,k);r(d,function(a,c){a==n&&(d[c]=b[0])});for(m=O(b[0].childNodes,e);p.length;){q=p.shift();t=p.shift();var K=p.shift(),C=p.shift(),B=b[0];if(t!==w){var P=t.className;k.hasElementTranscludeDirective&&
s.replace||(B=Kb(n));ra(K,A(t),B);ba(A(B),P)}t=l.transcludeOnThisElement?M(q,l.transclude,C):C;l(m,q,B,d,t)}p=null}).error(function(a,b,c,d){throw ja("tpload",d.url);});return function(a,b,c,d,e){a=e;p?(p.push(b),p.push(c),p.push(d),p.push(a)):(l.transcludeOnThisElement&&(a=M(b,l.transclude,e)),l(m,b,c,d,a))}}function F(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function fb(a,b,c,d){if(b)throw ja("multidir",b.name,c.name,a,ia(d));}function x(a,
c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){var b=a.parent().length;b&&ba(a.parent(),"ng-binding");return function(a,c){var e=c.parent(),f=e.data("$binding")||[];f.push(d);e.data("$binding",f);b||ba(e,"ng-binding");a.$watch(d,function(a){c[0].nodeValue=a})}}})}function z(a,b){if("srcdoc"==b)return t.HTML;var c=Pa(a);if("xlinkHref"==b||"FORM"==c&&"action"==b||"IMG"!=c&&("src"==b||"ngSrc"==b))return t.RESOURCE_URL}function S(a,c,d,e){var f=b(d,!0);if(f){if("multiple"===e&&"SELECT"===
Pa(a))throw ja("selmulti",ia(a));c.push({priority:100,compile:function(){return{pre:function(c,d,k){d=k.$$observers||(k.$$observers={});if(g.test(e))throw ja("nodomevents");if(f=b(k[e],!0,z(a,e)))k[e]=f(c),(d[e]||(d[e]=[])).$$inter=!0,(k.$$observers&&k.$$observers[e].$$scope||c).$watch(f,function(a,b){"class"===e&&a!=b?k.$updateClass(a,b):k.$set(e,a)})}}}})}}function ra(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,k;if(a)for(g=0,k=a.length;g<k;g++)if(a[g]==d){a[g++]=c;k=g+e-1;for(var p=a.length;g<
p;g++,k++)k<p?a[g]=a[k]:delete a[g];a.length-=e-1;break}f&&f.replaceChild(c,d);a=X.createDocumentFragment();a.appendChild(d);c[A.expando]=d[A.expando];d=1;for(e=b.length;d<e;d++)f=b[d],A(f).remove(),a.appendChild(f),delete b[d];b[0]=c;b.length=1}function rc(a,b){return E(function(){return a.apply(null,arguments)},a,b)}var Ob=function(a,b){this.$$element=a;this.$attr=b||{}};Ob.prototype={$normalize:qa,$addClass:function(a){a&&0<a.length&&y.addClass(this.$$element,a)},$removeClass:function(a){a&&0<
a.length&&y.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=sc(a,b),d=sc(b,a);0===c.length?y.removeClass(this.$$element,d):0===d.length?y.addClass(this.$$element,c):y.setClass(this.$$element,c,d)},$set:function(a,b,c,d){var e=oc(this.$$element[0],a);e&&(this.$$element.prop(a,b),d=e);this[a]=b;d?this.$attr[a]=d:(d=this.$attr[a])||(this.$attr[a]=d=nb(a,"-"));e=Pa(this.$$element);if("A"===e&&"href"===a||"IMG"===e&&"src"===a)this[a]=b=K(b,"src"===a);!1!==c&&(null===b||b===u?this.$$element.removeAttr(d):
this.$$element.attr(d,b));(c=this.$$observers)&&r(c[a],function(a){try{a(b)}catch(c){l(c)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers={}),e=d[a]||(d[a]=[]);e.push(b);J.$evalAsync(function(){e.$$inter||b(c[a])});return b}};var sa=b.startSymbol(),Ia=b.endSymbol(),W="{{"==sa||"}}"==Ia?ga:function(a){return a.replace(/\{\{/g,sa).replace(/}}/g,Ia)},U=/^ngAttr[A-Z]/;return B}]}function qa(b){return ab(b.replace(we,""))}function sc(b,a){var c="",d=b.split(/\s+/),e=a.split(/\s+/),
f=0;a:for(;f<d.length;f++){for(var g=d[f],h=0;h<e.length;h++)if(g==e[h])continue a;c+=(0<c.length?" ":"")+g}return c}function Od(){var b={},a=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(a,d){Ea(a,"controller");T(a)?E(b,a):b[a]=d};this.$get=["$injector","$window",function(c,d){return function(e,f){var g,h,k;G(e)&&(g=e.match(a),h=g[1],k=g[3],e=b.hasOwnProperty(h)?b[h]:fc(f.$scope,h,!0)||fc(d,h,!0),Ya(e,h,!0));g=c.instantiate(e,f);if(k){if(!f||"object"!==typeof f.$scope)throw z("$controller")("noscp",
h||e.name,k);f.$scope[k]=g}return g}}]}function Pd(){this.$get=["$window",function(b){return A(b.document)}]}function Qd(){this.$get=["$log",function(b){return function(a,c){b.error.apply(b,arguments)}}]}function tc(b){var a={},c,d,e;if(!b)return a;r(b.split("\n"),function(b){e=b.indexOf(":");c=x($(b.substr(0,e)));d=$(b.substr(e+1));c&&(a[c]=a[c]?a[c]+", "+d:d)});return a}function uc(b){var a=T(b)?b:u;return function(c){a||(a=tc(b));return c?a[x(c)]||null:a}}function vc(b,a,c){if(N(c))return c(b,
a);r(c,function(c){b=c(b,a)});return b}function Td(){var b=/^\s*(\[|\{[^\{])/,a=/[\}\]]\s*$/,c=/^\)\]\}',?\n/,d={"Content-Type":"application/json;charset=utf-8"},e=this.defaults={transformResponse:[function(d){G(d)&&(d=d.replace(c,""),b.test(d)&&a.test(d)&&(d=ac(d)));return d}],transformRequest:[function(a){return T(a)&&"[object File]"!==Ba.call(a)&&"[object Blob]"!==Ba.call(a)?oa(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ha(d),put:ha(d),patch:ha(d)},xsrfCookieName:"XSRF-TOKEN",
xsrfHeaderName:"X-XSRF-TOKEN"},f=this.interceptors=[],g=this.responseInterceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(a,b,c,d,n,q){function p(a){function b(a){var d=E({},a,{data:vc(a.data,a.headers,c.transformResponse)});return 200<=a.status&&300>a.status?d:n.reject(d)}var c={method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse},d=function(a){var b=e.headers,c=E({},a.headers),d,f,b=E({},b.common,b[x(a.method)]);
a:for(d in b){a=x(d);for(f in c)if(x(f)===a)continue a;c[d]=b[d]}(function(a){var b;r(a,function(c,d){N(c)&&(b=c(),null!=b?a[d]=b:delete a[d])})})(c);return c}(a);E(c,a);c.headers=d;c.method=La(c.method);var f=[function(a){d=a.headers;var c=vc(a.data,uc(d),a.transformRequest);F(c)&&r(d,function(a,b){"content-type"===x(b)&&delete d[b]});F(a.withCredentials)&&!F(e.withCredentials)&&(a.withCredentials=e.withCredentials);return s(a,c,d).then(b,b)},u],g=n.when(c);for(r(t,function(a){(a.request||a.requestError)&&
f.unshift(a.request,a.requestError);(a.response||a.responseError)&&f.push(a.response,a.responseError)});f.length;){a=f.shift();var h=f.shift(),g=g.then(a,h)}g.success=function(a){g.then(function(b){a(b.data,b.status,b.headers,c)});return g};g.error=function(a){g.then(null,function(b){a(b.data,b.status,b.headers,c)});return g};return g}function s(c,f,g){function m(a,b,c,e){C&&(200<=a&&300>a?C.put(A,[a,b,tc(c),e]):C.remove(A));q(b,a,c,e);d.$$phase||d.$apply()}function q(a,b,d,e){b=Math.max(b,0);(200<=
b&&300>b?t.resolve:t.reject)({data:a,status:b,headers:uc(d),config:c,statusText:e})}function s(){var a=Ta(p.pendingRequests,c);-1!==a&&p.pendingRequests.splice(a,1)}var t=n.defer(),r=t.promise,C,I,A=J(c.url,c.params);p.pendingRequests.push(c);r.then(s,s);!c.cache&&!e.cache||(!1===c.cache||"GET"!==c.method&&"JSONP"!==c.method)||(C=T(c.cache)?c.cache:T(e.cache)?e.cache:w);if(C)if(I=C.get(A),D(I)){if(I&&N(I.then))return I.then(s,s),I;L(I)?q(I[1],I[0],ha(I[2]),I[3]):q(I,200,{},"OK")}else C.put(A,r);F(I)&&
((I=Pb(c.url)?b.cookies()[c.xsrfCookieName||e.xsrfCookieName]:u)&&(g[c.xsrfHeaderName||e.xsrfHeaderName]=I),a(c.method,A,f,m,g,c.timeout,c.withCredentials,c.responseType));return r}function J(a,b){if(!b)return a;var c=[];Sc(b,function(a,b){null===a||F(a)||(L(a)||(a=[a]),r(a,function(a){T(a)&&(a=va(a)?a.toISOString():oa(a));c.push(Da(b)+"="+Da(a))}))});0<c.length&&(a+=(-1==a.indexOf("?")?"?":"&")+c.join("&"));return a}var w=c("$http"),t=[];r(f,function(a){t.unshift(G(a)?q.get(a):q.invoke(a))});r(g,
function(a,b){var c=G(a)?q.get(a):q.invoke(a);t.splice(b,0,{response:function(a){return c(n.when(a))},responseError:function(a){return c(n.reject(a))}})});p.pendingRequests=[];(function(a){r(arguments,function(a){p[a]=function(b,c){return p(E(c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){r(arguments,function(a){p[a]=function(b,c,d){return p(E(d||{},{method:a,url:b,data:c}))}})})("post","put","patch");p.defaults=e;return p}]}function xe(b){if(8>=R&&(!b.match(/^(get|post|head|put|delete|options)$/i)||
!W.XMLHttpRequest))return new W.ActiveXObject("Microsoft.XMLHTTP");if(W.XMLHttpRequest)return new W.XMLHttpRequest;throw z("$httpBackend")("noxhr");}function Ud(){this.$get=["$browser","$window","$document",function(b,a,c){return ye(b,xe,b.defer,a.angular.callbacks,c[0])}]}function ye(b,a,c,d,e){function f(a,b,c){var f=e.createElement("script"),g=null;f.type="text/javascript";f.src=a;f.async=!0;g=function(a){bb(f,"load",g);bb(f,"error",g);e.body.removeChild(f);f=null;var h=-1,s="unknown";a&&("load"!==
a.type||d[b].called||(a={type:"error"}),s=a.type,h="error"===a.type?404:200);c&&c(h,s)};sb(f,"load",g);sb(f,"error",g);8>=R&&(f.onreadystatechange=function(){G(f.readyState)&&/loaded|complete/.test(f.readyState)&&(f.onreadystatechange=null,g({type:"load"}))});e.body.appendChild(f);return g}var g=-1;return function(e,k,m,l,n,q,p,s){function J(){t=g;K&&K();B&&B.abort()}function w(a,d,e,f,g){O&&c.cancel(O);K=B=null;0===d&&(d=e?200:"file"==xa(k).protocol?404:0);a(1223===d?204:d,e,f,g||"");b.$$completeOutstandingRequest(v)}
var t;b.$$incOutstandingRequestCount();k=k||b.url();if("jsonp"==x(e)){var y="_"+(d.counter++).toString(36);d[y]=function(a){d[y].data=a;d[y].called=!0};var K=f(k.replace("JSON_CALLBACK","angular.callbacks."+y),y,function(a,b){w(l,a,d[y].data,"",b);d[y]=v})}else{var B=a(e);B.open(e,k,!0);r(n,function(a,b){D(a)&&B.setRequestHeader(b,a)});B.onreadystatechange=function(){if(B&&4==B.readyState){var a=null,b=null,c="";t!==g&&(a=B.getAllResponseHeaders(),b="response"in B?B.response:B.responseText);t===g&&
10>R||(c=B.statusText);w(l,t||B.status,b,a,c)}};p&&(B.withCredentials=!0);if(s)try{B.responseType=s}catch(ba){if("json"!==s)throw ba;}B.send(m||null)}if(0<q)var O=c(J,q);else q&&N(q.then)&&q.then(J)}}function Rd(){var b="{{",a="}}";this.startSymbol=function(a){return a?(b=a,this):b};this.endSymbol=function(b){return b?(a=b,this):a};this.$get=["$parse","$exceptionHandler","$sce",function(c,d,e){function f(f,m,l){for(var n,q,p=0,s=[],J=f.length,w=!1,t=[];p<J;)-1!=(n=f.indexOf(b,p))&&-1!=(q=f.indexOf(a,
n+g))?(p!=n&&s.push(f.substring(p,n)),s.push(p=c(w=f.substring(n+g,q))),p.exp=w,p=q+h,w=!0):(p!=J&&s.push(f.substring(p)),p=J);(J=s.length)||(s.push(""),J=1);if(l&&1<s.length)throw wc("noconcat",f);if(!m||w)return t.length=J,p=function(a){try{for(var b=0,c=J,g;b<c;b++){if("function"==typeof(g=s[b]))if(g=g(a),g=l?e.getTrusted(l,g):e.valueOf(g),null==g)g="";else switch(typeof g){case "string":break;case "number":g=""+g;break;default:g=oa(g)}t[b]=g}return t.join("")}catch(h){a=wc("interr",f,h.toString()),
d(a)}},p.exp=f,p.parts=s,p}var g=b.length,h=a.length;f.startSymbol=function(){return b};f.endSymbol=function(){return a};return f}]}function Sd(){this.$get=["$rootScope","$window","$q",function(b,a,c){function d(d,g,h,k){var m=a.setInterval,l=a.clearInterval,n=c.defer(),q=n.promise,p=0,s=D(k)&&!k;h=D(h)?h:0;q.then(null,null,d);q.$$intervalId=m(function(){n.notify(p++);0<h&&p>=h&&(n.resolve(p),l(q.$$intervalId),delete e[q.$$intervalId]);s||b.$apply()},g);e[q.$$intervalId]=n;return q}var e={};d.cancel=
function(b){return b&&b.$$intervalId in e?(e[b.$$intervalId].reject("canceled"),a.clearInterval(b.$$intervalId),delete e[b.$$intervalId],!0):!1};return d}]}function ad(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"\u00a4",posSuf:"",negPre:"(\u00a4",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January February March April May June July August September October November December".split(" "),
SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(b){return 1===b?"one":"other"}}}}function Qb(b){b=b.split("/");for(var a=b.length;a--;)b[a]=
mb(b[a]);return b.join("/")}function xc(b,a,c){b=xa(b,c);a.$$protocol=b.protocol;a.$$host=b.hostname;a.$$port=U(b.port)||ze[b.protocol]||null}function yc(b,a,c){var d="/"!==b.charAt(0);d&&(b="/"+b);b=xa(b,c);a.$$path=decodeURIComponent(d&&"/"===b.pathname.charAt(0)?b.pathname.substring(1):b.pathname);a.$$search=cc(b.search);a.$$hash=decodeURIComponent(b.hash);a.$$path&&"/"!=a.$$path.charAt(0)&&(a.$$path="/"+a.$$path)}function ta(b,a){if(0===a.indexOf(b))return a.substr(b.length)}function Ga(b){var a=
b.indexOf("#");return-1==a?b:b.substr(0,a)}function Rb(b){return b.substr(0,Ga(b).lastIndexOf("/")+1)}function zc(b,a){this.$$html5=!0;a=a||"";var c=Rb(b);xc(b,this,b);this.$$parse=function(a){var e=ta(c,a);if(!G(e))throw Sb("ipthprfx",a,c);yc(e,this,b);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Cb(this.$$search),b=this.$$hash?"#"+mb(this.$$hash):"";this.$$url=Qb(this.$$path)+(a?"?"+a:"")+b;this.$$absUrl=c+this.$$url.substr(1)};this.$$parseLinkUrl=function(d,
e){var f,g;(f=ta(b,d))!==u?(g=f,g=(f=ta(a,f))!==u?c+(ta("/",f)||f):b+g):(f=ta(c,d))!==u?g=c+f:c==d+"/"&&(g=c);g&&this.$$parse(g);return!!g}}function Tb(b,a){var c=Rb(b);xc(b,this,b);this.$$parse=function(d){var e=ta(b,d)||ta(c,d),e="#"==e.charAt(0)?ta(a,e):this.$$html5?e:"";if(!G(e))throw Sb("ihshprfx",d,a);yc(e,this,b);d=this.$$path;var f=/^\/[A-Z]:(\/.*)/;0===e.indexOf(b)&&(e=e.replace(b,""));f.exec(e)||(d=(e=f.exec(d))?e[1]:d);this.$$path=d;this.$$compose()};this.$$compose=function(){var c=Cb(this.$$search),
e=this.$$hash?"#"+mb(this.$$hash):"";this.$$url=Qb(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=b+(this.$$url?a+this.$$url:"")};this.$$parseLinkUrl=function(a,c){return Ga(b)==Ga(a)?(this.$$parse(a),!0):!1}}function Ac(b,a){this.$$html5=!0;Tb.apply(this,arguments);var c=Rb(b);this.$$parseLinkUrl=function(d,e){var f,g;b==Ga(d)?f=d:(g=ta(c,d))?f=b+a+g:c===d+"/"&&(f=c);f&&this.$$parse(f);return!!f};this.$$compose=function(){var c=Cb(this.$$search),e=this.$$hash?"#"+mb(this.$$hash):"";this.$$url=Qb(this.$$path)+
(c?"?"+c:"")+e;this.$$absUrl=b+a+this.$$url}}function tb(b){return function(){return this[b]}}function Bc(b,a){return function(c){if(F(c))return this[b];this[b]=a(c);this.$$compose();return this}}function Vd(){var b="",a=!1;this.hashPrefix=function(a){return D(a)?(b=a,this):b};this.html5Mode=function(b){return D(b)?(a=b,this):a};this.$get=["$rootScope","$browser","$sniffer","$rootElement",function(c,d,e,f){function g(a){c.$broadcast("$locationChangeSuccess",h.absUrl(),a)}var h,k=d.baseHref(),m=d.url();
a?(k=m.substring(0,m.indexOf("/",m.indexOf("//")+2))+(k||"/"),e=e.history?zc:Ac):(k=Ga(m),e=Tb);h=new e(k,"#"+b);h.$$parseLinkUrl(m,m);var l=/^\s*(javascript|mailto):/i;f.on("click",function(a){if(!a.ctrlKey&&!a.metaKey&&2!=a.which){for(var b=A(a.target);"a"!==x(b[0].nodeName);)if(b[0]===f[0]||!(b=b.parent())[0])return;var e=b.prop("href"),g=b.attr("href")||b.attr("xlink:href");T(e)&&"[object SVGAnimatedString]"===e.toString()&&(e=xa(e.animVal).href);l.test(e)||(!e||(b.attr("target")||a.isDefaultPrevented())||
!h.$$parseLinkUrl(e,g))||(a.preventDefault(),h.absUrl()!=d.url()&&(c.$apply(),W.angular["ff-684208-preventDefault"]=!0))}});h.absUrl()!=m&&d.url(h.absUrl(),!0);d.onUrlChange(function(a){h.absUrl()!=a&&(c.$evalAsync(function(){var b=h.absUrl();h.$$parse(a);c.$broadcast("$locationChangeStart",a,b).defaultPrevented?(h.$$parse(b),d.url(b)):g(b)}),c.$$phase||c.$digest())});var n=0;c.$watch(function(){var a=d.url(),b=h.$$replace;n&&a==h.absUrl()||(n++,c.$evalAsync(function(){c.$broadcast("$locationChangeStart",
h.absUrl(),a).defaultPrevented?h.$$parse(a):(d.url(h.absUrl(),b),g(a))}));h.$$replace=!1;return n});return h}]}function Wd(){var b=!0,a=this;this.debugEnabled=function(a){return D(a)?(b=a,this):b};this.$get=["$window",function(c){function d(a){a instanceof Error&&(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=c.console||{},e=b[a]||b.log||v;a=!1;try{a=!!e.apply}catch(k){}return a?
function(){var a=[];r(arguments,function(b){a.push(d(b))});return e.apply(b,a)}:function(a,b){e(a,null==b?"":b)}}return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){b&&c.apply(a,arguments)}}()}}]}function ka(b,a){if("__defineGetter__"===b||"__defineSetter__"===b||"__lookupGetter__"===b||"__lookupSetter__"===b||"__proto__"===b)throw la("isecfld",a);return b}function ma(b,a){if(b){if(b.constructor===b)throw la("isecfn",a);if(b.document&&
b.location&&b.alert&&b.setInterval)throw la("isecwindow",a);if(b.children&&(b.nodeName||b.prop&&b.attr&&b.find))throw la("isecdom",a);if(b===Object)throw la("isecobj",a);}return b}function ub(b,a,c,d,e){ma(b,d);e=e||{};a=a.split(".");for(var f,g=0;1<a.length;g++){f=ka(a.shift(),d);var h=ma(b[f],d);h||(h={},b[f]=h);b=h;b.then&&e.unwrapPromises&&(ya(d),"$$v"in b||function(a){a.then(function(b){a.$$v=b})}(b),b.$$v===u&&(b.$$v={}),b=b.$$v)}f=ka(a.shift(),d);ma(b[f],d);return b[f]=c}function Qa(b){return"constructor"==
b}function Cc(b,a,c,d,e,f,g){ka(b,f);ka(a,f);ka(c,f);ka(d,f);ka(e,f);var h=function(a){return ma(a,f)},k=g.expensiveChecks,m=k||Qa(b)?h:ga,l=k||Qa(a)?h:ga,n=k||Qa(c)?h:ga,q=k||Qa(d)?h:ga,p=k||Qa(e)?h:ga;return g.unwrapPromises?function(g,h){var k=h&&h.hasOwnProperty(b)?h:g,t;if(null==k)return k;(k=m(k[b]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=m(a)})),k=m(k.$$v));if(!a)return k;if(null==k)return u;(k=l(k[a]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=
l(a)})),k=l(k.$$v));if(!c)return k;if(null==k)return u;(k=n(k[c]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=n(a)})),k=n(k.$$v));if(!d)return k;if(null==k)return u;(k=q(k[d]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=q(a)})),k=q(k.$$v));if(!e)return k;if(null==k)return u;(k=p(k[e]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=p(a)})),k=p(k.$$v));return k}:function(f,g){var h=g&&g.hasOwnProperty(b)?g:f;if(null==h)return h;h=m(h[b]);
if(!a)return h;if(null==h)return u;h=l(h[a]);if(!c)return h;if(null==h)return u;h=n(h[c]);if(!d)return h;if(null==h)return u;h=q(h[d]);return e?null==h?u:h=p(h[e]):h}}function Ae(b,a){return function(c,d){return b(c,d,ya,ma,a)}}function Dc(b,a,c){var d=a.expensiveChecks,e=d?Be:Ce;if(e.hasOwnProperty(b))return e[b];var f=b.split("."),g=f.length,h;if(a.csp)h=6>g?Cc(f[0],f[1],f[2],f[3],f[4],c,a):function(b,d){var e=0,h;do h=Cc(f[e++],f[e++],f[e++],f[e++],f[e++],c,a)(b,d),d=u,b=h;while(e<g);return h};
else{var k="var p;\n";d&&(k+="s = eso(s, fe);\nl = eso(l, fe);\n");var m=d;r(f,function(b,e){ka(b,c);var f=(e?"s":'((l&&l.hasOwnProperty("'+b+'"))?l:s)')+'["'+b+'"]',g=d||Qa(b);g&&(f="eso("+f+", fe)",m=!0);k+="if(s == null) return undefined;\ns="+f+";\n";a.unwrapPromises&&(k+='if (s && s.then) {\n pw("'+c.replace(/(["\r\n])/g,"\\$1")+'");\n if (!("$$v" in s)) {\n p=s;\n p.$$v = undefined;\n p.then(function(v) {p.$$v='+(g?"eso(v)":"v")+";});\n}\n s="+(g?"eso(s.$$v)":"s.$$v")+"\n}\n")});k+="return s;";
h=new Function("s","l","pw","eso","fe",k);h.toString=aa(k);if(m||a.unwrapPromises)h=Ae(h,c)}"hasOwnProperty"!==b&&(e[b]=h);return h}function Xd(){var b={},a={},c={csp:!1,unwrapPromises:!1,logPromiseWarnings:!0,expensiveChecks:!1};this.unwrapPromises=function(a){return D(a)?(c.unwrapPromises=!!a,this):c.unwrapPromises};this.logPromiseWarnings=function(a){return D(a)?(c.logPromiseWarnings=a,this):c.logPromiseWarnings};this.$get=["$filter","$sniffer","$log",function(d,e,f){c.csp=e.csp;var g={csp:c.csp,
unwrapPromises:c.unwrapPromises,logPromiseWarnings:c.logPromiseWarnings,expensiveChecks:!0};ya=function(a){c.logPromiseWarnings&&!Ec.hasOwnProperty(a)&&(Ec[a]=!0,f.warn("[$parse] Promise found in the expression `"+a+"`. Automatic unwrapping of promises in Angular expressions is deprecated."))};return function(e,f){var m;switch(typeof e){case "string":var l=f?a:b;if(l.hasOwnProperty(e))return l[e];m=f?g:c;var n=new Ub(m);m=(new gb(n,d,m)).parse(e);"hasOwnProperty"!==e&&(l[e]=m);return m;case "function":return e;
default:return v}}}]}function Zd(){this.$get=["$rootScope","$exceptionHandler",function(b,a){return De(function(a){b.$evalAsync(a)},a)}]}function De(b,a){function c(a){return a}function d(a){return g(a)}var e=function(){var g=[],m,l;return l={resolve:function(a){if(g){var c=g;g=u;m=f(a);c.length&&b(function(){for(var a,b=0,d=c.length;b<d;b++)a=c[b],m.then(a[0],a[1],a[2])})}},reject:function(a){l.resolve(h(a))},notify:function(a){if(g){var c=g;g.length&&b(function(){for(var b,d=0,e=c.length;d<e;d++)b=
c[d],b[2](a)})}},promise:{then:function(b,f,h){var l=e(),J=function(d){try{l.resolve((N(b)?b:c)(d))}catch(e){l.reject(e),a(e)}},w=function(b){try{l.resolve((N(f)?f:d)(b))}catch(c){l.reject(c),a(c)}},t=function(b){try{l.notify((N(h)?h:c)(b))}catch(d){a(d)}};g?g.push([J,w,t]):m.then(J,w,t);return l.promise},"catch":function(a){return this.then(null,a)},"finally":function(a){function b(a,c){var d=e();c?d.resolve(a):d.reject(a);return d.promise}function d(e,f){var g=null;try{g=(a||c)()}catch(h){return b(h,
!1)}return g&&N(g.then)?g.then(function(){return b(e,f)},function(a){return b(a,!1)}):b(e,f)}return this.then(function(a){return d(a,!0)},function(a){return d(a,!1)})}}}},f=function(a){return a&&N(a.then)?a:{then:function(c){var d=e();b(function(){d.resolve(c(a))});return d.promise}}},g=function(a){var b=e();b.reject(a);return b.promise},h=function(c){return{then:function(f,g){var h=e();b(function(){try{h.resolve((N(g)?g:d)(c))}catch(b){h.reject(b),a(b)}});return h.promise}}};return{defer:e,reject:g,
when:function(h,m,l,n){var q=e(),p,s=function(b){try{return(N(m)?m:c)(b)}catch(d){return a(d),g(d)}},J=function(b){try{return(N(l)?l:d)(b)}catch(c){return a(c),g(c)}},w=function(b){try{return(N(n)?n:c)(b)}catch(d){a(d)}};b(function(){f(h).then(function(a){p||(p=!0,q.resolve(f(a).then(s,J,w)))},function(a){p||(p=!0,q.resolve(J(a)))},function(a){p||q.notify(w(a))})});return q.promise},all:function(a){var b=e(),c=0,d=L(a)?[]:{};r(a,function(a,e){c++;f(a).then(function(a){d.hasOwnProperty(e)||(d[e]=a,
--c||b.resolve(d))},function(a){d.hasOwnProperty(e)||b.reject(a)})});0===c&&b.resolve(d);return b.promise}}}function fe(){this.$get=["$window","$timeout",function(b,a){var c=b.requestAnimationFrame||b.webkitRequestAnimationFrame||b.mozRequestAnimationFrame,d=b.cancelAnimationFrame||b.webkitCancelAnimationFrame||b.mozCancelAnimationFrame||b.webkitCancelRequestAnimationFrame,e=!!c,f=e?function(a){var b=c(a);return function(){d(b)}}:function(b){var c=a(b,16.66,!1);return function(){a.cancel(c)}};f.supported=
e;return f}]}function Yd(){var b=10,a=z("$rootScope"),c=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$injector","$exceptionHandler","$parse","$browser",function(d,e,f,g){function h(){this.$id=ib();this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this["this"]=this.$root=this;this.$$destroyed=!1;this.$$asyncQueue=[];this.$$postDigestQueue=[];this.$$listeners={};this.$$listenerCount={};this.$$isolateBindings=
{}}function k(b){if(q.$$phase)throw a("inprog",q.$$phase);q.$$phase=b}function m(a,b){var c=f(a);Ya(c,b);return c}function l(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function n(){}h.prototype={constructor:h,$new:function(a){a?(a=new h,a.$root=this.$root,a.$$asyncQueue=this.$$asyncQueue,a.$$postDigestQueue=this.$$postDigestQueue):(this.$$childScopeClass||(this.$$childScopeClass=function(){this.$$watchers=this.$$nextSibling=this.$$childHead=
this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$id=ib();this.$$childScopeClass=null},this.$$childScopeClass.prototype=this),a=new this.$$childScopeClass);a["this"]=a;a.$parent=this;a.$$prevSibling=this.$$childTail;this.$$childHead?this.$$childTail=this.$$childTail.$$nextSibling=a:this.$$childHead=this.$$childTail=a;return a},$watch:function(a,b,d){var e=m(a,"watch"),f=this.$$watchers,g={fn:b,last:n,get:e,exp:a,eq:!!d};c=null;if(!N(b)){var h=m(b||v,"listener");g.fn=function(a,
b,c){h(c)}}if("string"==typeof a&&e.constant){var k=g.fn;g.fn=function(a,b,c){k.call(this,a,b,c);Ua(f,g)}}f||(f=this.$$watchers=[]);f.unshift(g);return function(){Ua(f,g);c=null}},$watchCollection:function(a,b){var c=this,d,e,g,h=1<b.length,k=0,l=f(a),m=[],n={},q=!0,r=0;return this.$watch(function(){d=l(c);var a,b,f;if(T(d))if(Sa(d))for(e!==m&&(e=m,r=e.length=0,k++),a=d.length,r!==a&&(k++,e.length=r=a),b=0;b<a;b++)f=e[b]!==e[b]&&d[b]!==d[b],f||e[b]===d[b]||(k++,e[b]=d[b]);else{e!==n&&(e=n={},r=0,
k++);a=0;for(b in d)d.hasOwnProperty(b)&&(a++,e.hasOwnProperty(b)?(f=e[b]!==e[b]&&d[b]!==d[b],f||e[b]===d[b]||(k++,e[b]=d[b])):(r++,e[b]=d[b],k++));if(r>a)for(b in k++,e)e.hasOwnProperty(b)&&!d.hasOwnProperty(b)&&(r--,delete e[b])}else e!==d&&(e=d,k++);return k},function(){q?(q=!1,b(d,d,c)):b(d,g,c);if(h)if(T(d))if(Sa(d)){g=Array(d.length);for(var a=0;a<d.length;a++)g[a]=d[a]}else for(a in g={},d)lb.call(d,a)&&(g[a]=d[a]);else g=d})},$digest:function(){var d,f,h,l,m=this.$$asyncQueue,r=this.$$postDigestQueue,
K,B,u=b,O,M=[],A,P,C;k("$digest");g.$$checkUrlChange();c=null;do{B=!1;for(O=this;m.length;){try{C=m.shift(),C.scope.$eval(C.expression)}catch(I){q.$$phase=null,e(I)}c=null}a:do{if(l=O.$$watchers)for(K=l.length;K--;)try{if(d=l[K])if((f=d.get(O))!==(h=d.last)&&!(d.eq?Ca(f,h):"number"===typeof f&&"number"===typeof h&&isNaN(f)&&isNaN(h)))B=!0,c=d,d.last=d.eq?Ka(f,null):f,d.fn(f,h===n?f:h,O),5>u&&(A=4-u,M[A]||(M[A]=[]),P=N(d.exp)?"fn: "+(d.exp.name||d.exp.toString()):d.exp,P+="; newVal: "+oa(f)+"; oldVal: "+
oa(h),M[A].push(P));else if(d===c){B=!1;break a}}catch(D){q.$$phase=null,e(D)}if(!(l=O.$$childHead||O!==this&&O.$$nextSibling))for(;O!==this&&!(l=O.$$nextSibling);)O=O.$parent}while(O=l);if((B||m.length)&&!u--)throw q.$$phase=null,a("infdig",b,oa(M));}while(B||m.length);for(q.$$phase=null;r.length;)try{r.shift()()}catch(x){e(x)}},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this!==q&&(r(this.$$listenerCount,Bb(null,l,this)),a.$$childHead==
this&&(a.$$childHead=this.$$nextSibling),a.$$childTail==this&&(a.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=null,this.$$listeners={},this.$$watchers=this.$$asyncQueue=this.$$postDigestQueue=[],this.$destroy=this.$digest=this.$apply=v,this.$on=this.$watch=function(){return v})}},
$eval:function(a,b){return f(a)(this,b)},$evalAsync:function(a){q.$$phase||q.$$asyncQueue.length||g.defer(function(){q.$$asyncQueue.length&&q.$digest()});this.$$asyncQueue.push({scope:this,expression:a})},$$postDigest:function(a){this.$$postDigestQueue.push(a)},$apply:function(a){try{return k("$apply"),this.$eval(a)}catch(b){e(b)}finally{q.$$phase=null;try{q.$digest()}catch(c){throw e(c),c;}}},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||
(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=Ta(c,b);-1!==d&&(c[d]=null,l(e,1,a))}},$emit:function(a,b){var c=[],d,f=this,g=!1,h={name:a,targetScope:f,stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},k=[h].concat(wa.call(arguments,1)),l,m;do{d=f.$$listeners[a]||c;h.currentScope=f;l=0;for(m=d.length;l<m;l++)if(d[l])try{d[l].apply(null,k)}catch(n){e(n)}else d.splice(l,1),l--,m--;if(g)break;
f=f.$parent}while(f);return h},$broadcast:function(a,b){for(var c=this,d=this,f={name:a,targetScope:this,preventDefault:function(){f.defaultPrevented=!0},defaultPrevented:!1},g=[f].concat(wa.call(arguments,1)),h,k;c=d;){f.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,g)}catch(l){e(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}return f}};var q=new h;
return q}]}function bd(){var b=/^\s*(https?|ftp|mailto|tel|file):/,a=/^\s*((https?|ftp|file):|data:image\/)/;this.aHrefSanitizationWhitelist=function(a){return D(a)?(b=a,this):b};this.imgSrcSanitizationWhitelist=function(b){return D(b)?(a=b,this):a};this.$get=function(){return function(c,d){var e=d?a:b,f;if(!R||8<=R)if(f=xa(c).href,""!==f&&!f.match(e))return"unsafe:"+f;return c}}}function Ee(b){if("self"===b)return b;if(G(b)){if(-1<b.indexOf("***"))throw za("iwcard",b);b=b.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,
"\\$1").replace(/\x08/g,"\\x08").replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*");return RegExp("^"+b+"$")}if(kb(b))return RegExp("^"+b.source+"$");throw za("imatcher");}function Fc(b){var a=[];D(b)&&r(b,function(b){a.push(Ee(b))});return a}function ae(){this.SCE_CONTEXTS=fa;var b=["self"],a=[];this.resourceUrlWhitelist=function(a){arguments.length&&(b=Fc(a));return b};this.resourceUrlBlacklist=function(b){arguments.length&&(a=Fc(b));return a};this.$get=["$injector",function(c){function d(a){var b=
function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var e=function(a){throw za("unsafe");};c.has("$sanitize")&&(e=c.get("$sanitize"));var f=d(),g={};g[fa.HTML]=d(f);g[fa.CSS]=d(f);g[fa.URL]=d(f);g[fa.JS]=d(f);g[fa.RESOURCE_URL]=d(g[fa.URL]);return{trustAs:function(a,b){var c=g.hasOwnProperty(a)?g[a]:null;if(!c)throw za("icontext",
a,b);if(null===b||b===u||""===b)return b;if("string"!==typeof b)throw za("itype",a);return new c(b)},getTrusted:function(c,d){if(null===d||d===u||""===d)return d;var f=g.hasOwnProperty(c)?g[c]:null;if(f&&d instanceof f)return d.$$unwrapTrustedValue();if(c===fa.RESOURCE_URL){var f=xa(d.toString()),l,n,q=!1;l=0;for(n=b.length;l<n;l++)if("self"===b[l]?Pb(f):b[l].exec(f.href)){q=!0;break}if(q)for(l=0,n=a.length;l<n;l++)if("self"===a[l]?Pb(f):a[l].exec(f.href)){q=!1;break}if(q)return d;throw za("insecurl",
d.toString());}if(c===fa.HTML)return e(d);throw za("unsafe");},valueOf:function(a){return a instanceof f?a.$$unwrapTrustedValue():a}}}]}function $d(){var b=!0;this.enabled=function(a){arguments.length&&(b=!!a);return b};this.$get=["$parse","$sniffer","$sceDelegate",function(a,c,d){if(b&&c.msie&&8>c.msieDocumentMode)throw za("iequirks");var e=ha(fa);e.isEnabled=function(){return b};e.trustAs=d.trustAs;e.getTrusted=d.getTrusted;e.valueOf=d.valueOf;b||(e.trustAs=e.getTrusted=function(a,b){return b},
e.valueOf=ga);e.parseAs=function(b,c){var d=a(c);return d.literal&&d.constant?d:function(a,c){return e.getTrusted(b,d(a,c))}};var f=e.parseAs,g=e.getTrusted,h=e.trustAs;r(fa,function(a,b){var c=x(b);e[ab("parse_as_"+c)]=function(b){return f(a,b)};e[ab("get_trusted_"+c)]=function(b){return g(a,b)};e[ab("trust_as_"+c)]=function(b){return h(a,b)}});return e}]}function be(){this.$get=["$window","$document",function(b,a){var c={},d=U((/android (\d+)/.exec(x((b.navigator||{}).userAgent))||[])[1]),e=/Boxee/i.test((b.navigator||
{}).userAgent),f=a[0]||{},g=f.documentMode,h,k=/^(Moz|webkit|O|ms)(?=[A-Z])/,m=f.body&&f.body.style,l=!1,n=!1;if(m){for(var q in m)if(l=k.exec(q)){h=l[0];h=h.substr(0,1).toUpperCase()+h.substr(1);break}h||(h="WebkitOpacity"in m&&"webkit");l=!!("transition"in m||h+"Transition"in m);n=!!("animation"in m||h+"Animation"in m);!d||l&&n||(l=G(f.body.style.webkitTransition),n=G(f.body.style.webkitAnimation))}return{history:!(!b.history||!b.history.pushState||4>d||e),hashchange:"onhashchange"in b&&(!g||7<
g),hasEvent:function(a){if("input"==a&&9==R)return!1;if(F(c[a])){var b=f.createElement("div");c[a]="on"+a in b}return c[a]},csp:Za(),vendorPrefix:h,transitions:l,animations:n,android:d,msie:R,msieDocumentMode:g}}]}function de(){this.$get=["$rootScope","$browser","$q","$exceptionHandler",function(b,a,c,d){function e(e,h,k){var m=c.defer(),l=m.promise,n=D(k)&&!k;h=a.defer(function(){try{m.resolve(e())}catch(a){m.reject(a),d(a)}finally{delete f[l.$$timeoutId]}n||b.$apply()},h);l.$$timeoutId=h;f[h]=m;
return l}var f={};e.cancel=function(b){return b&&b.$$timeoutId in f?(f[b.$$timeoutId].reject("canceled"),delete f[b.$$timeoutId],a.defer.cancel(b.$$timeoutId)):!1};return e}]}function xa(b,a){var c=b;R&&(Y.setAttribute("href",c),c=Y.href);Y.setAttribute("href",c);return{href:Y.href,protocol:Y.protocol?Y.protocol.replace(/:$/,""):"",host:Y.host,search:Y.search?Y.search.replace(/^\?/,""):"",hash:Y.hash?Y.hash.replace(/^#/,""):"",hostname:Y.hostname,port:Y.port,pathname:"/"===Y.pathname.charAt(0)?Y.pathname:
"/"+Y.pathname}}function Pb(b){b=G(b)?xa(b):b;return b.protocol===Gc.protocol&&b.host===Gc.host}function ee(){this.$get=aa(W)}function kc(b){function a(d,e){if(T(d)){var f={};r(d,function(b,c){f[c]=a(c,b)});return f}return b.factory(d+c,e)}var c="Filter";this.register=a;this.$get=["$injector",function(a){return function(b){return a.get(b+c)}}];a("currency",Hc);a("date",Ic);a("filter",Fe);a("json",Ge);a("limitTo",He);a("lowercase",Ie);a("number",Jc);a("orderBy",Kc);a("uppercase",Je)}function Fe(){return function(b,
a,c){if(!L(b))return b;var d=typeof c,e=[];e.check=function(a){for(var b=0;b<e.length;b++)if(!e[b](a))return!1;return!0};"function"!==d&&(c="boolean"===d&&c?function(a,b){return Xa.equals(a,b)}:function(a,b){if(a&&b&&"object"===typeof a&&"object"===typeof b){for(var d in a)if("$"!==d.charAt(0)&&lb.call(a,d)&&c(a[d],b[d]))return!0;return!1}b=(""+b).toLowerCase();return-1<(""+a).toLowerCase().indexOf(b)});var f=function(a,b){if("string"===typeof b&&"!"===b.charAt(0))return!f(a,b.substr(1));switch(typeof a){case "boolean":case "number":case "string":return c(a,
b);case "object":switch(typeof b){case "object":return c(a,b);default:for(var d in a)if("$"!==d.charAt(0)&&f(a[d],b))return!0}return!1;case "array":for(d=0;d<a.length;d++)if(f(a[d],b))return!0;return!1;default:return!1}};switch(typeof a){case "boolean":case "number":case "string":a={$:a};case "object":for(var g in a)(function(b){"undefined"!==typeof a[b]&&e.push(function(c){return f("$"==b?c:c&&c[b],a[b])})})(g);break;case "function":e.push(a);break;default:return b}d=[];for(g=0;g<b.length;g++){var h=
b[g];e.check(h)&&d.push(h)}return d}}function Hc(b){var a=b.NUMBER_FORMATS;return function(b,d){F(d)&&(d=a.CURRENCY_SYM);return Lc(b,a.PATTERNS[1],a.GROUP_SEP,a.DECIMAL_SEP,2).replace(/\u00A4/g,d)}}function Jc(b){var a=b.NUMBER_FORMATS;return function(b,d){return Lc(b,a.PATTERNS[0],a.GROUP_SEP,a.DECIMAL_SEP,d)}}function Lc(b,a,c,d,e){if(null==b||!isFinite(b)||T(b))return"";var f=0>b;b=Math.abs(b);var g=b+"",h="",k=[],m=!1;if(-1!==g.indexOf("e")){var l=g.match(/([\d\.]+)e(-?)(\d+)/);l&&"-"==l[2]&&
l[3]>e+1?(g="0",b=0):(h=g,m=!0)}if(m)0<e&&(-1<b&&1>b)&&(h=b.toFixed(e));else{g=(g.split(Mc)[1]||"").length;F(e)&&(e=Math.min(Math.max(a.minFrac,g),a.maxFrac));b=+(Math.round(+(b.toString()+"e"+e)).toString()+"e"+-e);0===b&&(f=!1);b=(""+b).split(Mc);g=b[0];b=b[1]||"";var l=0,n=a.lgSize,q=a.gSize;if(g.length>=n+q)for(l=g.length-n,m=0;m<l;m++)0===(l-m)%q&&0!==m&&(h+=c),h+=g.charAt(m);for(m=l;m<g.length;m++)0===(g.length-m)%n&&0!==m&&(h+=c),h+=g.charAt(m);for(;b.length<e;)b+="0";e&&"0"!==e&&(h+=d+b.substr(0,
e))}k.push(f?a.negPre:a.posPre);k.push(h);k.push(f?a.negSuf:a.posSuf);return k.join("")}function Vb(b,a,c){var d="";0>b&&(d="-",b=-b);for(b=""+b;b.length<a;)b="0"+b;c&&(b=b.substr(b.length-a));return d+b}function Z(b,a,c,d){c=c||0;return function(e){e=e["get"+b]();if(0<c||e>-c)e+=c;0===e&&-12==c&&(e=12);return Vb(e,a,d)}}function vb(b,a){return function(c,d){var e=c["get"+b](),f=La(a?"SHORT"+b:b);return d[f][e]}}function Ic(b){function a(a){var b;if(b=a.match(c)){a=new Date(0);var f=0,g=0,h=b[8]?
a.setUTCFullYear:a.setFullYear,k=b[8]?a.setUTCHours:a.setHours;b[9]&&(f=U(b[9]+b[10]),g=U(b[9]+b[11]));h.call(a,U(b[1]),U(b[2])-1,U(b[3]));f=U(b[4]||0)-f;g=U(b[5]||0)-g;h=U(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));k.call(a,f,g,h,b)}return a}var c=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,e){var f="",g=[],h,k;e=e||"mediumDate";e=b.DATETIME_FORMATS[e]||e;G(c)&&(c=Ke.test(c)?U(c):a(c));jb(c)&&(c=new Date(c));
if(!va(c))return c;for(;e;)(k=Le.exec(e))?(g=g.concat(wa.call(k,1)),e=g.pop()):(g.push(e),e=null);r(g,function(a){h=Me[a];f+=h?h(c,b.DATETIME_FORMATS):a.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return f}}function Ge(){return function(b){return oa(b,!0)}}function He(){return function(b,a){if(!L(b)&&!G(b))return b;a=Infinity===Math.abs(Number(a))?Number(a):U(a);if(G(b))return a?0<=a?b.slice(0,a):b.slice(a,b.length):"";var c=[],d,e;a>b.length?a=b.length:a<-b.length&&(a=-b.length);0<a?(d=0,e=a):(d=
b.length+a,e=b.length);for(;d<e;d++)c.push(b[d]);return c}}function Kc(b){return function(a,c,d){function e(a,b){return Wa(b)?function(b,c){return a(c,b)}:a}function f(a,b){var c=typeof a,d=typeof b;return c==d?(va(a)&&va(b)&&(a=a.valueOf(),b=b.valueOf()),"string"==c&&(a=a.toLowerCase(),b=b.toLowerCase()),a===b?0:a<b?-1:1):c<d?-1:1}if(!Sa(a))return a;c=L(c)?c:[c];0===c.length&&(c=["+"]);c=Uc(c,function(a){var c=!1,d=a||ga;if(G(a)){if("+"==a.charAt(0)||"-"==a.charAt(0))c="-"==a.charAt(0),a=a.substring(1);
if(""===a)return e(function(a,b){return f(a,b)},c);d=b(a);if(d.constant){var m=d();return e(function(a,b){return f(a[m],b[m])},c)}}return e(function(a,b){return f(d(a),d(b))},c)});return wa.call(a).sort(e(function(a,b){for(var d=0;d<c.length;d++){var e=c[d](a,b);if(0!==e)return e}return 0},d))}}function Aa(b){N(b)&&(b={link:b});b.restrict=b.restrict||"AC";return aa(b)}function Nc(b,a,c,d){function e(a,c){c=c?"-"+nb(c,"-"):"";d.setClass(b,(a?wb:xb)+c,(a?xb:wb)+c)}var f=this,g=b.parent().controller("form")||
yb,h=0,k=f.$error={},m=[];f.$name=a.name||a.ngForm;f.$dirty=!1;f.$pristine=!0;f.$valid=!0;f.$invalid=!1;g.$addControl(f);b.addClass(Ra);e(!0);f.$addControl=function(a){Ea(a.$name,"input");m.push(a);a.$name&&(f[a.$name]=a)};f.$removeControl=function(a){a.$name&&f[a.$name]===a&&delete f[a.$name];r(k,function(b,c){f.$setValidity(c,!0,a)});Ua(m,a)};f.$setValidity=function(a,b,c){var d=k[a];if(b)d&&(Ua(d,c),d.length||(h--,h||(e(b),f.$valid=!0,f.$invalid=!1),k[a]=!1,e(!0,a),g.$setValidity(a,!0,f)));else{h||
e(b);if(d){if(-1!=Ta(d,c))return}else k[a]=d=[],h++,e(!1,a),g.$setValidity(a,!1,f);d.push(c);f.$valid=!1;f.$invalid=!0}};f.$setDirty=function(){d.removeClass(b,Ra);d.addClass(b,zb);f.$dirty=!0;f.$pristine=!1;g.$setDirty()};f.$setPristine=function(){d.removeClass(b,zb);d.addClass(b,Ra);f.$dirty=!1;f.$pristine=!0;r(m,function(a){a.$setPristine()})}}function ua(b,a,c,d){b.$setValidity(a,c);return c?d:u}function Oc(b,a){var c,d;if(a)for(c=0;c<a.length;++c)if(d=a[c],b[d])return!0;return!1}function Ne(b,
a,c,d,e){T(e)&&(b.$$hasNativeValidators=!0,b.$parsers.push(function(f){if(b.$error[a]||Oc(e,d)||!Oc(e,c))return f;b.$setValidity(a,!1)}))}function Ab(b,a,c,d,e,f){var g=a.prop(Oe),h=a[0].placeholder,k={},m=x(a[0].type);d.$$validityState=g;if(!e.android){var l=!1;a.on("compositionstart",function(a){l=!0});a.on("compositionend",function(){l=!1;n()})}var n=function(e){if(!l){var f=a.val();if(R&&"input"===(e||k).type&&a[0].placeholder!==h)h=a[0].placeholder;else if("password"!==m&&Wa(c.ngTrim||"T")&&
(f=$(f)),e=g&&d.$$hasNativeValidators,d.$viewValue!==f||""===f&&e)b.$root.$$phase?d.$setViewValue(f):b.$apply(function(){d.$setViewValue(f)})}};if(e.hasEvent("input"))a.on("input",n);else{var q,p=function(){q||(q=f.defer(function(){n();q=null}))};a.on("keydown",function(a){a=a.keyCode;91===a||(15<a&&19>a||37<=a&&40>=a)||p()});if(e.hasEvent("paste"))a.on("paste cut",p)}a.on("change",n);d.$render=function(){a.val(d.$isEmpty(d.$viewValue)?"":d.$viewValue)};var s=c.ngPattern;s&&((e=s.match(/^\/(.*)\/([gim]*)$/))?
(s=RegExp(e[1],e[2]),e=function(a){return ua(d,"pattern",d.$isEmpty(a)||s.test(a),a)}):e=function(c){var e=b.$eval(s);if(!e||!e.test)throw z("ngPattern")("noregexp",s,e,ia(a));return ua(d,"pattern",d.$isEmpty(c)||e.test(c),c)},d.$formatters.push(e),d.$parsers.push(e));if(c.ngMinlength){var r=U(c.ngMinlength);e=function(a){return ua(d,"minlength",d.$isEmpty(a)||a.length>=r,a)};d.$parsers.push(e);d.$formatters.push(e)}if(c.ngMaxlength){var w=U(c.ngMaxlength);e=function(a){return ua(d,"maxlength",d.$isEmpty(a)||
a.length<=w,a)};d.$parsers.push(e);d.$formatters.push(e)}}function Wb(b,a){b="ngClass"+b;return["$animate",function(c){function d(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],l=0;l<b.length;l++)if(e==b[l])continue a;c.push(e)}return c}function e(a){if(!L(a)){if(G(a))return a.split(" ");if(T(a)){var b=[];r(a,function(a,c){a&&(b=b.concat(c.split(" ")))});return b}}return a}return{restrict:"AC",link:function(f,g,h){function k(a,b){var c=g.data("$classCounts")||{},d=[];r(a,function(a){if(0<
b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});g.data("$classCounts",c);return d.join(" ")}function m(b){if(!0===a||f.$index%2===a){var m=e(b||[]);if(!l){var p=k(m,1);h.$addClass(p)}else if(!Ca(b,l)){var s=e(l),p=d(m,s),m=d(s,m),m=k(m,-1),p=k(p,1);0===p.length?c.removeClass(g,m):0===m.length?c.addClass(g,p):c.setClass(g,p,m)}}l=ha(b)}var l;f.$watch(h[b],m,!0);h.$observe("class",function(a){m(f.$eval(h[b]))});"ngClass"!==b&&f.$watch("$index",function(c,d){var g=c&1;if(g!==(d&1)){var l=e(f.$eval(h[b]));
g===a?(g=k(l,1),h.$addClass(g)):(g=k(l,-1),h.$removeClass(g))}})}}}]}var Oe="validity",x=function(b){return G(b)?b.toLowerCase():b},lb=Object.prototype.hasOwnProperty,La=function(b){return G(b)?b.toUpperCase():b},R,A,Fa,wa=[].slice,Pe=[].push,Ba=Object.prototype.toString,Va=z("ng"),Xa=W.angular||(W.angular={}),$a,Pa,na=["0","0","0"];R=U((/msie (\d+)/.exec(x(navigator.userAgent))||[])[1]);isNaN(R)&&(R=U((/trident\/.*; rv:(\d+)/.exec(x(navigator.userAgent))||[])[1]));v.$inject=[];ga.$inject=[];var L=
function(){return N(Array.isArray)?Array.isArray:function(b){return"[object Array]"===Ba.call(b)}}(),$=function(){return String.prototype.trim?function(b){return G(b)?b.trim():b}:function(b){return G(b)?b.replace(/^\s\s*/,"").replace(/\s\s*$/,""):b}}();Pa=9>R?function(b){b=b.nodeName?b:b[0];return b.scopeName&&"HTML"!=b.scopeName?La(b.scopeName+":"+b.nodeName):b.nodeName}:function(b){return b.nodeName?b.nodeName:b[0].nodeName};var Za=function(){if(D(Za.isActive_))return Za.isActive_;var b=!(!X.querySelector("[ng-csp]")&&
!X.querySelector("[data-ng-csp]"));if(!b)try{new Function("")}catch(a){b=!0}return Za.isActive_=b},Xc=/[A-Z]/g,$c={full:"1.2.27",major:1,minor:2,dot:27,codeName:"prime-factorization"};S.expando="ng339";var cb=S.cache={},me=1,sb=W.document.addEventListener?function(b,a,c){b.addEventListener(a,c,!1)}:function(b,a,c){b.attachEvent("on"+a,c)},bb=W.document.removeEventListener?function(b,a,c){b.removeEventListener(a,c,!1)}:function(b,a,c){b.detachEvent("on"+a,c)};S._data=function(b){return this.cache[b[this.expando]]||
{}};var he=/([\:\-\_]+(.))/g,ie=/^moz([A-Z])/,Hb=z("jqLite"),je=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,Ib=/<|&#?\w+;/,ke=/<([\w:]+)/,le=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,da={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};da.optgroup=da.option;da.tbody=da.tfoot=da.colgroup=
da.caption=da.thead;da.th=da.td;var Oa=S.prototype={ready:function(b){function a(){c||(c=!0,b())}var c=!1;"complete"===X.readyState?setTimeout(a):(this.on("DOMContentLoaded",a),S(W).on("load",a))},toString:function(){var b=[];r(this,function(a){b.push(""+a)});return"["+b.join(", ")+"]"},eq:function(b){return 0<=b?A(this[b]):A(this[this.length+b])},length:0,push:Pe,sort:[].sort,splice:[].splice},rb={};r("multiple selected checked disabled readOnly required open".split(" "),function(b){rb[x(b)]=b});
var pc={};r("input select option textarea button form details".split(" "),function(b){pc[La(b)]=!0});r({data:Mb,removeData:Lb},function(b,a){S[a]=b});r({data:Mb,inheritedData:qb,scope:function(b){return A.data(b,"$scope")||qb(b.parentNode||b,["$isolateScope","$scope"])},isolateScope:function(b){return A.data(b,"$isolateScope")||A.data(b,"$isolateScopeNoTemplate")},controller:mc,injector:function(b){return qb(b,"$injector")},removeAttr:function(b,a){b.removeAttribute(a)},hasClass:Nb,css:function(b,
a,c){a=ab(a);if(D(c))b.style[a]=c;else{var d;8>=R&&(d=b.currentStyle&&b.currentStyle[a],""===d&&(d="auto"));d=d||b.style[a];8>=R&&(d=""===d?u:d);return d}},attr:function(b,a,c){var d=x(a);if(rb[d])if(D(c))c?(b[a]=!0,b.setAttribute(a,d)):(b[a]=!1,b.removeAttribute(d));else return b[a]||(b.attributes.getNamedItem(a)||v).specified?d:u;else if(D(c))b.setAttribute(a,c);else if(b.getAttribute)return b=b.getAttribute(a,2),null===b?u:b},prop:function(b,a,c){if(D(c))b[a]=c;else return b[a]},text:function(){function b(b,
d){var e=a[b.nodeType];if(F(d))return e?b[e]:"";b[e]=d}var a=[];9>R?(a[1]="innerText",a[3]="nodeValue"):a[1]=a[3]="textContent";b.$dv="";return b}(),val:function(b,a){if(F(a)){if("SELECT"===Pa(b)&&b.multiple){var c=[];r(b.options,function(a){a.selected&&c.push(a.value||a.text)});return 0===c.length?null:c}return b.value}b.value=a},html:function(b,a){if(F(a))return b.innerHTML;for(var c=0,d=b.childNodes;c<d.length;c++)Ma(d[c]);b.innerHTML=a},empty:nc},function(b,a){S.prototype[a]=function(a,d){var e,
f,g=this.length;if(b!==nc&&(2==b.length&&b!==Nb&&b!==mc?a:d)===u){if(T(a)){for(e=0;e<g;e++)if(b===Mb)b(this[e],a);else for(f in a)b(this[e],f,a[f]);return this}e=b.$dv;g=e===u?Math.min(g,1):g;for(f=0;f<g;f++){var h=b(this[f],a,d);e=e?e+h:h}return e}for(e=0;e<g;e++)b(this[e],a,d);return this}});r({removeData:Lb,dealoc:Ma,on:function a(c,d,e,f){if(D(f))throw Hb("onargs");var g=pa(c,"events"),h=pa(c,"handle");g||pa(c,"events",g={});h||pa(c,"handle",h=ne(c,g));r(d.split(" "),function(d){var f=g[d];if(!f){if("mouseenter"==
d||"mouseleave"==d){var l=X.body.contains||X.body.compareDocumentPosition?function(a,c){var d=9===a.nodeType?a.documentElement:a,e=c&&c.parentNode;return a===e||!!(e&&1===e.nodeType&&(d.contains?d.contains(e):a.compareDocumentPosition&&a.compareDocumentPosition(e)&16))}:function(a,c){if(c)for(;c=c.parentNode;)if(c===a)return!0;return!1};g[d]=[];a(c,{mouseleave:"mouseout",mouseenter:"mouseover"}[d],function(a){var c=a.relatedTarget;c&&(c===this||l(this,c))||h(a,d)})}else sb(c,d,h),g[d]=[];f=g[d]}f.push(e)})},
off:lc,one:function(a,c,d){a=A(a);a.on(c,function f(){a.off(c,d);a.off(c,f)});a.on(c,d)},replaceWith:function(a,c){var d,e=a.parentNode;Ma(a);r(new S(c),function(c){d?e.insertBefore(c,d.nextSibling):e.replaceChild(c,a);d=c})},children:function(a){var c=[];r(a.childNodes,function(a){1===a.nodeType&&c.push(a)});return c},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,c){r(new S(c),function(c){1!==a.nodeType&&11!==a.nodeType||a.appendChild(c)})},prepend:function(a,
c){if(1===a.nodeType){var d=a.firstChild;r(new S(c),function(c){a.insertBefore(c,d)})}},wrap:function(a,c){c=A(c)[0];var d=a.parentNode;d&&d.replaceChild(c,a);c.appendChild(a)},remove:function(a){Ma(a);var c=a.parentNode;c&&c.removeChild(a)},after:function(a,c){var d=a,e=a.parentNode;r(new S(c),function(a){e.insertBefore(a,d.nextSibling);d=a})},addClass:pb,removeClass:ob,toggleClass:function(a,c,d){c&&r(c.split(" "),function(c){var f=d;F(f)&&(f=!Nb(a,c));(f?pb:ob)(a,c)})},parent:function(a){return(a=
a.parentNode)&&11!==a.nodeType?a:null},next:function(a){if(a.nextElementSibling)return a.nextElementSibling;for(a=a.nextSibling;null!=a&&1!==a.nodeType;)a=a.nextSibling;return a},find:function(a,c){return a.getElementsByTagName?a.getElementsByTagName(c):[]},clone:Kb,triggerHandler:function(a,c,d){var e,f;e=c.type||c;var g=(pa(a,"events")||{})[e];g&&(e={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopPropagation:v,type:e,target:a},
c.type&&(e=E(e,c)),c=ha(g),f=d?[e].concat(d):[e],r(c,function(c){c.apply(a,f)}))}},function(a,c){S.prototype[c]=function(c,e,f){for(var g,h=0;h<this.length;h++)F(g)?(g=a(this[h],c,e,f),D(g)&&(g=A(g))):Jb(g,a(this[h],c,e,f));return D(g)?g:this};S.prototype.bind=S.prototype.on;S.prototype.unbind=S.prototype.off});db.prototype={put:function(a,c){this[Na(a,this.nextUid)]=c},get:function(a){return this[Na(a,this.nextUid)]},remove:function(a){var c=this[a=Na(a,this.nextUid)];delete this[a];return c}};var pe=
/^function\s*[^\(]*\(\s*([^\)]*)\)/m,qe=/,/,re=/^\s*(_?)(\S+?)\1\s*$/,oe=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,eb=z("$injector"),Qe=z("$animate"),Ld=["$provide",function(a){this.$$selectors={};this.register=function(c,d){var e=c+"-animation";if(c&&"."!=c.charAt(0))throw Qe("notcsel",c);this.$$selectors[c.substr(1)]=e;a.factory(e,d)};this.classNameFilter=function(a){1===arguments.length&&(this.$$classNameFilter=a instanceof RegExp?a:null);return this.$$classNameFilter};this.$get=["$timeout","$$asyncCallback",
function(a,d){return{enter:function(a,c,g,h){g?g.after(a):(c&&c[0]||(c=g.parent()),c.append(a));h&&d(h)},leave:function(a,c){a.remove();c&&d(c)},move:function(a,c,d,h){this.enter(a,c,d,h)},addClass:function(a,c,g){c=G(c)?c:L(c)?c.join(" "):"";r(a,function(a){pb(a,c)});g&&d(g)},removeClass:function(a,c,g){c=G(c)?c:L(c)?c.join(" "):"";r(a,function(a){ob(a,c)});g&&d(g)},setClass:function(a,c,g,h){r(a,function(a){pb(a,c);ob(a,g)});h&&d(h)},enabled:v}}]}],ja=z("$compile");gc.$inject=["$provide","$$sanitizeUriProvider"];
var we=/^(x[\:\-_]|data[\:\-_])/i,wc=z("$interpolate"),Re=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,ze={http:80,https:443,ftp:21},Sb=z("$location");Ac.prototype=Tb.prototype=zc.prototype={$$html5:!1,$$replace:!1,absUrl:tb("$$absUrl"),url:function(a){if(F(a))return this.$$url;a=Re.exec(a);a[1]&&this.path(decodeURIComponent(a[1]));(a[2]||a[1])&&this.search(a[3]||"");this.hash(a[5]||"");return this},protocol:tb("$$protocol"),host:tb("$$host"),port:tb("$$port"),path:Bc("$$path",function(a){a=null!==a?a.toString():
"";return"/"==a.charAt(0)?a:"/"+a}),search:function(a,c){switch(arguments.length){case 0:return this.$$search;case 1:if(G(a)||jb(a))a=a.toString(),this.$$search=cc(a);else if(T(a))r(a,function(c,e){null==c&&delete a[e]}),this.$$search=a;else throw Sb("isrcharg");break;default:F(c)||null===c?delete this.$$search[a]:this.$$search[a]=c}this.$$compose();return this},hash:Bc("$$hash",function(a){return null!==a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};var la=z("$parse"),Ec=
{},ya,Se=Function.prototype.call,Te=Function.prototype.apply,Pc=Function.prototype.bind,hb={"null":function(){return null},"true":function(){return!0},"false":function(){return!1},undefined:v,"+":function(a,c,d,e){d=d(a,c);e=e(a,c);return D(d)?D(e)?d+e:d:D(e)?e:u},"-":function(a,c,d,e){d=d(a,c);e=e(a,c);return(D(d)?d:0)-(D(e)?e:0)},"*":function(a,c,d,e){return d(a,c)*e(a,c)},"/":function(a,c,d,e){return d(a,c)/e(a,c)},"%":function(a,c,d,e){return d(a,c)%e(a,c)},"^":function(a,c,d,e){return d(a,c)^
e(a,c)},"=":v,"===":function(a,c,d,e){return d(a,c)===e(a,c)},"!==":function(a,c,d,e){return d(a,c)!==e(a,c)},"==":function(a,c,d,e){return d(a,c)==e(a,c)},"!=":function(a,c,d,e){return d(a,c)!=e(a,c)},"<":function(a,c,d,e){return d(a,c)<e(a,c)},">":function(a,c,d,e){return d(a,c)>e(a,c)},"<=":function(a,c,d,e){return d(a,c)<=e(a,c)},">=":function(a,c,d,e){return d(a,c)>=e(a,c)},"&&":function(a,c,d,e){return d(a,c)&&e(a,c)},"||":function(a,c,d,e){return d(a,c)||e(a,c)},"&":function(a,c,d,e){return d(a,
c)&e(a,c)},"|":function(a,c,d,e){return e(a,c)(a,c,d(a,c))},"!":function(a,c,d){return!d(a,c)}},Ue={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},Ub=function(a){this.options=a};Ub.prototype={constructor:Ub,lex:function(a){this.text=a;this.index=0;this.ch=u;this.lastCh=":";for(this.tokens=[];this.index<this.text.length;){this.ch=this.text.charAt(this.index);if(this.is("\"'"))this.readString(this.ch);else if(this.isNumber(this.ch)||this.is(".")&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(this.ch))this.readIdent();
else if(this.is("(){}[].,;:?"))this.tokens.push({index:this.index,text:this.ch}),this.index++;else if(this.isWhitespace(this.ch)){this.index++;continue}else{a=this.ch+this.peek();var c=a+this.peek(2),d=hb[this.ch],e=hb[a],f=hb[c];f?(this.tokens.push({index:this.index,text:c,fn:f}),this.index+=3):e?(this.tokens.push({index:this.index,text:a,fn:e}),this.index+=2):d?(this.tokens.push({index:this.index,text:this.ch,fn:d}),this.index+=1):this.throwError("Unexpected next character ",this.index,this.index+
1)}this.lastCh=this.ch}return this.tokens},is:function(a){return-1!==a.indexOf(this.ch)},was:function(a){return-1!==a.indexOf(this.lastCh)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a},isWhitespace:function(a){return" "===a||"\r"===a||"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdent:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},
throwError:function(a,c,d){d=d||this.index;c=D(c)?"s "+c+"-"+this.index+" ["+this.text.substring(c,d)+"]":" "+d;throw la("lexerr",a,c,this.text);},readNumber:function(){for(var a="",c=this.index;this.index<this.text.length;){var d=x(this.text.charAt(this.index));if("."==d||this.isNumber(d))a+=d;else{var e=this.peek();if("e"==d&&this.isExpOperator(e))a+=d;else if(this.isExpOperator(d)&&e&&this.isNumber(e)&&"e"==a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||e&&this.isNumber(e)||"e"!=a.charAt(a.length-
1))break;else this.throwError("Invalid exponent")}this.index++}a*=1;this.tokens.push({index:c,text:a,literal:!0,constant:!0,fn:function(){return a}})},readIdent:function(){for(var a=this,c="",d=this.index,e,f,g,h;this.index<this.text.length;){h=this.text.charAt(this.index);if("."===h||this.isIdent(h)||this.isNumber(h))"."===h&&(e=this.index),c+=h;else break;this.index++}if(e)for(f=this.index;f<this.text.length;){h=this.text.charAt(f);if("("===h){g=c.substr(e-d+1);c=c.substr(0,e-d);this.index=f;break}if(this.isWhitespace(h))f++;
else break}d={index:d,text:c};if(hb.hasOwnProperty(c))d.fn=hb[c],d.literal=!0,d.constant=!0;else{var k=Dc(c,this.options,this.text);d.fn=E(function(a,c){return k(a,c)},{assign:function(d,e){return ub(d,c,e,a.text,a.options)}})}this.tokens.push(d);g&&(this.tokens.push({index:e,text:"."}),this.tokens.push({index:e+1,text:g}))},readString:function(a){var c=this.index;this.index++;for(var d="",e=a,f=!1;this.index<this.text.length;){var g=this.text.charAt(this.index),e=e+g;if(f)"u"===g?(f=this.text.substring(this.index+
1,this.index+5),f.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+f+"]"),this.index+=4,d+=String.fromCharCode(parseInt(f,16))):d+=Ue[g]||g,f=!1;else if("\\"===g)f=!0;else{if(g===a){this.index++;this.tokens.push({index:c,text:e,string:d,literal:!0,constant:!0,fn:function(){return d}});return}d+=g}this.index++}this.throwError("Unterminated quote",c)}};var gb=function(a,c,d){this.lexer=a;this.$filter=c;this.options=d};gb.ZERO=E(function(){return 0},{constant:!0});gb.prototype={constructor:gb,
parse:function(a){this.text=a;this.tokens=this.lexer.lex(a);a=this.statements();0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]);a.literal=!!a.literal;a.constant=!!a.constant;return a},primary:function(){var a;if(this.expect("("))a=this.filterChain(),this.consume(")");else if(this.expect("["))a=this.arrayDeclaration();else if(this.expect("{"))a=this.object();else{var c=this.expect();(a=c.fn)||this.throwError("not a primary expression",c);a.literal=!!c.literal;a.constant=
!!c.constant}for(var d;c=this.expect("(","[",".");)"("===c.text?(a=this.functionCall(a,d),d=null):"["===c.text?(d=a,a=this.objectIndex(a)):"."===c.text?(d=a,a=this.fieldAccess(a)):this.throwError("IMPOSSIBLE");return a},throwError:function(a,c){throw la("syntax",c.text,a,c.index+1,this.text,this.text.substring(c.index));},peekToken:function(){if(0===this.tokens.length)throw la("ueoe",this.text);return this.tokens[0]},peek:function(a,c,d,e){if(0<this.tokens.length){var f=this.tokens[0],g=f.text;if(g===
a||g===c||g===d||g===e||!(a||c||d||e))return f}return!1},expect:function(a,c,d,e){return(a=this.peek(a,c,d,e))?(this.tokens.shift(),a):!1},consume:function(a){this.expect(a)||this.throwError("is unexpected, expecting ["+a+"]",this.peek())},unaryFn:function(a,c){return E(function(d,e){return a(d,e,c)},{constant:c.constant})},ternaryFn:function(a,c,d){return E(function(e,f){return a(e,f)?c(e,f):d(e,f)},{constant:a.constant&&c.constant&&d.constant})},binaryFn:function(a,c,d){return E(function(e,f){return c(e,
f,a,d)},{constant:a.constant&&d.constant})},statements:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.filterChain()),!this.expect(";"))return 1===a.length?a[0]:function(c,d){for(var e,f=0;f<a.length;f++){var g=a[f];g&&(e=g(c,d))}return e}},filterChain:function(){for(var a=this.expression(),c;;)if(c=this.expect("|"))a=this.binaryFn(a,c.fn,this.filter());else return a},filter:function(){for(var a=this.expect(),c=this.$filter(a.text),d=[];;)if(a=this.expect(":"))d.push(this.expression());
else{var e=function(a,e,h){h=[h];for(var k=0;k<d.length;k++)h.push(d[k](a,e));return c.apply(a,h)};return function(){return e}}},expression:function(){return this.assignment()},assignment:function(){var a=this.ternary(),c,d;return(d=this.expect("="))?(a.assign||this.throwError("implies assignment but ["+this.text.substring(0,d.index)+"] can not be assigned to",d),c=this.ternary(),function(d,f){return a.assign(d,c(d,f),f)}):a},ternary:function(){var a=this.logicalOR(),c,d;if(this.expect("?")){c=this.assignment();
if(d=this.expect(":"))return this.ternaryFn(a,c,this.assignment());this.throwError("expected :",d)}else return a},logicalOR:function(){for(var a=this.logicalAND(),c;;)if(c=this.expect("||"))a=this.binaryFn(a,c.fn,this.logicalAND());else return a},logicalAND:function(){var a=this.equality(),c;if(c=this.expect("&&"))a=this.binaryFn(a,c.fn,this.logicalAND());return a},equality:function(){var a=this.relational(),c;if(c=this.expect("==","!=","===","!=="))a=this.binaryFn(a,c.fn,this.equality());return a},
relational:function(){var a=this.additive(),c;if(c=this.expect("<",">","<=",">="))a=this.binaryFn(a,c.fn,this.relational());return a},additive:function(){for(var a=this.multiplicative(),c;c=this.expect("+","-");)a=this.binaryFn(a,c.fn,this.multiplicative());return a},multiplicative:function(){for(var a=this.unary(),c;c=this.expect("*","/","%");)a=this.binaryFn(a,c.fn,this.unary());return a},unary:function(){var a;return this.expect("+")?this.primary():(a=this.expect("-"))?this.binaryFn(gb.ZERO,a.fn,
this.unary()):(a=this.expect("!"))?this.unaryFn(a.fn,this.unary()):this.primary()},fieldAccess:function(a){var c=this,d=this.expect().text,e=Dc(d,this.options,this.text);return E(function(c,d,h){return e(h||a(c,d))},{assign:function(e,g,h){(h=a(e,h))||a.assign(e,h={});return ub(h,d,g,c.text,c.options)}})},objectIndex:function(a){var c=this,d=this.expression();this.consume("]");return E(function(e,f){var g=a(e,f),h=d(e,f),k;ka(h,c.text);if(!g)return u;(g=ma(g[h],c.text))&&(g.then&&c.options.unwrapPromises)&&
(k=g,"$$v"in g||(k.$$v=u,k.then(function(a){k.$$v=a})),g=g.$$v);return g},{assign:function(e,f,g){var h=ka(d(e,g),c.text);(g=ma(a(e,g),c.text))||a.assign(e,g={});return g[h]=f}})},functionCall:function(a,c){var d=[];if(")"!==this.peekToken().text){do d.push(this.expression());while(this.expect(","))}this.consume(")");var e=this;return function(f,g){for(var h=[],k=c?c(f,g):f,m=0;m<d.length;m++)h.push(ma(d[m](f,g),e.text));m=a(f,g,k)||v;ma(k,e.text);var l=e.text;if(m){if(m.constructor===m)throw la("isecfn",
l);if(m===Se||m===Te||Pc&&m===Pc)throw la("isecff",l);}h=m.apply?m.apply(k,h):m(h[0],h[1],h[2],h[3],h[4]);return ma(h,e.text)}},arrayDeclaration:function(){var a=[],c=!0;if("]"!==this.peekToken().text){do{if(this.peek("]"))break;var d=this.expression();a.push(d);d.constant||(c=!1)}while(this.expect(","))}this.consume("]");return E(function(c,d){for(var g=[],h=0;h<a.length;h++)g.push(a[h](c,d));return g},{literal:!0,constant:c})},object:function(){var a=[],c=!0;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;
var d=this.expect(),d=d.string||d.text;this.consume(":");var e=this.expression();a.push({key:d,value:e});e.constant||(c=!1)}while(this.expect(","))}this.consume("}");return E(function(c,d){for(var e={},k=0;k<a.length;k++){var m=a[k];e[m.key]=m.value(c,d)}return e},{literal:!0,constant:c})}};var Ce={},Be={},za=z("$sce"),fa={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Y=X.createElement("a"),Gc=xa(W.location.href,!0);kc.$inject=["$provide"];Hc.$inject=["$locale"];Jc.$inject=["$locale"];
var Mc=".",Me={yyyy:Z("FullYear",4),yy:Z("FullYear",2,0,!0),y:Z("FullYear",1),MMMM:vb("Month"),MMM:vb("Month",!0),MM:Z("Month",2,1),M:Z("Month",1,1),dd:Z("Date",2),d:Z("Date",1),HH:Z("Hours",2),H:Z("Hours",1),hh:Z("Hours",2,-12),h:Z("Hours",1,-12),mm:Z("Minutes",2),m:Z("Minutes",1),ss:Z("Seconds",2),s:Z("Seconds",1),sss:Z("Milliseconds",3),EEEE:vb("Day"),EEE:vb("Day",!0),a:function(a,c){return 12>a.getHours()?c.AMPMS[0]:c.AMPMS[1]},Z:function(a){a=-1*a.getTimezoneOffset();return a=(0<=a?"+":"")+(Vb(Math[0<
a?"floor":"ceil"](a/60),2)+Vb(Math.abs(a%60),2))}},Le=/((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,Ke=/^\-?\d+$/;Ic.$inject=["$locale"];var Ie=aa(x),Je=aa(La);Kc.$inject=["$parse"];var cd=aa({restrict:"E",compile:function(a,c){8>=R&&(c.href||c.name||c.$set("href",""),a.append(X.createComment("IE fix")));if(!c.href&&!c.xlinkHref&&!c.name)return function(a,c){var f="[object SVGAnimatedString]"===Ba.call(c.prop("href"))?"xlink:href":"href";c.on("click",function(a){c.attr(f)||
a.preventDefault()})}}}),Fb={};r(rb,function(a,c){if("multiple"!=a){var d=qa("ng-"+c);Fb[d]=function(){return{priority:100,link:function(a,f,g){a.$watch(g[d],function(a){g.$set(c,!!a)})}}}}});r(["src","srcset","href"],function(a){var c=qa("ng-"+a);Fb[c]=function(){return{priority:99,link:function(d,e,f){var g=a,h=a;"href"===a&&"[object SVGAnimatedString]"===Ba.call(e.prop("href"))&&(h="xlinkHref",f.$attr[h]="xlink:href",g=null);f.$observe(c,function(c){c?(f.$set(h,c),R&&g&&e.prop(g,f[h])):"href"===
a&&f.$set(h,null)})}}}});var yb={$addControl:v,$removeControl:v,$setValidity:v,$setDirty:v,$setPristine:v};Nc.$inject=["$element","$attrs","$scope","$animate"];var Qc=function(a){return["$timeout",function(c){return{name:"form",restrict:a?"EAC":"E",controller:Nc,compile:function(){return{pre:function(a,e,f,g){if(!f.action){var h=function(a){a.preventDefault?a.preventDefault():a.returnValue=!1};sb(e[0],"submit",h);e.on("$destroy",function(){c(function(){bb(e[0],"submit",h)},0,!1)})}var k=e.parent().controller("form"),
m=f.name||f.ngForm;m&&ub(a,m,g,m);if(k)e.on("$destroy",function(){k.$removeControl(g);m&&ub(a,m,u,m);E(g,yb)})}}}}}]},dd=Qc(),qd=Qc(!0),Ve=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,We=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Xe=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,Rc={text:Ab,number:function(a,c,d,e,f,g){Ab(a,c,d,e,f,g);e.$parsers.push(function(a){var c=e.$isEmpty(a);if(c||Xe.test(a))return e.$setValidity("number",
!0),""===a?null:c?a:parseFloat(a);e.$setValidity("number",!1);return u});Ne(e,"number",Ye,null,e.$$validityState);e.$formatters.push(function(a){return e.$isEmpty(a)?"":""+a});d.min&&(a=function(a){var c=parseFloat(d.min);return ua(e,"min",e.$isEmpty(a)||a>=c,a)},e.$parsers.push(a),e.$formatters.push(a));d.max&&(a=function(a){var c=parseFloat(d.max);return ua(e,"max",e.$isEmpty(a)||a<=c,a)},e.$parsers.push(a),e.$formatters.push(a));e.$formatters.push(function(a){return ua(e,"number",e.$isEmpty(a)||
jb(a),a)})},url:function(a,c,d,e,f,g){Ab(a,c,d,e,f,g);a=function(a){return ua(e,"url",e.$isEmpty(a)||Ve.test(a),a)};e.$formatters.push(a);e.$parsers.push(a)},email:function(a,c,d,e,f,g){Ab(a,c,d,e,f,g);a=function(a){return ua(e,"email",e.$isEmpty(a)||We.test(a),a)};e.$formatters.push(a);e.$parsers.push(a)},radio:function(a,c,d,e){F(d.name)&&c.attr("name",ib());c.on("click",function(){c[0].checked&&a.$apply(function(){e.$setViewValue(d.value)})});e.$render=function(){c[0].checked=d.value==e.$viewValue};
d.$observe("value",e.$render)},checkbox:function(a,c,d,e){var f=d.ngTrueValue,g=d.ngFalseValue;G(f)||(f=!0);G(g)||(g=!1);c.on("click",function(){a.$apply(function(){e.$setViewValue(c[0].checked)})});e.$render=function(){c[0].checked=e.$viewValue};e.$isEmpty=function(a){return a!==f};e.$formatters.push(function(a){return a===f});e.$parsers.push(function(a){return a?f:g})},hidden:v,button:v,submit:v,reset:v,file:v},Ye=["badInput"],hc=["$browser","$sniffer",function(a,c){return{restrict:"E",require:"?ngModel",
link:function(d,e,f,g){g&&(Rc[x(f.type)]||Rc.text)(d,e,f,g,c,a)}}}],wb="ng-valid",xb="ng-invalid",Ra="ng-pristine",zb="ng-dirty",Ze=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate",function(a,c,d,e,f,g){function h(a,c){c=c?"-"+nb(c,"-"):"";g.removeClass(e,(a?xb:wb)+c);g.addClass(e,(a?wb:xb)+c)}this.$modelValue=this.$viewValue=Number.NaN;this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$name=
d.name;var k=f(d.ngModel),m=k.assign;if(!m)throw z("ngModel")("nonassign",d.ngModel,ia(e));this.$render=v;this.$isEmpty=function(a){return F(a)||""===a||null===a||a!==a};var l=e.inheritedData("$formController")||yb,n=0,q=this.$error={};e.addClass(Ra);h(!0);this.$setValidity=function(a,c){q[a]!==!c&&(c?(q[a]&&n--,n||(h(!0),this.$valid=!0,this.$invalid=!1)):(h(!1),this.$invalid=!0,this.$valid=!1,n++),q[a]=!c,h(c,a),l.$setValidity(a,c,this))};this.$setPristine=function(){this.$dirty=!1;this.$pristine=
!0;g.removeClass(e,zb);g.addClass(e,Ra)};this.$setViewValue=function(d){this.$viewValue=d;this.$pristine&&(this.$dirty=!0,this.$pristine=!1,g.removeClass(e,Ra),g.addClass(e,zb),l.$setDirty());r(this.$parsers,function(a){d=a(d)});this.$modelValue!==d&&(this.$modelValue=d,m(a,d),r(this.$viewChangeListeners,function(a){try{a()}catch(d){c(d)}}))};var p=this;a.$watch(function(){var c=k(a);if(p.$modelValue!==c){var d=p.$formatters,e=d.length;for(p.$modelValue=c;e--;)c=d[e](c);p.$viewValue!==c&&(p.$viewValue=
c,p.$render())}return c})}],Fd=function(){return{require:["ngModel","^?form"],controller:Ze,link:function(a,c,d,e){var f=e[0],g=e[1]||yb;g.$addControl(f);a.$on("$destroy",function(){g.$removeControl(f)})}}},Hd=aa({require:"ngModel",link:function(a,c,d,e){e.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),ic=function(){return{require:"?ngModel",link:function(a,c,d,e){if(e){d.required=!0;var f=function(a){if(d.required&&e.$isEmpty(a))e.$setValidity("required",!1);else return e.$setValidity("required",
!0),a};e.$formatters.push(f);e.$parsers.unshift(f);d.$observe("required",function(){f(e.$viewValue)})}}}},Gd=function(){return{require:"ngModel",link:function(a,c,d,e){var f=(a=/\/(.*)\//.exec(d.ngList))&&RegExp(a[1])||d.ngList||",";e.$parsers.push(function(a){if(!F(a)){var c=[];a&&r(a.split(f),function(a){a&&c.push($(a))});return c}});e.$formatters.push(function(a){return L(a)?a.join(", "):u});e.$isEmpty=function(a){return!a||!a.length}}}},$e=/^(true|false|\d+)$/,Id=function(){return{priority:100,
compile:function(a,c){return $e.test(c.ngValue)?function(a,c,f){f.$set("value",a.$eval(f.ngValue))}:function(a,c,f){a.$watch(f.ngValue,function(a){f.$set("value",a)})}}}},id=Aa({compile:function(a){a.addClass("ng-binding");return function(a,d,e){d.data("$binding",e.ngBind);a.$watch(e.ngBind,function(a){d.text(a==u?"":a)})}}}),kd=["$interpolate",function(a){return function(c,d,e){c=a(d.attr(e.$attr.ngBindTemplate));d.addClass("ng-binding").data("$binding",c);e.$observe("ngBindTemplate",function(a){d.text(a)})}}],
jd=["$sce","$parse",function(a,c){return{compile:function(d){d.addClass("ng-binding");return function(d,f,g){f.data("$binding",g.ngBindHtml);var h=c(g.ngBindHtml);d.$watch(function(){return(h(d)||"").toString()},function(c){f.html(a.getTrustedHtml(h(d))||"")})}}}}],ld=Wb("",!0),nd=Wb("Odd",0),md=Wb("Even",1),od=Aa({compile:function(a,c){c.$set("ngCloak",u);a.removeClass("ng-cloak")}}),pd=[function(){return{scope:!0,controller:"@",priority:500}}],jc={},af={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),
function(a){var c=qa("ng-"+a);jc[c]=["$parse","$rootScope",function(d,e){return{compile:function(f,g){var h=d(g[c],!0);return function(c,d){d.on(a,function(d){var f=function(){h(c,{$event:d})};af[a]&&e.$$phase?c.$evalAsync(f):c.$apply(f)})}}}}]});var sd=["$animate",function(a){return{transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(c,d,e,f,g){var h,k,m;c.$watch(e.ngIf,function(f){Wa(f)?k||(k=c.$new(),g(k,function(c){c[c.length++]=X.createComment(" end ngIf: "+e.ngIf+
" ");h={clone:c};a.enter(c,d.parent(),d)})):(m&&(m.remove(),m=null),k&&(k.$destroy(),k=null),h&&(m=Eb(h.clone),a.leave(m,function(){m=null}),h=null))})}}}],td=["$http","$templateCache","$anchorScroll","$animate","$sce",function(a,c,d,e,f){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Xa.noop,compile:function(g,h){var k=h.ngInclude||h.src,m=h.onload||"",l=h.autoscroll;return function(g,h,p,r,J){var w=0,t,y,u,B=function(){y&&(y.remove(),y=null);t&&(t.$destroy(),t=null);
u&&(e.leave(u,function(){y=null}),y=u,u=null)};g.$watch(f.parseAsResourceUrl(k),function(f){var k=function(){!D(l)||l&&!g.$eval(l)||d()},p=++w;f?(a.get(f,{cache:c}).success(function(a){if(p===w){var c=g.$new();r.template=a;a=J(c,function(a){B();e.enter(a,null,h,k)});t=c;u=a;t.$emit("$includeContentLoaded");g.$eval(m)}}).error(function(){p===w&&B()}),g.$emit("$includeContentRequested")):(B(),r.template=null)})}}}}],Jd=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",
link:function(c,d,e,f){d.html(f.template);a(d.contents())(c)}}}],ud=Aa({priority:450,compile:function(){return{pre:function(a,c,d){a.$eval(d.ngInit)}}}}),vd=Aa({terminal:!0,priority:1E3}),wd=["$locale","$interpolate",function(a,c){var d=/{}/g;return{restrict:"EA",link:function(e,f,g){var h=g.count,k=g.$attr.when&&f.attr(g.$attr.when),m=g.offset||0,l=e.$eval(k)||{},n={},q=c.startSymbol(),p=c.endSymbol(),s=/^when(Minus)?(.+)$/;r(g,function(a,c){s.test(c)&&(l[x(c.replace("when","").replace("Minus","-"))]=
f.attr(g.$attr[c]))});r(l,function(a,e){n[e]=c(a.replace(d,q+h+"-"+m+p))});e.$watch(function(){var c=parseFloat(e.$eval(h));if(isNaN(c))return"";c in l||(c=a.pluralCat(c-m));return n[c](e,f,!0)},function(a){f.text(a)})}}}],xd=["$parse","$animate",function(a,c){var d=z("ngRepeat");return{transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,link:function(e,f,g,h,k){var m=g.ngRepeat,l=m.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),n,q,p,s,u,w,t={$id:Na};if(!l)throw d("iexp",
m);g=l[1];h=l[2];(l=l[3])?(n=a(l),q=function(a,c,d){w&&(t[w]=a);t[u]=c;t.$index=d;return n(e,t)}):(p=function(a,c){return Na(c)},s=function(a){return a});l=g.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);if(!l)throw d("iidexp",g);u=l[3]||l[1];w=l[2];var y={};e.$watchCollection(h,function(a){var g,h,l=f[0],n,t={},D,C,I,x,G,v,z,F=[];if(Sa(a))v=a,G=q||p;else{G=q||s;v=[];for(I in a)a.hasOwnProperty(I)&&"$"!=I.charAt(0)&&v.push(I);v.sort()}D=v.length;h=F.length=v.length;for(g=0;g<h;g++)if(I=a===
v?g:v[g],x=a[I],n=G(I,x,g),Ea(n,"`track by` id"),y.hasOwnProperty(n))z=y[n],delete y[n],t[n]=z,F[g]=z;else{if(t.hasOwnProperty(n))throw r(F,function(a){a&&a.scope&&(y[a.id]=a)}),d("dupes",m,n,oa(x));F[g]={id:n};t[n]=!1}for(I in y)y.hasOwnProperty(I)&&(z=y[I],g=Eb(z.clone),c.leave(g),r(g,function(a){a.$$NG_REMOVED=!0}),z.scope.$destroy());g=0;for(h=v.length;g<h;g++){I=a===v?g:v[g];x=a[I];z=F[g];F[g-1]&&(l=F[g-1].clone[F[g-1].clone.length-1]);if(z.scope){C=z.scope;n=l;do n=n.nextSibling;while(n&&n.$$NG_REMOVED);
z.clone[0]!=n&&c.move(Eb(z.clone),null,A(l));l=z.clone[z.clone.length-1]}else C=e.$new();C[u]=x;w&&(C[w]=I);C.$index=g;C.$first=0===g;C.$last=g===D-1;C.$middle=!(C.$first||C.$last);C.$odd=!(C.$even=0===(g&1));z.scope||k(C,function(a){a[a.length++]=X.createComment(" end ngRepeat: "+m+" ");c.enter(a,null,A(l));l=a;z.scope=C;z.clone=a;t[z.id]=z})}y=t})}}}],yd=["$animate",function(a){return function(c,d,e){c.$watch(e.ngShow,function(c){a[Wa(c)?"removeClass":"addClass"](d,"ng-hide")})}}],rd=["$animate",
function(a){return function(c,d,e){c.$watch(e.ngHide,function(c){a[Wa(c)?"addClass":"removeClass"](d,"ng-hide")})}}],zd=Aa(function(a,c,d){a.$watch(d.ngStyle,function(a,d){d&&a!==d&&r(d,function(a,d){c.css(d,"")});a&&c.css(a)},!0)}),Ad=["$animate",function(a){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(c,d,e,f){var g=[],h=[],k=[],m=[];c.$watch(e.ngSwitch||e.on,function(d){var n,q;n=0;for(q=k.length;n<q;++n)k[n].remove();n=k.length=0;for(q=
m.length;n<q;++n){var p=h[n];m[n].$destroy();k[n]=p;a.leave(p,function(){k.splice(n,1)})}h.length=0;m.length=0;if(g=f.cases["!"+d]||f.cases["?"])c.$eval(e.change),r(g,function(d){var e=c.$new();m.push(e);d.transclude(e,function(c){var e=d.element;h.push(c);a.enter(c,e.parent(),e)})})})}}}],Bd=Aa({transclude:"element",priority:800,require:"^ngSwitch",link:function(a,c,d,e,f){e.cases["!"+d.ngSwitchWhen]=e.cases["!"+d.ngSwitchWhen]||[];e.cases["!"+d.ngSwitchWhen].push({transclude:f,element:c})}}),Cd=
Aa({transclude:"element",priority:800,require:"^ngSwitch",link:function(a,c,d,e,f){e.cases["?"]=e.cases["?"]||[];e.cases["?"].push({transclude:f,element:c})}}),Ed=Aa({link:function(a,c,d,e,f){if(!f)throw z("ngTransclude")("orphan",ia(c));f(function(a){c.empty();c.append(a)})}}),ed=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(c,d){"text/ng-template"==d.type&&a.put(d.id,c[0].text)}}}],bf=z("ngOptions"),Dd=aa({terminal:!0}),fd=["$compile","$parse",function(a,c){var d=
/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,e={$setViewValue:v};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(a,c,d){var k=this,m={},l=e,n;k.databound=d.ngModel;k.init=function(a,c,d){l=a;n=d};k.addOption=function(c){Ea(c,'"option value"');m[c]=!0;l.$viewValue==c&&(a.val(c),n.parent()&&n.remove())};
k.removeOption=function(a){this.hasOption(a)&&(delete m[a],l.$viewValue==a&&this.renderUnknownOption(a))};k.renderUnknownOption=function(c){c="? "+Na(c)+" ?";n.val(c);a.prepend(n);a.val(c);n.prop("selected",!0)};k.hasOption=function(a){return m.hasOwnProperty(a)};c.$on("$destroy",function(){k.renderUnknownOption=v})}],link:function(e,g,h,k){function m(a,c,d,e){d.$render=function(){var a=d.$viewValue;e.hasOption(a)?(x.parent()&&x.remove(),c.val(a),""===a&&w.prop("selected",!0)):F(a)&&w?c.val(""):e.renderUnknownOption(a)};
c.on("change",function(){a.$apply(function(){x.parent()&&x.remove();d.$setViewValue(c.val())})})}function l(a,c,d){var e;d.$render=function(){var a=new db(d.$viewValue);r(c.find("option"),function(c){c.selected=D(a.get(c.value))})};a.$watch(function(){Ca(e,d.$viewValue)||(e=ha(d.$viewValue),d.$render())});c.on("change",function(){a.$apply(function(){var a=[];r(c.find("option"),function(c){c.selected&&a.push(c.value)});d.$setViewValue(a)})})}function n(e,f,g){function h(){var a={"":[]},c=[""],d,k,
s,u,v;s=g.$modelValue;u=A(e)||[];var F=n?Xb(u):u,G,Q,C;Q={};C=!1;if(p)if(k=g.$modelValue,w&&L(k))for(C=new db([]),d={},v=0;v<k.length;v++)d[m]=k[v],C.put(w(e,d),k[v]);else C=new db(k);v=C;var E,K;for(C=0;G=F.length,C<G;C++){k=C;if(n){k=F[C];if("$"===k.charAt(0))continue;Q[n]=k}Q[m]=u[k];d=r(e,Q)||"";(k=a[d])||(k=a[d]=[],c.push(d));p?d=D(v.remove(w?w(e,Q):x(e,Q))):(w?(d={},d[m]=s,d=w(e,d)===w(e,Q)):d=s===x(e,Q),v=v||d);E=l(e,Q);E=D(E)?E:"";k.push({id:w?w(e,Q):n?F[C]:C,label:E,selected:d})}p||(z||null===
s?a[""].unshift({id:"",label:"",selected:!v}):v||a[""].unshift({id:"?",label:"",selected:!0}));Q=0;for(F=c.length;Q<F;Q++){d=c[Q];k=a[d];B.length<=Q?(s={element:y.clone().attr("label",d),label:k.label},u=[s],B.push(u),f.append(s.element)):(u=B[Q],s=u[0],s.label!=d&&s.element.attr("label",s.label=d));E=null;C=0;for(G=k.length;C<G;C++)d=k[C],(v=u[C+1])?(E=v.element,v.label!==d.label&&(E.text(v.label=d.label),E.prop("label",v.label)),v.id!==d.id&&E.val(v.id=d.id),E[0].selected!==d.selected&&(E.prop("selected",
v.selected=d.selected),R&&E.prop("selected",v.selected))):(""===d.id&&z?K=z:(K=t.clone()).val(d.id).prop("selected",d.selected).attr("selected",d.selected).prop("label",d.label).text(d.label),u.push({element:K,label:d.label,id:d.id,selected:d.selected}),q.addOption(d.label,K),E?E.after(K):s.element.append(K),E=K);for(C++;u.length>C;)d=u.pop(),q.removeOption(d.label),d.element.remove()}for(;B.length>Q;)B.pop()[0].element.remove()}var k;if(!(k=s.match(d)))throw bf("iexp",s,ia(f));var l=c(k[2]||k[1]),
m=k[4]||k[6],n=k[5],r=c(k[3]||""),x=c(k[2]?k[1]:m),A=c(k[7]),w=k[8]?c(k[8]):null,B=[[{element:f,label:""}]];z&&(a(z)(e),z.removeClass("ng-scope"),z.remove());f.empty();f.on("change",function(){e.$apply(function(){var a,c=A(e)||[],d={},k,l,q,r,s,t,v;if(p)for(l=[],r=0,t=B.length;r<t;r++)for(a=B[r],q=1,s=a.length;q<s;q++){if((k=a[q].element)[0].selected){k=k.val();n&&(d[n]=k);if(w)for(v=0;v<c.length&&(d[m]=c[v],w(e,d)!=k);v++);else d[m]=c[k];l.push(x(e,d))}}else if(k=f.val(),"?"==k)l=u;else if(""===
k)l=null;else if(w)for(v=0;v<c.length;v++){if(d[m]=c[v],w(e,d)==k){l=x(e,d);break}}else d[m]=c[k],n&&(d[n]=k),l=x(e,d);g.$setViewValue(l);h()})});g.$render=h;e.$watchCollection(A,h);e.$watchCollection(function(){var a={},c=A(e);if(c){for(var d=Array(c.length),f=0,g=c.length;f<g;f++)a[m]=c[f],d[f]=l(e,a);return d}},h);p&&e.$watchCollection(function(){return g.$modelValue},h)}if(k[1]){var q=k[0];k=k[1];var p=h.multiple,s=h.ngOptions,z=!1,w,t=A(X.createElement("option")),y=A(X.createElement("optgroup")),
x=t.clone();h=0;for(var B=g.children(),v=B.length;h<v;h++)if(""===B[h].value){w=z=B.eq(h);break}q.init(k,z,x);p&&(k.$isEmpty=function(a){return!a||0===a.length});s?n(e,g,k):p?l(e,g,k):m(e,g,k,q)}}}}],hd=["$interpolate",function(a){var c={addOption:v,removeOption:v};return{restrict:"E",priority:100,compile:function(d,e){if(F(e.value)){var f=a(d.text(),!0);f||e.$set("value",d.text())}return function(a,d,e){var m=d.parent(),l=m.data("$selectController")||m.parent().data("$selectController");l&&l.databound?
d.prop("selected",!1):l=c;f?a.$watch(f,function(a,c){e.$set("value",a);a!==c&&l.removeOption(c);l.addOption(a)}):l.addOption(e.value);d.on("$destroy",function(){l.removeOption(e.value)})}}}}],gd=aa({restrict:"E",terminal:!0});W.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):((Fa=W.jQuery)&&Fa.fn.on?(A=Fa,E(Fa.fn,{scope:Oa.scope,isolateScope:Oa.isolateScope,controller:Oa.controller,injector:Oa.injector,inheritedData:Oa.inheritedData}),Gb("remove",!0,!0,!1),Gb("empty",
!1,!1,!1),Gb("html",!1,!1,!0)):A=S,Xa.element=A,Zc(Xa),A(X).ready(function(){Wc(X,dc)}))})(window,document);!window.angular.$$csp()&&window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}</style>');

/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.12.0 - 2014-11-16
 * License: MIT
 */
angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
angular.module("ui.bootstrap.tpls", ["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]);
angular.module('ui.bootstrap.transition', [])

/**
 * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.
 * @param  {DOMElement} element  The DOMElement that will be animated.
 * @param  {string|object|function} trigger  The thing that will cause the transition to start:
 *   - As a string, it represents the css class to be added to the element.
 *   - As an object, it represents a hash of style attributes to be applied to the element.
 *   - As a function, it represents a function to be called that will cause the transition to occur.
 * @return {Promise}  A promise that is resolved when the transition finishes.
 */
.factory('$transition', ['$q', '$timeout', '$rootScope', function($q, $timeout, $rootScope) {

  var $transition = function(element, trigger, options) {
    options = options || {};
    var deferred = $q.defer();
    var endEventName = $transition[options.animation ? 'animationEndEventName' : 'transitionEndEventName'];

    var transitionEndHandler = function(event) {
      $rootScope.$apply(function() {
        element.unbind(endEventName, transitionEndHandler);
        deferred.resolve(element);
      });
    };

    if (endEventName) {
      element.bind(endEventName, transitionEndHandler);
    }

    // Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur
    $timeout(function() {
      if ( angular.isString(trigger) ) {
        element.addClass(trigger);
      } else if ( angular.isFunction(trigger) ) {
        trigger(element);
      } else if ( angular.isObject(trigger) ) {
        element.css(trigger);
      }
      //If browser does not support transitions, instantly resolve
      if ( !endEventName ) {
        deferred.resolve(element);
      }
    });

    // Add our custom cancel function to the promise that is returned
    // We can call this if we are about to run a new transition, which we know will prevent this transition from ending,
    // i.e. it will therefore never raise a transitionEnd event for that transition
    deferred.promise.cancel = function() {
      if ( endEventName ) {
        element.unbind(endEventName, transitionEndHandler);
      }
      deferred.reject('Transition cancelled');
    };

    return deferred.promise;
  };

  // Work out the name of the transitionEnd event
  var transElement = document.createElement('trans');
  var transitionEndEventNames = {
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'oTransitionEnd',
    'transition': 'transitionend'
  };
  var animationEndEventNames = {
    'WebkitTransition': 'webkitAnimationEnd',
    'MozTransition': 'animationend',
    'OTransition': 'oAnimationEnd',
    'transition': 'animationend'
  };
  function findEndEventName(endEventNames) {
    for (var name in endEventNames){
      if (transElement.style[name] !== undefined) {
        return endEventNames[name];
      }
    }
  }
  $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);
  $transition.animationEndEventName = findEndEventName(animationEndEventNames);
  return $transition;
}]);

angular.module('ui.bootstrap.collapse', ['ui.bootstrap.transition'])

  .directive('collapse', ['$transition', function ($transition) {

    return {
      link: function (scope, element, attrs) {

        var initialAnimSkip = true;
        var currentTransition;

        function doTransition(change) {
          var newTransition = $transition(element, change);
          if (currentTransition) {
            currentTransition.cancel();
          }
          currentTransition = newTransition;
          newTransition.then(newTransitionDone, newTransitionDone);
          return newTransition;

          function newTransitionDone() {
            // Make sure it's this transition, otherwise, leave it alone.
            if (currentTransition === newTransition) {
              currentTransition = undefined;
            }
          }
        }

        function expand() {
          if (initialAnimSkip) {
            initialAnimSkip = false;
            expandDone();
          } else {
            element.removeClass('collapse').addClass('collapsing');
            doTransition({ height: element[0].scrollHeight + 'px' }).then(expandDone);
          }
        }

        function expandDone() {
          element.removeClass('collapsing');
          element.addClass('collapse in');
          element.css({height: 'auto'});
        }

        function collapse() {
          if (initialAnimSkip) {
            initialAnimSkip = false;
            collapseDone();
            element.css({height: 0});
          } else {
            // CSS transitions don't work with height: auto, so we have to manually change the height to a specific value
            element.css({ height: element[0].scrollHeight + 'px' });
            //trigger reflow so a browser realizes that height was updated from auto to a specific value
            var x = element[0].offsetWidth;

            element.removeClass('collapse in').addClass('collapsing');

            doTransition({ height: 0 }).then(collapseDone);
          }
        }

        function collapseDone() {
          element.removeClass('collapsing');
          element.addClass('collapse');
        }

        scope.$watch(attrs.collapse, function (shouldCollapse) {
          if (shouldCollapse) {
            collapse();
          } else {
            expand();
          }
        });
      }
    };
  }]);

angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])

.constant('accordionConfig', {
  closeOthers: true
})

.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {

  // This array keeps track of the accordion groups
  this.groups = [];

  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
  this.closeOthers = function(openGroup) {
    var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
    if ( closeOthers ) {
      angular.forEach(this.groups, function (group) {
        if ( group !== openGroup ) {
          group.isOpen = false;
        }
      });
    }
  };

  // This is called from the accordion-group directive to add itself to the accordion
  this.addGroup = function(groupScope) {
    var that = this;
    this.groups.push(groupScope);

    groupScope.$on('$destroy', function (event) {
      that.removeGroup(groupScope);
    });
  };

  // This is called from the accordion-group directive when to remove itself
  this.removeGroup = function(group) {
    var index = this.groups.indexOf(group);
    if ( index !== -1 ) {
      this.groups.splice(index, 1);
    }
  };

}])

// The accordion directive simply sets up the directive controller
// and adds an accordion CSS class to itself element.
.directive('accordion', function () {
  return {
    restrict:'EA',
    controller:'AccordionController',
    transclude: true,
    replace: false,
    templateUrl: 'template/accordion/accordion.html'
  };
})

// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
.directive('accordionGroup', function() {
  return {
    require:'^accordion',         // We need this directive to be inside an accordion
    restrict:'EA',
    transclude:true,              // It transcludes the contents of the directive into the template
    replace: true,                // The element containing the directive will be replaced with the template
    templateUrl:'template/accordion/accordion-group.html',
    scope: {
      heading: '@',               // Interpolate the heading attribute onto this scope
      isOpen: '=?',
      isDisabled: '=?'
    },
    controller: function() {
      this.setHeading = function(element) {
        this.heading = element;
      };
    },
    link: function(scope, element, attrs, accordionCtrl) {
      accordionCtrl.addGroup(scope);

      scope.$watch('isOpen', function(value) {
        if ( value ) {
          accordionCtrl.closeOthers(scope);
        }
      });

      scope.toggleOpen = function() {
        if ( !scope.isDisabled ) {
          scope.isOpen = !scope.isOpen;
        }
      };
    }
  };
})

// Use accordion-heading below an accordion-group to provide a heading containing HTML
// <accordion-group>
//   <accordion-heading>Heading containing HTML - <img src="..."></accordion-heading>
// </accordion-group>
.directive('accordionHeading', function() {
  return {
    restrict: 'EA',
    transclude: true,   // Grab the contents to be used as the heading
    template: '',       // In effect remove this element!
    replace: true,
    require: '^accordionGroup',
    link: function(scope, element, attr, accordionGroupCtrl, transclude) {
      // Pass the heading to the accordion-group controller
      // so that it can be transcluded into the right place in the template
      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
      accordionGroupCtrl.setHeading(transclude(scope, function() {}));
    }
  };
})

// Use in the accordion-group template to indicate where you want the heading to be transcluded
// You must provide the property on the accordion-group controller that will hold the transcluded element
// <div class="accordion-group">
//   <div class="accordion-heading" ><a ... accordion-transclude="heading">...</a></div>
//   ...
// </div>
.directive('accordionTransclude', function() {
  return {
    require: '^accordionGroup',
    link: function(scope, element, attr, controller) {
      scope.$watch(function() { return controller[attr.accordionTransclude]; }, function(heading) {
        if ( heading ) {
          element.html('');
          element.append(heading);
        }
      });
    }
  };
});

angular.module('ui.bootstrap.alert', [])

.controller('AlertController', ['$scope', '$attrs', function ($scope, $attrs) {
  $scope.closeable = 'close' in $attrs;
  this.close = $scope.close;
}])

.directive('alert', function () {
  return {
    restrict:'EA',
    controller:'AlertController',
    templateUrl:'template/alert/alert.html',
    transclude:true,
    replace:true,
    scope: {
      type: '@',
      close: '&'

    }
  };
})

.directive('dismissOnTimeout', ['$timeout', function($timeout) {
  return {
    require: 'alert',
    link: function(scope, element, attrs, alertCtrl) {
      $timeout(function(){
        alertCtrl.close();
      }, parseInt(attrs.dismissOnTimeout, 10));
    }
  };
}]);

angular.module('ui.bootstrap.bindHtml', [])

  .directive('bindHtmlUnsafe', function () {
    return function (scope, element, attr) {
      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);
      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {
        element.html(value || '');
      });
    };
  });
angular.module('ui.bootstrap.buttons', [])

.constant('buttonConfig', {
  activeClass: 'active',
  toggleEvent: 'click'
})

.controller('ButtonsController', ['buttonConfig', function(buttonConfig) {
  this.activeClass = buttonConfig.activeClass || 'active';
  this.toggleEvent = buttonConfig.toggleEvent || 'click';
}])

.directive('btnRadio', function () {
  return {
    require: ['btnRadio', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        var isActive = element.hasClass(buttonsCtrl.activeClass);

        if (!isActive || angular.isDefined(attrs.uncheckable)) {
          scope.$apply(function () {
            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));
            ngModelCtrl.$render();
          });
        }
      });
    }
  };
})

.directive('btnCheckbox', function () {
  return {
    require: ['btnCheckbox', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      function getTrueValue() {
        return getCheckboxValue(attrs.btnCheckboxTrue, true);
      }

      function getFalseValue() {
        return getCheckboxValue(attrs.btnCheckboxFalse, false);
      }

      function getCheckboxValue(attributeValue, defaultValue) {
        var val = scope.$eval(attributeValue);
        return angular.isDefined(val) ? val : defaultValue;
      }

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        scope.$apply(function () {
          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
});

/**
* @ngdoc overview
* @name ui.bootstrap.carousel
*
* @description
* AngularJS version of an image carousel.
*
*/
angular.module('ui.bootstrap.carousel', ['ui.bootstrap.transition'])
.controller('CarouselController', ['$scope', '$timeout', '$interval', '$transition', function ($scope, $timeout, $interval, $transition) {
  var self = this,
    slides = self.slides = $scope.slides = [],
    currentIndex = -1,
    currentInterval, isPlaying;
  self.currentSlide = null;

  var destroyed = false;
  /* direction: "prev" or "next" */
  self.select = $scope.select = function(nextSlide, direction) {
    var nextIndex = slides.indexOf(nextSlide);
    //Decide direction if it's not given
    if (direction === undefined) {
      direction = nextIndex > currentIndex ? 'next' : 'prev';
    }
    if (nextSlide && nextSlide !== self.currentSlide) {
      if ($scope.$currentTransition) {
        $scope.$currentTransition.cancel();
        //Timeout so ng-class in template has time to fix classes for finished slide
        $timeout(goNext);
      } else {
        goNext();
      }
    }
    function goNext() {
      // Scope has been destroyed, stop here.
      if (destroyed) { return; }
      //If we have a slide to transition from and we have a transition type and we're allowed, go
      if (self.currentSlide && angular.isString(direction) && !$scope.noTransition && nextSlide.$element) {
        //We shouldn't do class manip in here, but it's the same weird thing bootstrap does. need to fix sometime
        nextSlide.$element.addClass(direction);
        var reflow = nextSlide.$element[0].offsetWidth; //force reflow

        //Set all other slides to stop doing their stuff for the new transition
        angular.forEach(slides, function(slide) {
          angular.extend(slide, {direction: '', entering: false, leaving: false, active: false});
        });
        angular.extend(nextSlide, {direction: direction, active: true, entering: true});
        angular.extend(self.currentSlide||{}, {direction: direction, leaving: true});

        $scope.$currentTransition = $transition(nextSlide.$element, {});
        //We have to create new pointers inside a closure since next & current will change
        (function(next,current) {
          $scope.$currentTransition.then(
            function(){ transitionDone(next, current); },
            function(){ transitionDone(next, current); }
          );
        }(nextSlide, self.currentSlide));
      } else {
        transitionDone(nextSlide, self.currentSlide);
      }
      self.currentSlide = nextSlide;
      currentIndex = nextIndex;
      //every time you change slides, reset the timer
      restartTimer();
    }
    function transitionDone(next, current) {
      angular.extend(next, {direction: '', active: true, leaving: false, entering: false});
      angular.extend(current||{}, {direction: '', active: false, leaving: false, entering: false});
      $scope.$currentTransition = null;
    }
  };
  $scope.$on('$destroy', function () {
    destroyed = true;
  });

  /* Allow outside people to call indexOf on slides array */
  self.indexOfSlide = function(slide) {
    return slides.indexOf(slide);
  };

  $scope.next = function() {
    var newIndex = (currentIndex + 1) % slides.length;

    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (!$scope.$currentTransition) {
      return self.select(slides[newIndex], 'next');
    }
  };

  $scope.prev = function() {
    var newIndex = currentIndex - 1 < 0 ? slides.length - 1 : currentIndex - 1;

    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (!$scope.$currentTransition) {
      return self.select(slides[newIndex], 'prev');
    }
  };

  $scope.isActive = function(slide) {
     return self.currentSlide === slide;
  };

  $scope.$watch('interval', restartTimer);
  $scope.$on('$destroy', resetTimer);

  function restartTimer() {
    resetTimer();
    var interval = +$scope.interval;
    if (!isNaN(interval) && interval > 0) {
      currentInterval = $interval(timerFn, interval);
    }
  }

  function resetTimer() {
    if (currentInterval) {
      $interval.cancel(currentInterval);
      currentInterval = null;
    }
  }

  function timerFn() {
    var interval = +$scope.interval;
    if (isPlaying && !isNaN(interval) && interval > 0) {
      $scope.next();
    } else {
      $scope.pause();
    }
  }

  $scope.play = function() {
    if (!isPlaying) {
      isPlaying = true;
      restartTimer();
    }
  };
  $scope.pause = function() {
    if (!$scope.noPause) {
      isPlaying = false;
      resetTimer();
    }
  };

  self.addSlide = function(slide, element) {
    slide.$element = element;
    slides.push(slide);
    //if this is the first slide or the slide is set to active, select it
    if(slides.length === 1 || slide.active) {
      self.select(slides[slides.length-1]);
      if (slides.length == 1) {
        $scope.play();
      }
    } else {
      slide.active = false;
    }
  };

  self.removeSlide = function(slide) {
    //get the index of the slide inside the carousel
    var index = slides.indexOf(slide);
    slides.splice(index, 1);
    if (slides.length > 0 && slide.active) {
      if (index >= slides.length) {
        self.select(slides[index-1]);
      } else {
        self.select(slides[index]);
      }
    } else if (currentIndex > index) {
      currentIndex--;
    }
  };

}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:carousel
 * @restrict EA
 *
 * @description
 * Carousel is the outer container for a set of image 'slides' to showcase.
 *
 * @param {number=} interval The time, in milliseconds, that it will take the carousel to go to the next slide.
 * @param {boolean=} noTransition Whether to disable transitions on the carousel.
 * @param {boolean=} noPause Whether to disable pausing on the carousel (by default, the carousel interval pauses on hover).
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <carousel>
      <slide>
        <img src="http://placekitten.com/150/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>Beautiful!</p>
        </div>
      </slide>
      <slide>
        <img src="http://placekitten.com/100/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>D'aww!</p>
        </div>
      </slide>
    </carousel>
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
 */
.directive('carousel', [function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    controller: 'CarouselController',
    require: 'carousel',
    templateUrl: 'template/carousel/carousel.html',
    scope: {
      interval: '=',
      noTransition: '=',
      noPause: '='
    }
  };
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:slide
 * @restrict EA
 *
 * @description
 * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.
 *
 * @param {boolean=} active Model binding, whether or not this slide is currently active.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
<div ng-controller="CarouselDemoCtrl">
  <carousel>
    <slide ng-repeat="slide in slides" active="slide.active">
      <img ng-src="{{slide.image}}" style="margin:auto;">
      <div class="carousel-caption">
        <h4>Slide {{$index}}</h4>
        <p>{{slide.text}}</p>
      </div>
    </slide>
  </carousel>
  Interval, in milliseconds: <input type="number" ng-model="myInterval">
  <br />Enter a negative number to stop the interval.
</div>
  </file>
  <file name="script.js">
function CarouselDemoCtrl($scope) {
  $scope.myInterval = 5000;
}
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
*/

.directive('slide', function() {
  return {
    require: '^carousel',
    restrict: 'EA',
    transclude: true,
    replace: true,
    templateUrl: 'template/carousel/slide.html',
    scope: {
      active: '=?'
    },
    link: function (scope, element, attrs, carouselCtrl) {
      carouselCtrl.addSlide(scope, element);
      //when the scope is destroyed then remove the slide from the current slides array
      scope.$on('$destroy', function() {
        carouselCtrl.removeSlide(scope);
      });

      scope.$watch('active', function(active) {
        if (active) {
          carouselCtrl.select(scope);
        }
      });
    }
  };
});

angular.module('ui.bootstrap.dateparser', [])

.service('dateParser', ['$locale', 'orderByFilter', function($locale, orderByFilter) {

  this.parsers = {};

  var formatCodeToRegex = {
    'yyyy': {
      regex: '\\d{4}',
      apply: function(value) { this.year = +value; }
    },
    'yy': {
      regex: '\\d{2}',
      apply: function(value) { this.year = +value + 2000; }
    },
    'y': {
      regex: '\\d{1,4}',
      apply: function(value) { this.year = +value; }
    },
    'MMMM': {
      regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
      apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); }
    },
    'MMM': {
      regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
      apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); }
    },
    'MM': {
      regex: '0[1-9]|1[0-2]',
      apply: function(value) { this.month = value - 1; }
    },
    'M': {
      regex: '[1-9]|1[0-2]',
      apply: function(value) { this.month = value - 1; }
    },
    'dd': {
      regex: '[0-2][0-9]{1}|3[0-1]{1}',
      apply: function(value) { this.date = +value; }
    },
    'd': {
      regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
      apply: function(value) { this.date = +value; }
    },
    'EEEE': {
      regex: $locale.DATETIME_FORMATS.DAY.join('|')
    },
    'EEE': {
      regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|')
    }
  };

  function createParser(format) {
    var map = [], regex = format.split('');

    angular.forEach(formatCodeToRegex, function(data, code) {
      var index = format.indexOf(code);

      if (index > -1) {
        format = format.split('');

        regex[index] = '(' + data.regex + ')';
        format[index] = '$'; // Custom symbol to define consumed part of format
        for (var i = index + 1, n = index + code.length; i < n; i++) {
          regex[i] = '';
          format[i] = '$';
        }
        format = format.join('');

        map.push({ index: index, apply: data.apply });
      }
    });

    return {
      regex: new RegExp('^' + regex.join('') + '$'),
      map: orderByFilter(map, 'index')
    };
  }

  this.parse = function(input, format) {
    if ( !angular.isString(input) || !format ) {
      return input;
    }

    format = $locale.DATETIME_FORMATS[format] || format;

    if ( !this.parsers[format] ) {
      this.parsers[format] = createParser(format);
    }

    var parser = this.parsers[format],
        regex = parser.regex,
        map = parser.map,
        results = input.match(regex);

    if ( results && results.length ) {
      var fields = { year: 1900, month: 0, date: 1, hours: 0 }, dt;

      for( var i = 1, n = results.length; i < n; i++ ) {
        var mapper = map[i-1];
        if ( mapper.apply ) {
          mapper.apply.call(fields, results[i]);
        }
      }

      if ( isValid(fields.year, fields.month, fields.date) ) {
        dt = new Date( fields.year, fields.month, fields.date, fields.hours);
      }

      return dt;
    }
  };

  // Check if date is valid for specific month (and year for February).
  // Month: 0 = Jan, 1 = Feb, etc
  function isValid(year, month, date) {
    if ( month === 1 && date > 28) {
        return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
    }

    if ( month === 3 || month === 5 || month === 8 || month === 10) {
        return date < 31;
    }

    return true;
  }
}]);

angular.module('ui.bootstrap.position', [])

/**
 * A set of utility methods that can be use to retrieve position of DOM elements.
 * It is meant to be used where we need to absolute-position DOM elements in
 * relation to other, existing elements (this is the case for tooltips, popovers,
 * typeahead suggestions etc.).
 */
  .factory('$position', ['$document', '$window', function ($document, $window) {

    function getStyle(el, cssprop) {
      if (el.currentStyle) { //IE
        return el.currentStyle[cssprop];
      } else if ($window.getComputedStyle) {
        return $window.getComputedStyle(el)[cssprop];
      }
      // finally try and get inline style
      return el.style[cssprop];
    }

    /**
     * Checks if a given element is statically positioned
     * @param element - raw DOM element
     */
    function isStaticPositioned(element) {
      return (getStyle(element, 'position') || 'static' ) === 'static';
    }

    /**
     * returns the closest, non-statically positioned parentOffset of a given element
     * @param element
     */
    var parentOffsetEl = function (element) {
      var docDomEl = $document[0];
      var offsetParent = element.offsetParent || docDomEl;
      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {
        offsetParent = offsetParent.offsetParent;
      }
      return offsetParent || docDomEl;
    };

    return {
      /**
       * Provides read-only equivalent of jQuery's position function:
       * http://api.jquery.com/position/
       */
      position: function (element) {
        var elBCR = this.offset(element);
        var offsetParentBCR = { top: 0, left: 0 };
        var offsetParentEl = parentOffsetEl(element[0]);
        if (offsetParentEl != $document[0]) {
          offsetParentBCR = this.offset(angular.element(offsetParentEl));
          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }

        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: elBCR.top - offsetParentBCR.top,
          left: elBCR.left - offsetParentBCR.left
        };
      },

      /**
       * Provides read-only equivalent of jQuery's offset function:
       * http://api.jquery.com/offset/
       */
      offset: function (element) {
        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
        };
      },

      /**
       * Provides coordinates for the targetEl in relation to hostEl
       */
      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {

        var positionStrParts = positionStr.split('-');
        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';

        var hostElPos,
          targetElWidth,
          targetElHeight,
          targetElPos;

        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);

        targetElWidth = targetEl.prop('offsetWidth');
        targetElHeight = targetEl.prop('offsetHeight');

        var shiftWidth = {
          center: function () {
            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
          },
          left: function () {
            return hostElPos.left;
          },
          right: function () {
            return hostElPos.left + hostElPos.width;
          }
        };

        var shiftHeight = {
          center: function () {
            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
          },
          top: function () {
            return hostElPos.top;
          },
          bottom: function () {
            return hostElPos.top + hostElPos.height;
          }
        };

        switch (pos0) {
          case 'right':
            targetElPos = {
              top: shiftHeight[pos1](),
              left: shiftWidth[pos0]()
            };
            break;
          case 'left':
            targetElPos = {
              top: shiftHeight[pos1](),
              left: hostElPos.left - targetElWidth
            };
            break;
          case 'bottom':
            targetElPos = {
              top: shiftHeight[pos0](),
              left: shiftWidth[pos1]()
            };
            break;
          default:
            targetElPos = {
              top: hostElPos.top - targetElHeight,
              left: shiftWidth[pos1]()
            };
            break;
        }

        return targetElPos;
      }
    };
  }]);

angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.position'])

.constant('datepickerConfig', {
  formatDay: 'dd',
  formatMonth: 'MMMM',
  formatYear: 'yyyy',
  formatDayHeader: 'EEE',
  formatDayTitle: 'MMMM yyyy',
  formatMonthTitle: 'yyyy',
  datepickerMode: 'day',
  minMode: 'day',
  maxMode: 'year',
  showWeeks: true,
  startingDay: 0,
  yearRange: 20,
  minDate: null,
  maxDate: null
})

.controller('DatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$timeout', '$log', 'dateFilter', 'datepickerConfig', function($scope, $attrs, $parse, $interpolate, $timeout, $log, dateFilter, datepickerConfig) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl;

  // Modes chain
  this.modes = ['day', 'month', 'year'];

  // Configuration attributes
  angular.forEach(['formatDay', 'formatMonth', 'formatYear', 'formatDayHeader', 'formatDayTitle', 'formatMonthTitle',
                   'minMode', 'maxMode', 'showWeeks', 'startingDay', 'yearRange'], function( key, index ) {
    self[key] = angular.isDefined($attrs[key]) ? (index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key])) : datepickerConfig[key];
  });

  // Watchable date attributes
  angular.forEach(['minDate', 'maxDate'], function( key ) {
    if ( $attrs[key] ) {
      $scope.$parent.$watch($parse($attrs[key]), function(value) {
        self[key] = value ? new Date(value) : null;
        self.refreshView();
      });
    } else {
      self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;
    }
  });

  $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;
  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);
  this.activeDate = angular.isDefined($attrs.initDate) ? $scope.$parent.$eval($attrs.initDate) : new Date();

  $scope.isActive = function(dateObject) {
    if (self.compare(dateObject.date, self.activeDate) === 0) {
      $scope.activeDateId = dateObject.uid;
      return true;
    }
    return false;
  };

  this.init = function( ngModelCtrl_ ) {
    ngModelCtrl = ngModelCtrl_;

    ngModelCtrl.$render = function() {
      self.render();
    };
  };

  this.render = function() {
    if ( ngModelCtrl.$modelValue ) {
      var date = new Date( ngModelCtrl.$modelValue ),
          isValid = !isNaN(date);

      if ( isValid ) {
        this.activeDate = date;
      } else {
        $log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
      }
      ngModelCtrl.$setValidity('date', isValid);
    }
    this.refreshView();
  };

  this.refreshView = function() {
    if ( this.element ) {
      this._refreshView();

      var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
      ngModelCtrl.$setValidity('date-disabled', !date || (this.element && !this.isDisabled(date)));
    }
  };

  this.createDateObject = function(date, format) {
    var model = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
    return {
      date: date,
      label: dateFilter(date, format),
      selected: model && this.compare(date, model) === 0,
      disabled: this.isDisabled(date),
      current: this.compare(date, new Date()) === 0
    };
  };

  this.isDisabled = function( date ) {
    return ((this.minDate && this.compare(date, this.minDate) < 0) || (this.maxDate && this.compare(date, this.maxDate) > 0) || ($attrs.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode})));
  };

  // Split array into smaller arrays
  this.split = function(arr, size) {
    var arrays = [];
    while (arr.length > 0) {
      arrays.push(arr.splice(0, size));
    }
    return arrays;
  };

  $scope.select = function( date ) {
    if ( $scope.datepickerMode === self.minMode ) {
      var dt = ngModelCtrl.$modelValue ? new Date( ngModelCtrl.$modelValue ) : new Date(0, 0, 0, 0, 0, 0, 0);
      dt.setFullYear( date.getFullYear(), date.getMonth(), date.getDate() );
      ngModelCtrl.$setViewValue( dt );
      ngModelCtrl.$render();
    } else {
      self.activeDate = date;
      $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) - 1 ];
    }
  };

  $scope.move = function( direction ) {
    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
    self.activeDate.setFullYear(year, month, 1);
    self.refreshView();
  };

  $scope.toggleMode = function( direction ) {
    direction = direction || 1;

    if (($scope.datepickerMode === self.maxMode && direction === 1) || ($scope.datepickerMode === self.minMode && direction === -1)) {
      return;
    }

    $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) + direction ];
  };

  // Key event mapper
  $scope.keys = { 13:'enter', 32:'space', 33:'pageup', 34:'pagedown', 35:'end', 36:'home', 37:'left', 38:'up', 39:'right', 40:'down' };

  var focusElement = function() {
    $timeout(function() {
      self.element[0].focus();
    }, 0 , false);
  };

  // Listen for focus requests from popup directive
  $scope.$on('datepicker.focus', focusElement);

  $scope.keydown = function( evt ) {
    var key = $scope.keys[evt.which];

    if ( !key || evt.shiftKey || evt.altKey ) {
      return;
    }

    evt.preventDefault();
    evt.stopPropagation();

    if (key === 'enter' || key === 'space') {
      if ( self.isDisabled(self.activeDate)) {
        return; // do nothing
      }
      $scope.select(self.activeDate);
      focusElement();
    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
      $scope.toggleMode(key === 'up' ? 1 : -1);
      focusElement();
    } else {
      self.handleKeyDown(key, evt);
      self.refreshView();
    }
  };
}])

.directive( 'datepicker', function () {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/datepicker.html',
    scope: {
      datepickerMode: '=?',
      dateDisabled: '&'
    },
    require: ['datepicker', '?^ngModel'],
    controller: 'DatepickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if ( ngModelCtrl ) {
        datepickerCtrl.init( ngModelCtrl );
      }
    }
  };
})

.directive('daypicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/day.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      scope.showWeeks = ctrl.showWeeks;

      ctrl.step = { months: 1 };
      ctrl.element = element;

      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      function getDaysInMonth( year, month ) {
        return ((month === 1) && (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];
      }

      function getDates(startDate, n) {
        var dates = new Array(n), current = new Date(startDate), i = 0;
        current.setHours(12); // Prevent repeated dates because of timezone bug
        while ( i < n ) {
          dates[i++] = new Date(current);
          current.setDate( current.getDate() + 1 );
        }
        return dates;
      }

      ctrl._refreshView = function() {
        var year = ctrl.activeDate.getFullYear(),
          month = ctrl.activeDate.getMonth(),
          firstDayOfMonth = new Date(year, month, 1),
          difference = ctrl.startingDay - firstDayOfMonth.getDay(),
          numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : - difference,
          firstDate = new Date(firstDayOfMonth);

        if ( numDisplayedFromPreviousMonth > 0 ) {
          firstDate.setDate( - numDisplayedFromPreviousMonth + 1 );
        }

        // 42 is the number of days on a six-month calendar
        var days = getDates(firstDate, 42);
        for (var i = 0; i < 42; i ++) {
          days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {
            secondary: days[i].getMonth() !== month,
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.labels = new Array(7);
        for (var j = 0; j < 7; j++) {
          scope.labels[j] = {
            abbr: dateFilter(days[j].date, ctrl.formatDayHeader),
            full: dateFilter(days[j].date, 'EEEE')
          };
        }

        scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);
        scope.rows = ctrl.split(days, 7);

        if ( scope.showWeeks ) {
          scope.weekNumbers = [];
          var weekNumber = getISO8601WeekNumber( scope.rows[0][0].date ),
              numWeeks = scope.rows.length;
          while( scope.weekNumbers.push(weekNumber++) < numWeeks ) {}
        }
      };

      ctrl.compare = function(date1, date2) {
        return (new Date( date1.getFullYear(), date1.getMonth(), date1.getDate() ) - new Date( date2.getFullYear(), date2.getMonth(), date2.getDate() ) );
      };

      function getISO8601WeekNumber(date) {
        var checkDate = new Date(date);
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
        var time = checkDate.getTime();
        checkDate.setMonth(0); // Compare with Jan 1
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
      }

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getDate();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 7;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 7;
        } else if (key === 'pageup' || key === 'pagedown') {
          var month = ctrl.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
          ctrl.activeDate.setMonth(month, 1);
          date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);
        } else if (key === 'home') {
          date = 1;
        } else if (key === 'end') {
          date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());
        }
        ctrl.activeDate.setDate(date);
      };

      ctrl.refreshView();
    }
  };
}])

.directive('monthpicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/month.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      ctrl.step = { years: 1 };
      ctrl.element = element;

      ctrl._refreshView = function() {
        var months = new Array(12),
            year = ctrl.activeDate.getFullYear();

        for ( var i = 0; i < 12; i++ ) {
          months[i] = angular.extend(ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth), {
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);
        scope.rows = ctrl.split(months, 3);
      };

      ctrl.compare = function(date1, date2) {
        return new Date( date1.getFullYear(), date1.getMonth() ) - new Date( date2.getFullYear(), date2.getMonth() );
      };

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getMonth();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 3;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 3;
        } else if (key === 'pageup' || key === 'pagedown') {
          var year = ctrl.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
          ctrl.activeDate.setFullYear(year);
        } else if (key === 'home') {
          date = 0;
        } else if (key === 'end') {
          date = 11;
        }
        ctrl.activeDate.setMonth(date);
      };

      ctrl.refreshView();
    }
  };
}])

.directive('yearpicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/year.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      var range = ctrl.yearRange;

      ctrl.step = { years: range };
      ctrl.element = element;

      function getStartingYear( year ) {
        return parseInt((year - 1) / range, 10) * range + 1;
      }

      ctrl._refreshView = function() {
        var years = new Array(range);

        for ( var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++ ) {
          years[i] = angular.extend(ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear), {
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.title = [years[0].label, years[range - 1].label].join(' - ');
        scope.rows = ctrl.split(years, 5);
      };

      ctrl.compare = function(date1, date2) {
        return date1.getFullYear() - date2.getFullYear();
      };

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getFullYear();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 5;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 5;
        } else if (key === 'pageup' || key === 'pagedown') {
          date += (key === 'pageup' ? - 1 : 1) * ctrl.step.years;
        } else if (key === 'home') {
          date = getStartingYear( ctrl.activeDate.getFullYear() );
        } else if (key === 'end') {
          date = getStartingYear( ctrl.activeDate.getFullYear() ) + range - 1;
        }
        ctrl.activeDate.setFullYear(date);
      };

      ctrl.refreshView();
    }
  };
}])

.constant('datepickerPopupConfig', {
  datepickerPopup: 'yyyy-MM-dd',
  currentText: 'Today',
  clearText: 'Clear',
  closeText: 'Done',
  closeOnDateSelection: true,
  appendToBody: false,
  showButtonBar: true
})

.directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'dateParser', 'datepickerPopupConfig',
function ($compile, $parse, $document, $position, dateFilter, dateParser, datepickerPopupConfig) {
  return {
    restrict: 'EA',
    require: 'ngModel',
    scope: {
      isOpen: '=?',
      currentText: '@',
      clearText: '@',
      closeText: '@',
      dateDisabled: '&'
    },
    link: function(scope, element, attrs, ngModel) {
      var dateFormat,
          closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection,
          appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;

      scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;

      scope.getText = function( key ) {
        return scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
      };

      attrs.$observe('datepickerPopup', function(value) {
          dateFormat = value || datepickerPopupConfig.datepickerPopup;
          ngModel.$render();
      });

      // popup element used to display calendar
      var popupEl = angular.element('<div datepicker-popup-wrap><div datepicker></div></div>');
      popupEl.attr({
        'ng-model': 'date',
        'ng-change': 'dateSelection()'
      });

      function cameltoDash( string ){
        return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
      }

      // datepicker element
      var datepickerEl = angular.element(popupEl.children()[0]);
      if ( attrs.datepickerOptions ) {
        angular.forEach(scope.$parent.$eval(attrs.datepickerOptions), function( value, option ) {
          datepickerEl.attr( cameltoDash(option), value );
        });
      }

      scope.watchData = {};
      angular.forEach(['minDate', 'maxDate', 'datepickerMode'], function( key ) {
        if ( attrs[key] ) {
          var getAttribute = $parse(attrs[key]);
          scope.$parent.$watch(getAttribute, function(value){
            scope.watchData[key] = value;
          });
          datepickerEl.attr(cameltoDash(key), 'watchData.' + key);

          // Propagate changes from datepicker to outside
          if ( key === 'datepickerMode' ) {
            var setAttribute = getAttribute.assign;
            scope.$watch('watchData.' + key, function(value, oldvalue) {
              if ( value !== oldvalue ) {
                setAttribute(scope.$parent, value);
              }
            });
          }
        }
      });
      if (attrs.dateDisabled) {
        datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');
      }

      function parseDate(viewValue) {
        if (!viewValue) {
          ngModel.$setValidity('date', true);
          return null;
        } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {
          ngModel.$setValidity('date', true);
          return viewValue;
        } else if (angular.isString(viewValue)) {
          var date = dateParser.parse(viewValue, dateFormat) || new Date(viewValue);
          if (isNaN(date)) {
            ngModel.$setValidity('date', false);
            return undefined;
          } else {
            ngModel.$setValidity('date', true);
            return date;
          }
        } else {
          ngModel.$setValidity('date', false);
          return undefined;
        }
      }
      ngModel.$parsers.unshift(parseDate);

      // Inner change
      scope.dateSelection = function(dt) {
        if (angular.isDefined(dt)) {
          scope.date = dt;
        }
        ngModel.$setViewValue(scope.date);
        ngModel.$render();

        if ( closeOnDateSelection ) {
          scope.isOpen = false;
          element[0].focus();
        }
      };

      element.bind('input change keyup', function() {
        scope.$apply(function() {
          scope.date = ngModel.$modelValue;
        });
      });

      // Outter change
      ngModel.$render = function() {
        var date = ngModel.$viewValue ? dateFilter(ngModel.$viewValue, dateFormat) : '';
        element.val(date);
        scope.date = parseDate( ngModel.$modelValue );
      };

      var documentClickBind = function(event) {
        if (scope.isOpen && event.target !== element[0]) {
          scope.$apply(function() {
            scope.isOpen = false;
          });
        }
      };

      var keydown = function(evt, noApply) {
        scope.keydown(evt);
      };
      element.bind('keydown', keydown);

      scope.keydown = function(evt) {
        if (evt.which === 27) {
          evt.preventDefault();
          evt.stopPropagation();
          scope.close();
        } else if (evt.which === 40 && !scope.isOpen) {
          scope.isOpen = true;
        }
      };

      scope.$watch('isOpen', function(value) {
        if (value) {
          scope.$broadcast('datepicker.focus');
          scope.position = appendToBody ? $position.offset(element) : $position.position(element);
          scope.position.top = scope.position.top + element.prop('offsetHeight');

          $document.bind('click', documentClickBind);
        } else {
          $document.unbind('click', documentClickBind);
        }
      });

      scope.select = function( date ) {
        if (date === 'today') {
          var today = new Date();
          if (angular.isDate(ngModel.$modelValue)) {
            date = new Date(ngModel.$modelValue);
            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
          } else {
            date = new Date(today.setHours(0, 0, 0, 0));
          }
        }
        scope.dateSelection( date );
      };

      scope.close = function() {
        scope.isOpen = false;
        element[0].focus();
      };

      var $popup = $compile(popupEl)(scope);
      // Prevent jQuery cache memory leak (template is now redundant after linking)
      popupEl.remove();

      if ( appendToBody ) {
        $document.find('body').append($popup);
      } else {
        element.after($popup);
      }

      scope.$on('$destroy', function() {
        $popup.remove();
        element.unbind('keydown', keydown);
        $document.unbind('click', documentClickBind);
      });
    }
  };
}])

.directive('datepickerPopupWrap', function() {
  return {
    restrict:'EA',
    replace: true,
    transclude: true,
    templateUrl: 'template/datepicker/popup.html',
    link:function (scope, element, attrs) {
      element.bind('click', function(event) {
        event.preventDefault();
        event.stopPropagation();
      });
    }
  };
});

angular.module('ui.bootstrap.dropdown', [])

.constant('dropdownConfig', {
  openClass: 'open'
})

.service('dropdownService', ['$document', function($document) {
  var openScope = null;

  this.open = function( dropdownScope ) {
    if ( !openScope ) {
      $document.bind('click', closeDropdown);
      $document.bind('keydown', escapeKeyBind);
    }

    if ( openScope && openScope !== dropdownScope ) {
        openScope.isOpen = false;
    }

    openScope = dropdownScope;
  };

  this.close = function( dropdownScope ) {
    if ( openScope === dropdownScope ) {
      openScope = null;
      $document.unbind('click', closeDropdown);
      $document.unbind('keydown', escapeKeyBind);
    }
  };

  var closeDropdown = function( evt ) {
    // This method may still be called during the same mouse event that
    // unbound this event handler. So check openScope before proceeding.
    if (!openScope) { return; }

    var toggleElement = openScope.getToggleElement();
    if ( evt && toggleElement && toggleElement[0].contains(evt.target) ) {
        return;
    }

    openScope.$apply(function() {
      openScope.isOpen = false;
    });
  };

  var escapeKeyBind = function( evt ) {
    if ( evt.which === 27 ) {
      openScope.focusToggleElement();
      closeDropdown();
    }
  };
}])

.controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate) {
  var self = this,
      scope = $scope.$new(), // create a child scope so we are not polluting original one
      openClass = dropdownConfig.openClass,
      getIsOpen,
      setIsOpen = angular.noop,
      toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop;

  this.init = function( element ) {
    self.$element = element;

    if ( $attrs.isOpen ) {
      getIsOpen = $parse($attrs.isOpen);
      setIsOpen = getIsOpen.assign;

      $scope.$watch(getIsOpen, function(value) {
        scope.isOpen = !!value;
      });
    }
  };

  this.toggle = function( open ) {
    return scope.isOpen = arguments.length ? !!open : !scope.isOpen;
  };

  // Allow other directives to watch status
  this.isOpen = function() {
    return scope.isOpen;
  };

  scope.getToggleElement = function() {
    return self.toggleElement;
  };

  scope.focusToggleElement = function() {
    if ( self.toggleElement ) {
      self.toggleElement[0].focus();
    }
  };

  scope.$watch('isOpen', function( isOpen, wasOpen ) {
    $animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass);

    if ( isOpen ) {
      scope.focusToggleElement();
      dropdownService.open( scope );
    } else {
      dropdownService.close( scope );
    }

    setIsOpen($scope, isOpen);
    if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
      toggleInvoker($scope, { open: !!isOpen });
    }
  });

  $scope.$on('$locationChangeSuccess', function() {
    scope.isOpen = false;
  });

  $scope.$on('$destroy', function() {
    scope.$destroy();
  });
}])

.directive('dropdown', function() {
  return {
    controller: 'DropdownController',
    link: function(scope, element, attrs, dropdownCtrl) {
      dropdownCtrl.init( element );
    }
  };
})

.directive('dropdownToggle', function() {
  return {
    require: '?^dropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if ( !dropdownCtrl ) {
        return;
      }

      dropdownCtrl.toggleElement = element;

      var toggleDropdown = function(event) {
        event.preventDefault();

        if ( !element.hasClass('disabled') && !attrs.disabled ) {
          scope.$apply(function() {
            dropdownCtrl.toggle();
          });
        }
      };

      element.bind('click', toggleDropdown);

      // WAI-ARIA
      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
      scope.$watch(dropdownCtrl.isOpen, function( isOpen ) {
        element.attr('aria-expanded', !!isOpen);
      });

      scope.$on('$destroy', function() {
        element.unbind('click', toggleDropdown);
      });
    }
  };
});

angular.module('ui.bootstrap.modal', ['ui.bootstrap.transition'])

/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function () {
    return {
      createNew: function () {
        var stack = [];

        return {
          add: function (key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function (key) {
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function () {
            return stack[stack.length - 1];
          },
          remove: function (key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function () {
            return stack.splice(stack.length - 1, 1)[0];
          },
          length: function () {
            return stack.length;
          }
        };
      }
    };
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('modalBackdrop', ['$timeout', function ($timeout) {
    return {
      restrict: 'EA',
      replace: true,
      templateUrl: 'template/modal/backdrop.html',
      link: function (scope, element, attrs) {
        scope.backdropClass = attrs.backdropClass || '';

        scope.animate = false;

        //trigger CSS transitions
        $timeout(function () {
          scope.animate = true;
        });
      }
    };
  }])

  .directive('modalWindow', ['$modalStack', '$timeout', function ($modalStack, $timeout) {
    return {
      restrict: 'EA',
      scope: {
        index: '@',
        animate: '='
      },
      replace: true,
      transclude: true,
      templateUrl: function(tElement, tAttrs) {
        return tAttrs.templateUrl || 'template/modal/window.html';
      },
      link: function (scope, element, attrs) {
        element.addClass(attrs.windowClass || '');
        scope.size = attrs.size;

        $timeout(function () {
          // trigger CSS transitions
          scope.animate = true;

          /**
           * Auto-focusing of a freshly-opened modal element causes any child elements
           * with the autofocus attribute to lose focus. This is an issue on touch
           * based devices which will show and then hide the onscreen keyboard.
           * Attempts to refocus the autofocus element via JavaScript will not reopen
           * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
           * the modal element if the modal does not contain an autofocus element.
           */
          if (!element[0].querySelectorAll('[autofocus]').length) {
            element[0].focus();
          }
        });

        scope.close = function (evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };
      }
    };
  }])

  .directive('modalTransclude', function () {
    return {
      link: function($scope, $element, $attrs, controller, $transclude) {
        $transclude($scope.$parent, function(clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    };
  })

  .factory('$modalStack', ['$transition', '$timeout', '$document', '$compile', '$rootScope', '$$stackedMap',
    function ($transition, $timeout, $document, $compile, $rootScope, $$stackedMap) {

      var OPENED_MODAL_CLASS = 'modal-open';

      var backdropDomEl, backdropScope;
      var openedWindows = $$stackedMap.createNew();
      var $modalStack = {};

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex){
        if (backdropScope) {
          backdropScope.index = newBackdropIndex;
        }
      });

      function removeModalWindow(modalInstance) {

        var body = $document.find('body').eq(0);
        var modalWindow = openedWindows.get(modalInstance).value;

        //clean up the stack
        openedWindows.remove(modalInstance);

        //remove window DOM element
        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, 300, function() {
          modalWindow.modalScope.$destroy();
          body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);
          checkRemoveBackdrop();
        });
      }

      function checkRemoveBackdrop() {
          //remove backdrop if no longer needed
          if (backdropDomEl && backdropIndex() == -1) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, 150, function () {
              backdropScopeRef.$destroy();
              backdropScopeRef = null;
            });
            backdropDomEl = undefined;
            backdropScope = undefined;
          }
      }

      function removeAfterAnimate(domEl, scope, emulateTime, done) {
        // Closing animation
        scope.animate = false;

        var transitionEndEventName = $transition.transitionEndEventName;
        if (transitionEndEventName) {
          // transition out
          var timeout = $timeout(afterAnimating, emulateTime);

          domEl.bind(transitionEndEventName, function () {
            $timeout.cancel(timeout);
            afterAnimating();
            scope.$apply();
          });
        } else {
          // Ensure this call is async
          $timeout(afterAnimating);
        }

        function afterAnimating() {
          if (afterAnimating.done) {
            return;
          }
          afterAnimating.done = true;

          domEl.remove();
          if (done) {
            done();
          }
        }
      }

      $document.bind('keydown', function (evt) {
        var modal;

        if (evt.which === 27) {
          modal = openedWindows.top();
          if (modal && modal.value.keyboard) {
            evt.preventDefault();
            $rootScope.$apply(function () {
              $modalStack.dismiss(modal.key, 'escape key press');
            });
          }
        }
      });

      $modalStack.open = function (modalInstance, modal) {

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard
        });

        var body = $document.find('body').eq(0),
            currBackdropIndex = backdropIndex();

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true);
          backdropScope.index = currBackdropIndex;
          var angularBackgroundDomEl = angular.element('<div modal-backdrop></div>');
          angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);
          backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);
          body.append(backdropDomEl);
        }

        var angularDomEl = angular.element('<div modal-window></div>');
        angularDomEl.attr({
          'template-url': modal.windowTemplateUrl,
          'window-class': modal.windowClass,
          'size': modal.size,
          'index': openedWindows.length() - 1,
          'animate': 'animate'
        }).html(modal.content);

        var modalDomEl = $compile(angularDomEl)(modal.scope);
        openedWindows.top().value.modalDomEl = modalDomEl;
        body.append(modalDomEl);
        body.addClass(OPENED_MODAL_CLASS);
      };

      $modalStack.close = function (modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.deferred.resolve(result);
          removeModalWindow(modalInstance);
        }
      };

      $modalStack.dismiss = function (modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.deferred.reject(reason);
          removeModalWindow(modalInstance);
        }
      };

      $modalStack.dismissAll = function (reason) {
        var topModal = this.getTop();
        while (topModal) {
          this.dismiss(topModal.key, reason);
          topModal = this.getTop();
        }
      };

      $modalStack.getTop = function () {
        return openedWindows.top();
      };

      return $modalStack;
    }])

  .provider('$modal', function () {

    var $modalProvider = {
      options: {
        backdrop: true, //can be also false or 'static'
        keyboard: true
      },
      $get: ['$injector', '$rootScope', '$q', '$http', '$templateCache', '$controller', '$modalStack',
        function ($injector, $rootScope, $q, $http, $templateCache, $controller, $modalStack) {

          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $http.get(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl,
                {cache: $templateCache}).then(function (result) {
                  return result.data;
              });
          }

          function getResolvePromises(resolves) {
            var promisesArr = [];
            angular.forEach(resolves, function (value) {
              if (angular.isFunction(value) || angular.isArray(value)) {
                promisesArr.push($q.when($injector.invoke(value)));
              }
            });
            return promisesArr;
          }

          $modal.open = function (modalOptions) {

            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              close: function (result) {
                $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};

            //verify options
            if (!modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of template or templateUrl options is required.');
            }

            var templateAndResolvePromise =
              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));


            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {

              var modalScope = (modalOptions.scope || $rootScope).$new();
              modalScope.$close = modalInstance.close;
              modalScope.$dismiss = modalInstance.dismiss;

              var ctrlInstance, ctrlLocals = {};
              var resolveIter = 1;

              //controllers
              if (modalOptions.controller) {
                ctrlLocals.$scope = modalScope;
                ctrlLocals.$modalInstance = modalInstance;
                angular.forEach(modalOptions.resolve, function (value, key) {
                  ctrlLocals[key] = tplAndVars[resolveIter++];
                });

                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
                if (modalOptions.controllerAs) {
                  modalScope[modalOptions.controllerAs] = ctrlInstance;
                }
              }

              $modalStack.open(modalInstance, {
                scope: modalScope,
                deferred: modalResultDeferred,
                content: tplAndVars[0],
                backdrop: modalOptions.backdrop,
                keyboard: modalOptions.keyboard,
                backdropClass: modalOptions.backdropClass,
                windowClass: modalOptions.windowClass,
                windowTemplateUrl: modalOptions.windowTemplateUrl,
                size: modalOptions.size
              });

            }, function resolveError(reason) {
              modalResultDeferred.reject(reason);
            });

            templateAndResolvePromise.then(function () {
              modalOpenedDeferred.resolve(true);
            }, function () {
              modalOpenedDeferred.reject(false);
            });

            return modalInstance;
          };

          return $modal;
        }]
    };

    return $modalProvider;
  });

angular.module('ui.bootstrap.pagination', [])

.controller('PaginationController', ['$scope', '$attrs', '$parse', function ($scope, $attrs, $parse) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
      setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;

  this.init = function(ngModelCtrl_, config) {
    ngModelCtrl = ngModelCtrl_;
    this.config = config;

    ngModelCtrl.$render = function() {
      self.render();
    };

    if ($attrs.itemsPerPage) {
      $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {
        self.itemsPerPage = parseInt(value, 10);
        $scope.totalPages = self.calculateTotalPages();
      });
    } else {
      this.itemsPerPage = config.itemsPerPage;
    }
  };

  this.calculateTotalPages = function() {
    var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);
    return Math.max(totalPages || 0, 1);
  };

  this.render = function() {
    $scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;
  };

  $scope.selectPage = function(page) {
    if ( $scope.page !== page && page > 0 && page <= $scope.totalPages) {
      ngModelCtrl.$setViewValue(page);
      ngModelCtrl.$render();
    }
  };

  $scope.getText = function( key ) {
    return $scope[key + 'Text'] || self.config[key + 'Text'];
  };
  $scope.noPrevious = function() {
    return $scope.page === 1;
  };
  $scope.noNext = function() {
    return $scope.page === $scope.totalPages;
  };

  $scope.$watch('totalItems', function() {
    $scope.totalPages = self.calculateTotalPages();
  });

  $scope.$watch('totalPages', function(value) {
    setNumPages($scope.$parent, value); // Readonly variable

    if ( $scope.page > value ) {
      $scope.selectPage(value);
    } else {
      ngModelCtrl.$render();
    }
  });
}])

.constant('paginationConfig', {
  itemsPerPage: 10,
  boundaryLinks: false,
  directionLinks: true,
  firstText: 'First',
  previousText: 'Previous',
  nextText: 'Next',
  lastText: 'Last',
  rotate: true
})

.directive('pagination', ['$parse', 'paginationConfig', function($parse, paginationConfig) {
  return {
    restrict: 'EA',
    scope: {
      totalItems: '=',
      firstText: '@',
      previousText: '@',
      nextText: '@',
      lastText: '@'
    },
    require: ['pagination', '?ngModel'],
    controller: 'PaginationController',
    templateUrl: 'template/pagination/pagination.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      // Setup configuration parameters
      var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize,
          rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;
      scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks;
      scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks;

      paginationCtrl.init(ngModelCtrl, paginationConfig);

      if (attrs.maxSize) {
        scope.$parent.$watch($parse(attrs.maxSize), function(value) {
          maxSize = parseInt(value, 10);
          paginationCtrl.render();
        });
      }

      // Create page object used in template
      function makePage(number, text, isActive) {
        return {
          number: number,
          text: text,
          active: isActive
        };
      }

      function getPages(currentPage, totalPages) {
        var pages = [];

        // Default page limits
        var startPage = 1, endPage = totalPages;
        var isMaxSized = ( angular.isDefined(maxSize) && maxSize < totalPages );

        // recompute if maxSize
        if ( isMaxSized ) {
          if ( rotate ) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(maxSize/2), 1);
            endPage   = startPage + maxSize - 1;

            // Adjust if limit is exceeded
            if (endPage > totalPages) {
              endPage   = totalPages;
              startPage = endPage - maxSize + 1;
            }
          } else {
            // Visible pages are paginated with maxSize
            startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;

            // Adjust last page if limit is exceeded
            endPage = Math.min(startPage + maxSize - 1, totalPages);
          }
        }

        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
          var page = makePage(number, number, number === currentPage);
          pages.push(page);
        }

        // Add links to move between page sets
        if ( isMaxSized && ! rotate ) {
          if ( startPage > 1 ) {
            var previousPageSet = makePage(startPage - 1, '...', false);
            pages.unshift(previousPageSet);
          }

          if ( endPage < totalPages ) {
            var nextPageSet = makePage(endPage + 1, '...', false);
            pages.push(nextPageSet);
          }
        }

        return pages;
      }

      var originalRender = paginationCtrl.render;
      paginationCtrl.render = function() {
        originalRender();
        if (scope.page > 0 && scope.page <= scope.totalPages) {
          scope.pages = getPages(scope.page, scope.totalPages);
        }
      };
    }
  };
}])

.constant('pagerConfig', {
  itemsPerPage: 10,
  previousText: '« Previous',
  nextText: 'Next »',
  align: true
})

.directive('pager', ['pagerConfig', function(pagerConfig) {
  return {
    restrict: 'EA',
    scope: {
      totalItems: '=',
      previousText: '@',
      nextText: '@'
    },
    require: ['pager', '?ngModel'],
    controller: 'PaginationController',
    templateUrl: 'template/pagination/pager.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align;
      paginationCtrl.init(ngModelCtrl, pagerConfig);
    }
  };
}]);

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular.module( 'ui.bootstrap.tooltip', [ 'ui.bootstrap.position', 'ui.bootstrap.bindHtml' ] )

/**
 * The $tooltip service creates tooltip- and popover-like directives as well as
 * houses global options for them.
 */
.provider( '$tooltip', function () {
  // The default options tooltip and popover.
  var defaultOptions = {
    placement: 'top',
    animation: true,
    popupDelay: 0
  };

  // Default hide triggers for each show trigger
  var triggerMap = {
    'mouseenter': 'mouseleave',
    'click': 'click',
    'focus': 'blur'
  };

  // The options specified to the provider globally.
  var globalOptions = {};

  /**
   * `options({})` allows global configuration of all tooltips in the
   * application.
   *
   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
   *     // place tooltips left instead of top by default
   *     $tooltipProvider.options( { placement: 'left' } );
   *   });
   */
	this.options = function( value ) {
		angular.extend( globalOptions, value );
	};

  /**
   * This allows you to extend the set of trigger mappings available. E.g.:
   *
   *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );
   */
  this.setTriggers = function setTriggers ( triggers ) {
    angular.extend( triggerMap, triggers );
  };

  /**
   * This is a helper function for translating camel-case to snake-case.
   */
  function snake_case(name){
    var regexp = /[A-Z]/g;
    var separator = '-';
    return name.replace(regexp, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  /**
   * Returns the actual instance of the $tooltip service.
   * TODO support multiple triggers
   */
  this.$get = [ '$window', '$compile', '$timeout', '$document', '$position', '$interpolate', function ( $window, $compile, $timeout, $document, $position, $interpolate ) {
    return function $tooltip ( type, prefix, defaultTriggerShow ) {
      var options = angular.extend( {}, defaultOptions, globalOptions );

      /**
       * Returns an object of show and hide triggers.
       *
       * If a trigger is supplied,
       * it is used to show the tooltip; otherwise, it will use the `trigger`
       * option passed to the `$tooltipProvider.options` method; else it will
       * default to the trigger supplied to this directive factory.
       *
       * The hide trigger is based on the show trigger. If the `trigger` option
       * was passed to the `$tooltipProvider.options` method, it will use the
       * mapped trigger from `triggerMap` or the passed trigger if the map is
       * undefined; otherwise, it uses the `triggerMap` value of the show
       * trigger; else it will just use the show trigger.
       */
      function getTriggers ( trigger ) {
        var show = trigger || options.trigger || defaultTriggerShow;
        var hide = triggerMap[show] || show;
        return {
          show: show,
          hide: hide
        };
      }

      var directiveName = snake_case( type );

      var startSym = $interpolate.startSymbol();
      var endSym = $interpolate.endSymbol();
      var template =
        '<div '+ directiveName +'-popup '+
          'title="'+startSym+'title'+endSym+'" '+
          'content="'+startSym+'content'+endSym+'" '+
          'placement="'+startSym+'placement'+endSym+'" '+
          'animation="animation" '+
          'is-open="isOpen"'+
          '>'+
        '</div>';

      return {
        restrict: 'EA',
        compile: function (tElem, tAttrs) {
          var tooltipLinker = $compile( template );

          return function link ( scope, element, attrs ) {
            var tooltip;
            var tooltipLinkedScope;
            var transitionTimeout;
            var popupTimeout;
            var appendToBody = angular.isDefined( options.appendToBody ) ? options.appendToBody : false;
            var triggers = getTriggers( undefined );
            var hasEnableExp = angular.isDefined(attrs[prefix+'Enable']);
            var ttScope = scope.$new(true);

            var positionTooltip = function () {

              var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
              ttPosition.top += 'px';
              ttPosition.left += 'px';

              // Now set the calculated positioning.
              tooltip.css( ttPosition );
            };

            // By default, the tooltip is not open.
            // TODO add ability to start tooltip opened
            ttScope.isOpen = false;

            function toggleTooltipBind () {
              if ( ! ttScope.isOpen ) {
                showTooltipBind();
              } else {
                hideTooltipBind();
              }
            }

            // Show the tooltip with delay if specified, otherwise show it immediately
            function showTooltipBind() {
              if(hasEnableExp && !scope.$eval(attrs[prefix+'Enable'])) {
                return;
              }

              prepareTooltip();

              if ( ttScope.popupDelay ) {
                // Do nothing if the tooltip was already scheduled to pop-up.
                // This happens if show is triggered multiple times before any hide is triggered.
                if (!popupTimeout) {
                  popupTimeout = $timeout( show, ttScope.popupDelay, false );
                  popupTimeout.then(function(reposition){reposition();});
                }
              } else {
                show()();
              }
            }

            function hideTooltipBind () {
              scope.$apply(function () {
                hide();
              });
            }

            // Show the tooltip popup element.
            function show() {

              popupTimeout = null;

              // If there is a pending remove transition, we must cancel it, lest the
              // tooltip be mysteriously removed.
              if ( transitionTimeout ) {
                $timeout.cancel( transitionTimeout );
                transitionTimeout = null;
              }

              // Don't show empty tooltips.
              if ( ! ttScope.content ) {
                return angular.noop;
              }

              createTooltip();

              // Set the initial positioning.
              tooltip.css({ top: 0, left: 0, display: 'block' });

              // Now we add it to the DOM because need some info about it. But it's not
              // visible yet anyway.
              if ( appendToBody ) {
                  $document.find( 'body' ).append( tooltip );
              } else {
                element.after( tooltip );
              }

              positionTooltip();

              // And show the tooltip.
              ttScope.isOpen = true;
              ttScope.$digest(); // digest required as $apply is not called

              // Return positioning function as promise callback for correct
              // positioning after draw.
              return positionTooltip;
            }

            // Hide the tooltip popup element.
            function hide() {
              // First things first: we don't show it anymore.
              ttScope.isOpen = false;

              //if tooltip is going to be shown after delay, we must cancel this
              $timeout.cancel( popupTimeout );
              popupTimeout = null;

              // And now we remove it from the DOM. However, if we have animation, we
              // need to wait for it to expire beforehand.
              // FIXME: this is a placeholder for a port of the transitions library.
              if ( ttScope.animation ) {
                if (!transitionTimeout) {
                  transitionTimeout = $timeout(removeTooltip, 500);
                }
              } else {
                removeTooltip();
              }
            }

            function createTooltip() {
              // There can only be one tooltip element per directive shown at once.
              if (tooltip) {
                removeTooltip();
              }
              tooltipLinkedScope = ttScope.$new();
              tooltip = tooltipLinker(tooltipLinkedScope, angular.noop);
            }

            function removeTooltip() {
              transitionTimeout = null;
              if (tooltip) {
                tooltip.remove();
                tooltip = null;
              }
              if (tooltipLinkedScope) {
                tooltipLinkedScope.$destroy();
                tooltipLinkedScope = null;
              }
            }

            function prepareTooltip() {
              prepPlacement();
              prepPopupDelay();
            }

            /**
             * Observe the relevant attributes.
             */
            attrs.$observe( type, function ( val ) {
              ttScope.content = val;

              if (!val && ttScope.isOpen ) {
                hide();
              }
            });

            attrs.$observe( prefix+'Title', function ( val ) {
              ttScope.title = val;
            });

            function prepPlacement() {
              var val = attrs[ prefix + 'Placement' ];
              ttScope.placement = angular.isDefined( val ) ? val : options.placement;
            }

            function prepPopupDelay() {
              var val = attrs[ prefix + 'PopupDelay' ];
              var delay = parseInt( val, 10 );
              ttScope.popupDelay = ! isNaN(delay) ? delay : options.popupDelay;
            }

            var unregisterTriggers = function () {
              element.unbind(triggers.show, showTooltipBind);
              element.unbind(triggers.hide, hideTooltipBind);
            };

            function prepTriggers() {
              var val = attrs[ prefix + 'Trigger' ];
              unregisterTriggers();

              triggers = getTriggers( val );

              if ( triggers.show === triggers.hide ) {
                element.bind( triggers.show, toggleTooltipBind );
              } else {
                element.bind( triggers.show, showTooltipBind );
                element.bind( triggers.hide, hideTooltipBind );

              }
            }
            prepTriggers();

            var animation = scope.$eval(attrs[prefix + 'Animation']);
            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

            var appendToBodyVal = scope.$eval(attrs[prefix + 'AppendToBody']);
            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

            // if a tooltip is attached to <body> we need to remove it on
            // location change as its parent scope will probably not be destroyed
            // by the change.
            if ( appendToBody ) {
              scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess () {
              if ( ttScope.isOpen ) {
                hide();
              }
            });
            }

            // Make sure tooltip is destroyed and removed.
            scope.$on('$destroy', function onDestroyTooltip() {
              $timeout.cancel( transitionTimeout );
              $timeout.cancel( popupTimeout );
              unregisterTriggers();
              removeTooltip();
              ttScope = null;
            });
          };
        }
      };
    };
  }];
})

.directive( 'tooltipPopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-popup.html'
  };
})

.directive( 'tooltip', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'tooltip', 'tooltip', 'mouseenter' );
}])

.directive( 'tooltipHtmlUnsafePopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'
  };
})

.directive( 'tooltipHtmlUnsafe', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'tooltipHtmlUnsafe', 'tooltip', 'mouseenter' );
}]);

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html popovers, and selector delegatation.
 */
angular.module( 'ui.bootstrap.popover', [ 'ui.bootstrap.tooltip' ] )

.directive( 'popoverPopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { title: '@', content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/popover/popover.html'
  };
})

.directive( 'popover', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'popover', 'popover', 'click' );
}]);

angular.module('ui.bootstrap.progressbar', [])

.constant('progressConfig', {
  animate: true,
  max: 100
})

.controller('ProgressController', ['$scope', '$attrs', 'progressConfig', function($scope, $attrs, progressConfig) {
    var self = this,
        animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

    this.bars = [];
    $scope.max = angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : progressConfig.max;

    this.addBar = function(bar, element) {
        if ( !animate ) {
            element.css({'transition': 'none'});
        }

        this.bars.push(bar);

        bar.$watch('value', function( value ) {
            bar.percent = +(100 * value / $scope.max).toFixed(2);
        });

        bar.$on('$destroy', function() {
            element = null;
            self.removeBar(bar);
        });
    };

    this.removeBar = function(bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
    };
}])

.directive('progress', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        controller: 'ProgressController',
        require: 'progress',
        scope: {},
        templateUrl: 'template/progressbar/progress.html'
    };
})

.directive('bar', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        require: '^progress',
        scope: {
            value: '=',
            type: '@'
        },
        templateUrl: 'template/progressbar/bar.html',
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, element);
        }
    };
})

.directive('progressbar', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        controller: 'ProgressController',
        scope: {
            value: '=',
            type: '@'
        },
        templateUrl: 'template/progressbar/progressbar.html',
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, angular.element(element.children()[0]));
        }
    };
});
angular.module('ui.bootstrap.rating', [])

.constant('ratingConfig', {
  max: 5,
  stateOn: null,
  stateOff: null
})

.controller('RatingController', ['$scope', '$attrs', 'ratingConfig', function($scope, $attrs, ratingConfig) {
  var ngModelCtrl  = { $setViewValue: angular.noop };

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;

    var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) :
                        new Array( angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max );
    $scope.range = this.buildTemplateObjects(ratingStates);
  };

  this.buildTemplateObjects = function(states) {
    for (var i = 0, n = states.length; i < n; i++) {
      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff }, states[i]);
    }
    return states;
  };

  $scope.rate = function(value) {
    if ( !$scope.readonly && value >= 0 && value <= $scope.range.length ) {
      ngModelCtrl.$setViewValue(value);
      ngModelCtrl.$render();
    }
  };

  $scope.enter = function(value) {
    if ( !$scope.readonly ) {
      $scope.value = value;
    }
    $scope.onHover({value: value});
  };

  $scope.reset = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.onLeave();
  };

  $scope.onKeydown = function(evt) {
    if (/(37|38|39|40)/.test(evt.which)) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.rate( $scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1) );
    }
  };

  this.render = function() {
    $scope.value = ngModelCtrl.$viewValue;
  };
}])

.directive('rating', function() {
  return {
    restrict: 'EA',
    require: ['rating', 'ngModel'],
    scope: {
      readonly: '=?',
      onHover: '&',
      onLeave: '&'
    },
    controller: 'RatingController',
    templateUrl: 'template/rating/rating.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if ( ngModelCtrl ) {
        ratingCtrl.init( ngModelCtrl );
      }
    }
  };
});

/**
 * @ngdoc overview
 * @name ui.bootstrap.tabs
 *
 * @description
 * AngularJS version of the tabs directive.
 */

angular.module('ui.bootstrap.tabs', [])

.controller('TabsetController', ['$scope', function TabsetCtrl($scope) {
  var ctrl = this,
      tabs = ctrl.tabs = $scope.tabs = [];

  ctrl.select = function(selectedTab) {
    angular.forEach(tabs, function(tab) {
      if (tab.active && tab !== selectedTab) {
        tab.active = false;
        tab.onDeselect();
      }
    });
    selectedTab.active = true;
    selectedTab.onSelect();
  };

  ctrl.addTab = function addTab(tab) {
    tabs.push(tab);
    // we can't run the select function on the first tab
    // since that would select it twice
    if (tabs.length === 1) {
      tab.active = true;
    } else if (tab.active) {
      ctrl.select(tab);
    }
  };

  ctrl.removeTab = function removeTab(tab) {
    var index = tabs.indexOf(tab);
    //Select a new tab if the tab to be removed is selected and not destroyed
    if (tab.active && tabs.length > 1 && !destroyed) {
      //If this is the last tab, select the previous tab. else, the next tab.
      var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
      ctrl.select(tabs[newActiveIndex]);
    }
    tabs.splice(index, 1);
  };

  var destroyed;
  $scope.$on('$destroy', function() {
    destroyed = true;
  });
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tabset
 * @restrict EA
 *
 * @description
 * Tabset is the outer container for the tabs directive
 *
 * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.
 * @param {boolean=} justified Whether or not to use justified styling for the tabs.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab heading="Tab 1"><b>First</b> Content!</tab>
      <tab heading="Tab 2"><i>Second</i> Content!</tab>
    </tabset>
    <hr />
    <tabset vertical="true">
      <tab heading="Vertical Tab 1"><b>First</b> Vertical Content!</tab>
      <tab heading="Vertical Tab 2"><i>Second</i> Vertical Content!</tab>
    </tabset>
    <tabset justified="true">
      <tab heading="Justified Tab 1"><b>First</b> Justified Content!</tab>
      <tab heading="Justified Tab 2"><i>Second</i> Justified Content!</tab>
    </tabset>
  </file>
</example>
 */
.directive('tabset', function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    scope: {
      type: '@'
    },
    controller: 'TabsetController',
    templateUrl: 'template/tabs/tabset.html',
    link: function(scope, element, attrs) {
      scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
      scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
    }
  };
})

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tab
 * @restrict EA
 *
 * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ui.bootstrap.tabs.directive:tabHeading tabHeading}.
 * @param {string=} select An expression to evaluate when the tab is selected.
 * @param {boolean=} active A binding, telling whether or not this tab is selected.
 * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.
 *
 * @description
 * Creates a tab with a heading and content. Must be placed within a {@link ui.bootstrap.tabs.directive:tabset tabset}.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <div ng-controller="TabsDemoCtrl">
      <button class="btn btn-small" ng-click="items[0].active = true">
        Select item 1, using active binding
      </button>
      <button class="btn btn-small" ng-click="items[1].disabled = !items[1].disabled">
        Enable/disable item 2, using disabled binding
      </button>
      <br />
      <tabset>
        <tab heading="Tab 1">First Tab</tab>
        <tab select="alertMe()">
          <tab-heading><i class="icon-bell"></i> Alert me!</tab-heading>
          Second Tab, with alert callback and html heading!
        </tab>
        <tab ng-repeat="item in items"
          heading="{{item.title}}"
          disabled="item.disabled"
          active="item.active">
          {{item.content}}
        </tab>
      </tabset>
    </div>
  </file>
  <file name="script.js">
    function TabsDemoCtrl($scope) {
      $scope.items = [
        { title:"Dynamic Title 1", content:"Dynamic Item 0" },
        { title:"Dynamic Title 2", content:"Dynamic Item 1", disabled: true }
      ];

      $scope.alertMe = function() {
        setTimeout(function() {
          alert("You've selected the alert tab!");
        });
      };
    };
  </file>
</example>
 */

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tabHeading
 * @restrict EA
 *
 * @description
 * Creates an HTML heading for a {@link ui.bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab>
        <tab-heading><b>HTML</b> in my titles?!</tab-heading>
        And some content, too!
      </tab>
      <tab>
        <tab-heading><i class="icon-heart"></i> Icon heading?!?</tab-heading>
        That's right.
      </tab>
    </tabset>
  </file>
</example>
 */
.directive('tab', ['$parse', function($parse) {
  return {
    require: '^tabset',
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/tabs/tab.html',
    transclude: true,
    scope: {
      active: '=?',
      heading: '@',
      onSelect: '&select', //This callback is called in contentHeadingTransclude
                          //once it inserts the tab's content into the dom
      onDeselect: '&deselect'
    },
    controller: function() {
      //Empty controller so other directives can require being 'under' a tab
    },
    compile: function(elm, attrs, transclude) {
      return function postLink(scope, elm, attrs, tabsetCtrl) {
        scope.$watch('active', function(active) {
          if (active) {
            tabsetCtrl.select(scope);
          }
        });

        scope.disabled = false;
        if ( attrs.disabled ) {
          scope.$parent.$watch($parse(attrs.disabled), function(value) {
            scope.disabled = !! value;
          });
        }

        scope.select = function() {
          if ( !scope.disabled ) {
            scope.active = true;
          }
        };

        tabsetCtrl.addTab(scope);
        scope.$on('$destroy', function() {
          tabsetCtrl.removeTab(scope);
        });

        //We need to transclude later, once the content container is ready.
        //when this link happens, we're inside a tab heading.
        scope.$transcludeFn = transclude;
      };
    }
  };
}])

.directive('tabHeadingTransclude', [function() {
  return {
    restrict: 'A',
    require: '^tab',
    link: function(scope, elm, attrs, tabCtrl) {
      scope.$watch('headingElement', function updateHeadingElement(heading) {
        if (heading) {
          elm.html('');
          elm.append(heading);
        }
      });
    }
  };
}])

.directive('tabContentTransclude', function() {
  return {
    restrict: 'A',
    require: '^tabset',
    link: function(scope, elm, attrs) {
      var tab = scope.$eval(attrs.tabContentTransclude);

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      tab.$transcludeFn(tab.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isTabHeading(node)) {
            //Let tabHeadingTransclude know.
            tab.headingElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };
  function isTabHeading(node) {
    return node.tagName &&  (
      node.hasAttribute('tab-heading') ||
      node.hasAttribute('data-tab-heading') ||
      node.tagName.toLowerCase() === 'tab-heading' ||
      node.tagName.toLowerCase() === 'data-tab-heading'
    );
  }
})

;

angular.module('ui.bootstrap.timepicker', [])

.constant('timepickerConfig', {
  hourStep: 1,
  minuteStep: 1,
  showMeridian: true,
  meridians: null,
  readonlyInput: false,
  mousewheel: true
})

.controller('TimepickerController', ['$scope', '$attrs', '$parse', '$log', '$locale', 'timepickerConfig', function($scope, $attrs, $parse, $log, $locale, timepickerConfig) {
  var selected = new Date(),
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
      meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;

  this.init = function( ngModelCtrl_, inputs ) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    var hoursInputEl = inputs.eq(0),
        minutesInputEl = inputs.eq(1);

    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
    if ( mousewheel ) {
      this.setupMousewheelEvents( hoursInputEl, minutesInputEl );
    }

    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
    this.setupInputEvents( hoursInputEl, minutesInputEl );
  };

  var hourStep = timepickerConfig.hourStep;
  if ($attrs.hourStep) {
    $scope.$parent.$watch($parse($attrs.hourStep), function(value) {
      hourStep = parseInt(value, 10);
    });
  }

  var minuteStep = timepickerConfig.minuteStep;
  if ($attrs.minuteStep) {
    $scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
      minuteStep = parseInt(value, 10);
    });
  }

  // 12H / 24H mode
  $scope.showMeridian = timepickerConfig.showMeridian;
  if ($attrs.showMeridian) {
    $scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
      $scope.showMeridian = !!value;

      if ( ngModelCtrl.$error.time ) {
        // Evaluate from template
        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
        if (angular.isDefined( hours ) && angular.isDefined( minutes )) {
          selected.setHours( hours );
          refresh();
        }
      } else {
        updateTemplate();
      }
    });
  }

  // Get $scope.hours in 24H mode if valid
  function getHoursFromTemplate ( ) {
    var hours = parseInt( $scope.hours, 10 );
    var valid = ( $scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);
    if ( !valid ) {
      return undefined;
    }

    if ( $scope.showMeridian ) {
      if ( hours === 12 ) {
        hours = 0;
      }
      if ( $scope.meridian === meridians[1] ) {
        hours = hours + 12;
      }
    }
    return hours;
  }

  function getMinutesFromTemplate() {
    var minutes = parseInt($scope.minutes, 10);
    return ( minutes >= 0 && minutes < 60 ) ? minutes : undefined;
  }

  function pad( value ) {
    return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value;
  }

  // Respond on mousewheel spin
  this.setupMousewheelEvents = function( hoursInputEl, minutesInputEl ) {
    var isScrollingUp = function(e) {
      if (e.originalEvent) {
        e = e.originalEvent;
      }
      //pick correct delta variable depending on event
      var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;
      return (e.detail || delta > 0);
    };

    hoursInputEl.bind('mousewheel wheel', function(e) {
      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementHours() : $scope.decrementHours() );
      e.preventDefault();
    });

    minutesInputEl.bind('mousewheel wheel', function(e) {
      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementMinutes() : $scope.decrementMinutes() );
      e.preventDefault();
    });

  };

  this.setupInputEvents = function( hoursInputEl, minutesInputEl ) {
    if ( $scope.readonlyInput ) {
      $scope.updateHours = angular.noop;
      $scope.updateMinutes = angular.noop;
      return;
    }

    var invalidate = function(invalidHours, invalidMinutes) {
      ngModelCtrl.$setViewValue( null );
      ngModelCtrl.$setValidity('time', false);
      if (angular.isDefined(invalidHours)) {
        $scope.invalidHours = invalidHours;
      }
      if (angular.isDefined(invalidMinutes)) {
        $scope.invalidMinutes = invalidMinutes;
      }
    };

    $scope.updateHours = function() {
      var hours = getHoursFromTemplate();

      if ( angular.isDefined(hours) ) {
        selected.setHours( hours );
        refresh( 'h' );
      } else {
        invalidate(true);
      }
    };

    hoursInputEl.bind('blur', function(e) {
      if ( !$scope.invalidHours && $scope.hours < 10) {
        $scope.$apply( function() {
          $scope.hours = pad( $scope.hours );
        });
      }
    });

    $scope.updateMinutes = function() {
      var minutes = getMinutesFromTemplate();

      if ( angular.isDefined(minutes) ) {
        selected.setMinutes( minutes );
        refresh( 'm' );
      } else {
        invalidate(undefined, true);
      }
    };

    minutesInputEl.bind('blur', function(e) {
      if ( !$scope.invalidMinutes && $scope.minutes < 10 ) {
        $scope.$apply( function() {
          $scope.minutes = pad( $scope.minutes );
        });
      }
    });

  };

  this.render = function() {
    var date = ngModelCtrl.$modelValue ? new Date( ngModelCtrl.$modelValue ) : null;

    if ( isNaN(date) ) {
      ngModelCtrl.$setValidity('time', false);
      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
    } else {
      if ( date ) {
        selected = date;
      }
      makeValid();
      updateTemplate();
    }
  };

  // Call internally when we know that model is valid.
  function refresh( keyboardChange ) {
    makeValid();
    ngModelCtrl.$setViewValue( new Date(selected) );
    updateTemplate( keyboardChange );
  }

  function makeValid() {
    ngModelCtrl.$setValidity('time', true);
    $scope.invalidHours = false;
    $scope.invalidMinutes = false;
  }

  function updateTemplate( keyboardChange ) {
    var hours = selected.getHours(), minutes = selected.getMinutes();

    if ( $scope.showMeridian ) {
      hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system
    }

    $scope.hours = keyboardChange === 'h' ? hours : pad(hours);
    $scope.minutes = keyboardChange === 'm' ? minutes : pad(minutes);
    $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
  }

  function addMinutes( minutes ) {
    var dt = new Date( selected.getTime() + minutes * 60000 );
    selected.setHours( dt.getHours(), dt.getMinutes() );
    refresh();
  }

  $scope.incrementHours = function() {
    addMinutes( hourStep * 60 );
  };
  $scope.decrementHours = function() {
    addMinutes( - hourStep * 60 );
  };
  $scope.incrementMinutes = function() {
    addMinutes( minuteStep );
  };
  $scope.decrementMinutes = function() {
    addMinutes( - minuteStep );
  };
  $scope.toggleMeridian = function() {
    addMinutes( 12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1) );
  };
}])

.directive('timepicker', function () {
  return {
    restrict: 'EA',
    require: ['timepicker', '?^ngModel'],
    controller:'TimepickerController',
    replace: true,
    scope: {},
    templateUrl: 'template/timepicker/timepicker.html',
    link: function(scope, element, attrs, ctrls) {
      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if ( ngModelCtrl ) {
        timepickerCtrl.init( ngModelCtrl, element.find('input') );
      }
    }
  };
});

angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])

/**
 * A helper service that can parse typeahead's syntax (string provided by users)
 * Extracted to a separate service for ease of unit testing
 */
  .factory('typeaheadParser', ['$parse', function ($parse) {

  //                      00000111000000000000022200000000000000003333333333333330000000000044000
  var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;

  return {
    parse:function (input) {

      var match = input.match(TYPEAHEAD_REGEXP);
      if (!match) {
        throw new Error(
          'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
            ' but got "' + input + '".');
      }

      return {
        itemName:match[3],
        source:$parse(match[4]),
        viewMapper:$parse(match[2] || match[1]),
        modelMapper:$parse(match[1])
      };
    }
  };
}])

  .directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$position', 'typeaheadParser',
    function ($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {

  var HOT_KEYS = [9, 13, 27, 38, 40];

  return {
    require:'ngModel',
    link:function (originalScope, element, attrs, modelCtrl) {

      //SUPPORTED ATTRIBUTES (OPTIONS)

      //minimal no of characters that needs to be entered before typeahead kicks-in
      var minSearch = originalScope.$eval(attrs.typeaheadMinLength) || 1;

      //minimal wait time after last character typed before typehead kicks-in
      var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

      //should it restrict model values to the ones selected from the popup only?
      var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;

      //binding to a variable that indicates if matches are being retrieved asynchronously
      var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

      //a callback executed when a match is selected
      var onSelectCallback = $parse(attrs.typeaheadOnSelect);

      var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

      var appendToBody =  attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

      var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

      //INTERNAL VARIABLES

      //model setter executed upon match selection
      var $setModelValue = $parse(attrs.ngModel).assign;

      //expressions used by typeahead
      var parserResult = typeaheadParser.parse(attrs.typeahead);

      var hasFocus;

      //create a child scope for the typeahead directive so we are not polluting original scope
      //with typeahead-specific data (matches, query etc.)
      var scope = originalScope.$new();
      originalScope.$on('$destroy', function(){
        scope.$destroy();
      });

      // WAI-ARIA
      var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
      element.attr({
        'aria-autocomplete': 'list',
        'aria-expanded': false,
        'aria-owns': popupId
      });

      //pop-up element used to display matches
      var popUpEl = angular.element('<div typeahead-popup></div>');
	  //console.log(popUpEl);
      popUpEl.attr({
        id: popupId,
        matches: 'matches',
        active: 'activeIdx',
        select: 'select(activeIdx)',
        query: 'query',
        position: 'position'
      });
      //custom item template
      if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
        popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
      }

      var resetMatches = function() {
        scope.matches = [];
        scope.activeIdx = -1;
        element.attr('aria-expanded', false);
      };

      var getMatchId = function(index) {
        return popupId + '-option-' + index;
      };

      // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
      // This attribute is added or removed automatically when the `activeIdx` changes.
      scope.$watch('activeIdx', function(index) {
        if (index < 0) {
          element.removeAttr('aria-activedescendant');
        } else {
          element.attr('aria-activedescendant', getMatchId(index));
        }
      });

      var getMatchesAsync = function(inputValue) {

        var locals = {$viewValue: inputValue};
        isLoadingSetter(originalScope, true);
        $q.when(parserResult.source(originalScope, locals)).then(function(matches) {

          //it might happen that several async queries were in progress if a user were typing fast
          //but we are interested only in responses that correspond to the current view value
          var onCurrentRequest = (inputValue === modelCtrl.$viewValue);
          if (onCurrentRequest && hasFocus) {
            if (matches.length > 0) {

              scope.activeIdx = focusFirst ? 0 : -1;
              scope.matches.length = 0;

              //transform labels
              for(var i=0; i<matches.length; i++) {
                locals[parserResult.itemName] = matches[i];
                scope.matches.push({
                  id: getMatchId(i),
                  label: parserResult.viewMapper(scope, locals),
                  model: matches[i]
                });
              }

              scope.query = inputValue;
              //position pop-up with matches - we need to re-calculate its position each time we are opening a window
              //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
              //due to other elements being rendered
              scope.position = appendToBody ? $position.offset(element) : $position.position(element);
              scope.position.top = scope.position.top + element.prop('offsetHeight');

              element.attr('aria-expanded', true);
            } else {
              resetMatches();
            }
          }
          if (onCurrentRequest) {
            isLoadingSetter(originalScope, false);
          }
        }, function(){
          resetMatches();
          isLoadingSetter(originalScope, false);
        });
      };

      resetMatches();

      //we need to propagate user's query so we can higlight matches
      scope.query = undefined;

      //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later 
      var timeoutPromise;

      var scheduleSearchWithTimeout = function(inputValue) {
        timeoutPromise = $timeout(function () {
          getMatchesAsync(inputValue);
        }, waitTime);
      };

      var cancelPreviousTimeout = function() {
        if (timeoutPromise) {
          $timeout.cancel(timeoutPromise);
        }
      };

      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
      modelCtrl.$parsers.unshift(function (inputValue) {

        hasFocus = true;

        if (inputValue && inputValue.length >= minSearch) {
          if (waitTime > 0) {
            cancelPreviousTimeout();
            scheduleSearchWithTimeout(inputValue);
          } else {
            getMatchesAsync(inputValue);
          }
        } else {
          isLoadingSetter(originalScope, false);
          cancelPreviousTimeout();
          resetMatches();
        }

        if (isEditable) {
          return inputValue;
        } else {
          if (!inputValue) {
            // Reset in case user had typed something previously.
            modelCtrl.$setValidity('editable', true);
            return inputValue;
          } else {
            modelCtrl.$setValidity('editable', false);
            return undefined;
          }
        }
      });

      modelCtrl.$formatters.push(function (modelValue) {

        var candidateViewValue, emptyViewValue;
        var locals = {};

        if (inputFormatter) {

          locals.$model = modelValue;
          return inputFormatter(originalScope, locals);

        } else {

          //it might happen that we don't have enough info to properly render input value
          //we need to check for this situation and simply return model value if we can't apply custom formatting
          locals[parserResult.itemName] = modelValue;
          candidateViewValue = parserResult.viewMapper(originalScope, locals);
          locals[parserResult.itemName] = undefined;
          emptyViewValue = parserResult.viewMapper(originalScope, locals);

          return candidateViewValue!== emptyViewValue ? candidateViewValue : modelValue;
        }
      });

      scope.select = function (activeIdx) {
        //called from within the $digest() cycle
        var locals = {};
        var model, item;

        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
        model = parserResult.modelMapper(originalScope, locals);
        $setModelValue(originalScope, model);
        modelCtrl.$setValidity('editable', true);

        onSelectCallback(originalScope, {
          $item: item,
          $model: model,
          $label: parserResult.viewMapper(originalScope, locals)
        });

        resetMatches();

        //return focus to the input element if a match was selected via a mouse click event
        // use timeout to avoid $rootScope:inprog error
        $timeout(function() { element[0].focus(); }, 0, false);
      };

      //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
      element.bind('keydown', function (evt) {

        //typeahead is open and an "interesting" key was pressed
        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
          return;
        }

        // if there's nothing selected (i.e. focusFirst) and enter is hit, don't do anything
        if (scope.activeIdx == -1 && (evt.which === 13 || evt.which === 9)) {
          return;
        }

        evt.preventDefault();

        if (evt.which === 40) {
          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
          scope.$digest();

        } else if (evt.which === 38) {
          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
          scope.$digest();

        } else if (evt.which === 13 || evt.which === 9) {
          scope.$apply(function () {
            scope.select(scope.activeIdx);
          });

        } else if (evt.which === 27) {
          evt.stopPropagation();

          resetMatches();
          scope.$digest();
        }
      });

      element.bind('blur', function (evt) {
        hasFocus = false;
      });

      // Keep reference to click handler to unbind it.
      var dismissClickHandler = function (evt) {
        if (element[0] !== evt.target) {
          resetMatches();
          scope.$digest();
        }
      };

      $document.bind('click', dismissClickHandler);

      originalScope.$on('$destroy', function(){
        $document.unbind('click', dismissClickHandler);
        if (appendToBody) {
          $popup.remove();
        }
      });

      var $popup = $compile(popUpEl)(scope);
      if (appendToBody) {
        $document.find('body').append($popup);
      } else {
        element.after($popup);
      }
    }
  };

}])

  .directive('typeaheadPopup', function () {
    return {
      restrict:'EA',
      scope:{
        matches:'=',
        query:'=',
        active:'=',
        position:'=',
        select:'&'
      },
      replace:true,
      templateUrl:'template/typeahead/typeahead-popup.html',
      link:function (scope, element, attrs) {

        scope.templateUrl = attrs.templateUrl;

        scope.isOpen = function () {
          return scope.matches.length > 0;
        };

        scope.isActive = function (matchIdx) {
          return scope.active == matchIdx;
        };

        scope.selectActive = function (matchIdx) {
          scope.active = matchIdx;
        };

        scope.selectMatch = function (activeIdx) {
          scope.select({activeIdx:activeIdx});
        };
      }
    };
  })

  .directive('typeaheadMatch', ['$http', '$templateCache', '$compile', '$parse', function ($http, $templateCache, $compile, $parse) {
    return {
      restrict:'EA',
      scope:{
        index:'=',
        match:'=',
        query:'='
      },
      link:function (scope, element, attrs) {
        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';
        $http.get(tplUrl, {cache: $templateCache}).success(function(tplContent){
           element.replaceWith($compile(tplContent.trim())(scope));
        });
      }
    };
  }])

  .filter('typeaheadHighlight', function() {

    function escapeRegexp(queryToEscape) {
      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }

    return function(matchItem, query) {
      return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;
    };
  });

angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion-group.html",
    "<div class=\"panel panel-default\">\n" +
    "  <div class=\"panel-heading\">\n" +
    "    <h4 class=\"panel-title\">\n" +
    "      <a href class=\"accordion-toggle\" ng-click=\"toggleOpen()\" accordion-transclude=\"heading\"><span ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
    "    </h4>\n" +
    "  </div>\n" +
    "  <div class=\"panel-collapse\" collapse=\"!isOpen\">\n" +
    "	  <div class=\"panel-body\" ng-transclude></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion.html",
    "<div class=\"panel-group\" ng-transclude></div>");
}]);

angular.module("template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/alert/alert.html",
    "<div class=\"alert\" ng-class=\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissable' : null]\" role=\"alert\">\n" +
    "    <button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close()\">\n" +
    "        <span aria-hidden=\"true\">&times;</span>\n" +
    "        <span class=\"sr-only\">Close</span>\n" +
    "    </button>\n" +
    "    <div ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/carousel/carousel.html",
    "<div ng-mouseenter=\"pause()\" ng-mouseleave=\"play()\" class=\"carousel\" ng-swipe-right=\"prev()\" ng-swipe-left=\"next()\">\n" +
    "    <ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
    "        <li ng-repeat=\"slide in slides track by $index\" ng-class=\"{active: isActive(slide)}\" ng-click=\"select(slide)\"></li>\n" +
    "    </ol>\n" +
    "    <div class=\"carousel-inner\" ng-transclude></div>\n" +
    "    <a class=\"left carousel-control\" ng-click=\"prev()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-left\"></span></a>\n" +
    "    <a class=\"right carousel-control\" ng-click=\"next()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-right\"></span></a>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/carousel/slide.html",
    "<div ng-class=\"{\n" +
    "    'active': leaving || (active && !entering),\n" +
    "    'prev': (next || active) && direction=='prev',\n" +
    "    'next': (next || active) && direction=='next',\n" +
    "    'right': direction=='prev',\n" +
    "    'left': direction=='next'\n" +
    "  }\" class=\"item text-center\" ng-transclude></div>\n" +
    "");
}]);

angular.module("template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/datepicker.html",
    "<div ng-switch=\"datepickerMode\" role=\"application\" ng-keydown=\"keydown($event)\">\n" +
    "  <daypicker ng-switch-when=\"day\" tabindex=\"0\"></daypicker>\n" +
    "  <monthpicker ng-switch-when=\"month\" tabindex=\"0\"></monthpicker>\n" +
    "  <yearpicker ng-switch-when=\"year\" tabindex=\"0\"></yearpicker>\n" +
    "</div>");
}]);

angular.module("template/datepicker/day.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/day.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th colspan=\"{{5 + showWeeks}}\"><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "    <tr>\n" +
    "      <th ng-show=\"showWeeks\" class=\"text-center\"></th>\n" +
    "      <th ng-repeat=\"label in labels track by $index\" class=\"text-center\"><small aria-label=\"{{label.full}}\">{{label.abbr}}</small></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-show=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default btn-sm\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-muted': dt.secondary, 'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/datepicker/month.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/month.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/datepicker/popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/popup.html",
    "<ul class=\"dropdown-menu\" ng-style=\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\" ng-keydown=\"keydown($event)\">\n" +
    "	<li ng-transclude></li>\n" +
    "	<li ng-if=\"showButtonBar\" style=\"padding:10px 9px 2px\">\n" +
    "		<span class=\"btn-group pull-left\">\n" +
    "			<button type=\"button\" class=\"btn btn-sm btn-info\" ng-click=\"select('today')\">{{ getText('current') }}</button>\n" +
    "			<button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"select(null)\">{{ getText('clear') }}</button>\n" +
    "		</span>\n" +
    "		<button type=\"button\" class=\"btn btn-sm btn-success pull-right\" ng-click=\"close()\">{{ getText('close') }}</button>\n" +
    "	</li>\n" +
    "</ul>\n" +
    "");
}]);

angular.module("template/datepicker/year.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/year.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th colspan=\"3\"><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/backdrop.html",
    "<div class=\"modal-backdrop fade {{ backdropClass }}\"\n" +
    "     ng-class=\"{in: animate}\"\n" +
    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
    "></div>\n" +
    "");
}]);

angular.module("template/modal/window.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/window.html",
    "<div tabindex=\"-1\" role=\"dialog\" class=\"modal fade\" ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=\"close($event)\">\n" +
    "    <div class=\"modal-dialog\" ng-class=\"{'modal-sm': size == 'sm', 'modal-lg': size == 'lg'}\"><div class=\"modal-content\" modal-transclude></div></div>\n" +
    "</div>");
}]);

angular.module("template/pagination/pager.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/pagination/pager.html",
    "<ul class=\"pager\">\n" +
    "  <li ng-class=\"{disabled: noPrevious(), previous: align}\"><a href ng-click=\"selectPage(page - 1)\">{{getText('previous')}}</a></li>\n" +
    "  <li ng-class=\"{disabled: noNext(), next: align}\"><a href ng-click=\"selectPage(page + 1)\">{{getText('next')}}</a></li>\n" +
    "</ul>");
}]);

angular.module("template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/pagination/pagination.html",
    "<ul class=\"pagination\">\n" +
    "  <li ng-if=\"boundaryLinks\" ng-class=\"{disabled: noPrevious()}\"><a href ng-click=\"selectPage(1)\">{{getText('first')}}</a></li>\n" +
    "  <li ng-if=\"directionLinks\" ng-class=\"{disabled: noPrevious()}\"><a href ng-click=\"selectPage(page - 1)\">{{getText('previous')}}</a></li>\n" +
    "  <li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active}\"><a href ng-click=\"selectPage(page.number)\">{{page.text}}</a></li>\n" +
    "  <li ng-if=\"directionLinks\" ng-class=\"{disabled: noNext()}\"><a href ng-click=\"selectPage(page + 1)\">{{getText('next')}}</a></li>\n" +
    "  <li ng-if=\"boundaryLinks\" ng-class=\"{disabled: noNext()}\"><a href ng-click=\"selectPage(totalPages)\">{{getText('last')}}</a></li>\n" +
    "</ul>");
}]);

angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html",
    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" bind-html-unsafe=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-popup.html",
    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/popover/popover.html",
    "<div class=\"popover {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"arrow\"></div>\n" +
    "\n" +
    "  <div class=\"popover-inner\">\n" +
    "      <h3 class=\"popover-title\" ng-bind=\"title\" ng-show=\"title\"></h3>\n" +
    "      <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/bar.html",
    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: percent + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>");
}]);

angular.module("template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/progress.html",
    "<div class=\"progress\" ng-transclude></div>");
}]);

angular.module("template/progressbar/progressbar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/progressbar.html",
    "<div class=\"progress\">\n" +
    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: percent + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>\n" +
    "</div>");
}]);

angular.module("template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/rating/rating.html",
    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\">\n" +
    "    <i ng-repeat=\"r in range track by $index\" ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\">\n" +
    "        <span class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
    "    </i>\n" +
    "</span>");
}]);

angular.module("template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tab.html",
    "<li ng-class=\"{active: active, disabled: disabled}\">\n" +
    "  <a href ng-click=\"select()\" tab-heading-transclude>{{heading}}</a>\n" +
    "</li>\n" +
    "");
}]);

angular.module("template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tabset.html",
    "<div>\n" +
    "  <ul class=\"nav nav-{{type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
    "  <div class=\"tab-content\">\n" +
    "    <div class=\"tab-pane\" \n" +
    "         ng-repeat=\"tab in tabs\" \n" +
    "         ng-class=\"{active: tab.active}\"\n" +
    "         tab-content-transclude=\"tab\">\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/timepicker/timepicker.html",
    "<table>\n" +
    "	<tbody>\n" +
    "		<tr class=\"text-center\">\n" +
    "			<td><a ng-click=\"incrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "			<td>&nbsp;</td>\n" +
    "			<td><a ng-click=\"incrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "			<td ng-show=\"showMeridian\"></td>\n" +
    "		</tr>\n" +
    "		<tr>\n" +
    "			<td style=\"width:50px;\" class=\"form-group\" ng-class=\"{'has-error': invalidHours}\">\n" +
    "				<input type=\"text\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-mousewheel=\"incrementHours()\" ng-readonly=\"readonlyInput\" maxlength=\"2\">\n" +
    "			</td>\n" +
    "			<td>:</td>\n" +
    "			<td style=\"width:50px;\" class=\"form-group\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
    "				<input type=\"text\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\">\n" +
    "			</td>\n" +
    "			<td ng-show=\"showMeridian\"><button type=\"button\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\">{{meridian}}</button></td>\n" +
    "		</tr>\n" +
    "		<tr class=\"text-center\">\n" +
    "			<td><a ng-click=\"decrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "			<td>&nbsp;</td>\n" +
    "			<td><a ng-click=\"decrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "			<td ng-show=\"showMeridian\"></td>\n" +
    "		</tr>\n" +
    "	</tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead-match.html",
    "<a tabindex=\"-1\" bind-html-unsafe=\"match.label | typeaheadHighlight:query\"></a>");
}]);

angular.module("template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead-popup.html",
    "<ul class=\"dropdown-menu\" ng-show=\"isOpen()\" ng-style=\"{top: position.top+'px', left: position.left+'px'}\" style=\"display: block;\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
    "    <li ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\" role=\"option\" id=\"{{match.id}}\">\n" +
    "        <div typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
    "    </li>\n" +
    "</ul>\n" +
    "");
}]);
/**
 * State-based routing for AngularJS
 * @version v0.2.13
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(a,b,c){"use strict";function d(a,b){return M(new(M(function(){},{prototype:a})),b)}function e(a){return L(arguments,function(b){b!==a&&L(b,function(b,c){a.hasOwnProperty(c)||(a[c]=b)})}),a}function f(a,b){var c=[];for(var d in a.path){if(a.path[d]!==b.path[d])break;c.push(a.path[d])}return c}function g(a){if(Object.keys)return Object.keys(a);var c=[];return b.forEach(a,function(a,b){c.push(b)}),c}function h(a,b){if(Array.prototype.indexOf)return a.indexOf(b,Number(arguments[2])||0);var c=a.length>>>0,d=Number(arguments[2])||0;for(d=0>d?Math.ceil(d):Math.floor(d),0>d&&(d+=c);c>d;d++)if(d in a&&a[d]===b)return d;return-1}function i(a,b,c,d){var e,i=f(c,d),j={},k=[];for(var l in i)if(i[l].params&&(e=g(i[l].params),e.length))for(var m in e)h(k,e[m])>=0||(k.push(e[m]),j[e[m]]=a[e[m]]);return M({},j,b)}function j(a,b,c){if(!c){c=[];for(var d in a)c.push(d)}for(var e=0;e<c.length;e++){var f=c[e];if(a[f]!=b[f])return!1}return!0}function k(a,b){var c={};return L(a,function(a){c[a]=b[a]}),c}function l(a){var b={},c=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var d in a)-1==h(c,d)&&(b[d]=a[d]);return b}function m(a,b){var c=K(a),d=c?[]:{};return L(a,function(a,e){b(a,e)&&(d[c?d.length:e]=a)}),d}function n(a,b){var c=K(a)?[]:{};return L(a,function(a,d){c[d]=b(a,d)}),c}function o(a,b){var d=1,f=2,i={},j=[],k=i,m=M(a.when(i),{$$promises:i,$$values:i});this.study=function(i){function n(a,c){if(s[c]!==f){if(r.push(c),s[c]===d)throw r.splice(0,h(r,c)),new Error("Cyclic dependency: "+r.join(" -> "));if(s[c]=d,I(a))q.push(c,[function(){return b.get(a)}],j);else{var e=b.annotate(a);L(e,function(a){a!==c&&i.hasOwnProperty(a)&&n(i[a],a)}),q.push(c,a,e)}r.pop(),s[c]=f}}function o(a){return J(a)&&a.then&&a.$$promises}if(!J(i))throw new Error("'invocables' must be an object");var p=g(i||{}),q=[],r=[],s={};return L(i,n),i=r=s=null,function(d,f,g){function h(){--u||(v||e(t,f.$$values),r.$$values=t,r.$$promises=r.$$promises||!0,delete r.$$inheritedValues,n.resolve(t))}function i(a){r.$$failure=a,n.reject(a)}function j(c,e,f){function j(a){l.reject(a),i(a)}function k(){if(!G(r.$$failure))try{l.resolve(b.invoke(e,g,t)),l.promise.then(function(a){t[c]=a,h()},j)}catch(a){j(a)}}var l=a.defer(),m=0;L(f,function(a){s.hasOwnProperty(a)&&!d.hasOwnProperty(a)&&(m++,s[a].then(function(b){t[a]=b,--m||k()},j))}),m||k(),s[c]=l.promise}if(o(d)&&g===c&&(g=f,f=d,d=null),d){if(!J(d))throw new Error("'locals' must be an object")}else d=k;if(f){if(!o(f))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else f=m;var n=a.defer(),r=n.promise,s=r.$$promises={},t=M({},d),u=1+q.length/3,v=!1;if(G(f.$$failure))return i(f.$$failure),r;f.$$inheritedValues&&e(t,l(f.$$inheritedValues,p)),M(s,f.$$promises),f.$$values?(v=e(t,l(f.$$values,p)),r.$$inheritedValues=l(f.$$values,p),h()):(f.$$inheritedValues&&(r.$$inheritedValues=l(f.$$inheritedValues,p)),f.then(h,i));for(var w=0,x=q.length;x>w;w+=3)d.hasOwnProperty(q[w])?h():j(q[w],q[w+1],q[w+2]);return r}},this.resolve=function(a,b,c,d){return this.study(a)(b,c,d)}}function p(a,b,c){this.fromConfig=function(a,b,c){return G(a.template)?this.fromString(a.template,b):G(a.templateUrl)?this.fromUrl(a.templateUrl,b):G(a.templateProvider)?this.fromProvider(a.templateProvider,b,c):null},this.fromString=function(a,b){return H(a)?a(b):a},this.fromUrl=function(c,d){return H(c)&&(c=c(d)),null==c?null:a.get(c,{cache:b,headers:{Accept:"text/html"}}).then(function(a){return a.data})},this.fromProvider=function(a,b,d){return c.invoke(a,null,d||{params:b})}}function q(a,b,e){function f(b,c,d,e){if(q.push(b),o[b])return o[b];if(!/^\w+(-+\w+)*(?:\[\])?$/.test(b))throw new Error("Invalid parameter name '"+b+"' in pattern '"+a+"'");if(p[b])throw new Error("Duplicate parameter name '"+b+"' in pattern '"+a+"'");return p[b]=new O.Param(b,c,d,e),p[b]}function g(a,b,c){var d=["",""],e=a.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!b)return e;switch(c){case!1:d=["(",")"];break;case!0:d=["?(",")?"];break;default:d=["("+c+"|",")?"]}return e+d[0]+b+d[1]}function h(c,e){var f,g,h,i,j;return f=c[2]||c[3],j=b.params[f],h=a.substring(m,c.index),g=e?c[4]:c[4]||("*"==c[1]?".*":null),i=O.type(g||"string")||d(O.type("string"),{pattern:new RegExp(g)}),{id:f,regexp:g,segment:h,type:i,cfg:j}}b=M({params:{}},J(b)?b:{});var i,j=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,k=/([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,l="^",m=0,n=this.segments=[],o=e?e.params:{},p=this.params=e?e.params.$$new():new O.ParamSet,q=[];this.source=a;for(var r,s,t;(i=j.exec(a))&&(r=h(i,!1),!(r.segment.indexOf("?")>=0));)s=f(r.id,r.type,r.cfg,"path"),l+=g(r.segment,s.type.pattern.source,s.squash),n.push(r.segment),m=j.lastIndex;t=a.substring(m);var u=t.indexOf("?");if(u>=0){var v=this.sourceSearch=t.substring(u);if(t=t.substring(0,u),this.sourcePath=a.substring(0,m+u),v.length>0)for(m=0;i=k.exec(v);)r=h(i,!0),s=f(r.id,r.type,r.cfg,"search"),m=j.lastIndex}else this.sourcePath=a,this.sourceSearch="";l+=g(t)+(b.strict===!1?"/?":"")+"$",n.push(t),this.regexp=new RegExp(l,b.caseInsensitive?"i":c),this.prefix=n[0],this.$$paramNames=q}function r(a){M(this,a)}function s(){function a(a){return null!=a?a.toString().replace(/\//g,"%2F"):a}function e(a){return null!=a?a.toString().replace(/%2F/g,"/"):a}function f(a){return this.pattern.test(a)}function i(){return{strict:t,caseInsensitive:p}}function j(a){return H(a)||K(a)&&H(a[a.length-1])}function k(){for(;x.length;){var a=x.shift();if(a.pattern)throw new Error("You cannot override a type's .pattern at runtime.");b.extend(v[a.name],o.invoke(a.def))}}function l(a){M(this,a||{})}O=this;var o,p=!1,t=!0,u=!1,v={},w=!0,x=[],y={string:{encode:a,decode:e,is:f,pattern:/[^/]*/},"int":{encode:a,decode:function(a){return parseInt(a,10)},is:function(a){return G(a)&&this.decode(a.toString())===a},pattern:/\d+/},bool:{encode:function(a){return a?1:0},decode:function(a){return 0!==parseInt(a,10)},is:function(a){return a===!0||a===!1},pattern:/0|1/},date:{encode:function(a){return this.is(a)?[a.getFullYear(),("0"+(a.getMonth()+1)).slice(-2),("0"+a.getDate()).slice(-2)].join("-"):c},decode:function(a){if(this.is(a))return a;var b=this.capture.exec(a);return b?new Date(b[1],b[2]-1,b[3]):c},is:function(a){return a instanceof Date&&!isNaN(a.valueOf())},equals:function(a,b){return this.is(a)&&this.is(b)&&a.toISOString()===b.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:b.toJson,decode:b.fromJson,is:b.isObject,equals:b.equals,pattern:/[^/]*/},any:{encode:b.identity,decode:b.identity,is:b.identity,equals:b.equals,pattern:/.*/}};s.$$getDefaultValue=function(a){if(!j(a.value))return a.value;if(!o)throw new Error("Injectable functions cannot be called at configuration time");return o.invoke(a.value)},this.caseInsensitive=function(a){return G(a)&&(p=a),p},this.strictMode=function(a){return G(a)&&(t=a),t},this.defaultSquashPolicy=function(a){if(!G(a))return u;if(a!==!0&&a!==!1&&!I(a))throw new Error("Invalid squash policy: "+a+". Valid policies: false, true, arbitrary-string");return u=a,a},this.compile=function(a,b){return new q(a,M(i(),b))},this.isMatcher=function(a){if(!J(a))return!1;var b=!0;return L(q.prototype,function(c,d){H(c)&&(b=b&&G(a[d])&&H(a[d]))}),b},this.type=function(a,b,c){if(!G(b))return v[a];if(v.hasOwnProperty(a))throw new Error("A type named '"+a+"' has already been defined.");return v[a]=new r(M({name:a},b)),c&&(x.push({name:a,def:c}),w||k()),this},L(y,function(a,b){v[b]=new r(M({name:b},a))}),v=d(v,{}),this.$get=["$injector",function(a){return o=a,w=!1,k(),L(y,function(a,b){v[b]||(v[b]=new r(a))}),this}],this.Param=function(a,b,d,e){function f(a){var b=J(a)?g(a):[],c=-1===h(b,"value")&&-1===h(b,"type")&&-1===h(b,"squash")&&-1===h(b,"array");return c&&(a={value:a}),a.$$fn=j(a.value)?a.value:function(){return a.value},a}function i(b,c,d){if(b.type&&c)throw new Error("Param '"+a+"' has two type configurations.");return c?c:b.type?b.type instanceof r?b.type:new r(b.type):"config"===d?v.any:v.string}function k(){var b={array:"search"===e?"auto":!1},c=a.match(/\[\]$/)?{array:!0}:{};return M(b,c,d).array}function l(a,b){var c=a.squash;if(!b||c===!1)return!1;if(!G(c)||null==c)return u;if(c===!0||I(c))return c;throw new Error("Invalid squash policy: '"+c+"'. Valid policies: false, true, or arbitrary string")}function p(a,b,d,e){var f,g,i=[{from:"",to:d||b?c:""},{from:null,to:d||b?c:""}];return f=K(a.replace)?a.replace:[],I(e)&&f.push({from:e,to:c}),g=n(f,function(a){return a.from}),m(i,function(a){return-1===h(g,a.from)}).concat(f)}function q(){if(!o)throw new Error("Injectable functions cannot be called at configuration time");return o.invoke(d.$$fn)}function s(a){function b(a){return function(b){return b.from===a}}function c(a){var c=n(m(w.replace,b(a)),function(a){return a.to});return c.length?c[0]:a}return a=c(a),G(a)?w.type.decode(a):q()}function t(){return"{Param:"+a+" "+b+" squash: '"+z+"' optional: "+y+"}"}var w=this;d=f(d),b=i(d,b,e);var x=k();b=x?b.$asArray(x,"search"===e):b,"string"!==b.name||x||"path"!==e||d.value!==c||(d.value="");var y=d.value!==c,z=l(d,y),A=p(d,x,y,z);M(this,{id:a,type:b,location:e,array:x,squash:z,replace:A,isOptional:y,value:s,dynamic:c,config:d,toString:t})},l.prototype={$$new:function(){return d(this,M(new l,{$$parent:this}))},$$keys:function(){for(var a=[],b=[],c=this,d=g(l.prototype);c;)b.push(c),c=c.$$parent;return b.reverse(),L(b,function(b){L(g(b),function(b){-1===h(a,b)&&-1===h(d,b)&&a.push(b)})}),a},$$values:function(a){var b={},c=this;return L(c.$$keys(),function(d){b[d]=c[d].value(a&&a[d])}),b},$$equals:function(a,b){var c=!0,d=this;return L(d.$$keys(),function(e){var f=a&&a[e],g=b&&b[e];d[e].type.equals(f,g)||(c=!1)}),c},$$validates:function(a){var b,c,d,e=!0,f=this;return L(this.$$keys(),function(g){d=f[g],c=a[g],b=!c&&d.isOptional,e=e&&(b||!!d.type.is(c))}),e},$$parent:c},this.ParamSet=l}function t(a,d){function e(a){var b=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(a.source);return null!=b?b[1].replace(/\\(.)/g,"$1"):""}function f(a,b){return a.replace(/\$(\$|\d{1,2})/,function(a,c){return b["$"===c?0:Number(c)]})}function g(a,b,c){if(!c)return!1;var d=a.invoke(b,b,{$match:c});return G(d)?d:!0}function h(d,e,f,g){function h(a,b,c){return"/"===p?a:b?p.slice(0,-1)+a:c?p.slice(1)+a:a}function m(a){function b(a){var b=a(f,d);return b?(I(b)&&d.replace().url(b),!0):!1}if(!a||!a.defaultPrevented){var e=o&&d.url()===o;if(o=c,e)return!0;var g,h=j.length;for(g=0;h>g;g++)if(b(j[g]))return;k&&b(k)}}function n(){return i=i||e.$on("$locationChangeSuccess",m)}var o,p=g.baseHref(),q=d.url();return l||n(),{sync:function(){m()},listen:function(){return n()},update:function(a){return a?void(q=d.url()):void(d.url()!==q&&(d.url(q),d.replace()))},push:function(a,b,e){d.url(a.format(b||{})),o=e&&e.$$avoidResync?d.url():c,e&&e.replace&&d.replace()},href:function(c,e,f){if(!c.validates(e))return null;var g=a.html5Mode();b.isObject(g)&&(g=g.enabled);var i=c.format(e);if(f=f||{},g||null===i||(i="#"+a.hashPrefix()+i),i=h(i,g,f.absolute),!f.absolute||!i)return i;var j=!g&&i?"/":"",k=d.port();return k=80===k||443===k?"":":"+k,[d.protocol(),"://",d.host(),k,j,i].join("")}}}var i,j=[],k=null,l=!1;this.rule=function(a){if(!H(a))throw new Error("'rule' must be a function");return j.push(a),this},this.otherwise=function(a){if(I(a)){var b=a;a=function(){return b}}else if(!H(a))throw new Error("'rule' must be a function");return k=a,this},this.when=function(a,b){var c,h=I(b);if(I(a)&&(a=d.compile(a)),!h&&!H(b)&&!K(b))throw new Error("invalid 'handler' in when()");var i={matcher:function(a,b){return h&&(c=d.compile(b),b=["$match",function(a){return c.format(a)}]),M(function(c,d){return g(c,b,a.exec(d.path(),d.search()))},{prefix:I(a.prefix)?a.prefix:""})},regex:function(a,b){if(a.global||a.sticky)throw new Error("when() RegExp must not be global or sticky");return h&&(c=b,b=["$match",function(a){return f(c,a)}]),M(function(c,d){return g(c,b,a.exec(d.path()))},{prefix:e(a)})}},j={matcher:d.isMatcher(a),regex:a instanceof RegExp};for(var k in j)if(j[k])return this.rule(i[k](a,b));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(a){a===c&&(a=!0),l=a},this.$get=h,h.$inject=["$location","$rootScope","$injector","$browser"]}function u(a,e){function f(a){return 0===a.indexOf(".")||0===a.indexOf("^")}function l(a,b){if(!a)return c;var d=I(a),e=d?a:a.name,g=f(e);if(g){if(!b)throw new Error("No reference point given for path '"+e+"'");b=l(b);for(var h=e.split("."),i=0,j=h.length,k=b;j>i;i++)if(""!==h[i]||0!==i){if("^"!==h[i])break;if(!k.parent)throw new Error("Path '"+e+"' not valid for state '"+b.name+"'");k=k.parent}else k=b;h=h.slice(i).join("."),e=k.name+(k.name&&h?".":"")+h}var m=y[e];return!m||!d&&(d||m!==a&&m.self!==a)?c:m}function m(a,b){z[a]||(z[a]=[]),z[a].push(b)}function o(a){for(var b=z[a]||[];b.length;)p(b.shift())}function p(b){b=d(b,{self:b,resolve:b.resolve||{},toString:function(){return this.name}});var c=b.name;if(!I(c)||c.indexOf("@")>=0)throw new Error("State must have a valid name");if(y.hasOwnProperty(c))throw new Error("State '"+c+"'' is already defined");var e=-1!==c.indexOf(".")?c.substring(0,c.lastIndexOf(".")):I(b.parent)?b.parent:J(b.parent)&&I(b.parent.name)?b.parent.name:"";if(e&&!y[e])return m(e,b.self);for(var f in B)H(B[f])&&(b[f]=B[f](b,B.$delegates[f]));return y[c]=b,!b[A]&&b.url&&a.when(b.url,["$match","$stateParams",function(a,c){x.$current.navigable==b&&j(a,c)||x.transitionTo(b,a,{inherit:!0,location:!1})}]),o(c),b}function q(a){return a.indexOf("*")>-1}function r(a){var b=a.split("."),c=x.$current.name.split(".");if("**"===b[0]&&(c=c.slice(h(c,b[1])),c.unshift("**")),"**"===b[b.length-1]&&(c.splice(h(c,b[b.length-2])+1,Number.MAX_VALUE),c.push("**")),b.length!=c.length)return!1;for(var d=0,e=b.length;e>d;d++)"*"===b[d]&&(c[d]="*");return c.join("")===b.join("")}function s(a,b){return I(a)&&!G(b)?B[a]:H(b)&&I(a)?(B[a]&&!B.$delegates[a]&&(B.$delegates[a]=B[a]),B[a]=b,this):this}function t(a,b){return J(a)?b=a:b.name=a,p(b),this}function u(a,e,f,h,m,o,p){function s(b,c,d,f){var g=a.$broadcast("$stateNotFound",b,c,d);if(g.defaultPrevented)return p.update(),B;if(!g.retry)return null;if(f.$retry)return p.update(),C;var h=x.transition=e.when(g.retry);return h.then(function(){return h!==x.transition?u:(b.options.$retry=!0,x.transitionTo(b.to,b.toParams,b.options))},function(){return B}),p.update(),h}function t(a,c,d,g,i,j){var l=d?c:k(a.params.$$keys(),c),n={$stateParams:l};i.resolve=m.resolve(a.resolve,n,i.resolve,a);var o=[i.resolve.then(function(a){i.globals=a})];return g&&o.push(g),L(a.views,function(c,d){var e=c.resolve&&c.resolve!==a.resolve?c.resolve:{};e.$template=[function(){return f.load(d,{view:c,locals:n,params:l,notify:j.notify})||""}],o.push(m.resolve(e,n,i.resolve,a).then(function(f){if(H(c.controllerProvider)||K(c.controllerProvider)){var g=b.extend({},e,n);f.$$controller=h.invoke(c.controllerProvider,null,g)}else f.$$controller=c.controller;f.$$state=a,f.$$controllerAs=c.controllerAs,i[d]=f}))}),e.all(o).then(function(){return i})}var u=e.reject(new Error("transition superseded")),z=e.reject(new Error("transition prevented")),B=e.reject(new Error("transition aborted")),C=e.reject(new Error("transition failed"));return w.locals={resolve:null,globals:{$stateParams:{}}},x={params:{},current:w.self,$current:w,transition:null},x.reload=function(){return x.transitionTo(x.current,o,{reload:!0,inherit:!1,notify:!0})},x.go=function(a,b,c){return x.transitionTo(a,b,M({inherit:!0,relative:x.$current},c))},x.transitionTo=function(b,c,f){c=c||{},f=M({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},f||{});var g,j=x.$current,m=x.params,n=j.path,q=l(b,f.relative);if(!G(q)){var r={to:b,toParams:c,options:f},y=s(r,j.self,m,f);if(y)return y;if(b=r.to,c=r.toParams,f=r.options,q=l(b,f.relative),!G(q)){if(!f.relative)throw new Error("No such state '"+b+"'");throw new Error("Could not resolve '"+b+"' from state '"+f.relative+"'")}}if(q[A])throw new Error("Cannot transition to abstract state '"+b+"'");if(f.inherit&&(c=i(o,c||{},x.$current,q)),!q.params.$$validates(c))return C;c=q.params.$$values(c),b=q;var B=b.path,D=0,E=B[D],F=w.locals,H=[];if(!f.reload)for(;E&&E===n[D]&&E.ownParams.$$equals(c,m);)F=H[D]=E.locals,D++,E=B[D];if(v(b,j,F,f))return b.self.reloadOnSearch!==!1&&p.update(),x.transition=null,e.when(x.current);if(c=k(b.params.$$keys(),c||{}),f.notify&&a.$broadcast("$stateChangeStart",b.self,c,j.self,m).defaultPrevented)return p.update(),z;for(var I=e.when(F),J=D;J<B.length;J++,E=B[J])F=H[J]=d(F),I=t(E,c,E===b,I,F,f);var K=x.transition=I.then(function(){var d,e,g;if(x.transition!==K)return u;for(d=n.length-1;d>=D;d--)g=n[d],g.self.onExit&&h.invoke(g.self.onExit,g.self,g.locals.globals),g.locals=null;for(d=D;d<B.length;d++)e=B[d],e.locals=H[d],e.self.onEnter&&h.invoke(e.self.onEnter,e.self,e.locals.globals);return x.transition!==K?u:(x.$current=b,x.current=b.self,x.params=c,N(x.params,o),x.transition=null,f.location&&b.navigable&&p.push(b.navigable.url,b.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===f.location}),f.notify&&a.$broadcast("$stateChangeSuccess",b.self,c,j.self,m),p.update(!0),x.current)},function(d){return x.transition!==K?u:(x.transition=null,g=a.$broadcast("$stateChangeError",b.self,c,j.self,m,d),g.defaultPrevented||p.update(),e.reject(d))});return K},x.is=function(a,b,d){d=M({relative:x.$current},d||{});var e=l(a,d.relative);return G(e)?x.$current!==e?!1:b?j(e.params.$$values(b),o):!0:c},x.includes=function(a,b,d){if(d=M({relative:x.$current},d||{}),I(a)&&q(a)){if(!r(a))return!1;a=x.$current.name}var e=l(a,d.relative);return G(e)?G(x.$current.includes[e.name])?b?j(e.params.$$values(b),o,g(b)):!0:!1:c},x.href=function(a,b,d){d=M({lossy:!0,inherit:!0,absolute:!1,relative:x.$current},d||{});var e=l(a,d.relative);if(!G(e))return null;d.inherit&&(b=i(o,b||{},x.$current,e));var f=e&&d.lossy?e.navigable:e;return f&&f.url!==c&&null!==f.url?p.href(f.url,k(e.params.$$keys(),b||{}),{absolute:d.absolute}):null},x.get=function(a,b){if(0===arguments.length)return n(g(y),function(a){return y[a].self});var c=l(a,b||x.$current);return c&&c.self?c.self:null},x}function v(a,b,c,d){return a!==b||(c!==b.locals||d.reload)&&a.self.reloadOnSearch!==!1?void 0:!0}var w,x,y={},z={},A="abstract",B={parent:function(a){if(G(a.parent)&&a.parent)return l(a.parent);var b=/^(.+)\.[^.]+$/.exec(a.name);return b?l(b[1]):w},data:function(a){return a.parent&&a.parent.data&&(a.data=a.self.data=M({},a.parent.data,a.data)),a.data},url:function(a){var b=a.url,c={params:a.params||{}};if(I(b))return"^"==b.charAt(0)?e.compile(b.substring(1),c):(a.parent.navigable||w).url.concat(b,c);if(!b||e.isMatcher(b))return b;throw new Error("Invalid url '"+b+"' in state '"+a+"'")},navigable:function(a){return a.url?a:a.parent?a.parent.navigable:null},ownParams:function(a){var b=a.url&&a.url.params||new O.ParamSet;return L(a.params||{},function(a,c){b[c]||(b[c]=new O.Param(c,null,a,"config"))}),b},params:function(a){return a.parent&&a.parent.params?M(a.parent.params.$$new(),a.ownParams):new O.ParamSet},views:function(a){var b={};return L(G(a.views)?a.views:{"":a},function(c,d){d.indexOf("@")<0&&(d+="@"+a.parent.name),b[d]=c}),b},path:function(a){return a.parent?a.parent.path.concat(a):[]},includes:function(a){var b=a.parent?M({},a.parent.includes):{};return b[a.name]=!0,b},$delegates:{}};w=p({name:"",url:"^",views:null,"abstract":!0}),w.navigable=null,this.decorator=s,this.state=t,this.$get=u,u.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function v(){function a(a,b){return{load:function(c,d){var e,f={template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}};return d=M(f,d),d.view&&(e=b.fromConfig(d.view,d.params,d.locals)),e&&d.notify&&a.$broadcast("$viewContentLoading",d),e}}}this.$get=a,a.$inject=["$rootScope","$templateFactory"]}function w(){var a=!1;this.useAnchorScroll=function(){a=!0},this.$get=["$anchorScroll","$timeout",function(b,c){return a?b:function(a){c(function(){a[0].scrollIntoView()},0,!1)}}]}function x(a,c,d,e){function f(){return c.has?function(a){return c.has(a)?c.get(a):null}:function(a){try{return c.get(a)}catch(b){return null}}}function g(a,b){var c=function(){return{enter:function(a,b,c){b.after(a),c()},leave:function(a,b){a.remove(),b()}}};if(j)return{enter:function(a,b,c){var d=j.enter(a,null,b,c);d&&d.then&&d.then(c)},leave:function(a,b){var c=j.leave(a,b);c&&c.then&&c.then(b)}};if(i){var d=i&&i(b,a);return{enter:function(a,b,c){d.enter(a,null,b),c()},leave:function(a,b){d.leave(a),b()}}}return c()}var h=f(),i=h("$animator"),j=h("$animate"),k={restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(c,f,h){return function(c,f,i){function j(){l&&(l.remove(),l=null),n&&(n.$destroy(),n=null),m&&(r.leave(m,function(){l=null}),l=m,m=null)}function k(g){var k,l=z(c,i,f,e),s=l&&a.$current&&a.$current.locals[l];if(g||s!==o){k=c.$new(),o=a.$current.locals[l];var t=h(k,function(a){r.enter(a,f,function(){n&&n.$emit("$viewContentAnimationEnded"),(b.isDefined(q)&&!q||c.$eval(q))&&d(a)}),j()});m=t,n=k,n.$emit("$viewContentLoaded"),n.$eval(p)}}var l,m,n,o,p=i.onload||"",q=i.autoscroll,r=g(i,c);c.$on("$stateChangeSuccess",function(){k(!1)}),c.$on("$viewContentLoading",function(){k(!1)}),k(!0)}}};return k}function y(a,b,c,d){return{restrict:"ECA",priority:-400,compile:function(e){var f=e.html();return function(e,g,h){var i=c.$current,j=z(e,h,g,d),k=i&&i.locals[j];if(k){g.data("$uiView",{name:j,state:k.$$state}),g.html(k.$template?k.$template:f);var l=a(g.contents());if(k.$$controller){k.$scope=e;var m=b(k.$$controller,k);k.$$controllerAs&&(e[k.$$controllerAs]=m),g.data("$ngControllerController",m),g.children().data("$ngControllerController",m)}l(e)}}}}}function z(a,b,c,d){var e=d(b.uiView||b.name||"")(a),f=c.inheritedData("$uiView");return e.indexOf("@")>=0?e:e+"@"+(f?f.state.name:"")}function A(a,b){var c,d=a.match(/^\s*({[^}]*})\s*$/);if(d&&(a=b+"("+d[1]+")"),c=a.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!c||4!==c.length)throw new Error("Invalid state ref '"+a+"'");return{state:c[1],paramExpr:c[3]||null}}function B(a){var b=a.parent().inheritedData("$uiView");return b&&b.state&&b.state.name?b.state:void 0}function C(a,c){var d=["location","inherit","reload"];return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(e,f,g,h){var i=A(g.uiSref,a.current.name),j=null,k=B(f)||a.$current,l=null,m="A"===f.prop("tagName"),n="FORM"===f[0].nodeName,o=n?"action":"href",p=!0,q={relative:k,inherit:!0},r=e.$eval(g.uiSrefOpts)||{};b.forEach(d,function(a){a in r&&(q[a]=r[a])});var s=function(c){if(c&&(j=b.copy(c)),p){l=a.href(i.state,j,q);var d=h[1]||h[0];return d&&d.$$setStateInfo(i.state,j),null===l?(p=!1,!1):void g.$set(o,l)}};i.paramExpr&&(e.$watch(i.paramExpr,function(a){a!==j&&s(a)},!0),j=b.copy(e.$eval(i.paramExpr))),s(),n||f.bind("click",function(b){var d=b.which||b.button;if(!(d>1||b.ctrlKey||b.metaKey||b.shiftKey||f.attr("target"))){var e=c(function(){a.go(i.state,j,q)});b.preventDefault();var g=m&&!l?1:0;b.preventDefault=function(){g--<=0&&c.cancel(e)}}})}}}function D(a,b,c){return{restrict:"A",controller:["$scope","$element","$attrs",function(b,d,e){function f(){g()?d.addClass(j):d.removeClass(j)}function g(){return"undefined"!=typeof e.uiSrefActiveEq?h&&a.is(h.name,i):h&&a.includes(h.name,i)}var h,i,j;j=c(e.uiSrefActiveEq||e.uiSrefActive||"",!1)(b),this.$$setStateInfo=function(b,c){h=a.get(b,B(d)),i=c,f()},b.$on("$stateChangeSuccess",f)}]}}function E(a){var b=function(b){return a.is(b)};return b.$stateful=!0,b}function F(a){var b=function(b){return a.includes(b)};return b.$stateful=!0,b}var G=b.isDefined,H=b.isFunction,I=b.isString,J=b.isObject,K=b.isArray,L=b.forEach,M=b.extend,N=b.copy;b.module("ui.router.util",["ng"]),b.module("ui.router.router",["ui.router.util"]),b.module("ui.router.state",["ui.router.router","ui.router.util"]),b.module("ui.router",["ui.router.state"]),b.module("ui.router.compat",["ui.router"]),o.$inject=["$q","$injector"],b.module("ui.router.util").service("$resolve",o),p.$inject=["$http","$templateCache","$injector"],b.module("ui.router.util").service("$templateFactory",p);var O;q.prototype.concat=function(a,b){var c={caseInsensitive:O.caseInsensitive(),strict:O.strictMode(),squash:O.defaultSquashPolicy()};return new q(this.sourcePath+a+this.sourceSearch,M(c,b),this)},q.prototype.toString=function(){return this.source},q.prototype.exec=function(a,b){function c(a){function b(a){return a.split("").reverse().join("")}function c(a){return a.replace(/\\-/,"-")}var d=b(a).split(/-(?!\\)/),e=n(d,b);return n(e,c).reverse()}var d=this.regexp.exec(a);if(!d)return null;b=b||{};var e,f,g,h=this.parameters(),i=h.length,j=this.segments.length-1,k={};if(j!==d.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");for(e=0;j>e;e++){g=h[e];var l=this.params[g],m=d[e+1];for(f=0;f<l.replace;f++)l.replace[f].from===m&&(m=l.replace[f].to);m&&l.array===!0&&(m=c(m)),k[g]=l.value(m)}for(;i>e;e++)g=h[e],k[g]=this.params[g].value(b[g]);return k},q.prototype.parameters=function(a){return G(a)?this.params[a]||null:this.$$paramNames},q.prototype.validates=function(a){return this.params.$$validates(a)},q.prototype.format=function(a){function b(a){return encodeURIComponent(a).replace(/-/g,function(a){return"%5C%"+a.charCodeAt(0).toString(16).toUpperCase()})}a=a||{};var c=this.segments,d=this.parameters(),e=this.params;if(!this.validates(a))return null;var f,g=!1,h=c.length-1,i=d.length,j=c[0];for(f=0;i>f;f++){var k=h>f,l=d[f],m=e[l],o=m.value(a[l]),p=m.isOptional&&m.type.equals(m.value(),o),q=p?m.squash:!1,r=m.type.encode(o);if(k){var s=c[f+1];if(q===!1)null!=r&&(j+=K(r)?n(r,b).join("-"):encodeURIComponent(r)),j+=s;else if(q===!0){var t=j.match(/\/$/)?/\/?(.*)/:/(.*)/;j+=s.match(t)[1]}else I(q)&&(j+=q+s)}else{if(null==r||p&&q!==!1)continue;K(r)||(r=[r]),r=n(r,encodeURIComponent).join("&"+l+"="),j+=(g?"&":"?")+(l+"="+r),g=!0}}return j},r.prototype.is=function(){return!0},r.prototype.encode=function(a){return a},r.prototype.decode=function(a){return a},r.prototype.equals=function(a,b){return a==b},r.prototype.$subPattern=function(){var a=this.pattern.toString();return a.substr(1,a.length-2)},r.prototype.pattern=/.*/,r.prototype.toString=function(){return"{Type:"+this.name+"}"},r.prototype.$asArray=function(a,b){function d(a,b){function d(a,b){return function(){return a[b].apply(a,arguments)}}function e(a){return K(a)?a:G(a)?[a]:[]}function f(a){switch(a.length){case 0:return c;case 1:return"auto"===b?a[0]:a;default:return a}}function g(a){return!a}function h(a,b){return function(c){c=e(c);var d=n(c,a);return b===!0?0===m(d,g).length:f(d)}}function i(a){return function(b,c){var d=e(b),f=e(c);if(d.length!==f.length)return!1;for(var g=0;g<d.length;g++)if(!a(d[g],f[g]))return!1;return!0}}this.encode=h(d(a,"encode")),this.decode=h(d(a,"decode")),this.is=h(d(a,"is"),!0),this.equals=i(d(a,"equals")),this.pattern=a.pattern,this.$arrayMode=b}if(!a)return this;if("auto"===a&&!b)throw new Error("'auto' array mode is for query parameters only");return new d(this,a)},b.module("ui.router.util").provider("$urlMatcherFactory",s),b.module("ui.router.util").run(["$urlMatcherFactory",function(){}]),t.$inject=["$locationProvider","$urlMatcherFactoryProvider"],b.module("ui.router.router").provider("$urlRouter",t),u.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],b.module("ui.router.state").value("$stateParams",{}).provider("$state",u),v.$inject=[],b.module("ui.router.state").provider("$view",v),b.module("ui.router.state").provider("$uiViewScroll",w),x.$inject=["$state","$injector","$uiViewScroll","$interpolate"],y.$inject=["$compile","$controller","$state","$interpolate"],b.module("ui.router.state").directive("uiView",x),b.module("ui.router.state").directive("uiView",y),C.$inject=["$state","$timeout"],D.$inject=["$state","$stateParams","$interpolate"],b.module("ui.router.state").directive("uiSref",C).directive("uiSrefActive",D).directive("uiSrefActiveEq",D),E.$inject=["$state"],F.$inject=["$state"],b.module("ui.router.state").filter("isState",E).filter("includedByState",F)}(window,window.angular);
/**
 * @license AngularJS v1.2.25
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

var $sanitizeMinErr = angular.$$minErr('$sanitize');

/**
 * @ngdoc module
 * @name ngSanitize
 * @description
 *
 * # ngSanitize
 *
 * The `ngSanitize` module provides functionality to sanitize HTML.
 *
 *
 * <div doc-module-components="ngSanitize"></div>
 *
 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
 */

/*
 * HTML Parser By Misko Hevery (misko@hevery.com)
 * based on:  HTML Parser By John Resig (ejohn.org)
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 *
 * // Use like so:
 * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 */


/**
 * @ngdoc service
 * @name $sanitize
 * @kind function
 *
 * @description
 *   The input is sanitized by parsing the html into tokens. All safe tokens (from a whitelist) are
 *   then serialized back to properly escaped html string. This means that no unsafe input can make
 *   it into the returned string, however, since our parser is more strict than a typical browser
 *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a
 *   browser, won't make it through the sanitizer.
 *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and
 *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.
 *
 * @param {string} html Html input.
 * @returns {string} Sanitized html.
 *
 * @example
   <example module="sanitizeExample" deps="angular-sanitize.js">
   <file name="index.html">
     <script>
         angular.module('sanitizeExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
             $scope.snippet =
               '<p style="color:blue">an html\n' +
               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
               'snippet</p>';
             $scope.deliberatelyTrustDangerousSnippet = function() {
               return $sce.trustAsHtml($scope.snippet);
             };
           }]);
     </script>
     <div ng-controller="ExampleController">
        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Directive</td>
           <td>How</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="bind-html-with-sanitize">
           <td>ng-bind-html</td>
           <td>Automatically uses $sanitize</td>
           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind-html="snippet"></div></td>
         </tr>
         <tr id="bind-html-with-trust">
           <td>ng-bind-html</td>
           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
           <td>
           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
&lt;/div&gt;</pre>
           </td>
           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
         </tr>
         <tr id="bind-default">
           <td>ng-bind</td>
           <td>Automatically escapes</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
       </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

     it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

     it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getInnerHtml()).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

     it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
 */
function $SanitizeProvider() {
  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
    return function(html) {
      var buf = [];
      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
        return !/^unsafe/.test($$sanitizeUri(uri, isImage));
      }));
      return buf.join('');
    };
  }];
}

function sanitizeText(chars) {
  var buf = [];
  var writer = htmlSanitizeWriter(buf, angular.noop);
  writer.chars(chars);
  return buf.join('');
}


// Regular Expressions for parsing tags and attributes
var START_TAG_REGEXP =
       /^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,
  END_TAG_REGEXP = /^<\/\s*([\w:-]+)[^>]*>/,
  ATTR_REGEXP = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,
  BEGIN_TAG_REGEXP = /^</,
  BEGING_END_TAGE_REGEXP = /^<\//,
  COMMENT_REGEXP = /<!--(.*?)-->/g,
  DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,
  CDATA_REGEXP = /<!\[CDATA\[(.*?)]]>/g,
  SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
  // Match everything outside of normal chars and " (quote character)
  NON_ALPHANUMERIC_REGEXP = /([^\#-~| |!])/g;


// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements

// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
var voidElements = makeMap("area,br,col,hr,img,wbr");

// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
var optionalEndTagBlockElements = makeMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
    optionalEndTagInlineElements = makeMap("rp,rt"),
    optionalEndTagElements = angular.extend({},
                                            optionalEndTagInlineElements,
                                            optionalEndTagBlockElements);

// Safe Block Elements - HTML5
var blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap("address,article," +
        "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," +
        "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul"));

// Inline Elements - HTML5
var inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap("a,abbr,acronym,b," +
        "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," +
        "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));


// Special Elements (can contain anything)
var specialElements = makeMap("script,style");

var validElements = angular.extend({},
                                   voidElements,
                                   blockElements,
                                   inlineElements,
                                   optionalEndTagElements);

//Attributes that have href and hence need to be sanitized
var uriAttrs = makeMap("background,cite,href,longdesc,src,usemap");
var validAttrs = angular.extend({}, uriAttrs, makeMap(
    'abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,'+
    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,'+
    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,'+
    'scope,scrolling,shape,size,span,start,summary,target,title,type,'+
    'valign,value,vspace,width'));

function makeMap(str) {
  var obj = {}, items = str.split(','), i;
  for (i = 0; i < items.length; i++) obj[items[i]] = true;
  return obj;
}


/**
 * @example
 * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 * @param {string} html string
 * @param {object} handler
 */
function htmlParser( html, handler ) {
  if (typeof html !== 'string') {
    if (html === null || typeof html === 'undefined') {
      html = '';
    } else {
      html = '' + html;
    }
  }
  var index, chars, match, stack = [], last = html, text;
  stack.last = function() { return stack[ stack.length - 1 ]; };

  while ( html ) {
    text = '';
    chars = true;

    // Make sure we're not in a script or style element
    if ( !stack.last() || !specialElements[ stack.last() ] ) {

      // Comment
      if ( html.indexOf("<!--") === 0 ) {
        // comments containing -- are not allowed unless they terminate the comment
        index = html.indexOf("--", 4);

        if ( index >= 0 && html.lastIndexOf("-->", index) === index) {
          if (handler.comment) handler.comment( html.substring( 4, index ) );
          html = html.substring( index + 3 );
          chars = false;
        }
      // DOCTYPE
      } else if ( DOCTYPE_REGEXP.test(html) ) {
        match = html.match( DOCTYPE_REGEXP );

        if ( match ) {
          html = html.replace( match[0], '');
          chars = false;
        }
      // end tag
      } else if ( BEGING_END_TAGE_REGEXP.test(html) ) {
        match = html.match( END_TAG_REGEXP );

        if ( match ) {
          html = html.substring( match[0].length );
          match[0].replace( END_TAG_REGEXP, parseEndTag );
          chars = false;
        }

      // start tag
      } else if ( BEGIN_TAG_REGEXP.test(html) ) {
        match = html.match( START_TAG_REGEXP );

        if ( match ) {
          // We only have a valid start-tag if there is a '>'.
          if ( match[4] ) {
            html = html.substring( match[0].length );
            match[0].replace( START_TAG_REGEXP, parseStartTag );
          }
          chars = false;
        } else {
          // no ending tag found --- this piece should be encoded as an entity.
          text += '<';
          html = html.substring(1);
        }
      }

      if ( chars ) {
        index = html.indexOf("<");

        text += index < 0 ? html : html.substring( 0, index );
        html = index < 0 ? "" : html.substring( index );

        if (handler.chars) handler.chars( decodeEntities(text) );
      }

    } else {
      html = html.replace(new RegExp("(.*)<\\s*\\/\\s*" + stack.last() + "[^>]*>", 'i'),
        function(all, text){
          text = text.replace(COMMENT_REGEXP, "$1").replace(CDATA_REGEXP, "$1");

          if (handler.chars) handler.chars( decodeEntities(text) );

          return "";
      });

      parseEndTag( "", stack.last() );
    }

    if ( html == last ) {
      throw $sanitizeMinErr('badparse', "The sanitizer was unable to parse the following block " +
                                        "of html: {0}", html);
    }
    last = html;
  }

  // Clean up any remaining tags
  parseEndTag();

  function parseStartTag( tag, tagName, rest, unary ) {
    tagName = angular.lowercase(tagName);
    if ( blockElements[ tagName ] ) {
      while ( stack.last() && inlineElements[ stack.last() ] ) {
        parseEndTag( "", stack.last() );
      }
    }

    if ( optionalEndTagElements[ tagName ] && stack.last() == tagName ) {
      parseEndTag( "", tagName );
    }

    unary = voidElements[ tagName ] || !!unary;

    if ( !unary )
      stack.push( tagName );

    var attrs = {};

    rest.replace(ATTR_REGEXP,
      function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
        var value = doubleQuotedValue
          || singleQuotedValue
          || unquotedValue
          || '';

        attrs[name] = decodeEntities(value);
    });
    if (handler.start) handler.start( tagName, attrs, unary );
  }

  function parseEndTag( tag, tagName ) {
    var pos = 0, i;
    tagName = angular.lowercase(tagName);
    if ( tagName )
      // Find the closest opened tag of the same type
      for ( pos = stack.length - 1; pos >= 0; pos-- )
        if ( stack[ pos ] == tagName )
          break;

    if ( pos >= 0 ) {
      // Close all the open elements, up the stack
      for ( i = stack.length - 1; i >= pos; i-- )
        if (handler.end) handler.end( stack[ i ] );

      // Remove the open elements from the stack
      stack.length = pos;
    }
  }
}

var hiddenPre=document.createElement("pre");
var spaceRe = /^(\s*)([\s\S]*?)(\s*)$/;
/**
 * decodes all entities into regular string
 * @param value
 * @returns {string} A string with decoded entities.
 */
function decodeEntities(value) {
  if (!value) { return ''; }

  // Note: IE8 does not preserve spaces at the start/end of innerHTML
  // so we must capture them and reattach them afterward
  var parts = spaceRe.exec(value);
  var spaceBefore = parts[1];
  var spaceAfter = parts[3];
  var content = parts[2];
  if (content) {
    hiddenPre.innerHTML=content.replace(/</g,"&lt;");
    // innerText depends on styling as it doesn't display hidden elements.
    // Therefore, it's better to use textContent not to cause unnecessary
    // reflows. However, IE<9 don't support textContent so the innerText
    // fallback is necessary.
    content = 'textContent' in hiddenPre ?
      hiddenPre.textContent : hiddenPre.innerText;
  }
  return spaceBefore + content + spaceAfter;
}

/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param value
 * @returns {string} escaped text
 */
function encodeEntities(value) {
  return value.
    replace(/&/g, '&amp;').
    replace(SURROGATE_PAIR_REGEXP, function (value) {
      var hi = value.charCodeAt(0);
      var low = value.charCodeAt(1);
      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    }).
    replace(NON_ALPHANUMERIC_REGEXP, function(value){
      return '&#' + value.charCodeAt(0) + ';';
    }).
    replace(/</g, '&lt;').
    replace(/>/g, '&gt;');
}

/**
 * create an HTML/XML writer which writes to buffer
 * @param {Array} buf use buf.jain('') to get out sanitized html string
 * @returns {object} in the form of {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * }
 */
function htmlSanitizeWriter(buf, uriValidator){
  var ignore = false;
  var out = angular.bind(buf, buf.push);
  return {
    start: function(tag, attrs, unary){
      tag = angular.lowercase(tag);
      if (!ignore && specialElements[tag]) {
        ignore = tag;
      }
      if (!ignore && validElements[tag] === true) {
        out('<');
        out(tag);
        angular.forEach(attrs, function(value, key){
          var lkey=angular.lowercase(key);
          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
          if (validAttrs[lkey] === true &&
            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
            out(' ');
            out(key);
            out('="');
            out(encodeEntities(value));
            out('"');
          }
        });
        out(unary ? '/>' : '>');
      }
    },
    end: function(tag){
        tag = angular.lowercase(tag);
        if (!ignore && validElements[tag] === true) {
          out('</');
          out(tag);
          out('>');
        }
        if (tag == ignore) {
          ignore = false;
        }
      },
    chars: function(chars){
        if (!ignore) {
          out(encodeEntities(chars));
        }
      }
  };
}


// define ngSanitize module and register $sanitize service
angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);

/* global sanitizeText: false */

/**
 * @ngdoc filter
 * @name linky
 * @kind function
 *
 * @description
 * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and
 * plain email address links.
 *
 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
 *
 * @param {string} text Input text.
 * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.
 * @returns {string} Html-linkified text.
 *
 * @usage
   <span ng-bind-html="linky_expression | linky"></span>
 *
 * @example
   <example module="linkyExample" deps="angular-sanitize.js">
     <file name="index.html">
       <script>
         angular.module('linkyExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.snippet =
               'Pretty text with some links:\n'+
               'http://angularjs.org/,\n'+
               'mailto:us@somewhere.org,\n'+
               'another@somewhere.org,\n'+
               'and one more: ftp://127.0.0.1/.';
             $scope.snippetWithTarget = 'http://angularjs.org/';
           }]);
       </script>
       <div ng-controller="ExampleController">
       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Filter</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="linky-filter">
           <td>linky filter</td>
           <td>
             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
           </td>
           <td>
             <div ng-bind-html="snippet | linky"></div>
           </td>
         </tr>
         <tr id="linky-target">
          <td>linky target</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithTarget | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithTarget | linky:'_blank'"></div>
          </td>
         </tr>
         <tr id="escaped-html">
           <td>no filter</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
       });

       it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
       });

       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

       it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithTarget | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });
     </file>
   </example>
 */
angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
  var LINKY_URL_REGEXP =
        /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"]/,
      MAILTO_REGEXP = /^mailto:/;

  return function(text, target) {
    if (!text) return text;
    var match;
    var raw = text;
    var html = [];
    var url;
    var i;
    while ((match = raw.match(LINKY_URL_REGEXP))) {
      // We can not end in these as they are sometimes found at the end of the sentence
      url = match[0];
      // if we did not match ftp/http/mailto then assume mailto
      if (match[2] == match[3]) url = 'mailto:' + url;
      i = match.index;
      addText(raw.substr(0, i));
      addLink(url, match[0].replace(MAILTO_REGEXP, ''));
      raw = raw.substring(i + match[0].length);
    }
    addText(raw);
    return $sanitize(html.join(''));

    function addText(text) {
      if (!text) {
        return;
      }
      html.push(sanitizeText(text));
    }

    function addLink(url, text) {
      html.push('<a ');
      if (angular.isDefined(target)) {
        html.push('target="');
        html.push(target);
        html.push('" ');
      }
      html.push('href="');
      html.push(url);
      html.push('">');
      addText(text);
      html.push('</a>');
    }
  };
}]);


})(window, window.angular);

/**
 * @license AngularJS v1.3.8-build.3697+sha.f297aa5
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {

'use strict';

/**
 * @ngdoc object
 * @name angular.mock
 * @description
 *
 * Namespace from 'angular-mocks.js' which contains testing related code.
 */
angular.mock = {};

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 *
 * @description
 * This service is a mock implementation of {@link ng.$browser}. It provides fake
 * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,
 * cookies, etc...
 *
 * The api of this service is the same as that of the real {@link ng.$browser $browser}, except
 * that there are several helper methods available which can be used in tests.
 */
angular.mock.$BrowserProvider = function() {
  this.$get = function() {
    return new angular.mock.$Browser();
  };
};

angular.mock.$Browser = function() {
  var self = this;

  this.isMock = true;
  self.$$url = "http://server/";
  self.$$lastUrl = self.$$url; // used by url polling fn
  self.pollFns = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = angular.noop;
  self.$$incOutstandingRequestCount = angular.noop;


  // register url polling fn

  self.onUrlChange = function(listener) {
    self.pollFns.push(
      function() {
        if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {
          self.$$lastUrl = self.$$url;
          self.$$lastState = self.$$state;
          listener(self.$$url, self.$$state);
        }
      }
    );

    return listener;
  };

  self.$$checkUrlChange = angular.noop;

  self.cookieHash = {};
  self.lastCookieHash = {};
  self.deferredFns = [];
  self.deferredNextId = 0;

  self.defer = function(fn, delay) {
    delay = delay || 0;
    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});
    self.deferredFns.sort(function(a, b) { return a.time - b.time;});
    return self.deferredNextId++;
  };


  /**
   * @name $browser#defer.now
   *
   * @description
   * Current milliseconds mock time.
   */
  self.defer.now = 0;


  self.defer.cancel = function(deferId) {
    var fnIndex;

    angular.forEach(self.deferredFns, function(fn, index) {
      if (fn.id === deferId) fnIndex = index;
    });

    if (fnIndex !== undefined) {
      self.deferredFns.splice(fnIndex, 1);
      return true;
    }

    return false;
  };


  /**
   * @name $browser#defer.flush
   *
   * @description
   * Flushes all pending requests and executes the defer callbacks.
   *
   * @param {number=} number of milliseconds to flush. See {@link #defer.now}
   */
  self.defer.flush = function(delay) {
    if (angular.isDefined(delay)) {
      self.defer.now += delay;
    } else {
      if (self.deferredFns.length) {
        self.defer.now = self.deferredFns[self.deferredFns.length - 1].time;
      } else {
        throw new Error('No deferred tasks to be flushed');
      }
    }

    while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {
      self.deferredFns.shift().fn();
    }
  };

  self.$$baseHref = '/';
  self.baseHref = function() {
    return this.$$baseHref;
  };
};
angular.mock.$Browser.prototype = {

/**
  * @name $browser#poll
  *
  * @description
  * run all fns in pollFns
  */
  poll: function poll() {
    angular.forEach(this.pollFns, function(pollFn) {
      pollFn();
    });
  },

  addPollFn: function(pollFn) {
    this.pollFns.push(pollFn);
    return pollFn;
  },

  url: function(url, replace, state) {
    if (angular.isUndefined(state)) {
      state = null;
    }
    if (url) {
      this.$$url = url;
      // Native pushState serializes & copies the object; simulate it.
      this.$$state = angular.copy(state);
      return this;
    }

    return this.$$url;
  },

  state: function() {
    return this.$$state;
  },

  cookies:  function(name, value) {
    if (name) {
      if (angular.isUndefined(value)) {
        delete this.cookieHash[name];
      } else {
        if (angular.isString(value) &&       //strings only
            value.length <= 4096) {          //strict cookie storage limits
          this.cookieHash[name] = value;
        }
      }
    } else {
      if (!angular.equals(this.cookieHash, this.lastCookieHash)) {
        this.lastCookieHash = angular.copy(this.cookieHash);
        this.cookieHash = angular.copy(this.cookieHash);
      }
      return this.cookieHash;
    }
  },

  notifyWhenNoOutstandingRequests: function(fn) {
    fn();
  }
};


/**
 * @ngdoc provider
 * @name $exceptionHandlerProvider
 *
 * @description
 * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors
 * passed to the `$exceptionHandler`.
 */

/**
 * @ngdoc service
 * @name $exceptionHandler
 *
 * @description
 * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed
 * to it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration
 * information.
 *
 *
 * ```js
 *   describe('$exceptionHandlerProvider', function() {
 *
 *     it('should capture log messages and exceptions', function() {
 *
 *       module(function($exceptionHandlerProvider) {
 *         $exceptionHandlerProvider.mode('log');
 *       });
 *
 *       inject(function($log, $exceptionHandler, $timeout) {
 *         $timeout(function() { $log.log(1); });
 *         $timeout(function() { $log.log(2); throw 'banana peel'; });
 *         $timeout(function() { $log.log(3); });
 *         expect($exceptionHandler.errors).toEqual([]);
 *         expect($log.assertEmpty());
 *         $timeout.flush();
 *         expect($exceptionHandler.errors).toEqual(['banana peel']);
 *         expect($log.log.logs).toEqual([[1], [2], [3]]);
 *       });
 *     });
 *   });
 * ```
 */

angular.mock.$ExceptionHandlerProvider = function() {
  var handler;

  /**
   * @ngdoc method
   * @name $exceptionHandlerProvider#mode
   *
   * @description
   * Sets the logging mode.
   *
   * @param {string} mode Mode of operation, defaults to `rethrow`.
   *
   *   - `rethrow`: If any errors are passed to the handler in tests, it typically means that there
   *                is a bug in the application or test, so this mock will make these tests fail.
   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`
   *            mode stores an array of errors in `$exceptionHandler.errors`, to allow later
   *            assertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and
   *            {@link ngMock.$log#reset reset()}
   */
  this.mode = function(mode) {
    switch (mode) {
      case 'rethrow':
        handler = function(e) {
          throw e;
        };
        break;
      case 'log':
        var errors = [];

        handler = function(e) {
          if (arguments.length == 1) {
            errors.push(e);
          } else {
            errors.push([].slice.call(arguments, 0));
          }
        };

        handler.errors = errors;
        break;
      default:
        throw new Error("Unknown mode '" + mode + "', only 'log'/'rethrow' modes are allowed!");
    }
  };

  this.$get = function() {
    return handler;
  };

  this.mode('rethrow');
};


/**
 * @ngdoc service
 * @name $log
 *
 * @description
 * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays
 * (one array per logging level). These arrays are exposed as `logs` property of each of the
 * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.
 *
 */
angular.mock.$LogProvider = function() {
  var debug = true;

  function concat(array1, array2, index) {
    return array1.concat(Array.prototype.slice.call(array2, index));
  }

  this.debugEnabled = function(flag) {
    if (angular.isDefined(flag)) {
      debug = flag;
      return this;
    } else {
      return debug;
    }
  };

  this.$get = function() {
    var $log = {
      log: function() { $log.log.logs.push(concat([], arguments, 0)); },
      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },
      info: function() { $log.info.logs.push(concat([], arguments, 0)); },
      error: function() { $log.error.logs.push(concat([], arguments, 0)); },
      debug: function() {
        if (debug) {
          $log.debug.logs.push(concat([], arguments, 0));
        }
      }
    };

    /**
     * @ngdoc method
     * @name $log#reset
     *
     * @description
     * Reset all of the logging arrays to empty.
     */
    $log.reset = function() {
      /**
       * @ngdoc property
       * @name $log#log.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#log `log()`}.
       *
       * @example
       * ```js
       * $log.log('Some Log');
       * var first = $log.log.logs.unshift();
       * ```
       */
      $log.log.logs = [];
      /**
       * @ngdoc property
       * @name $log#info.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#info `info()`}.
       *
       * @example
       * ```js
       * $log.info('Some Info');
       * var first = $log.info.logs.unshift();
       * ```
       */
      $log.info.logs = [];
      /**
       * @ngdoc property
       * @name $log#warn.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#warn `warn()`}.
       *
       * @example
       * ```js
       * $log.warn('Some Warning');
       * var first = $log.warn.logs.unshift();
       * ```
       */
      $log.warn.logs = [];
      /**
       * @ngdoc property
       * @name $log#error.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#error `error()`}.
       *
       * @example
       * ```js
       * $log.error('Some Error');
       * var first = $log.error.logs.unshift();
       * ```
       */
      $log.error.logs = [];
        /**
       * @ngdoc property
       * @name $log#debug.logs
       *
       * @description
       * Array of messages logged using {@link ng.$log#debug `debug()`}.
       *
       * @example
       * ```js
       * $log.debug('Some Error');
       * var first = $log.debug.logs.unshift();
       * ```
       */
      $log.debug.logs = [];
    };

    /**
     * @ngdoc method
     * @name $log#assertEmpty
     *
     * @description
     * Assert that all of the logging methods have no logged messages. If any messages are present,
     * an exception is thrown.
     */
    $log.assertEmpty = function() {
      var errors = [];
      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {
        angular.forEach($log[logLevel].logs, function(log) {
          angular.forEach(log, function(logItem) {
            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\n' +
                        (logItem.stack || ''));
          });
        });
      });
      if (errors.length) {
        errors.unshift("Expected $log to be empty! Either a message was logged unexpectedly, or " +
          "an expected log message was not checked and removed:");
        errors.push('');
        throw new Error(errors.join('\n---------\n'));
      }
    };

    $log.reset();
    return $log;
  };
};


/**
 * @ngdoc service
 * @name $interval
 *
 * @description
 * Mock implementation of the $interval service.
 *
 * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
 * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
 * time.
 *
 * @param {function()} fn A function that should be called repeatedly.
 * @param {number} delay Number of milliseconds between each function call.
 * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
 *   indefinitely.
 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
 * @returns {promise} A promise which will be notified on each iteration.
 */
angular.mock.$IntervalProvider = function() {
  this.$get = ['$browser', '$rootScope', '$q', '$$q',
       function($browser,   $rootScope,   $q,   $$q) {
    var repeatFns = [],
        nextRepeatId = 0,
        now = 0;

    var $interval = function(fn, delay, count, invokeApply) {
      var iteration = 0,
          skipApply = (angular.isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = (angular.isDefined(count)) ? count : 0;
      promise.then(null, null, fn);

      promise.$$intervalId = nextRepeatId;

      function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          var fnIndex;
          deferred.resolve(iteration);

          angular.forEach(repeatFns, function(fn, index) {
            if (fn.id === promise.$$intervalId) fnIndex = index;
          });

          if (fnIndex !== undefined) {
            repeatFns.splice(fnIndex, 1);
          }
        }

        if (skipApply) {
          $browser.defer.flush();
        } else {
          $rootScope.$apply();
        }
      }

      repeatFns.push({
        nextTime:(now + delay),
        delay: delay,
        fn: tick,
        id: nextRepeatId,
        deferred: deferred
      });
      repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});

      nextRepeatId++;
      return promise;
    };
    /**
     * @ngdoc method
     * @name $interval#cancel
     *
     * @description
     * Cancels a task associated with the `promise`.
     *
     * @param {promise} promise A promise from calling the `$interval` function.
     * @returns {boolean} Returns `true` if the task was successfully cancelled.
     */
    $interval.cancel = function(promise) {
      if (!promise) return false;
      var fnIndex;

      angular.forEach(repeatFns, function(fn, index) {
        if (fn.id === promise.$$intervalId) fnIndex = index;
      });

      if (fnIndex !== undefined) {
        repeatFns[fnIndex].deferred.reject('canceled');
        repeatFns.splice(fnIndex, 1);
        return true;
      }

      return false;
    };

    /**
     * @ngdoc method
     * @name $interval#flush
     * @description
     *
     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.
     *
     * @param {number=} millis maximum timeout amount to flush up until.
     *
     * @return {number} The amount of time moved forward.
     */
    $interval.flush = function(millis) {
      now += millis;
      while (repeatFns.length && repeatFns[0].nextTime <= now) {
        var task = repeatFns[0];
        task.fn();
        task.nextTime += task.delay;
        repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});
      }
      return millis;
    };

    return $interval;
  }];
};


/* jshint -W101 */
/* The R_ISO8061_STR regex is never going to fit into the 100 char limit!
 * This directive should go inside the anonymous function but a bug in JSHint means that it would
 * not be enacted early enough to prevent the warning.
 */
var R_ISO8061_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?:\:?(\d\d)(?:\:?(\d\d)(?:\.(\d{3}))?)?)?(Z|([+-])(\d\d):?(\d\d)))?$/;

function jsonStringToDate(string) {
  var match;
  if (match = string.match(R_ISO8061_STR)) {
    var date = new Date(0),
        tzHour = 0,
        tzMin  = 0;
    if (match[9]) {
      tzHour = int(match[9] + match[10]);
      tzMin = int(match[9] + match[11]);
    }
    date.setUTCFullYear(int(match[1]), int(match[2]) - 1, int(match[3]));
    date.setUTCHours(int(match[4] || 0) - tzHour,
                     int(match[5] || 0) - tzMin,
                     int(match[6] || 0),
                     int(match[7] || 0));
    return date;
  }
  return string;
}

function int(str) {
  return parseInt(str, 10);
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while (num.length < digits) num = '0' + num;
  if (trim)
    num = num.substr(num.length - digits);
  return neg + num;
}


/**
 * @ngdoc type
 * @name angular.mock.TzDate
 * @description
 *
 * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.
 *
 * Mock of the Date type which has its timezone specified via constructor arg.
 *
 * The main purpose is to create Date-like instances with timezone fixed to the specified timezone
 * offset, so that we can test code that depends on local timezone settings without dependency on
 * the time zone settings of the machine where the code is running.
 *
 * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)
 * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*
 *
 * @example
 * !!!! WARNING !!!!!
 * This is not a complete Date object so only methods that were implemented can be called safely.
 * To make matters worse, TzDate instances inherit stuff from Date via a prototype.
 *
 * We do our best to intercept calls to "unimplemented" methods, but since the list of methods is
 * incomplete we might be missing some non-standard methods. This can result in errors like:
 * "Date.prototype.foo called on incompatible Object".
 *
 * ```js
 * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');
 * newYearInBratislava.getTimezoneOffset() => -60;
 * newYearInBratislava.getFullYear() => 2010;
 * newYearInBratislava.getMonth() => 0;
 * newYearInBratislava.getDate() => 1;
 * newYearInBratislava.getHours() => 0;
 * newYearInBratislava.getMinutes() => 0;
 * newYearInBratislava.getSeconds() => 0;
 * ```
 *
 */
angular.mock.TzDate = function(offset, timestamp) {
  var self = new Date(0);
  if (angular.isString(timestamp)) {
    var tsStr = timestamp;

    self.origDate = jsonStringToDate(timestamp);

    timestamp = self.origDate.getTime();
    if (isNaN(timestamp))
      throw {
        name: "Illegal Argument",
        message: "Arg '" + tsStr + "' passed into TzDate constructor is not a valid date string"
      };
  } else {
    self.origDate = new Date(timestamp);
  }

  var localOffset = new Date(timestamp).getTimezoneOffset();
  self.offsetDiff = localOffset * 60 * 1000 - offset * 1000 * 60 * 60;
  self.date = new Date(timestamp + self.offsetDiff);

  self.getTime = function() {
    return self.date.getTime() - self.offsetDiff;
  };

  self.toLocaleDateString = function() {
    return self.date.toLocaleDateString();
  };

  self.getFullYear = function() {
    return self.date.getFullYear();
  };

  self.getMonth = function() {
    return self.date.getMonth();
  };

  self.getDate = function() {
    return self.date.getDate();
  };

  self.getHours = function() {
    return self.date.getHours();
  };

  self.getMinutes = function() {
    return self.date.getMinutes();
  };

  self.getSeconds = function() {
    return self.date.getSeconds();
  };

  self.getMilliseconds = function() {
    return self.date.getMilliseconds();
  };

  self.getTimezoneOffset = function() {
    return offset * 60;
  };

  self.getUTCFullYear = function() {
    return self.origDate.getUTCFullYear();
  };

  self.getUTCMonth = function() {
    return self.origDate.getUTCMonth();
  };

  self.getUTCDate = function() {
    return self.origDate.getUTCDate();
  };

  self.getUTCHours = function() {
    return self.origDate.getUTCHours();
  };

  self.getUTCMinutes = function() {
    return self.origDate.getUTCMinutes();
  };

  self.getUTCSeconds = function() {
    return self.origDate.getUTCSeconds();
  };

  self.getUTCMilliseconds = function() {
    return self.origDate.getUTCMilliseconds();
  };

  self.getDay = function() {
    return self.date.getDay();
  };

  // provide this method only on browsers that already have it
  if (self.toISOString) {
    self.toISOString = function() {
      return padNumber(self.origDate.getUTCFullYear(), 4) + '-' +
            padNumber(self.origDate.getUTCMonth() + 1, 2) + '-' +
            padNumber(self.origDate.getUTCDate(), 2) + 'T' +
            padNumber(self.origDate.getUTCHours(), 2) + ':' +
            padNumber(self.origDate.getUTCMinutes(), 2) + ':' +
            padNumber(self.origDate.getUTCSeconds(), 2) + '.' +
            padNumber(self.origDate.getUTCMilliseconds(), 3) + 'Z';
    };
  }

  //hide all methods not implemented in this mock that the Date prototype exposes
  var unimplementedMethods = ['getUTCDay',
      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',
      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',
      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',
      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',
      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];

  angular.forEach(unimplementedMethods, function(methodName) {
    self[methodName] = function() {
      throw new Error("Method '" + methodName + "' is not implemented in the TzDate mock");
    };
  });

  return self;
};

//make "tzDateInstance instanceof Date" return true
angular.mock.TzDate.prototype = Date.prototype;
/* jshint +W101 */

angular.mock.animate = angular.module('ngAnimateMock', ['ng'])

  .config(['$provide', function($provide) {

    var reflowQueue = [];
    $provide.value('$$animateReflow', function(fn) {
      var index = reflowQueue.length;
      reflowQueue.push(fn);
      return function cancel() {
        reflowQueue.splice(index, 1);
      };
    });

    $provide.decorator('$animate', ['$delegate', '$$asyncCallback', '$timeout', '$browser',
                            function($delegate,   $$asyncCallback,   $timeout,   $browser) {
      var animate = {
        queue: [],
        cancel: $delegate.cancel,
        enabled: $delegate.enabled,
        triggerCallbackEvents: function() {
          $$asyncCallback.flush();
        },
        triggerCallbackPromise: function() {
          $timeout.flush(0);
        },
        triggerCallbacks: function() {
          this.triggerCallbackEvents();
          this.triggerCallbackPromise();
        },
        triggerReflow: function() {
          angular.forEach(reflowQueue, function(fn) {
            fn();
          });
          reflowQueue = [];
        }
      };

      angular.forEach(
        ['animate','enter','leave','move','addClass','removeClass','setClass'], function(method) {
        animate[method] = function() {
          animate.queue.push({
            event: method,
            element: arguments[0],
            options: arguments[arguments.length - 1],
            args: arguments
          });
          return $delegate[method].apply($delegate, arguments);
        };
      });

      return animate;
    }]);

  }]);


/**
 * @ngdoc function
 * @name angular.mock.dump
 * @description
 *
 * *NOTE*: this is not an injectable instance, just a globally available function.
 *
 * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for
 * debugging.
 *
 * This method is also available on window, where it can be used to display objects on debug
 * console.
 *
 * @param {*} object - any object to turn into string.
 * @return {string} a serialized string of the argument
 */
angular.mock.dump = function(object) {
  return serialize(object);

  function serialize(object) {
    var out;

    if (angular.isElement(object)) {
      object = angular.element(object);
      out = angular.element('<div></div>');
      angular.forEach(object, function(element) {
        out.append(angular.element(element).clone());
      });
      out = out.html();
    } else if (angular.isArray(object)) {
      out = [];
      angular.forEach(object, function(o) {
        out.push(serialize(o));
      });
      out = '[ ' + out.join(', ') + ' ]';
    } else if (angular.isObject(object)) {
      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {
        out = serializeScope(object);
      } else if (object instanceof Error) {
        out = object.stack || ('' + object.name + ': ' + object.message);
      } else {
        // TODO(i): this prevents methods being logged,
        // we should have a better way to serialize objects
        out = angular.toJson(object, true);
      }
    } else {
      out = String(object);
    }

    return out;
  }

  function serializeScope(scope, offset) {
    offset = offset ||  '  ';
    var log = [offset + 'Scope(' + scope.$id + '): {'];
    for (var key in scope) {
      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\$|this)/)) {
        log.push('  ' + key + ': ' + angular.toJson(scope[key]));
      }
    }
    var child = scope.$$childHead;
    while (child) {
      log.push(serializeScope(child, offset + '  '));
      child = child.$$nextSibling;
    }
    log.push('}');
    return log.join('\n' + offset);
  }
};

/**
 * @ngdoc service
 * @name $httpBackend
 * @description
 * Fake HTTP backend implementation suitable for unit testing applications that use the
 * {@link ng.$http $http service}.
 *
 * *Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less
 * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.
 *
 * During unit testing, we want our unit tests to run quickly and have no external dependencies so
 * we don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or
 * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is
 * to verify whether a certain request has been sent or not, or alternatively just let the
 * application make requests, respond with pre-trained responses and assert that the end result is
 * what we expect it to be.
 *
 * This mock implementation can be used to respond with static or dynamic responses via the
 * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).
 *
 * When an Angular application needs some data from a server, it calls the $http service, which
 * sends the request to a real server using $httpBackend service. With dependency injection, it is
 * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify
 * the requests and respond with some testing data without sending a request to a real server.
 *
 * There are two ways to specify what test data should be returned as http responses by the mock
 * backend when the code under test makes http requests:
 *
 * - `$httpBackend.expect` - specifies a request expectation
 * - `$httpBackend.when` - specifies a backend definition
 *
 *
 * # Request Expectations vs Backend Definitions
 *
 * Request expectations provide a way to make assertions about requests made by the application and
 * to define responses for those requests. The test will fail if the expected requests are not made
 * or they are made in the wrong order.
 *
 * Backend definitions allow you to define a fake backend for your application which doesn't assert
 * if a particular request was made or not, it just returns a trained response if a request is made.
 * The test will pass whether or not the request gets made during testing.
 *
 *
 * <table class="table">
 *   <tr><th width="220px"></th><th>Request expectations</th><th>Backend definitions</th></tr>
 *   <tr>
 *     <th>Syntax</th>
 *     <td>.expect(...).respond(...)</td>
 *     <td>.when(...).respond(...)</td>
 *   </tr>
 *   <tr>
 *     <th>Typical usage</th>
 *     <td>strict unit tests</td>
 *     <td>loose (black-box) unit testing</td>
 *   </tr>
 *   <tr>
 *     <th>Fulfills multiple requests</th>
 *     <td>NO</td>
 *     <td>YES</td>
 *   </tr>
 *   <tr>
 *     <th>Order of requests matters</th>
 *     <td>YES</td>
 *     <td>NO</td>
 *   </tr>
 *   <tr>
 *     <th>Request required</th>
 *     <td>YES</td>
 *     <td>NO</td>
 *   </tr>
 *   <tr>
 *     <th>Response required</th>
 *     <td>optional (see below)</td>
 *     <td>YES</td>
 *   </tr>
 * </table>
 *
 * In cases where both backend definitions and request expectations are specified during unit
 * testing, the request expectations are evaluated first.
 *
 * If a request expectation has no response specified, the algorithm will search your backend
 * definitions for an appropriate response.
 *
 * If a request didn't match any expectation or if the expectation doesn't have the response
 * defined, the backend definitions are evaluated in sequential order to see if any of them match
 * the request. The response from the first matched definition is returned.
 *
 *
 * # Flushing HTTP requests
 *
 * The $httpBackend used in production always responds to requests asynchronously. If we preserved
 * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,
 * to follow and to maintain. But neither can the testing mock respond synchronously; that would
 * change the execution of the code under test. For this reason, the mock $httpBackend has a
 * `flush()` method, which allows the test to explicitly flush pending requests. This preserves
 * the async api of the backend, while allowing the test to execute synchronously.
 *
 *
 * # Unit testing with mock $httpBackend
 * The following code shows how to setup and use the mock backend when unit testing a controller.
 * First we create the controller under test:
 *
  ```js
  // The module code
  angular
    .module('MyApp', [])
    .controller('MyController', MyController);

  // The controller code
  function MyController($scope, $http) {
    var authToken;

    $http.get('/auth.py').success(function(data, status, headers) {
      authToken = headers('A-Token');
      $scope.user = data;
    });

    $scope.saveMessage = function(message) {
      var headers = { 'Authorization': authToken };
      $scope.status = 'Saving...';

      $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {
        $scope.status = '';
      }).error(function() {
        $scope.status = 'ERROR!';
      });
    };
  }
  ```
 *
 * Now we setup the mock backend and create the test specs:
 *
  ```js
    // testing controller
    describe('MyController', function() {
       var $httpBackend, $rootScope, createController, authRequestHandler;

       // Set up the module
       beforeEach(module('MyApp'));

       beforeEach(inject(function($injector) {
         // Set up the mock http service responses
         $httpBackend = $injector.get('$httpBackend');
         // backend definition common for all tests
         authRequestHandler = $httpBackend.when('GET', '/auth.py')
                                .respond({userId: 'userX'}, {'A-Token': 'xxx'});

         // Get hold of a scope (i.e. the root scope)
         $rootScope = $injector.get('$rootScope');
         // The $controller service is used to create instances of controllers
         var $controller = $injector.get('$controller');

         createController = function() {
           return $controller('MyController', {'$scope' : $rootScope });
         };
       }));


       afterEach(function() {
         $httpBackend.verifyNoOutstandingExpectation();
         $httpBackend.verifyNoOutstandingRequest();
       });


       it('should fetch authentication token', function() {
         $httpBackend.expectGET('/auth.py');
         var controller = createController();
         $httpBackend.flush();
       });


       it('should fail authentication', function() {

         // Notice how you can change the response even after it was set
         authRequestHandler.respond(401, '');

         $httpBackend.expectGET('/auth.py');
         var controller = createController();
         $httpBackend.flush();
         expect($rootScope.status).toBe('Failed...');
       });


       it('should send msg to server', function() {
         var controller = createController();
         $httpBackend.flush();

         // now you don’t care about the authentication, but
         // the controller will still send the request and
         // $httpBackend will respond without you having to
         // specify the expectation and response for this request

         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');
         $rootScope.saveMessage('message content');
         expect($rootScope.status).toBe('Saving...');
         $httpBackend.flush();
         expect($rootScope.status).toBe('');
       });


       it('should send auth header', function() {
         var controller = createController();
         $httpBackend.flush();

         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {
           // check if the header was send, if it wasn't the expectation won't
           // match the request and the test will fail
           return headers['Authorization'] == 'xxx';
         }).respond(201, '');

         $rootScope.saveMessage('whatever');
         $httpBackend.flush();
       });
    });
   ```
 */
angular.mock.$HttpBackendProvider = function() {
  this.$get = ['$rootScope', '$timeout', createHttpBackendMock];
};

/**
 * General factory function for $httpBackend mock.
 * Returns instance for unit testing (when no arguments specified):
 *   - passing through is disabled
 *   - auto flushing is disabled
 *
 * Returns instance for e2e testing (when `$delegate` and `$browser` specified):
 *   - passing through (delegating request to real backend) is enabled
 *   - auto flushing is enabled
 *
 * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)
 * @param {Object=} $browser Auto-flushing enabled if specified
 * @return {Object} Instance of $httpBackend mock
 */
function createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {
  var definitions = [],
      expectations = [],
      responses = [],
      responsesPush = angular.bind(responses, responses.push),
      copy = angular.copy;

  function createResponse(status, data, headers, statusText) {
    if (angular.isFunction(status)) return status;

    return function() {
      return angular.isNumber(status)
          ? [status, data, headers, statusText]
          : [200, status, data, headers];
    };
  }

  // TODO(vojta): change params to: method, url, data, headers, callback
  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials) {
    var xhr = new MockXhr(),
        expectation = expectations[0],
        wasExpected = false;

    function prettyPrint(data) {
      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)
          ? data
          : angular.toJson(data);
    }

    function wrapResponse(wrapped) {
      if (!$browser && timeout) {
        timeout.then ? timeout.then(handleTimeout) : $timeout(handleTimeout, timeout);
      }

      return handleResponse;

      function handleResponse() {
        var response = wrapped.response(method, url, data, headers);
        xhr.$$respHeaders = response[2];
        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),
                 copy(response[3] || ''));
      }

      function handleTimeout() {
        for (var i = 0, ii = responses.length; i < ii; i++) {
          if (responses[i] === handleResponse) {
            responses.splice(i, 1);
            callback(-1, undefined, '');
            break;
          }
        }
      }
    }

    if (expectation && expectation.match(method, url)) {
      if (!expectation.matchData(data))
        throw new Error('Expected ' + expectation + ' with different data\n' +
            'EXPECTED: ' + prettyPrint(expectation.data) + '\nGOT:      ' + data);

      if (!expectation.matchHeaders(headers))
        throw new Error('Expected ' + expectation + ' with different headers\n' +
                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\nGOT:      ' +
                        prettyPrint(headers));

      expectations.shift();

      if (expectation.response) {
        responses.push(wrapResponse(expectation));
        return;
      }
      wasExpected = true;
    }

    var i = -1, definition;
    while ((definition = definitions[++i])) {
      if (definition.match(method, url, data, headers || {})) {
        if (definition.response) {
          // if $browser specified, we do auto flush all requests
          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));
        } else if (definition.passThrough) {
          $delegate(method, url, data, callback, headers, timeout, withCredentials);
        } else throw new Error('No response defined !');
        return;
      }
    }
    throw wasExpected ?
        new Error('No response defined !') :
        new Error('Unexpected request: ' + method + ' ' + url + '\n' +
                  (expectation ? 'Expected ' + expectation : 'No more request expected'));
  }

  /**
   * @ngdoc method
   * @name $httpBackend#when
   * @description
   * Creates a new backend definition.
   *
   * @param {string} method HTTP method.
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
   *   object and returns true if the headers match the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   *
   *  - respond –
   *      `{function([status,] data[, headers, statusText])
   *      | function(function(method, url, data, headers)}`
   *    – The respond method takes a set of static data to be returned or a function that can
   *    return an array containing response status (number), response data (string), response
   *    headers (Object), and the text for the status (string). The respond method returns the
   *    `requestHandler` object for possible overrides.
   */
  $httpBackend.when = function(method, url, data, headers) {
    var definition = new MockHttpExpectation(method, url, data, headers),
        chain = {
          respond: function(status, data, headers, statusText) {
            definition.passThrough = undefined;
            definition.response = createResponse(status, data, headers, statusText);
            return chain;
          }
        };

    if ($browser) {
      chain.passThrough = function() {
        definition.response = undefined;
        definition.passThrough = true;
        return chain;
      };
    }

    definitions.push(definition);
    return chain;
  };

  /**
   * @ngdoc method
   * @name $httpBackend#whenGET
   * @description
   * Creates a new backend definition for GET requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenHEAD
   * @description
   * Creates a new backend definition for HEAD requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenDELETE
   * @description
   * Creates a new backend definition for DELETE requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPOST
   * @description
   * Creates a new backend definition for POST requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenPUT
   * @description
   * Creates a new backend definition for PUT requests.  For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
   *   data string and returns true if the data is as expected.
   * @param {(Object|function(Object))=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#whenJSONP
   * @description
   * Creates a new backend definition for JSONP requests. For more info see `when()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled.
   */
  createShortMethods('when');


  /**
   * @ngdoc method
   * @name $httpBackend#expect
   * @description
   * Creates a new request expectation.
   *
   * @param {string} method HTTP method.
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
   *   object and returns true if the headers match the current expectation.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   *  request is handled. You can save this object for later use and invoke `respond` again in
   *  order to change how a matched request is handled.
   *
   *  - respond –
   *    `{function([status,] data[, headers, statusText])
   *    | function(function(method, url, data, headers)}`
   *    – The respond method takes a set of static data to be returned or a function that can
   *    return an array containing response status (number), response data (string), response
   *    headers (Object), and the text for the status (string). The respond method returns the
   *    `requestHandler` object for possible overrides.
   */
  $httpBackend.expect = function(method, url, data, headers) {
    var expectation = new MockHttpExpectation(method, url, data, headers),
        chain = {
          respond: function(status, data, headers, statusText) {
            expectation.response = createResponse(status, data, headers, statusText);
            return chain;
          }
        };

    expectations.push(expectation);
    return chain;
  };


  /**
   * @ngdoc method
   * @name $httpBackend#expectGET
   * @description
   * Creates a new request expectation for GET requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   * request is handled. You can save this object for later use and invoke `respond` again in
   * order to change how a matched request is handled. See #expect for more info.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectHEAD
   * @description
   * Creates a new request expectation for HEAD requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectDELETE
   * @description
   * Creates a new request expectation for DELETE requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPOST
   * @description
   * Creates a new request expectation for POST requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPUT
   * @description
   * Creates a new request expectation for PUT requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectPATCH
   * @description
   * Creates a new request expectation for PATCH requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
   *  receives data string and returns true if the data is as expected, or Object if request body
   *  is in JSON format.
   * @param {Object=} headers HTTP headers.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */

  /**
   * @ngdoc method
   * @name $httpBackend#expectJSONP
   * @description
   * Creates a new request expectation for JSONP requests. For more info see `expect()`.
   *
   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
   *   and returns true if the url match the current definition.
   * @returns {requestHandler} Returns an object with `respond` method that control how a matched
   *   request is handled. You can save this object for later use and invoke `respond` again in
   *   order to change how a matched request is handled.
   */
  createShortMethods('expect');


  /**
   * @ngdoc method
   * @name $httpBackend#flush
   * @description
   * Flushes all pending requests using the trained responses.
   *
   * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,
   *   all pending requests will be flushed. If there are no pending requests when the flush method
   *   is called an exception is thrown (as this typically a sign of programming error).
   */
  $httpBackend.flush = function(count, digest) {
    if (digest !== false) $rootScope.$digest();
    if (!responses.length) throw new Error('No pending request to flush !');

    if (angular.isDefined(count) && count !== null) {
      while (count--) {
        if (!responses.length) throw new Error('No more pending request to flush !');
        responses.shift()();
      }
    } else {
      while (responses.length) {
        responses.shift()();
      }
    }
    $httpBackend.verifyNoOutstandingExpectation(digest);
  };


  /**
   * @ngdoc method
   * @name $httpBackend#verifyNoOutstandingExpectation
   * @description
   * Verifies that all of the requests defined via the `expect` api were made. If any of the
   * requests were not made, verifyNoOutstandingExpectation throws an exception.
   *
   * Typically, you would call this method following each test case that asserts requests using an
   * "afterEach" clause.
   *
   * ```js
   *   afterEach($httpBackend.verifyNoOutstandingExpectation);
   * ```
   */
  $httpBackend.verifyNoOutstandingExpectation = function(digest) {
    if (digest !== false) $rootScope.$digest();
    if (expectations.length) {
      throw new Error('Unsatisfied requests: ' + expectations.join(', '));
    }
  };


  /**
   * @ngdoc method
   * @name $httpBackend#verifyNoOutstandingRequest
   * @description
   * Verifies that there are no outstanding requests that need to be flushed.
   *
   * Typically, you would call this method following each test case that asserts requests using an
   * "afterEach" clause.
   *
   * ```js
   *   afterEach($httpBackend.verifyNoOutstandingRequest);
   * ```
   */
  $httpBackend.verifyNoOutstandingRequest = function() {
    if (responses.length) {
      throw new Error('Unflushed requests: ' + responses.length);
    }
  };


  /**
   * @ngdoc method
   * @name $httpBackend#resetExpectations
   * @description
   * Resets all request expectations, but preserves all backend definitions. Typically, you would
   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of
   * $httpBackend mock.
   */
  $httpBackend.resetExpectations = function() {
    expectations.length = 0;
    responses.length = 0;
  };

  return $httpBackend;


  function createShortMethods(prefix) {
    angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {
     $httpBackend[prefix + method] = function(url, headers) {
       return $httpBackend[prefix](method, url, undefined, headers);
     };
    });

    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {
      $httpBackend[prefix + method] = function(url, data, headers) {
        return $httpBackend[prefix](method, url, data, headers);
      };
    });
  }
}

function MockHttpExpectation(method, url, data, headers) {

  this.data = data;
  this.headers = headers;

  this.match = function(m, u, d, h) {
    if (method != m) return false;
    if (!this.matchUrl(u)) return false;
    if (angular.isDefined(d) && !this.matchData(d)) return false;
    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;
    return true;
  };

  this.matchUrl = function(u) {
    if (!url) return true;
    if (angular.isFunction(url.test)) return url.test(u);
    if (angular.isFunction(url)) return url(u);
    return url == u;
  };

  this.matchHeaders = function(h) {
    if (angular.isUndefined(headers)) return true;
    if (angular.isFunction(headers)) return headers(h);
    return angular.equals(headers, h);
  };

  this.matchData = function(d) {
    if (angular.isUndefined(data)) return true;
    if (data && angular.isFunction(data.test)) return data.test(d);
    if (data && angular.isFunction(data)) return data(d);
    if (data && !angular.isString(data)) {
      return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));
    }
    return data == d;
  };

  this.toString = function() {
    return method + ' ' + url;
  };
}

function createMockXhr() {
  return new MockXhr();
}

function MockXhr() {

  // hack for testing $http, $httpBackend
  MockXhr.$$lastInstance = this;

  this.open = function(method, url, async) {
    this.$$method = method;
    this.$$url = url;
    this.$$async = async;
    this.$$reqHeaders = {};
    this.$$respHeaders = {};
  };

  this.send = function(data) {
    this.$$data = data;
  };

  this.setRequestHeader = function(key, value) {
    this.$$reqHeaders[key] = value;
  };

  this.getResponseHeader = function(name) {
    // the lookup must be case insensitive,
    // that's why we try two quick lookups first and full scan last
    var header = this.$$respHeaders[name];
    if (header) return header;

    name = angular.lowercase(name);
    header = this.$$respHeaders[name];
    if (header) return header;

    header = undefined;
    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {
      if (!header && angular.lowercase(headerName) == name) header = headerVal;
    });
    return header;
  };

  this.getAllResponseHeaders = function() {
    var lines = [];

    angular.forEach(this.$$respHeaders, function(value, key) {
      lines.push(key + ': ' + value);
    });
    return lines.join('\n');
  };

  this.abort = angular.noop;
}


/**
 * @ngdoc service
 * @name $timeout
 * @description
 *
 * This service is just a simple decorator for {@link ng.$timeout $timeout} service
 * that adds a "flush" and "verifyNoPendingTasks" methods.
 */

angular.mock.$TimeoutDecorator = ['$delegate', '$browser', function($delegate, $browser) {

  /**
   * @ngdoc method
   * @name $timeout#flush
   * @description
   *
   * Flushes the queue of pending tasks.
   *
   * @param {number=} delay maximum timeout amount to flush up until
   */
  $delegate.flush = function(delay) {
    $browser.defer.flush(delay);
  };

  /**
   * @ngdoc method
   * @name $timeout#verifyNoPendingTasks
   * @description
   *
   * Verifies that there are no pending tasks that need to be flushed.
   */
  $delegate.verifyNoPendingTasks = function() {
    if ($browser.deferredFns.length) {
      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +
          formatPendingTasksAsString($browser.deferredFns));
    }
  };

  function formatPendingTasksAsString(tasks) {
    var result = [];
    angular.forEach(tasks, function(task) {
      result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');
    });

    return result.join(', ');
  }

  return $delegate;
}];

angular.mock.$RAFDecorator = ['$delegate', function($delegate) {
  var queue = [];
  var rafFn = function(fn) {
    var index = queue.length;
    queue.push(fn);
    return function() {
      queue.splice(index, 1);
    };
  };

  rafFn.supported = $delegate.supported;

  rafFn.flush = function() {
    if (queue.length === 0) {
      throw new Error('No rAF callbacks present');
    }

    var length = queue.length;
    for (var i = 0; i < length; i++) {
      queue[i]();
    }

    queue = [];
  };

  return rafFn;
}];

angular.mock.$AsyncCallbackDecorator = ['$delegate', function($delegate) {
  var callbacks = [];
  var addFn = function(fn) {
    callbacks.push(fn);
  };
  addFn.flush = function() {
    angular.forEach(callbacks, function(fn) {
      fn();
    });
    callbacks = [];
  };
  return addFn;
}];

/**
 *
 */
angular.mock.$RootElementProvider = function() {
  this.$get = function() {
    return angular.element('<div ng-app></div>');
  };
};

/**
 * @ngdoc module
 * @name ngMock
 * @packageName angular-mocks
 * @description
 *
 * # ngMock
 *
 * The `ngMock` module provides support to inject and mock Angular services into unit tests.
 * In addition, ngMock also extends various core ng services such that they can be
 * inspected and controlled in a synchronous manner within test code.
 *
 *
 * <div doc-module-components="ngMock"></div>
 *
 */
angular.module('ngMock', ['ng']).provider({
  $browser: angular.mock.$BrowserProvider,
  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,
  $log: angular.mock.$LogProvider,
  $interval: angular.mock.$IntervalProvider,
  $httpBackend: angular.mock.$HttpBackendProvider,
  $rootElement: angular.mock.$RootElementProvider
}).config(['$provide', function($provide) {
  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);
  $provide.decorator('$$rAF', angular.mock.$RAFDecorator);
  $provide.decorator('$$asyncCallback', angular.mock.$AsyncCallbackDecorator);
  $provide.decorator('$rootScope', angular.mock.$RootScopeDecorator);
}]);

/**
 * @ngdoc module
 * @name ngMockE2E
 * @module ngMockE2E
 * @packageName angular-mocks
 * @description
 *
 * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.
 * Currently there is only one mock present in this module -
 * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.
 */
angular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {
  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);
}]);

/**
 * @ngdoc service
 * @name $httpBackend
 * @module ngMockE2E
 * @description
 * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of
 * applications that use the {@link ng.$http $http service}.
 *
 * *Note*: For fake http backend implementation suitable for unit testing please see
 * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.
 *
 * This implementation can be used to respond with static or dynamic responses via the `when` api
 * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the
 * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch
 * templates from a webserver).
 *
 * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application
 * is being developed with the real backend api replaced with a mock, it is often desirable for
 * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch
 * templates or static files from the webserver). To configure the backend with this behavior
 * use the `passThrough` request handler of `when` instead of `respond`.
 *
 * Additionally, we don't want to manually have to flush mocked out requests like we do during unit
 * testing. For this reason the e2e $httpBackend flushes mocked out requests
 * automatically, closely simulating the behavior of the XMLHttpRequest object.
 *
 * To setup the application to run with this http backend, you have to create a module that depends
 * on the `ngMockE2E` and your application modules and defines the fake backend:
 *
 * ```js
 *   myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);
 *   myAppDev.run(function($httpBackend) {
 *     phones = [{name: 'phone1'}, {name: 'phone2'}];
 *
 *     // returns the current list of phones
 *     $httpBackend.whenGET('/phones').respond(phones);
 *
 *     // adds a new phone to the phones array
 *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {
 *       var phone = angular.fromJson(data);
 *       phones.push(phone);
 *       return [200, phone, {}];
 *     });
 *     $httpBackend.whenGET(/^\/templates\//).passThrough();
 *     //...
 *   });
 * ```
 *
 * Afterwards, bootstrap your app with this new module.
 */

/**
 * @ngdoc method
 * @name $httpBackend#when
 * @module ngMockE2E
 * @description
 * Creates a new backend definition.
 *
 * @param {string} method HTTP method.
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
 *   object and returns true if the headers match the current definition.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 *
 *  - respond –
 *    `{function([status,] data[, headers, statusText])
 *    | function(function(method, url, data, headers)}`
 *    – The respond method takes a set of static data to be returned or a function that can return
 *    an array containing response status (number), response data (string), response headers
 *    (Object), and the text for the status (string).
 *  - passThrough – `{function()}` – Any request matching a backend definition with
 *    `passThrough` handler will be passed through to the real backend (an XHR request will be made
 *    to the server.)
 *  - Both methods return the `requestHandler` object for possible overrides.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenGET
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for GET requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenHEAD
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for HEAD requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenDELETE
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for DELETE requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPOST
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for POST requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPUT
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for PUT requests.  For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenPATCH
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for PATCH requests.  For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @param {(string|RegExp)=} data HTTP request body.
 * @param {(Object|function(Object))=} headers HTTP headers.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */

/**
 * @ngdoc method
 * @name $httpBackend#whenJSONP
 * @module ngMockE2E
 * @description
 * Creates a new backend definition for JSONP requests. For more info see `when()`.
 *
 * @param {string|RegExp|function(string)} url HTTP url or function that receives the url
 *   and returns true if the url match the current definition.
 * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
 *   control how a matched request is handled. You can save this object for later use and invoke
 *   `respond` or `passThrough` again in order to change how a matched request is handled.
 */
angular.mock.e2e = {};
angular.mock.e2e.$httpBackendDecorator =
  ['$rootScope', '$timeout', '$delegate', '$browser', createHttpBackendMock];


/**
 * @ngdoc type
 * @name $rootScope.Scope
 * @module ngMock
 * @description
 * {@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These
 * methods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when
 * `ngMock` module is loaded.
 *
 * In addition to all the regular `Scope` methods, the following helper methods are available:
 */
angular.mock.$RootScopeDecorator = ['$delegate', function($delegate) {

  var $rootScopePrototype = Object.getPrototypeOf($delegate);

  $rootScopePrototype.$countChildScopes = countChildScopes;
  $rootScopePrototype.$countWatchers = countWatchers;

  return $delegate;

  // ------------------------------------------------------------------------------------------ //

  /**
   * @ngdoc method
   * @name $rootScope.Scope#$countChildScopes
   * @module ngMock
   * @description
   * Counts all the direct and indirect child scopes of the current scope.
   *
   * The current scope is excluded from the count. The count includes all isolate child scopes.
   *
   * @returns {number} Total number of child scopes.
   */
  function countChildScopes() {
    // jshint validthis: true
    var count = 0; // exclude the current scope
    var pendingChildHeads = [this.$$childHead];
    var currentScope;

    while (pendingChildHeads.length) {
      currentScope = pendingChildHeads.shift();

      while (currentScope) {
        count += 1;
        pendingChildHeads.push(currentScope.$$childHead);
        currentScope = currentScope.$$nextSibling;
      }
    }

    return count;
  }


  /**
   * @ngdoc method
   * @name $rootScope.Scope#$countWatchers
   * @module ngMock
   * @description
   * Counts all the watchers of direct and indirect child scopes of the current scope.
   *
   * The watchers of the current scope are included in the count and so are all the watchers of
   * isolate child scopes.
   *
   * @returns {number} Total number of watchers.
   */
  function countWatchers() {
    // jshint validthis: true
    var count = this.$$watchers ? this.$$watchers.length : 0; // include the current scope
    var pendingChildHeads = [this.$$childHead];
    var currentScope;

    while (pendingChildHeads.length) {
      currentScope = pendingChildHeads.shift();

      while (currentScope) {
        count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;
        pendingChildHeads.push(currentScope.$$childHead);
        currentScope = currentScope.$$nextSibling;
      }
    }

    return count;
  }
}];


if (window.jasmine || window.mocha) {

  var currentSpec = null,
      isSpecRunning = function() {
        return !!currentSpec;
      };


  (window.beforeEach || window.setup)(function() {
    currentSpec = this;
  });

  (window.afterEach || window.teardown)(function() {
    var injector = currentSpec.$injector;

    angular.forEach(currentSpec.$modules, function(module) {
      if (module && module.$$hashKey) {
        module.$$hashKey = undefined;
      }
    });

    currentSpec.$injector = null;
    currentSpec.$modules = null;
    currentSpec = null;

    if (injector) {
      injector.get('$rootElement').off();
      injector.get('$browser').pollFns.length = 0;
    }

    // clean up jquery's fragment cache
    angular.forEach(angular.element.fragments, function(val, key) {
      delete angular.element.fragments[key];
    });

    MockXhr.$$lastInstance = null;

    angular.forEach(angular.callbacks, function(val, key) {
      delete angular.callbacks[key];
    });
    angular.callbacks.counter = 0;
  });

  /**
   * @ngdoc function
   * @name angular.mock.module
   * @description
   *
   * *NOTE*: This function is also published on window for easy access.<br>
   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
   *
   * This function registers a module configuration code. It collects the configuration information
   * which will be used when the injector is created by {@link angular.mock.inject inject}.
   *
   * See {@link angular.mock.inject inject} for usage example
   *
   * @param {...(string|Function|Object)} fns any number of modules which are represented as string
   *        aliases or as anonymous module initialization functions. The modules are used to
   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an
   *        object literal is passed they will be registered as values in the module, the key being
   *        the module name and the value being what is returned.
   */
  window.module = angular.mock.module = function() {
    var moduleFns = Array.prototype.slice.call(arguments, 0);
    return isSpecRunning() ? workFn() : workFn;
    /////////////////////
    function workFn() {
      if (currentSpec.$injector) {
        throw new Error('Injector already created, can not register a module!');
      } else {
        var modules = currentSpec.$modules || (currentSpec.$modules = []);
        angular.forEach(moduleFns, function(module) {
          if (angular.isObject(module) && !angular.isArray(module)) {
            modules.push(function($provide) {
              angular.forEach(module, function(value, key) {
                $provide.value(key, value);
              });
            });
          } else {
            modules.push(module);
          }
        });
      }
    }
  };

  /**
   * @ngdoc function
   * @name angular.mock.inject
   * @description
   *
   * *NOTE*: This function is also published on window for easy access.<br>
   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
   *
   * The inject function wraps a function into an injectable function. The inject() creates new
   * instance of {@link auto.$injector $injector} per test, which is then used for
   * resolving references.
   *
   *
   * ## Resolving References (Underscore Wrapping)
   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this
   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable
   * that is declared in the scope of the `describe()` block. Since we would, most likely, want
   * the variable to have the same name of the reference we have a problem, since the parameter
   * to the `inject()` function would hide the outer variable.
   *
   * To help with this, the injected parameters can, optionally, be enclosed with underscores.
   * These are ignored by the injector when the reference name is resolved.
   *
   * For example, the parameter `_myService_` would be resolved as the reference `myService`.
   * Since it is available in the function body as _myService_, we can then assign it to a variable
   * defined in an outer scope.
   *
   * ```
   * // Defined out reference variable outside
   * var myService;
   *
   * // Wrap the parameter in underscores
   * beforeEach( inject( function(_myService_){
   *   myService = _myService_;
   * }));
   *
   * // Use myService in a series of tests.
   * it('makes use of myService', function() {
   *   myService.doStuff();
   * });
   *
   * ```
   *
   * See also {@link angular.mock.module angular.mock.module}
   *
   * ## Example
   * Example of what a typical jasmine tests looks like with the inject method.
   * ```js
   *
   *   angular.module('myApplicationModule', [])
   *       .value('mode', 'app')
   *       .value('version', 'v1.0.1');
   *
   *
   *   describe('MyApp', function() {
   *
   *     // You need to load modules that you want to test,
   *     // it loads only the "ng" module by default.
   *     beforeEach(module('myApplicationModule'));
   *
   *
   *     // inject() is used to inject arguments of all given functions
   *     it('should provide a version', inject(function(mode, version) {
   *       expect(version).toEqual('v1.0.1');
   *       expect(mode).toEqual('app');
   *     }));
   *
   *
   *     // The inject and module method can also be used inside of the it or beforeEach
   *     it('should override a version and test the new version is injected', function() {
   *       // module() takes functions or strings (module aliases)
   *       module(function($provide) {
   *         $provide.value('version', 'overridden'); // override version here
   *       });
   *
   *       inject(function(version) {
   *         expect(version).toEqual('overridden');
   *       });
   *     });
   *   });
   *
   * ```
   *
   * @param {...Function} fns any number of functions which will be injected using the injector.
   */



  var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {
    this.message = e.message;
    this.name = e.name;
    if (e.line) this.line = e.line;
    if (e.sourceId) this.sourceId = e.sourceId;
    if (e.stack && errorForStack)
      this.stack = e.stack + '\n' + errorForStack.stack;
    if (e.stackArray) this.stackArray = e.stackArray;
  };
  ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;

  window.inject = angular.mock.inject = function() {
    var blockFns = Array.prototype.slice.call(arguments, 0);
    var errorForStack = new Error('Declaration Location');
    return isSpecRunning() ? workFn.call(currentSpec) : workFn;
    /////////////////////
    function workFn() {
      var modules = currentSpec.$modules || [];
      var strictDi = !!currentSpec.$injectorStrict;
      modules.unshift('ngMock');
      modules.unshift('ng');
      var injector = currentSpec.$injector;
      if (!injector) {
        if (strictDi) {
          // If strictDi is enabled, annotate the providerInjector blocks
          angular.forEach(modules, function(moduleFn) {
            if (typeof moduleFn === "function") {
              angular.injector.$$annotate(moduleFn);
            }
          });
        }
        injector = currentSpec.$injector = angular.injector(modules, strictDi);
        currentSpec.$injectorStrict = strictDi;
      }
      for (var i = 0, ii = blockFns.length; i < ii; i++) {
        if (currentSpec.$injectorStrict) {
          // If the injector is strict / strictDi, and the spec wants to inject using automatic
          // annotation, then annotate the function here.
          injector.annotate(blockFns[i]);
        }
        try {
          /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */
          injector.invoke(blockFns[i] || angular.noop, this);
          /* jshint +W040 */
        } catch (e) {
          if (e.stack && errorForStack) {
            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);
          }
          throw e;
        } finally {
          errorForStack = null;
        }
      }
    }
  };


  angular.mock.inject.strictDi = function(value) {
    value = arguments.length ? !!value : true;
    return isSpecRunning() ? workFn() : workFn;

    function workFn() {
      if (value !== currentSpec.$injectorStrict) {
        if (currentSpec.$injector) {
          throw new Error('Injector already created, can not modify strict annotations');
        } else {
          currentSpec.$injectorStrict = value;
        }
      }
    }
  };
}


})(window, window.angular);

/* 
 * The MIT License
 *
 * Copyright (c) 2012 James Allardice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// Defines the global Placeholders object along with various utility methods
(function (global) {

    "use strict";

    // Cross-browser DOM event binding
    function addEventListener(elem, event, fn) {
        if (elem.addEventListener) {
            return elem.addEventListener(event, fn, false);
        }
        if (elem.attachEvent) {
            return elem.attachEvent("on" + event, fn);
        }
    }

    // Check whether an item is in an array (we don't use Array.prototype.indexOf so we don't clobber any existing polyfills - this is a really simple alternative)
    function inArray(arr, item) {
        var i, len;
        for (i = 0, len = arr.length; i < len; i++) {
            if (arr[i] === item) {
                return true;
            }
        }
        return false;
    }

    // Move the caret to the index position specified. Assumes that the element has focus
    function moveCaret(elem, index) {
        var range;
        if (elem.createTextRange) {
            range = elem.createTextRange();
            range.move("character", index);
            range.select();
        } else if (elem.selectionStart) {
            elem.focus();
            elem.setSelectionRange(index, index);
        }
    }

    // Attempt to change the type property of an input element
    function changeType(elem, type) {
        try {
            elem.type = type;
            return true;
        } catch (e) {
            // You can't change input type in IE8 and below
            return false;
        }
    }

    // Expose public methods
    global.Placeholders = {
        Utils: {
            addEventListener: addEventListener,
            inArray: inArray,
            moveCaret: moveCaret,
            changeType: changeType
        }
    };

}(this));

(function (global) {

    "use strict";

    var validTypes = [
            "text",
            "search",
            "url",
            "tel",
            "email",
            "password",
            "number",
            "textarea"
        ],

        // The list of keycodes that are not allowed when the polyfill is configured to hide-on-input
        badKeys = [

            // The following keys all cause the caret to jump to the end of the input value
            27, // Escape
            33, // Page up
            34, // Page down
            35, // End
            36, // Home

            // Arrow keys allow you to move the caret manually, which should be prevented when the placeholder is visible
            37, // Left
            38, // Up
            39, // Right
            40, // Down

            // The following keys allow you to modify the placeholder text by removing characters, which should be prevented when the placeholder is visible
            8, // Backspace
            46 // Delete
        ],

        // Styling variables
        placeholderStyleColor = "#999",
        placeholderClassName = "placeholdersjs",
        classNameRegExp = new RegExp("(?:^|\\s)" + placeholderClassName + "(?!\\S)"),

        // These will hold references to all elements that can be affected. NodeList objects are live, so we only need to get those references once
        inputs, textareas,

        // The various data-* attributes used by the polyfill
        ATTR_CURRENT_VAL = "data-placeholder-value",
        ATTR_ACTIVE = "data-placeholder-active",
        ATTR_INPUT_TYPE = "data-placeholder-type",
        ATTR_FORM_HANDLED = "data-placeholder-submit",
        ATTR_EVENTS_BOUND = "data-placeholder-bound",
        ATTR_OPTION_FOCUS = "data-placeholder-focus",
        ATTR_OPTION_LIVE = "data-placeholder-live",
        ATTR_MAXLENGTH = "data-placeholder-maxlength",

        // Various other variables used throughout the rest of the script
        test = document.createElement("input"),
        head = document.getElementsByTagName("head")[0],
        root = document.documentElement,
        Placeholders = global.Placeholders,
        Utils = Placeholders.Utils,
        hideOnInput, liveUpdates, keydownVal, styleElem, styleRules, placeholder, timer, form, elem, len, i;

    // No-op (used in place of public methods when native support is detected)
    function noop() {}

    // Avoid IE9 activeElement of death when an iframe is used.
    // More info:
    // http://bugs.jquery.com/ticket/13393
    // https://github.com/jquery/jquery/commit/85fc5878b3c6af73f42d61eedf73013e7faae408
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }

    // Hide the placeholder value on a single element. Returns true if the placeholder was hidden and false if it was not (because it wasn't visible in the first place)
    function hidePlaceholder(elem, keydownValue) {
        var type,
            maxLength,
            valueChanged = (!!keydownValue && elem.value !== keydownValue),
            isPlaceholderValue = (elem.value === elem.getAttribute(ATTR_CURRENT_VAL));

        if ((valueChanged || isPlaceholderValue) && elem.getAttribute(ATTR_ACTIVE) === "true") {
            elem.removeAttribute(ATTR_ACTIVE);
            elem.value = elem.value.replace(elem.getAttribute(ATTR_CURRENT_VAL), "");
            elem.className = elem.className.replace(classNameRegExp, "");

            // Restore the maxlength value
            maxLength = elem.getAttribute(ATTR_MAXLENGTH);
            if (parseInt(maxLength, 10) >= 0) { // Old FF returns -1 if attribute not set (see GH-56)
                elem.setAttribute("maxLength", maxLength);
                elem.removeAttribute(ATTR_MAXLENGTH);
            }

            // If the polyfill has changed the type of the element we need to change it back
            type = elem.getAttribute(ATTR_INPUT_TYPE);
            if (type) {
                elem.type = type;
            }
            return true;
        }
        return false;
    }

    // Show the placeholder value on a single element. Returns true if the placeholder was shown and false if it was not (because it was already visible)
    function showPlaceholder(elem) {
        var type,
            maxLength,
            val = elem.getAttribute(ATTR_CURRENT_VAL);
        if (elem.value === "" && val) {
            elem.setAttribute(ATTR_ACTIVE, "true");
            elem.value = val;
            elem.className += " " + placeholderClassName;

            // Store and remove the maxlength value
            maxLength = elem.getAttribute(ATTR_MAXLENGTH);
            if (!maxLength) {
                elem.setAttribute(ATTR_MAXLENGTH, elem.maxLength);
                elem.removeAttribute("maxLength");
            }

            // If the type of element needs to change, change it (e.g. password inputs)
            type = elem.getAttribute(ATTR_INPUT_TYPE);
            if (type) {
                elem.type = "text";
            } else if (elem.type === "password") {
                if (Utils.changeType(elem, "text")) {
                    elem.setAttribute(ATTR_INPUT_TYPE, "password");
                }
            }
            return true;
        }
        return false;
    }

    function handleElem(node, callback) {

        var handleInputsLength, handleTextareasLength, handleInputs, handleTextareas, elem, len, i;

        // Check if the passed in node is an input/textarea (in which case it can't have any affected descendants)
        if (node && node.getAttribute(ATTR_CURRENT_VAL)) {
            callback(node);
        } else {

            // If an element was passed in, get all affected descendants. Otherwise, get all affected elements in document
            handleInputs = node ? node.getElementsByTagName("input") : inputs;
            handleTextareas = node ? node.getElementsByTagName("textarea") : textareas;

            handleInputsLength = handleInputs ? handleInputs.length : 0;
            handleTextareasLength = handleTextareas ? handleTextareas.length : 0;

            // Run the callback for each element
            for (i = 0, len = handleInputsLength + handleTextareasLength; i < len; i++) {
                elem = i < handleInputsLength ? handleInputs[i] : handleTextareas[i - handleInputsLength];
                callback(elem);
            }
        }
    }

    // Return all affected elements to their normal state (remove placeholder value if present)
    function disablePlaceholders(node) {
        handleElem(node, hidePlaceholder);
    }

    // Show the placeholder value on all appropriate elements
    function enablePlaceholders(node) {
        handleElem(node, showPlaceholder);
    }

    // Returns a function that is used as a focus event handler
    function makeFocusHandler(elem) {
        return function () {

            // Only hide the placeholder value if the (default) hide-on-focus behaviour is enabled
            if (hideOnInput && elem.value === elem.getAttribute(ATTR_CURRENT_VAL) && elem.getAttribute(ATTR_ACTIVE) === "true") {

                // Move the caret to the start of the input (this mimics the behaviour of all browsers that do not hide the placeholder on focus)
                Utils.moveCaret(elem, 0);

            } else {

                // Remove the placeholder
                hidePlaceholder(elem);
            }
        };
    }

    // Returns a function that is used as a blur event handler
    function makeBlurHandler(elem) {
        return function () {
            showPlaceholder(elem);
        };
    }

    // Functions that are used as a event handlers when the hide-on-input behaviour has been activated - very basic implementation of the "input" event
    function makeKeydownHandler(elem) {
        return function (e) {
            keydownVal = elem.value;

            //Prevent the use of the arrow keys (try to keep the cursor before the placeholder)
            if (elem.getAttribute(ATTR_ACTIVE) === "true") {
                if (keydownVal === elem.getAttribute(ATTR_CURRENT_VAL) && Utils.inArray(badKeys, e.keyCode)) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                    return false;
                }
            }
        };
    }
    function makeKeyupHandler(elem) {
        return function () {
            hidePlaceholder(elem, keydownVal);

            // If the element is now empty we need to show the placeholder
            if (elem.value === "") {
                elem.blur();
                Utils.moveCaret(elem, 0);
            }
        };
    }
    function makeClickHandler(elem) {
        return function () {
            if (elem === safeActiveElement() && elem.value === elem.getAttribute(ATTR_CURRENT_VAL) && elem.getAttribute(ATTR_ACTIVE) === "true") {
                Utils.moveCaret(elem, 0);
            }
        };
    }

    // Returns a function that is used as a submit event handler on form elements that have children affected by this polyfill
    function makeSubmitHandler(form) {
        return function () {

            // Turn off placeholders on all appropriate descendant elements
            disablePlaceholders(form);
        };
    }

    // Bind event handlers to an element that we need to affect with the polyfill
    function newElement(elem) {

        // If the element is part of a form, make sure the placeholder string is not submitted as a value
        if (elem.form) {
            form = elem.form;

            // If the type of the property is a string then we have a "form" attribute and need to get the real form
            if (typeof form === "string") {
                form = document.getElementById(form);
            }

            // Set a flag on the form so we know it's been handled (forms can contain multiple inputs)
            if (!form.getAttribute(ATTR_FORM_HANDLED)) {
                Utils.addEventListener(form, "submit", makeSubmitHandler(form));
                form.setAttribute(ATTR_FORM_HANDLED, "true");
            }
        }

        // Bind event handlers to the element so we can hide/show the placeholder as appropriate
        Utils.addEventListener(elem, "focus", makeFocusHandler(elem));
        Utils.addEventListener(elem, "blur", makeBlurHandler(elem));

        // If the placeholder should hide on input rather than on focus we need additional event handlers
        if (hideOnInput) {
            Utils.addEventListener(elem, "keydown", makeKeydownHandler(elem));
            Utils.addEventListener(elem, "keyup", makeKeyupHandler(elem));
            Utils.addEventListener(elem, "click", makeClickHandler(elem));
        }

        // Remember that we've bound event handlers to this element
        elem.setAttribute(ATTR_EVENTS_BOUND, "true");
        elem.setAttribute(ATTR_CURRENT_VAL, placeholder);

        // If the element doesn't have a value and is not focussed, set it to the placeholder string
        if (hideOnInput || elem !== safeActiveElement()) {
            showPlaceholder(elem);
        }
    }

    Placeholders.nativeSupport = test.placeholder !== void 0;

    if (!Placeholders.nativeSupport) {

        // Get references to all the input and textarea elements currently in the DOM (live NodeList objects to we only need to do this once)
        inputs = document.getElementsByTagName("input");
        textareas = document.getElementsByTagName("textarea");

        // Get any settings declared as data-* attributes on the root element (currently the only options are whether to hide the placeholder on focus or input and whether to auto-update)
        hideOnInput = root.getAttribute(ATTR_OPTION_FOCUS) === "false";
        liveUpdates = root.getAttribute(ATTR_OPTION_LIVE) !== "false";

        // Create style element for placeholder styles (instead of directly setting style properties on elements - allows for better flexibility alongside user-defined styles)
        styleElem = document.createElement("style");
        styleElem.type = "text/css";

        // Create style rules as text node
        styleRules = document.createTextNode("." + placeholderClassName + " { color:" + placeholderStyleColor + "; }");

        // Append style rules to newly created stylesheet
        if (styleElem.styleSheet) {
            styleElem.styleSheet.cssText = styleRules.nodeValue;
        } else {
            styleElem.appendChild(styleRules);
        }

        // Prepend new style element to the head (before any existing stylesheets, so user-defined rules take precedence)
        head.insertBefore(styleElem, head.firstChild);

        // Set up the placeholders
        for (i = 0, len = inputs.length + textareas.length; i < len; i++) {
            elem = i < inputs.length ? inputs[i] : textareas[i - inputs.length];

            // Get the value of the placeholder attribute, if any. IE10 emulating IE7 fails with getAttribute, hence the use of the attributes node
            placeholder = elem.attributes.placeholder;
            if (placeholder) {

                // IE returns an empty object instead of undefined if the attribute is not present
                placeholder = placeholder.nodeValue;

                // Only apply the polyfill if this element is of a type that supports placeholders, and has a placeholder attribute with a non-empty value
                if (placeholder && Utils.inArray(validTypes, elem.type)) {
                    newElement(elem);
                }
            }
        }

        // If enabled, the polyfill will repeatedly check for changed/added elements and apply to those as well
        timer = setInterval(function () {
            for (i = 0, len = inputs.length + textareas.length; i < len; i++) {
                elem = i < inputs.length ? inputs[i] : textareas[i - inputs.length];

                // Only apply the polyfill if this element is of a type that supports placeholders, and has a placeholder attribute with a non-empty value
                placeholder = elem.attributes.placeholder;
                if (placeholder) {
                    placeholder = placeholder.nodeValue;
                    if (placeholder && Utils.inArray(validTypes, elem.type)) {

                        // If the element hasn't had event handlers bound to it then add them
                        if (!elem.getAttribute(ATTR_EVENTS_BOUND)) {
                            newElement(elem);
                        }

                        // If the placeholder value has changed or not been initialised yet we need to update the display
                        if (placeholder !== elem.getAttribute(ATTR_CURRENT_VAL) || (elem.type === "password" && !elem.getAttribute(ATTR_INPUT_TYPE))) {

                            // Attempt to change the type of password inputs (fails in IE < 9)
                            if (elem.type === "password" && !elem.getAttribute(ATTR_INPUT_TYPE) && Utils.changeType(elem, "text")) {
                                elem.setAttribute(ATTR_INPUT_TYPE, "password");
                            }

                            // If the placeholder value has changed and the placeholder is currently on display we need to change it
                            if (elem.value === elem.getAttribute(ATTR_CURRENT_VAL)) {
                                elem.value = placeholder;
                            }

                            // Keep a reference to the current placeholder value in case it changes via another script
                            elem.setAttribute(ATTR_CURRENT_VAL, placeholder);
                        }
                    }
                } else if (elem.getAttribute(ATTR_ACTIVE)) {
                    hidePlaceholder(elem);
                    elem.removeAttribute(ATTR_CURRENT_VAL);
                }
            }

            // If live updates are not enabled cancel the timer
            if (!liveUpdates) {
                clearInterval(timer);
            }
        }, 100);
    }

    Utils.addEventListener(global, "beforeunload", function () {
        Placeholders.disable();
    });

    // Expose public methods
    Placeholders.disable = Placeholders.nativeSupport ? noop : disablePlaceholders;
    Placeholders.enable = Placeholders.nativeSupport ? noop : enablePlaceholders;

}(this));

/*!
 * Tipped - A Complete Javascript Tooltip Solution - v4.2.2
 * (c) 2012-2014 Nick Stakenburg
 *
 * http://www.tippedjs.com
 *
 * License: http://www.tippedjs.com/license
 */

;eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('!11(a){"11"==7a 40&&40.7b?40(["7c"],a):41&&!22.5U&&(22.5U=a(41))}(11($){11 1i(a){14 b={};3n(14 c 4m a)b[c]=a[c]+"1i";1c b}11 5V(a){1c 3c*a/1k.3d}11 9j(a){1c a*1k.3d/3c}11 9k(a){1c 1/1k.4n(a)}11 5W(a){1c 7d.9l.2O(7d,a.2u(" ","").1X(","))}11 33(a,b){3n(14 c 4m b)b[c]&&b[c].7e&&b[c].7e===9m?(a[c]=$.1u({},a[c])||{},33(a[c],b[c])):a[c]=b[c];1c a}11 3C(){1c 6.2E.2O(6,Y.2P(1R))}11 4X(){1c 6.2E.2O(6,Y.2P(1R))}11 5X(){6.2E.2O(6,Y.2P(1R))}11 5Y(){6.2E.2O(6,Y.2P(1R))}11 2F(){6.2E.2O(6,Y.2P(1R))}11 42(a){6.1d=a}14 X=22.5U||{};$.1u(X,{5Z:"4.2.2"}),X.43={7f:{60:!1,2k:{4o:!0},3e:!1,2l:{4Y:"4p",2p:5},2e:!1,3o:!0,4Z:7g,51:7g,3p:75,61:25,4q:!1,2v:{1d:"3q"},7h:!1,1g:"17",2G:!1,1K:{x:0,y:0},9n:!1,4r:!1,2p:!0,1Q:!0,2Q:!0,2H:{1d:"62"},63:"9o",2f:!0,1h:!0,1D:"1d",3f:!0},3D:{2k:!1,2v:{1d:"3q",1A:"3q"},2H:{1d:"3g",1A:"3g"}}},$.1z("52".1X(" "),11(a,b){X.43[b]={}});14 Y=64.23.53,2g={9p:11(a,b){14 c=a;1c 11(){14 a=[$.1y(c,6)].3E(Y.2P(1R));1c b.2O(6,a)}},2R:11(a){1c a&&1==a.9q},54:11(a,b){14 c=Y.2P(1R,2);1c 44(11(){1c a.2O(a,c)},b)},7i:11(a){1c 2g.54.2O(6,[a,1].3E(Y.2P(1R,1)))},9r:11(a){1c{x:a.56,y:a.65}},1d:{66:11(){11 a(a){3n(14 b=a;b&&b.7j;)b=b.7j;1c b}1c 11(b){14 c=a(b);1c!(!c||!c.45)}}()}},7k=11(){14 a=0,b="9s-46-";1c 11(c){3n(c=c||b,a++;3F.9t(c+a);)a++;1c c+a}}(),2a=11(a){11 b(b){14 c=2w 9u(b+"([\\\\d.]+)").9v(a);1c c?3r(c[1]):!0}1c{2q:!(!22.9w||-1!==a.2I("67"))&&b("9x "),67:a.2I("67")>-1&&(!!22.68&&68.5Z&&3r(68.5Z())||7.55),9y:a.2I("7l/")>-1&&b("7l/"),7m:a.2I("7m")>-1&&-1===a.2I("9z")&&b("9A:"),57:!!a.3G(/9B.*9C.*9D/),69:a.2I("69")>-1&&b("69/"),9E:a.2I("7n")>-1&&b("7n/"),6a:a.2I("6a")>-1&&b("6a "),6b:a.2I("6b")>-1&&b("6b/")}}(9F.9G),2S=11(){11 a(a){1c c(a,"7o")}11 b(a,b){3n(14 c 4m a)1l(2h 0!==d.4s[a[c]])1c"7o"==b?a[c]:!0;1c!1}11 c(a,c){14 d=a.3H(0).6c()+a.9H(1),f=(a+" "+e.9I(d+" ")+d).1X(" ");1c b(f,c)}14 d=3F.9J("1v"),e="9K 9L O 9M 9N".1X(" ");1c{1e:{4t:c("4t"),2x:c("2x"),47:a},2Q:c("9O")&&c("9P"),7p:11(){9Q{1c!!("9R"4m 22||22.7q&&3F 3h 7q)}9S(a){1c!1}}(),9T:11(){14 a=$("<9U>").1e({58:"4u(#9V#9W)"});1c!c("2x")&&a[0].9X}()}}(),1m={7r:["9Y","9Z","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9"],4v:{7s:/^(17|13|1x|1q)(17|13|1x|1q|2J|2b)$/,1Y:/^(17|1x)/,59:/(2J|2b)/,2T:/^(17|1x|13|1q)/},aa:11(){14 a={17:"1b",13:"18",1x:"1b",1q:"18"};1c 11(b){1c a[b]}}(),59:11(a){1c!!a.5a().3G(6.4v.59)},5b:11(a){1c!6.59(a)},1S:11(a){1c a.5a().3G(6.4v.1Y)?"1Y":"2m"},1U:11(a){14 b=2n,c=a.5a().3G(6.4v.2T);1c c&&c[1]&&(b=c[1]),b},1X:11(a){1c a.5a().3G(6.4v.7s)},7t:{17:"1x",1x:"17",13:"1q",1q:"13"},4w:11(a,b){14 c=6.1X(a);1c b?6.4x(6.4w(6.4x(a))):6.7t[c[1]]+c[2]},4x:11(a){1l(1m.5b(a)){14 b=6.1X(a);1c b[2]+b[1]}1c a},5c:11(a,b,c){14 d=$.1u({},a),e={1Y:"x",2m:"y"},f={x:"y",y:"x"},g={17:{1q:"x"},1x:{13:"x"},13:{1x:"y"},1q:{17:"y"}},h=1m.1S(b);1l(h==1m.1S(c)){1l(1m.1U(b)!=1m.1U(c)){14 i=f[e[h]];d[i]*=-1}}24{14 j=d.x;d.x=d.y,d.y=j;14 k=g[1m.1U(b)][1m.1U(c)];k&&(d[k]*=-1),d[e[1m.1S(c)]]=0}1c d},7u:11(a,b,c,d){14 e=1k.4y(a,c),f=1k.1E(a,c),g=1k.4y(b,d),h=1k.1E(b,d);1c{13:e,17:g,18:1k.1E(f-e,0),1b:1k.1E(h-g,0)}},6d:11(a,b,c,d,e,f){14 g=6.7u(c,d,e,f);1c a>=g.13&&a<=g.13+g.18&&b>=g.17&&b<=g.17+g.1b},4z:11(a,b,c){1c 6.6d(a,b,c.1g.13,c.1g.17,c.1g.13+c.1j.18,c.1g.17+c.1j.1b)},48:11(a,b,c,d){1c 1k.ab(1k.7v(1k.4A(c-a),2)+1k.7v(1k.4A(d-b),2))},6e:11(){14 a=11(a,b,c,d,e,f){14 g=(f-b)*(c-a)-(d-b)*(e-a);1c g>0?!0:0>g?!1:!0};1c 11(b,c,d,e,f,g,h,i,j){1l(!j)1c a(b,c,f,g,h,i)!=a(d,e,f,g,h,i)&&a(b,c,d,e,f,g)!=a(b,c,d,e,h,i);14 k,l,m,n;k=d-b,l=e-c,m=h-f,n=i-g;14 o,p;1l(o=(-l*(b-f)+k*(c-g))/(-m*l+k*n),p=(m*(c-g)-n*(b-f))/(-m*l+k*n),o>=0&&1>=o&&p>=0&&1>=p){14 q=b+p*k,r=c+p*l;1c{x:q,y:r}}1c!1}}()},6f={4p:11(){14 a;1c a=2a.57?{18:22.49,1b:22.2U}:{1b:$(22).1b(),18:$(22).18()}}},6g={7w:{56:0,65:0},5d:{18:30,1b:30},4B:{x:2,y:10},7x:11(a){14 b=a&&"7y"==$.1G(a.56)?a:6.7w;1c{13:b.56-1k.1V(.5*6.5d.18)+6.4B.x,17:b.65-1k.1V(.5*6.5d.1b)+6.4B.y}},7z:11(){1c 6.5d}},7A=11(){11 a(a){1c("0"+3s(a).ac(16)).53(-2)}11 b(b){1c b=b.3G(/^3I?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+))?\\)$/),"#"+a(b[1])+a(b[2])+a(b[3])}14 c={7B:"#7C",ad:"#ae",af:"#7C",ag:"#ah",ai:"#aj",ak:"#al",am:"#an",ao:"#ap",aq:"#ar",as:"#at",au:"#av",aw:"#ax",ay:"#az",aA:"#aB",aC:"#aD",aE:"#aF",aG:"#aH"};1c{7D:11(a){1l(/^3I?\\(/.4a(a))1c b(a);c[a]&&(a=c[a]);14 d=a.2u("#","");1c/^(?:[0-9a-aI-F]{3}){1,2}$/.4a(d)||c.7B,3==d.2o&&(d=d.3H(0)+d.3H(0)+d.3H(1)+d.3H(1)+d.3H(2)+d.3H(2)),"#"+d}}}();3C.5e=2S.1e.2x&&2S.1e.4t,$.1u(3C.23,{2E:11(){6.1a=$.1u({},1R[0]||{}),6.2c(),6.7E()},2c:11(){14 a=2*(6.1a.2o+6.1a.1Q),b={1b:a,18:a};6.1d=$("<1v>").1r("19-4C").1e(1i(b)),6.1d.1w(6.5f=$("<1v>").1r("19-4C-7F")),6.1d.1e({"1P-13":-.5*b.18+"1i","1P-17":-.5*b.1b+"1i"});3n(14 c=6.1a.6h,d=0;c>d;d++){14 e,f;6.5f.1w(e=$("<1v>").1r("19-4C-3J").1w(f=$("<1v>").1r("19-4C-7G"))),f.1e({"1o-2d":6.1a.2d,18:6.1a.18+"1i",1b:6.1a.2o+"1i","1P-13":-.5*6.1a.18+"1i","1f-1Q":1k.1V(.5*6.1a.18)+"1i"}),e.1e({3K:(1/c*(d+1)).aJ(2)});14 g={};g[2S.1e.47("2x")]="7F("+aK/c*(d+1)+"6i)",e.1e(g)}},7E:11(){14 a={};a[2S.1e.47("4t")]="19-4C 1s aL aM("+6.1a.6h+")",6.5f.1e(a)},4b:11(){14 a={};a[2S.1e.47("4t")]="aN",6.5f.1e(a),6.1d.3o()}}),$.1u(4X.23,{2E:11(a){1c a="aO"==$.1G(a)?a:[a],6.aP=a,6.5g=[],$.1z(a,$.1y(11(a,b){14 c=$(b).1n(":1T");c||$(b).20(),6.5g.2K({1d:b,1T:c})},6)),6},3i:11(){$.1z(6.5g,11(a,b){b.1T||$(b.1d).20()}),6.5g=2n}});14 Z=11(){14 a=[];1c{2A:11(b){3n(14 c=2n,d=0;d<a.2o;d++)a[d]&&a[d].4u==b.4u&&(a[d].1G||"7H").6c()==(b.1G||"7H").6c()&&$.7I(a[d].26||{})==$.7I(b.26||{})&&(c=a[d]);1c c},aQ:11(b,c,d){14 e=6.2A(b);e||(e=$.1u({7J:{}},b),a.2K(e)),e.7J[c]=d},21:11(b){3n(14 c=0;c<a.2o;c++)a[c]&&a[c].4u==b&&6j a[c]},7K:11(){a=[]}}}(),7L={4D:11(){11 a(b){1c e=X.43.7f,f=33($.1u({},e),X.43.3D),a=d,d(b)}11 b(a){1c a.3G(/^(17|13|1x|1q)$/)&&(a+="2J"),a.2u("2b","2J").2u(" ",""),a}11 c(a){14 b,c={};1l(a.58){14 d={2H:{1d:"3g",1A:!1},2v:{1d:"3q",1A:"3g"}};34(a.58){1M"1L":$.1u(c,d);27;1M"2y":$.1u(c,d,{1D:"2y"});27;1M"7M":$.1u(c,{1D:"2y",2H:{1d:"3g",1A:"3g"},2v:{1d:"3q",1A:"3q"},7N:!0})}b=33($.1u({},c),a)}24 b=a;1c b}11 d(a){14 d=a.1W?a.1W:ba.1a.4E,g=$.1u({},X.43[d]||{});g.1W||(g.1W=ba.1a.4E||"52");14 h=33($.1u({},f),c(g)),i=33($.1u({},h),c(a));1l(i[5W("aR,7O,aS,aT")]=5W("3L,97,aU,7O"),i.2k){14 j=f.2k||{},k=e.2k;"6k"==$.1G(i.2k)&&(i.2k={4o:j.4o||k.4o,1G:j.1G||k.1G}),i.2k=!1}14 l,m=m=i.1g&&i.1g.1D||"2B"==$.1G(i.1g)&&i.1g||f.1g&&f.1g.1D||"2B"==$.1G(f.1g)&&f.1g||e.1g&&e.1g.1D||e.1g;m=b(m);14 n=i.1g&&i.1g.1A||f.1g&&f.1g.1A||e.1g&&e.1g.1A||ba.1m.6l(m);1l(n=b(n),i.1g?"2B"==$.1G(i.1g)?(i.1g=b(i.1g),l={1D:i.1g,1A:ba.1m.7P(i.1g)}):(l={1A:n,1D:m},i.1g.1A&&(l.1A=b(i.1g.1A)),i.1g.1D&&(l.1D=b(i.1g.1D))):l={1A:n,1D:m},1m.5b(l.1D)&&1m.1S(l.1D)!=1m.1S(l.1A)&&(l.1D=1m.4x(l.1D)),"2y"==i.1D){14 o=1m.1S(l.1D);l.1D="1Y"==o?l.1D.2u(/(13|1q)/,"2J"):l.1D.2u(/(17|1x)/,"2J")}i.1g=l;14 p;1l("2y"==i.1D?(p=$.1u({},e.1K),$.1u(p,X.43.3D.1K||{}),p=1m.5c(e.1K,e.1g,l.1D,!0),a.1K&&(p=$.1u(p,a.1K||{}))):p={x:i.1K.x,y:i.1K.y},i.1K=p,i.2v&&"3j-2r"==i.2v&&(i.5h=!0,i.2v=!1,i.51=0),"2y"==i.1D&&i.3p&&i.3p<3L&&(i.3p=3L),"7M"==i.58&&i.3p&&i.3p<7Q&&(i.3p=7Q),i.2H){14 q=i.2H;"2B"==$.1G(q)&&(q={1d:q}),i.2H=q}1l(i.2v){14 r=i.2v;"2B"==$.1G(r)&&(r={1d:r}),i.2v=r}1c i.2G&&"2B"!=$.1G(i.2G)&&(i.2G=!1),2a.2q&&2a.2q<9&&$.1u(i,{4Z:0,51:0,61:0}),i.2f&&(3C.5e?"6k"==$.1G(i.2f)&&(i.2f=f.2f||e.2f||{}):i.2f=!1),i.3e||(i.3e=3F.45),i.2l&&"2B"==$.1G(i.2l)&&(i.2l={4Y:i.2l,2p:f.2l&&f.2l.2p||e.2p&&e.2l.2p}),i.2Q&&(i.2Q=2S.2Q),i}14 e,f;1c a}()};$.1u(5X.23,{2E:11(a){6.1A=a,6.1d=a.7R,6.1A.1H[(6.1A.1a.2Q?"21":"2C")+"4F"]("19-6m-2Q")[(6.1A.1a.1Q?"21":"2C")+"4F"]("19-6m-1Q");14 b,c,d,e,f,g=2S.1e.47("aV");6.1d.1w(b=$("<1v>").1r("19-28").1w($("<1v>").1r("19-3J").1w($("<1v>").1r("19-6n").1w(c=$("<1v>").1r("19-1o").1w(d=$("<1v>").1r("19-1o-1J")))))).1w(e=$("<1v>").1r("19-2V-5i").1w(f=$("<1v>").1r("19-2V-7G"))),c.1e({18:5j,1b:5j,aW:1}),6.1p={1f:3s(c.1e("1f-17-18")),1Q:3s(g?c.1e(g):0),2p:3s(a.2i.1e("2p-17")),3t:c.1e("1f-17-2d"),3k:d.1e("1o-2d"),aX:d.1e("3K"),2L:{1j:{18:e.6o(!0),1b:e.5k(!0)},1a:{6h:3s(f.1e("z-5l"))||12,2o:3r(f.1e("1b")),18:3r(f.1e("18")),1Q:3r(f.1e("1P-1x")),2d:7A.7D(a.2i.1e("2d"))}}},e.21(),b.21(),6.3M=1m.1U(a.1a.1g.1A)||"17",6.1B={},a.1a.1h?(6.1d.1w(6.28=$("<1v>").1r("19-28")),6.1B.1j={18:5j,1b:5j},6.6p("13"),6.1B.4G=6.aY.3N().1j.2r.1b,6.1B.1j=2n,6.4c()):6.1B.4G=0},4c:11(){6.28&&($.1z("17 1q 1x 13".1X(" "),$.1y(11(a,b){6["4H"+b]&&6["4H"+b].4c()},6)),6.28.21(),6.28=2n,6.2L&&(6.2L.21(),6.2L=2n))},2c:11(){6.4c(),6.1d.1w(6.28=$("<1v>").1r("19-28")),$.1z("17 1q 1x 13".1X(" "),$.1y(11(a,b){6.6p(b)},6)),6.1d.1w(6.2L=$("<1v>").1r("19-2V-5i").1L()),6.6q()},7S:11(){14 a,b=$("<1v>").1r("19-3J").1w(a=$("<1v>").1r("19-6n").1w($("<1v>").1r("19-1o-2Q"))).1w($("<1v>").1r("19-1N-1h").1w($("<1v>").1r("19-1N-1h-2T 19-1N-1h-2T-3u")).1w($("<1v>").1r("19-1h")).1w($("<1v>").1r("19-1N-1h-2T 19-1N-1h-2T-3O")));1c $.1z("17 1q 1x 13".1X(" "),$.1y(11(b,c){a.1w($("<1v>").1r("19-1o-1O 19-1o-1O-"+c).1w($("<1v>").1r("19-1o-1O-1N").1w($("<1v>").1r("19-1o-1O-1N-7T").1w($("<1v>").1r("19-1o").1w($("<1v>").1r("19-1o-1C")).1w($("<1v>").1r("19-1o-1J"))).1w($("<1v>").1r("19-1o-1f-7U").1L()))))},6)),b}(),7V:11(a){14 b=6.7S.7W();b.1r("19-3J-"+a),b.1t(".19-1o-2Q").1e(1i({"1f-1Q":6.1p.1Q})),b.1t(".19-1h").2W("26-1h-1g",a);14 c=1k.1E(6.1p.1Q-6.1p.1f,0);b.1t(".19-1o-1C").1e(1i({"1f-17-13-1Q":c,"1f-17-1q-1Q":c})),b.1t(".19-1o-1J").1e(1i({"1f-1x-13-1Q":c,"1f-1x-1q-1Q":c}));14 d={3k:6.1p.3t},e=1m.1S(a),f="1Y"==e;d[f?"1b":"18"]=6.1p.1f+"1i";14 g={17:"1x",1x:"17",13:"1q",1q:"13"};1c d[g[a]]=0,b.1t(".19-1N-1h-2T").1e(d),b},6p:11(a){14 b=6["aZ"+a]=6.7V(a);1l(6.28.1w(b),6.1A.1a.1h){14 c=b.1t(".19-1h");6["4H"+a]=2w 5Y(c,6,{})}},5m:11(){3C.5e&&(6.4I(6.1p.2L.1j),6.2L.20(),6.2f||(6.2f=2w 3C($.1u({},6.1A.1a.2f||{},6.1p.2L.1a)),6.2L.1w(6.2f.1d)))},3P:11(){3C.5e&&6.2f&&6.2f&&(6.2f.4b(),6.2f=2n,6.2L.1L())},7X:11(){14 a=6.1B.28[6.3M],b=$.1u({},a.1o.1j);1l(6.1A.1C&&!6.1A.1n("35")){6.1d.1t(".19-1o-1C, .19-1o-1J").20(),6.1d.1t(".19-1o").1e({"1o-2d":"2X"});14 c=$.1u({},b),d=1k.1E(6.1p.1Q-6.1p.1f,0),e={"1f-17-13-1Q":d,"1f-17-1q-1Q":d,"1f-1x-13-1Q":d,"1f-1x-1q-1Q":d},f=2w 4X(6.1A.1H),g=6.1A.2M.2U();c.1b-=g,6.1d.1t(".19-1o-1C").1e(1i({1b:g,18:b.18})),e["1f-17-13-1Q"]=0,e["1f-17-1q-1Q"]=0,f.3i(),6.1d.1t(".19-1o-1J").1e(1i(c)).1e(1i(e))}24 6.1d.1t(".19-1o-1C, .19-1o-1J").1L(),6.1d.1t(".19-1o").1e({"1o-2d":6.1p.3k});6.1p.1f&&(6.1d.1t(".19-1o").1e({"1f-2d":"2X"}),6.1d.1t(".19-1o-1f-7U").1e($.1u({},1i(b),{"1f-1Q":6.1p.1Q,"1f-2d":6.1p.3t,"1f-18":6.1p.1f+"1i"})).20())},6q:11(){6.7Y();14 a=6.1B.28[6.3M],b=$.1u({},a.1o.1j);6.1d.1t(".19-1o").1e(1i(b)),6.1d.1t(".19-1o, .19-1o-2Q").1e(1i(b)),6.1d.1t(".19-1o-2Q").1e(1i({18:b.18+2*6.1p.1f,1b:b.1b+2*6.1p.1f})),6.7X(),6.1d.1t(".19-1o-1O-1N, .19-1o-1O-1N-7T").7Z("4s"),6.28.1e(1i(a.1j)),6.1d.1e(1i(a.1j)),6.1A.1H.1e(1i(a.1j)),$.1z(6.1B.28,$.1y(11(a,b){14 c=6.1d.1t(".19-3J-"+a),d=6.1B.28[a].1j;c.1e(1i(d)),c.1t(".19-6n").1e(1i(b.1o.1g)).1e(1i({18:d.18-b.1o.1g.13,1b:d.1b-b.1o.1g.17})),c.1t(".19-1N-1h").1e(1i(b.1N.1j)).1e(1i(b.1N.1g));14 e=1m.1S(a);1l("2m"==e){c.1t(".19-1o-1O-17, .19-1o-1O-1x").1e({1b:6.1B.2j+"1i"}),c.1t(".19-1o-1O-1x").1e({17:b.1j.1b-6.1B.2j+"1i"}).1t(".19-1o-1O-1N").1e({"1P-17":-1*b.1j.1b+6.1B.2j+"1i"}),6.1A.1a.1h?c.1t(".19-1o-1O-"+("13"==a?"13":"1q")).1L():c.1t(".19-1o-1O-1q").1L(),"1q"==a?c.1t(".19-1o-1O-13").1e({18:b.1j.18-b.6r-6.1p.1f+"1i"}):c.1t(".19-1o-1O-1q").1e({"1P-13":6.1p.1f+"1i"}).1t(".19-1o-1O-1N").1e({"1P-13":-1*6.1p.1f+"1i"}),6.1A.1a.1h||c.1t(".19-1o-1O-13").1e({18:b.1j.18+"1i"});14 f=c.1t(".19-1o-1O-13, .19-1o-1O-1q");f.1e({1b:b.1j.1b-2*6.1B.2j+"1i","1P-17":6.1B.2j+"1i"}),f.1t(".19-1o-1O-1N").1e({"1P-17":-1*6.1B.2j+"1i"})}24{c.1t(".19-1o-1O-13, .19-1o-1O-1q").1e({18:6.1B.2j+"1i"}),c.1t(".19-1o-1O-1q").1e({13:b.1j.18-6.1B.2j+"1i"}).1t(".19-1o-1O-1N").1e({"1P-13":-1*b.1j.18+6.1B.2j+"1i"}),6.1A.1a.1h?c.1t(".19-1o-1O-"+("17"==a?"17":"1x")).1L():c.1t(".19-1o-1O-1x").1L(),"1x"==a?c.1t(".19-1o-1O-17").1e({1b:b.1j.1b-b.6r-6.1p.1f+"1i"}):c.1t(".19-1o-1O-1x").1e({"1P-17":6.1p.1f+"1i"}).1t(".19-1o-1O-1N").1e({"1P-17":-1*6.1p.1f+"1i"}),6.1A.1a.1h||c.1t(".19-1o-1O-17").1e({1b:b.1j.1b+"1i"});14 f=c.1t(".19-1o-1O-17, .19-1o-1O-1x");f.1e({18:b.1j.18-2*6.1B.2j+"1i","1P-13":6.1B.2j+"1i"}),f.1t(".19-1o-1O-1N").1e({"1P-13":-1*6.1B.2j+"1i"})}},6)),6.2L.1e({17:a.1o.1g.17+6.1p.1f,13:a.1o.1g.13+6.1p.1f}),6.1B.3v={},$.1z(1m.7r,$.1y(11(a,b){6.1B.3v[b]=6.80(b)},6))},7Y:11(){14 a=(6.1p.2p,6.1p.1Q,6.1p.1f),b=6.1B.4G||0,c=$.1u({},6.1B.1j||{});6.1B={28:{},1j:c,4G:b},6.1B.2j=1k.1E(6.1p.1f,6.1p.1Q)||0;14 d={18:0,1b:0},e=0,f=0;6.1A.1a.1h&&(d=6.6s.3N().1j.2r,e=6.6s.1p.1K,f=1k.1E(d.1b-6.1p.1f,0)),6.1B.6t=d,6.1B.81=e,1m.1S(6.3M),$.1z("17 1q 1x 13".1X(" "),$.1y(11(b,e){14 g=1m.1S(e),h="2m"==g,i={18:c.18+2*a,1b:c.1b+2*a},j=i[h?"1b":"18"]-2*6.1B.2j,k={1j:i,6r:f,1g:{17:0,13:0},1o:{1j:$.1u({},c),1g:{17:0,13:0}}};34(6.1B.28[e]=k,k.1j[h?"18":"1b"]+=f,("17"==e||"13"==e)&&(k.1o.1g[e]+=f),$.1u(k,{1N:{1g:{17:0,13:0},1j:{18:1k.1V(h?d.1b:j),1b:1k.1V(h?j:d.1b)}}}),e){1M"17":1M"1x":k.1N.1g.13+=6.1B.2j,"1x"==e&&(k.1N.1g.17+=i.1b-a-f);27;1M"13":1M"1q":k.1N.1g.17+=6.1B.2j,"1q"==e&&(k.1N.1g.13+=i.18-a-f)}},6))},4I:11(a){14 b=6.1B.1j;b&&b.18==a.18&&b.1b==a.1b||(6.1B.1j=a,6.2c())},82:11(a){6.3M=a,6.1d.1t(".19-3J").1L(),6.1d.1t(".19-3J-"+6.3M).20(),6.6q()},80:11(a){14 b=1m.1U(a),c=1m.1S(a);6.1B.1j;14 d=6.1B.2j,e=6["4H"+b],f=6.1B.81,g=6.1A.1a.1h?e.3N().1j.2r.18:0,h=d+f+.5*g,i={1h:{}},j={13:0,1q:0,5n:0,5o:0},k={17:0,13:0},l={17:0,13:0},m=6.1B.28[b],h=0;1l("1Y"==c){14 n=m.1j.18;6.1A.1a.1h&&(n=m.1N.1j.18,2*f>n-g&&(f=1k.2Y(.5*(n-g))||0),h=d+f+.5*g);14 o=n-2*f,p=1m.1X(a),q=f;34(p[2]){1M"13":j.1q=o-g,k.13=h;27;1M"2J":q+=1k.1V(.5*o-.5*g),j.13=q-f,j.1q=q-f,k.13=l.13=1k.1V(.5*m.1j.18);27;1M"1q":q+=o-g,j.13=o-g,k.13=m.1j.18-h,l.13=m.1j.18}"1x"==p[1]&&(k.17+=m.1j.1b,l.17+=m.1j.1b),$.1u(i.1h,{1g:{13:q},3u:{18:q},3O:{13:q+g,18:n-q-g}})}24{14 r=m.1j.1b;6.1A.1a.1h&&(r=m.1N.1j.1b,2*f>r-g&&(f=1k.2Y(.5*(r-g))||0),h=d+f+.5*g);14 s=r-2*f,p=1m.1X(a),t=f;34(p[2]){1M"17":j.5o=s-g,k.17=h;27;1M"2J":t+=1k.1V(.5*s-.5*g),j.5n=t-f,j.5o=t-f,k.17=l.17=1k.1V(.5*m.1j.1b);27;1M"1x":t+=s-g,j.5n=s-g,k.17=m.1j.1b-h,l.17=m.1j.1b}"1q"==p[1]&&(k.13+=m.1j.18,l.13+=m.1j.18),$.1u(i.1h,{1g:{17:t},3u:{1b:t},3O:{17:t+g,1b:r-t-g}})}1c i.5p=j,i.1h.1I=k,i.1I=l,i},83:11(a,b){14 c=6.1B.84;1l(c!=a){6.1B.84=a;14 d=1m.1U(a);6.82(d)}6.1A.1a.1h&&6.85(a,b)},85:11(a,b){14 c=6.1B.4B;1l(!c||c.1g!=a||c.1N.x!=b.x||c.1N.y!=b.y){6.1B.4B={1g:a,1N:b};14 d=1m.1U(a),e={1Y:"x",2m:"y"}[1m.1S(a)],f={x:{13:"13",18:"18"},y:{13:"17",18:"1b"}}[e],g=6["4H"+d],h=33({},6.1B.3v[a].1h);b&&0!==b[e]&&(h.3u[f.18]+=b[e],h.1g[f.13]+=b[e],h.3O[f.13]+=b[e],h.3O[f.18]-=b[e]),6.3M=d,g.1d.1e(1i(h.1g)),g.1d.86(".19-1N-1h-2T-3u").1e(1i(h.3u)),g.1d.86(".19-1N-1h-2T-3O").1e(1i(h.3O))}}}),$.1u(5Y.23,{2E:11(a,b){6.1d=$(a),6.1d[0]&&(6.1W=b,6.1d.6u("19-1h-3D"),6.1p=$.1u({},b.1p,{18:6.1d.49(),1b:6.1d.2U(),1K:3s(6.1d.1e("1P-13")),5q:3s(6.1d.1e("1P-17"))}),6.1d.1r("19-1h-3D"),6.1a=$.1u({},1R[2]||{}),6.2Z=6.1d.2W("26-1h-1g")||"17",6.87=3L,6.2c())},4c:11(){6.1d.3Q("")},2c:11(){6.4c();14 a=6.1p.3k,b=a.2I("3I")>-1&&3r(a.2u(/^.*,(.+)\\)/,"$1")),c=b&&1>b;6.4J=c&&2S.1e.2x,6.1p.1f||(6.4J=!1),6[(6.4J?"2c":"b0")+"b1"]()},b2:11(){6.1d.1w(6.36=$("<1v>").1r("19-1h-36").1w(6.6v=$("<1v>").1r("19-1h-6v").1w(6.2x=$("<1v>").1r("19-1h-2x").1w(6.4d=$("<1v>").1r("19-1h-2T").1w(6.1f=$("<1v>").1r("19-1h-1f")).1w($("<1v>").1r("19-1h-1f-3R")).1w($("<1v>").1r("19-1h-5r")))))),6.2x.1w(6.88=6.4d.7W().1r("19-1h-2T-b3")),6.b4=6.4d.2C(6.88);14 a=6.3N(),b=a.1j,c=6.87,d=1m.1U(6.2Z);1l(6.1d.1t(".19-1h-36").1e({18:l?b.1Z.1b:b.1Z.18,1b:l?b.1Z.18:b.1Z.1b}),"17"==d||"13"==d){14 e={};e["1P-"+d]=6.1p.5q,6.1d.1t(".19-1h-36").1e(e)}6.2x.1e({18:b.1Z.18*c+"1i",1b:b.1Z.1b*c+"1i"});14 f=2S.1e.47("2x"),g={"1o-2d":"2X","1f-1x-2d":6.1p.3k,"1f-13-18":.5*b.1Z.18*c+"1i","1f-1x-18":b.1Z.1b*c+"1i"};g[f]="6w("+a.1f*c+"1i, 0)",6.1d.1t(".19-1h-5r").1e(g);14 h=6.1p.3t;37=h.2I("3I")>-1&&3r(h.2u(/^.*,(.+)\\)/,"$1")),37&&1>37?h=(h.89(0,h.8a(","))+")").2u("3I","8b"):37=1;14 i={"1o-2d":"2X","1f-1q-18":a.1f*c+"1i",18:a.1f*c+"1i","1P-13":-2*a.1f*c+"1i","1f-2d":h,3K:37};i[f]="4K("+a.4K+"6i) 6w("+a.1f*c+"1i, "+-1*6.1p.1f*c+"1i)",6.1d.1t(".19-1h-1f").1e(i);14 h=6.1p.3t;37=h.2I("3I")>-1&&3r(h.2u(/^.*,(.+)\\)/,"$1")),37&&1>37?h=(h.89(0,h.8a(","))+")").2u("3I","8b"):37=1;14 j={18:a.1f*c+"1i","1f-1q-18":a.1f*c+"1i","1f-1q-2d":h,1o:h,3K:37,"1P-13":-2*a.1f*c+"1i"};1l(j[f]="4K("+a.4K+"6i) 6w("+a.1f*c+"1i, "+(b.1Z.1b-6.1p.1f)*c+"1i)",6.1d.1t(".19-1h-1f-3R").1e(j),6.3w(6.2Z),c>1){14 k={};k[f]="b5("+1/c+","+1/c+")",6.6v.1e(k)}14 l=/^(13|1q)$/.4a(6.2Z);6.1p.1f||6.1d.1t(".19-1h-1f, .19-1h-1f-3R").1L(),6.1d.1e({18:l?b.2r.1b:b.2r.18,1b:l?b.2r.18:b.2r.1b})},b6:11(){6.1d.1w(6.36=$("<1v>").1r("19-1h-36").1w($("<1v>").1r("19-1h-8c").1w($("<1v>").1r("19-1h-1f").1w($("<1v>").1r("19-1h-1f-3R")).1w($("<1v>").1r("19-1h-1f-2b-1K").1w($("<1v>").1r("19-1h-1f-2b-1K-6x").1w($("<1v>").1r("19-1h-1f-2b"))))).1w($("<1v>").1r("19-1h-5r"))));14 a=6.3N(),b=a.1j,c=/^(13|1q)$/.4a(6.2Z),d=/^(1x)$/.4a(6.2Z),e=/^(1q)$/.4a(6.2Z),f=1m.1U(6.2Z);1l(6.1d.1e({18:c?b.2r.1b:b.2r.18,1b:c?b.2r.18:b.2r.1b}),6.1d.1t(".19-1h-8c").2C(6.1d.1t(".19-1h-36")).1e({18:c?b.1Z.1b:b.1Z.18,1b:c?b.1Z.18:b.1Z.1b}),"17"==f||"13"==f){14 g={};g["1P-"+f]=6.1p.5q,6.1d.1t(".19-1h-36").1e(g)}6.1d.1t(".19-1h-1f").1e({18:"3L%",1o:"2X"});14 h={3K:2a.2q&&2a.2q<9?6.1p.8d:1};h[c?"1b":"18"]="3L%",h[c?"18":"1b"]=6.1p.1f+"1i",h[d?"17":"1x"]=0,$.1u(h,e?{13:0}:{1q:0}),6.1d.1t(".19-1h-1f-3R").1e(h);14 i={18:0,"1o-2d":"2X",3K:2a.2q&&2a.2q<9?6.1p.8d:1},j=.5*b.1Z.18+"1i 38 2X",k={"1o-2d":"2X"};1l(.5*b.1Z.18-a.1f+"1i 38 2X",c){14 l={13:"4e",17:"50%","1P-17":-.5*b.1Z.18,"1f-17":j,"1f-1x":j};1l($.1u(i,l),i[e?"1q":"13"]=0,i[e?"1f-13":"1f-1q"]=b.1Z.1b+"1i 38 "+6.1p.3t,$.1u(k,l),k[e?"1f-13":"1f-1q"]=b.1Z.1b+"1i 38 "+6.1p.3k,k[e?"1q":"13"]=a.17,k[e?"13":"1q"]="4e",2a.2q&&2a.2q<8){14 m=.5*6.1p.18+"1i 38 2X";$.1u(k,{"1P-17":-.5*6.1p.18,"1f-17":m,"1f-1x":m}),k[e?"1f-13":"1f-1q"]=6.1p.1b+"1i 38 "+6.1p.3k}6.1d.1t(".19-1h-1f-2b-1K").1e({"1P-13":-1*6.1p.1f*(e?-1:1)}).1t(".19-1h-1f-2b-1K-6x").1e({"1P-13":6.1p.1f*(e?-1:1)})}24{14 l={"1P-13":-.5*b.1Z.18,"1f-13":j,"1f-1q":j};1l($.1u(i,l),i[d?"1f-17":"1f-1x"]=b.1Z.1b+"1i 38 "+6.1p.3t,$.1u(k,l),k[d?"1f-17":"1f-1x"]=b.1Z.1b+"1i 38 "+6.1p.3k,k[d?"1x":"17"]=a.17,k[d?"17":"1x"]="4e",2a.2q&&2a.2q<8){14 m=.5*6.1p.18+"1i 38 2X";$.1u(k,{"1P-13":-.5*6.1p.18,"1f-13":m,"1f-1q":m}),k[d?"1f-17":"1f-1x"]=6.1p.1b+"1i 38 "+6.1p.3k}6.1d.1t(".19-1h-1f-2b-1K").1e({"1P-17":-1*6.1p.1f*(d?-1:1)}).1t(".19-1h-1f-2b-1K-6x").1e({"1P-17":6.1p.1f*(d?-1:1)})}6.1d.1t(".19-1h-1f-2b").1e(i),6.1d.1t(".19-1h-1f-3R").1e({"1o-2d":6.1p.3t}),6.1d.1t(".19-1h-5r").1e(k),6.1p.1f||6.1d.1t(".19-1h-1f").1L()},3w:11(a){6.2Z=a,6.2x.2W("6y","19-1h-2x 19-1h-2x-"+a)},3N:11(){14 a=6.1p.1b,b=6.1p.18,c=6.1p.1f;6.4J&&1k.2Y(b)%2&&(b=1k.1E(1k.2Y(b)-1,0));14 d=5V(1k.6z(.5*b/a)),e=90-d,f=c/1k.4n((90-e)*1k.3d/3c),g=c/1k.4n((90-d)*1k.3d/3c),h={18:1k.1V(b+2*f),1b:1k.1V(a+g)},i=1k.1E(c,6.1p.1Q),j=1k.4y(6.1W.1B.1j.18+2*c-2*i,6.1W.1B.1j.1b+2*c-2*i);1l(6.4J&&1k.2Y(j)%2&&(j=1k.1E(1k.2Y(j)-1,0)),j&&h.18>j){14 k=j;h.18=k,h.1b=.5*k/1k.8e(d*1k.3d/3c),h.1b=1k.1V(h.1b)}a=h.1b,b=.5*h.18;14 l=5V(1k.6z(a/b)),m=90-l,n=c/1k.4n(m*1k.3d/3c),o=3c*1k.6z(a/b)/1k.3d,p=-1*(90-o),q=90-o,r=c*1k.8e(q*1k.3d/3c),g=c/1k.4n((90-q)*1k.3d/3c),s=$.1u({},h),t=$.1u({},h);t.1b+=6.1p.5q;14 u=!0;1c 2*c>=h.18&&(u=!1,h={18:0,1b:c}),{b7:u,2r:t,1j:{1Z:s,2r:t},17:g,1f:n,4K:p,3R:r}}});14 ba={2s:{},1a:{4E:"52",5s:b8},6A:11(){},5t:11(){6.3D(),6.5u=$.1y(6.8f,6),$(22).2z("8g 8h",6.5u),2a.57&&$("45").2z("3j",6.6A)},3D:11(){ba.8i(),6.5u&&$(22).4L("8g 8h",6.5u),2a.57&&$("45").4L("3j",6.6A)},8f:11(){6.5v&&(22.5w(6.5v),6.5v=2n),6.5v=2g.54($.1y(11(){14 a=6.4M();$.1z(a,11(a,b){b.1g()})},6),15)},4N:11(a,b){14 c,d=[],e=[];1l(2g.2R(a)?(c=$(a).26("2t-3x"))&&(d=d.3E(c)):$(a).1z(11(a,b){(c=$(b).26("2t-3x"))&&(d=d.3E(c))}),!d[0]&&!b){14 f=6.6B($(a).4f(".19-1A")[0]);f&&f.1d&&(c=$(f.1d).26("2t-3x")||[],c&&(d=d.3E(c)))}1c d.2o>0&&$.1z(d,$.1y(11(a,b){14 c;(c=6.2s[b])&&e.2K(c)},6)),e},6C:11(a){14 b=[];1c 2g.2R(a)&&(b=6.4N(a)),b[0]&&b[0].1d},2A:11(a){14 b=$.1u({39:!1},1R[1]||{}),c=[];1c 2g.2R(a)?c=6.4N(a):a 3h $?a.1z($.1y(11(a,b){14 d=6.4N(b,!0);d.2o>0&&(c=c.3E(d))},6)):"2B"==$.1G(a)&&$.1z(6.2s,11(b,d){d.1d&&$(d.1d).1n(a)&&c.2K(d)}),b.39&&$.1z(c,11(a,b){b.1n("39",!0)}),c},6B:11(a){1l(!a)1c 2n;14 b=2n;1c $.1z(6.2s,11(c,d){d.1n("2c")&&d.1H[0]===a&&(b=d)}),b},b9:11(a){14 b=[];1c $.1z(6.2s,11(c,d){d.1d&&$(d.1d).1n(a)&&b.2K(d)}),b},8j:11(){14 a=[];1c $.1z(6.2s,11(b,c){c.1n("8k")&&a.2K(c)}),a},20:11(a){$(6.2A(a)).1z(11(a,b){b.20(!1,!0)})},1L:11(a){$(6.2A(a)).1z(11(a,b){b.1L()})},5x:11(a){$(6.2A(a)).1z(11(a,b){b.5x()})},8l:11(a){$.1z(6.4M(),11(b,c){a&&a==c||c.1L()})},8m:11(a){$(6.2A(a)).1z(11(a,b){b.3S()})},8n:11(a){$(6.2A(a)).1z(11(a,b){b.3S()})},3S:11(a){$(6.2A(a)).1z(11(a,b){b.3S()})},4M:11(){14 a=[];1c $.1z(6.2s,11(b,c){c.1T()&&a.2K(c)}),a},bb:11(a){14 b=!1;1c 2g.2R(a)&&$.1z(6.4M()||[],11(c,d){1c d.1d==a?(b=!0,!1):2h 0}),b},8o:11(){14 a,b=0;1c $.1z(6.2s,11(c,d){d.29>b&&(b=d.29,a=d)}),a},8p:11(){6.4M().2o<=1&&$.1z(6.2s,11(a,b){b.1n("2c")&&!b.1a.29&&b.1H.1e({29:b.29=+ba.1a.5s})})},bc:11(){$.1z(6.2s,$.1y(11(a,b){b.1a.2k&&(b.1F&&b.1F.3y&&(b.1F.3y.3T(),b.1F.3y=2n),b.1n("31",!1),b.1n("35",!1))},6)),Z.7K()},2C:11(a){6.2s[a.46]=a},21:11(a){14 b=6.4N(a);$.1z(b,$.1y(11(a,b){14 c=b.46;6j 6.2s[c],2a.2q&&2a.2q<9?2g.7i(11(){b.21()}):b.21()},6))},bd:11(){14 a=6.8j(),b=[];a.2o>0&&$.1z(a,11(a,c){c.1n("3U")&&(b.2K(c),c.4O())}),$.1z(6.2s,$.1y(11(a,b){b.1d&&!2g.1d.66(b.1d)&&6.21(b.1d)},6)),$.1z(b,11(a,b){b.3o()})},8i:11(){$.1z(6.2s,$.1y(11(a,b){b.1d&&6.21(b.1d)},6)),6.2s={}},be:11(a){6.1a.4E=a||"52"},6D:11(a){6.1a.5s=a||0}};1c ba.1m={4g:{13:"1q",1q:"13",17:"1x",1x:"17",2J:"2J",2b:"2b"},6l:11(a){14 b=1m.1X(a),c=b[1],d=b[2],e=1m.1S(a),f=$.1u({1Y:!0,2m:!0},1R[1]||{});1c"1Y"==e?(f.2m&&(c=6.4g[c]),f.1Y&&(d=6.4g[d])):(f.2m&&(d=6.4g[d]),f.1Y&&(c=6.4g[c])),c+d},7P:11(a){14 b=1m.1X(a);1c 6.6l(b[1]+6.4g[b[2]])}},$.1u(2F.23,{2E:11(a,b){1l(6.1d=a,6.1d){14 c;"6E"!=$.1G(b)||2g.2R(b)||b 3h $?c=1R[2]||{}:(c=b,b=2n);14 d=$(a).26("2t-1a");d&&(c=33($.1u({},c),bf("({"+d+"})"))),6.1a=7L.4D(c),6.1F={1j:{18:0,1b:0},5y:[],3z:{},32:{},1n:{5z:!1,3U:!1,3y:!1,1T:!1,31:!1,2c:!1,bg:!1,6F:!1,"bh-3V":!1},bi:""},6.5A={5B:$({})};14 e=$(a).2W("1C")||$(a).26("2t-3i-1C");1l(!b){14 f=$(a).2W("26-2t");f?b=f:e&&(b=e)}1l((!b||b 3h $&&!b[0])&&!(6.1a.2k&&6.1a.2k.4u||6.1a.2G))1c 6.bj=!0,2h 0;e&&($(a).26("2t-3i-1C",e),$(a)[0].bk("1C","")),6.1J=b,6.1C=$(6.1d).26("2t-1C"),"8q"!=$.1G(6.1a.1C)&&(6.1C=6.1a.1C),6.29=6.1a.29||+ba.1a.5s;14 g=$(a).26("2t-3x");g||(g=[]);14 h=7k();6.46=h,g.2K(h),$(a).26("2t-3x",g);14 i=$(6.1d).4f(".19-1A")[0],6G;i&&(6G=ba.6B(i))&&6G.1n("8k",!0);14 j=6.1a.1D;6.1D="2y"==j?6.1d:"1d"!=j&&j?2g.2R(j)?j:j 3h $&&j[0]?j[0]:6.1d:6.1d,6.1a.2G&&(6.1J=$("#"+6.1a.2G)[0]),6.1a.2k&&(6.bl=6.1J),6.8r(),ba.2C(6)}},21:11(){6.4L(),6.8s(),6.8t(),6.3P(),6.8u(),6.6H(),6.1n("2c")&&6.1H&&(6.1H.21(),6.1H=2n);14 a=$(6.1d).26("2t-3x")||[],b=$.bm(6.46,a);1l(b>-1&&(a.bn(b,1),$(6.1d).26("2t-3x",a)),a.2o<1){14 c,d="2t-3i-1C";(c=$(6.1d).26(d))&&$(6.1d).2W("1C",c).8v("2t-3i-1C"),$(6.1d).8v("2t-3x")}14 e=$(6.1d).2W("6y")||"",f=e.2u(/(19-bo-46-)\\d+/g,"").2u(/^\\s\\s*/,"").2u(/\\s\\s*$/,"");$(6.1d).2W("6y",f)},3o:11(){6.1a.3o&&!6.1n("3U")&&(6.1H.3o(),6.1n("3U",!0))},4O:11(){1l(6.1n("3U")){14 a;1l("2B"==$.1G(6.1a.3e)){14 b=6.1D;"2y"==b&&(b=6.1d),a=$(b).4f(6.1a.3e).4d()}24 a=$(6.1a.3e);a[0]||(a=$(3F.45)),a.1w(6.1H),6.1n("3U",!1)}},8r:11(){6.1n("3U",!0);14 a={13:"-8w",17:"-8w",3K:0,29:6.29};6.1H=$("<1v>").1r("19-1A").1r("19-1W-"+ba.1a.4E).1r("19-63-"+6.1a.63).1e(a).1L(),6.8x()},2c:11(){6.1n("2c")||(6.4O(),2a.2q&&2a.2q<7&&6.1H.1w(6.bp=$("<bq>").1r("19-br").2W({bs:0,6I:"bt:\'\';"})),6.1H.1w(6.7R=$("<1v>").1r("19-1W")).1w(6.bu=$("<1v>").1r("19-1J-8y").1w(6.4P=$("<1v>").1r("19-1J-36").1w(6.2M=$("<1v>").1r("19-1C-8y").1w(6.6J=$("<1v>").1r("19-1C-36").1w(6.5C=$("<1v>").1r("19-1C-5D").1w(6.8z=$("<1v>").1r("19-1C-5D-8A").1w(6.8B=$("<1v>").1r("19-1C"))))).1w(6.4h=$("<1v>").1r("19-2e").1w($("<1v>").1r("19-2e-5i").3Q("&8C;")))).1w(6.8D=$("<1v>").1r("19-1J-5D").1w(6.8E=$("<1v>").1r("19-1J-5D-8A").1w(6.2i=$("<1v>").1r("19-1J"))).1w(6.5E=$("<1v>").1r("19-2e").1w($("<1v>").1r("19-2e-5i").3Q("&8C;")))))),6.1W=2w 5X(6),6.4P.1e({"1f-1Q":1k.1E(6.1W.1p.1Q-6.1W.1p.1f,0)+"1i"}),6.8F(),6.1n("2c",!0))},8F:11(){6.1H.bv(".19-2e, .2e-1A","3j",$.1y(11(){6.1n("39",!1),6.1L(!0)},6))},8x:11(){6.2z(6.1d,"3g",6.5F),6.2z(6.1H,"3g",6.5F),6.2z(6.1d,"3q",11(a){6.6K(a)}),6.2z(6.1H,"3q",11(a){6.6K(a)}),6.1a.2H&&$.1z(6.1a.2H,$.1y(11(a,b){14 c,d=!1;34(a){1M"1d":c=6.1d,6.1a.2v&&6.1a.2H&&"3j"==6.1a.2v.1d&&"3j"==6.1a.2H.1d&&(d=!0,6.1n("6F",d));27;1M"1A":c=6.1H;27;1M"1D":c=6.1D}c&&6.2z(c,b,"3j"==b&&d?11(){6.1n("39",!1),6.5x()}:11(){6.1n("39",!1),6.8G()})},6)),6.1a.2v&&$.1z(6.1a.2v,$.1y(11(a,b){14 c;34(a){1M"1d":1l(6.1n("6F")&&"3j"==b)1c;c=6.1d;27;1M"1A":c=6.1H;27;1M"1D":c=6.1D}c&&6.2z(c,b,11(){6.1n("39",!1),6.8H()})},6)),6.1a.5h&&($(6.1d).1r("19-5h"),6.2z(3F.bw,2S.7p?"bx":"3j",$.1y(11(a){1l(6.1T()){14 b=$(a.1D).4f(".19-1A, .19-5h")[0];(!b||b&&b!=6.1H[0]&&b!=6.1d)&&6.1L()}},6))),"2y"==6.1a.1D&&6.2z(6.1d,"3g 62",$.1y(11(a){6.1F.8I=a},6));14 a=!1;6.1a.2H&&"2y"==6.1a.1D&&!6.1a.7N&&(a=!0),a&&6.2z(6.1d,"62",11(){6.1n("2c")&&(6.1n("39",!1),6.1g())})}}),$.1u(2F.23,{4b:11(){1l(6.1H){14 a=6.5A.5B;a.2D([]),6.1H.4b(1,0)}},8G:11(){6.1n("3l")||(6.3m("1L"),6.1n("1T")||6.6L("20")||6.5G("20",$.1y(11(){6.3m("20"),6.20()},6),6.1a.3p||1))},20:11(){1l(6.3m("1L"),!6.1T()&&!6.1n("3l")&&$(6.1D).1n(":1T")){6.1n("1T",!0),6.4O(),6.4b();14 a=6.5A.5B,b=!1,c=!1;6.1n("31")||6.1n("35")||a.2D($.1y(11(a){6.by={18:0,1b:0},6.8J($.1y(11(d){1c d?(6.1n("1T",!1),6.3o(),2h 0):(6.1g(),6.4Q(),b=!0,6.1T()&&"11"==$.1G(6.1a.4r)&&(c=!0,6.1a.4r(6.2i[0],6.1d)),a(),2h 0)},6))},6)),a.2D($.1y(11(a){b||(6.1g(),6.4Q()),a()},6)),a.2D($.1y(11(a){6.1n("31")&&6.2i.1e({6M:"1T"}),a()},6)),a.2D($.1y(11(a){1l(6.1n("31")&&!c&&"11"==$.1G(6.1a.4r)){14 b=2w 4X(6.1H);6.1a.4r(6.2i[0],6.1d),b.3i(),a()}24 a()},6)),a.2D($.1y(11(a){6.6N(6.1a.4Z,11(){a()})},6)),6.1a.4q&&a.2D($.1y(11(){6.5F()},6))}},6N:11(a,b){a=("7y"==$.1G(a)?a:6.1a.4Z)||0,b=b||("11"==$.1G(1R[0])?1R[0]:!1),6.1a.7h&&ba.8l(6),6.1H.8K(a,1,$.1y(11(){b&&b()},6))},8H:11(){6.3m("20"),6.6L("1L")||!6.1T()||6.1n("3l")||6.5G("1L",$.1y(11(){6.3m("1L"),6.1L()},6),6.1a.61||1)},1L:11(a,b){1l(6.3m("20"),6.1T()&&!6.1n("3l")){6.1n("1T",!1),6.4b();14 c=6.5A.5B;c.2D($.1y(11(b){6.8L(a,b)},6)),c.2D(11(a){ba.8p(),a()}),"11"==$.1G(6.1a.8M)&&6.1n("31")&&c.2D($.1y(11(a){6.1a.8M(6.2i[0],6.1d),a()},6));14 d=6.1a.2k;d&&!d.4o&&c.2D($.1y(11(a){6.1n("31",!1),6.1n("35",!1),a()},6)),"11"==$.1G(b)&&c.2D(11(a){b(),a()}),c.2D($.1y(11(a){6.3o(),a()},6))}},8L:11(a,b){b=b||("11"==$.1G(1R[0])?1R[0]:!1),6.4O(),6.1H.8K(a?0:6.1a.51,0,$.1y(11(){6.1a.2k&&6.1F.3y&&(6.6H(),6.3P()),6.1H.1L(),b&&b()},6))},5x:11(){6.1n("3l")||6[6.1T()?"1L":"20"]()},4Q:11(){1l(6.1n("2c")&&!6.1a.29){14 a=ba.8o();a&&a!=6&&6.29<=a.29&&(6.29=a.29+1,6.1H.1e({"z-5l":6.29}),6.8N&&(6.8N.1e({"z-5l":6.29}),6.29=a.29+2,6.1H.1e({"z-5l":6.29})))}}}),$.1u(2F.23,{8O:11(){!6.4R&&6.1J&&2g.1d.66(6.1J)&&($(6.1J).26("19-3i-2G-5H",$(6.1J).1e("5H")),6.4R=$("<1v>").1L(),$(6.1J).3u($(6.4R).1L()))},8t:11(){14 a;6.1J,6.4R&&6.1J&&((a=$(6.1J).26("19-3i-2G-5H"))&&$(6.1J).1e({5H:a}),$(6.4R).3u(6.1J).21())},5m:11(){6.1a.2f&&!6.1n("2V")&&(6.1n("2V",!0),6.1H.1r("19-1n-2V"),6.1W.5m(),6.1g(),6.4Q(),6.6N())},3P:11(){6.1a.2f&&6.1n("2V")&&(6.1n("2V",!1),6.1H.6u("19-1n-2V"),6.1W.3P())},8u:11(){6.1F.3f&&(6.1F.3f.3T(),6.1F.3f=2n)},6H:11(){6.1F.3y&&(6.1F.3y.3T(),6.1F.3y=2n,6.1n("31",!1),6.1n("35",!1))},8J:11(a){1l(!6.1n("35")&&!6.1n("35")){6.1n("35",!0),6.2c();14 b=6.1a.2G?"2G":6.1a.2k?"2k":2g.2R(6.1J)?"1d":"11"==$.1G(6.1J)?"11":"3Q";34(6.2i.1e({6M:"bz"}),b){1M"3Q":1M"1d":1M"2G":1l(6.1n("31"))1c a&&a(),2h 0;6.6O({1J:6.1J,1C:6.1C},a);27;1M"11":1l(6.1n("31"))1c a&&a(),2h 0;14 c=6.1J.2P(6.1d);1l(!c)1c 6.1n("35",!1),a&&a(!0),2h 0;6.6O(c,a)}}},6O:11(a,b){14 c={};c="2B"==$.1G(a)||2g.2R(a)||a 3h $?{1J:a,1C:!1}:a;14 a=c.1J,d=c.1C;6.1J=a,6.1C=d,6.8O(),(2g.2R(a)||a 3h $)&&$(a).20(),6.2i.3Q(6.1J),6.8B.3Q(d&&"2B"==$.1G(d)?d:""),6.2M[d?"20":"1L"](),6.4h[(6.1C||6.1a.1C)&&6.1a.2e?"20":"1L"]();14 e=6.1a.2e,f=e&&!(6.1a.1C||6.1C),g=e&&!(6.1a.1C||6.1C)&&"5I"!=e,h=e&&(6.1a.1C||6.1C)&&"5I"!=e;6.5E[f?"20":"1L"](),6.1H[(g?"2C":"21")+"4F"]("19-8P-bA-2e"),6.1H[(h?"2C":"21")+"4F"]("19-8P-1C-2e"),6.2i[(6.1a.2p?"21":"2C")+"4F"]("19-1J-6m-2p"),6.8Q($.1y(11(){6.8R(b)},6))},8Q:11(a){1c!$.8S.3f||!6.1a.3f||6.2i.1t("2N").2o<1?(a&&a(),2h 0):(6.5m(),6.1F.3f=6.2i.3f($.1y(11(){6.3P(),a&&a()},6)),2h 0)},8R:11(a){6.3P(),6.1T()&&6.2i.1e({6M:"1T"}),6.1n("31",!0),6.1n("35",!1),"11"==$.1G(6.1a.60)&&6.1a.60(6.2i[0],6.1d),a&&a()}}),$.1u(2F.23,{4i:11(a,b){14 a=a||6.1a.1g.1D,b=b||6.1a.1g.1A,c=6.1W.1p.1f;6.1H.1r("19-1A-8T");14 d=6.1H.2W("4s");6.1H.7Z("4s");14 e={17:c,1q:c,1x:c,13:c};1l(6.1a.1h){14 f=0;1l("2m"==1m.1S(b)){14 g=1m.1U(b);e[g]=6.1W.1B.4G;14 h=6.4j(b),i=6.8U(a),j=!1;1m.4z(i.3a,i.3W,h)||1m.4z(i.3A,i.3X,h)?j=!0:$.1z("17 1q 1x 13".1X(" "),$.1y(11(a,b){14 c=6.3Y(h,b);1c 1m.6e(i.3a,i.3W,i.3A,i.3X,c.3a,c.3W,c.3A,c.3X)?(j=!0,!1):2h 0},6)),j&&(f="13"==g?i.3a-h.1g.13:h.1g.13+h.1j.18-i.3a,e[g]+=f)}}1l(6.1a.1K&&"1Y"==1m.1S(b)){14 k=1m.5c(6.1a.1K,6.1a.1g.1D,a);0!==k.x&&(e.1q+=1k.4A(k.x))}14 f;1l(6.1a.2l&&(f=6.1a.2l.2p)){$.1z(e,11(a){e[a]+=f});14 l=1m.1S(b),g=1m.1U(b);"2m"==l?e["13"==g?"1q":"13"]-=f:e["17"==g?"1x":"17"]-=f}14 m=6f.4p(),n=6.1a.2e&&!(6.1a.1C||6.1C)&&"5I"!=6.1a.2e,o={18:0,1b:0};n&&(o={18:6.5E.6o(!0),1b:6.5E.5k(!0)}),6.8E.1e({"2p-1q":o.18+"1i"}),6.4P.1e({18:m.18-e.13-e.1q+"1i"});14 p={18:6.2i.49()+o.18,1b:1k.1E(6.2i.2U(),o.1b||0)},q={18:0,1b:0};1l(6.1C){14 r={18:0,1b:0};6.2M.2C(6.6J).1e({18:"4e",1b:"4e"}),6.1a.2e&&"5I"!=6.1a.2e&&(r={18:6.4h.6o(!0),1b:6.4h.5k(!0)},6.4h.1L()),6.5J&&p.18>6.1a.5K&&6.5C.1e({18:p.18+"1i"}),6.8z.1e({"2p-1q":r.18+"1i"});14 s=3s(6.2M.1e("1f-1x-18"));q={18:6.1C?6.2M.49():0,1b:1k.1E(6.1C?6.2M.2U()+s:0,r.1b+s)},q.18>m.18-e.13-e.1q&&(q.18=m.18-e.13-e.1q,6.6J.1e({18:q.18}),q.1b=1k.1E(6.1C?6.2M.2U()+s:0,r.1b+s)),p.18=1k.1E(q.18,p.18),p.1b+=q.1b,6.2M.1e({1b:1k.1E(6.1C?6.2M.2U():0,r.1b)+"1i"}),6.1a.2e&&6.4h.20()}1l(6.4P.1e({18:p.18+"1i"}),p.1b!=1k.1E(6.2i.2U(),o.1b)+(6.1C?6.5C.5k():0)&&p.18++,6.1n("2V")&&(p=6.1W.1p.2L.1j),6.4I(p),e={17:c,1q:c,1x:c,13:c},6.1a.1h){14 t=1m.1U(b);e[t]=6.1W.6s.3N().1j.2r.1b}6.4P.1e({"1P-17":e.17+"1i","1P-13":+e.13+"1i",18:p.18+"1i"}),(6.1C||6.1a.2e)&&6.2M.1e({1b:6.2M.2U()+"1i",18:p.18+"1i"}),6.1H.6u("19-1A-8T"),6.1H.2W("4s",d);14 u=6.8D.2C(6.5C);1c 6.1a.5K&&p.18>6.1a.5K&&!6.5J&&!6.1n("2V")&&(u.1e({18:6.1a.5K+"1i"}),6.5J=!0,6.4i(a,b),6.5J=!1,u.1e({18:"4e"})),{1J:p,1C:q}},4I:11(a){6.1W.4I(a)},8V:11(a,b){14 c=6.4j(a,b),d=6.4S(),e=d.1g,f=d.1j,g=c.1g,h=c.1j,i={17:1k.1E(e.17-g.17,0),1x:1k.1E(g.17+h.1b-(e.17+f.1b),0),13:1k.1E(e.13-g.13,0),1q:1k.1E(g.13+h.18-(e.13+f.18),0)};1c e.17>g.17+h.1b&&(i.17-=e.17-(g.17+h.1b)),e.17+f.1b<g.17&&(i.1x-=g.17-(e.17+f.1b)),e.13>g.13+h.18&&g.13+h.18>=e.13&&(i.13-=e.13-(g.13+h.18)),e.13+f.18<g.13&&(i.1q-=g.13-(e.13+f.18)),6.1F.32.bB=i,i},3S:11(){6.1n("2c")&&6.1T()&&6.1g()},1g:11(){1l(6.1T()){6.1n("8W",!0),6.1F.32={},6.1F.1j;14 a=6.1a.1g.1D,b=6.1a.1g.1A,c=b,d=a;6.4i(d,c);14 e=6.5L(d,c),f=33(e),g=[];1l(6.1a.2l){14 h=!1,i={};1l($.1z("17 1q 1x 13".1X(" "),$.1y(11(a,b){(i[b]=6.8X(b,c,!0))&&(h=!0)},6)),h||(f.3Z=!0),f.3Z)6.3w(f);24{g.6P({1g:f,4T:d,4U:c});14 j=1m.4w(a);1l(d=j,c=1m.4w(b),i[1m.1U(d)]?(6.4i(d,c),f=6.5L(d,c)):f.3Z=!1,f.3Z)6.3w(f,c);24{g.6P({1g:f,4T:d,4U:c});14 k,l=a,m=6.8V(c,!0),n="1Y"==1m.1S(l)?["13","1q"]:["17","1x"];k=m[n[0]]===m[n[1]]?"1Y"==1m.1S(l)?"13":"17":n[m[n[0]]>m[n[1]]?0:1];14 o=1m.1X(l)[1],p=k+o,q=1m.4w(p);1l(d=p,c=q,i[1m.1U(d)]?(6.4i(d,c),f=6.5L(d,c)):f.3Z=!1,f.3Z)6.3w(f,c);24{g.6P({1g:f,4T:d,4U:c});14 r,s=[];1l($.1z(g,11(a,b){1l(b.1g.17>=0&&b.1g.13>=0)r=b;24{14 c=b.1g.17>=0?1:1k.4A(b.1g.17),d=b.1g.13>=0?1:1k.4A(b.1g.13);s.2K({8Y:b,6Q:c*d})}}),!r){14 t=s[s.2o-1];$.1z(s,11(a,b){b.6Q<t.6Q&&(t=b)}),r=t.8Y}6.4i(r.4T,r.4U,!0),6.3w(r.1g,r.4U)}}}}24 6.3w(f);6.1F.1j=6.1W.1B.1j,6.1n("8W",!1)}},5L:11(a,b){14 b=b||6.1a.1g.1A,c=6.6R(),d={13:0,17:0},e={13:0,17:0};1m.1U(a);14 f=6.1W.1B,g=f.28[1m.1U(b)],h=1m.1S(a),i=1m.1X(a);1l("1Y"==h){14 j=1k.2Y(.5*c.18);34(i[2]){1M"13":e.13=j;27;1M"2J":d.13=c.18-j,e.13=d.13;27;1M"1q":d.13=c.18,e.13=c.18-j}"1x"==i[1]&&(d.17=c.1b,e.17=c.1b)}24{14 j=1k.2Y(.5*c.1b);34(i[2]){1M"17":e.17=j;27;1M"2J":d.17=c.1b-j,e.17=d.17;27;1M"1x":e.17=c.1b-j,d.17=c.1b}"1q"==i[1]&&(d.13=c.18,e.13=c.18)}14 k=6.6S(),l=$.1u({},c,{17:k.17,13:k.13,1I:d,1E:e}),m={18:g.1j.18,1b:g.1j.1b,17:0,13:0,1I:f.3v[b].1I,1h:f.3v[b].1h};1l(m.17=l.17+l.1I.17,m.13=l.13+l.1I.13,m.17-=m.1I.17,m.13-=m.1I.13,6.1a.1h){14 n=f.6t.18,o={1h:{17:m.17+m.1h.1I.17,13:m.13+m.1h.1I.13},1I:{17:l.17+l.1I.17,13:l.13+l.1I.13},1E:{17:l.17+l.1E.17,13:l.13+l.1E.13}};1l(!1m.6d(o.1h.13,o.1h.17,o.1I.13,o.1I.17,o.1E.13,o.1E.17)){14 o={1h:{17:m.17+m.1h.1I.17,13:m.13+m.1h.1I.13},1I:{17:l.17+l.1I.17,13:l.13+l.1I.13},1E:{17:l.17+l.1E.17,13:l.13+l.1E.13}},p={1I:1m.48(o.1h.13,o.1h.17,o.1I.13,o.1I.17),1E:1m.48(o.1h.13,o.1h.17,o.1E.13,o.1E.17)},q=1k.4y(p.1I,p.1E),r=o[p.1I<=p.1E?"1I":"1E"],s="1Y"==1m.1S(b)?"13":"17",t=1m.48(o.1I.13,o.1I.17,o.1E.13,o.1E.17);1l(t>=n){14 u={17:0,13:0},v=r[s]<o.1h[s]?-1:1;u[s]=q*v,u[s]+=1k.2Y(.5*n)*v,m.13+=u.13,m.17+=u.17}24{$.1u(o,{2b:{17:1k.1V(l.17+.5*c.1b),13:1k.1V(l.13+.5*c.13)}});14 w={1I:1m.48(o.2b.13,o.2b.17,o.1I.13,o.1I.17),1E:1m.48(o.2b.13,o.2b.17,o.1E.13,o.1E.17)},q=p[w.1I<=w.1E?"1I":"1E"],x={17:0,13:0},v=r[s]<o.1h[s]?-1:1;x[s]=q*v,m.13+=x.13,m.17+=x.17}}}1l(6.1a.1K){14 y=$.1u({},6.1a.1K);y=1m.5c(y,6.1a.1g.1D,a),m.17+=y.y,m.13+=y.x}14 z=6.5M({17:m.17,13:m.13},b),A=z.1Y&&z.2m,B={x:0,y:0},C=1m.1S(b);1l(!z[C]){14 D="1Y"==C,E=D?["13","1q"]:["5n","5o"],F=D?"x":"y",G=D?"13":"17",H=z.4V[F],I=6.4j(b),J=I.1g[D?"13":"17"];1l(0!==H){14 K=f.3v[b].5p,L=K[E[0>-1*H?0:1]],M=0>H?-1:1;1l(L>=H*M&&m[G]+H>=J)m[G]+=H,B[F]=-1*H,A=!0;24 1l(1m.1S(a)==1m.1S(b)){1l(m[G]+=L*M,B[F]=-1*L*M,m[G]<J){14 N=J-m[G],O=K[E[0]]+K[E[1]],N=1k.4y(N,O);m[G]+=N;14 P=B[F]-N;P>=f.3v[b].5p[E[0]]&&P<=f.3v[b].5p[E[1]]&&(B[F]-=N)}z=6.5M({17:m.17,13:m.13},b);14 Q=z.4V[F],R=33({},m);6.1a.1K&&(R.13-=6.1a.1K.x,R.17-=6.1a.1K.y);14 o={1h:{17:R.17+m.1h.1I.17,13:R.13+m.1h.1I.13}};o.1h[G]+=B[F];14 S=6.4S(),n=f.6t.18,T=1k.2Y(.5*n),U=J+I.1j[D?"18":"1b"];1l("x"==F){14 V=S.1g.13+T;Q>0&&(V+=S.1j.18-2*T),(0>Q&&o.1h.13+Q>=V&&R.13+Q>=J||Q>0&&o.1h.13+Q<=V&&R.13+Q<=U)&&(R.13+=Q)}24{14 W=S.1g.17+T;Q>0&&(W+=S.1j.1b-2*T),(0>Q&&o.1h.17+Q>=W&&R.17+Q>=J||Q>0&&o.1h.17+Q<=W&&R.17+Q<=U)&&(R.17+=Q)}m=R,6.1a.1K&&(m.13+=6.1a.1K.x,m.17+=6.1a.1K.y)}}z=6.5M({17:m.17,13:m.13},b),A=z.1Y&&z.2m}1c{17:m.17,13:m.13,3Z:A,1N:B}},3w:11(a,b){14 c=6.2Z;1l(!c||c.17!=a.17||c.13!=a.13){14 d;1l(6.1a.3e!=3F.45){1l("2B"==$.1G(6.1a.3e)){14 e=6.1D;"2y"==e&&(e=6.1d),d=$(e).4f(6.1a.3e).4d()}24 d=$(d);1l(d[0]){14 f=d.1K();1K={17:1k.1V(f.17),13:1k.1V(f.13)},6T={17:1k.1V(d.8Z()),13:1k.1V(d.91())},a.17-=1K.17,a.17+=6T.17,a.13-=1K.13,a.13+=6T.13}}6.2Z=a,6.1H.1e({17:a.17,13:a.13})}6.1W.83(b||6.1a.1g.1A,a.1N||{x:0,y:0})},3Y:11(a,b){14 c=a.1g.13,d=a.1g.17,e=a.1g.13,f=a.1g.17;34(b){1M"17":e+=a.1j.18;27;1M"1x":d+=a.1j.1b,e+=a.1j.18,f+=a.1j.1b;27;1M"13":f+=a.1j.1b;27;1M"1q":c+=a.1j.18,e+=a.1j.18,f+=a.1j.1b}1c{3a:c,3W:d,3A:e,3X:f}},8X:11(a,b,c){14 d=6.4j(b,c),e=6.4S(),f=6.3Y(e,a);1l(1m.4z(f.3a,f.3W,d)||1m.4z(f.3A,f.3X,d))1c!0;14 g=!1;1c $.1z("17 1q 1x 13".1X(" "),$.1y(11(a,b){14 c=6.3Y(d,b);1c 1m.6e(f.3a,f.3W,f.3A,f.3X,c.3a,c.3W,c.3A,c.3X)?(g=!0,!1):2h 0},6)),g},5M:11(a,b){14 c={1Y:!0,2m:!0,4V:{y:0,x:0}};1l(6.1a.2l){14 d=6.4j(b),e=6.1W.1B.28[1m.1U(b)].1j;6.1a.2l&&((a.13<d.1g.13||a.13+e.18>d.1g.13+d.1j.18)&&(c.1Y=!1,c.4V.x=a.13<d.1g.13?d.1g.13-a.13:d.1g.13+d.1j.18-(a.13+e.18)),(a.17<d.1g.17||a.17+e.1b>d.1g.17+d.1j.1b)&&(c.2m=!1,c.4V.y=a.17<d.1g.17?d.1g.17-a.17:d.1g.17+d.1j.1b-(a.17+e.1b)))}1c c},4j:11(a,b){14 c={17:$(22).8Z(),13:$(22).91()},d=6.1D;"2y"==d&&(d=6.1d);14 e,f=$(d).4f(6.1a.2l.4Y).4d()[0];e=f&&"4p"!=6.1a.2l.4Y?{1j:{18:$(f).49(),1b:$(f).2U()},1g:$(f).1K()}:{1j:6f.4p(),1g:c};14 g=6.1a.2l.2p;1l(g&&!b){14 h=1k.1E(e.1j.1b,e.1j.18);1l(2*g>h&&(g=1k.1E(1k.2Y(.5*h),0)),g){e.1j.18-=2*g,e.1j.1b-=2*g,e.1g.17+=g,e.1g.13+=g;14 i=1m.1S(a);"2m"==i?(e.1j.18+=g,"13"==1m.1U(a)&&(e.1g.13-=g)):(e.1j.1b+=g,"17"==1m.1U(a)&&(e.1g.17-=g))}}1c 6.1F.32.bC=e,e},6S:11(){14 a;1l("2y"==6.1a.1D)1l(6.1n("39")){14 b=$(6.1d).1K();a={17:1k.1V(b.17),13:1k.1V(b.13)}}24 a=6g.7x(6.1F.8I);24{14 b=$(6.1D).1K();a={17:1k.1V(b.17),13:1k.1V(b.13)}}1c 6.1F.32.4T=a,a},6R:11(){1l(6.1F.32.6U)1c 6.1F.32.6U;14 a;1c a="2y"==6.1a.1D?6g.7z():{18:$(6.1D).49(),1b:$(6.1D).2U()},6.1F.32.6U=a,a},4S:11(){1l(6.1F.32.6V)1c 6.1F.32.6V;14 a={1g:6.6S(),1j:6.6R()};1c 6.1F.32.6V=a,a},8U:11(a){14 b=6.4S(),c="13";1l("2m"==1m.1S(a))1c 6.3Y(b,1m.1U(a));1l(1m.5b(a)){14 d=1m.4x(a);1c c=1m.1U(d),6.3Y(b,c)}14 e=6.3Y(b,c),f=1k.1V(.5*b.1j.18);1c e.3a+=f,e.3A+=f,e}}),$.1u(2F.23,{5F:11(){6.1n("5z",!0),6.1T()&&6.4Q(),6.1a.4q&&6.3m("6W")},6K:11(){6.1n("5z",!1),6.1a.4q&&6.5G("6W",$.1y(11(){6.3m("6W"),6.1n("5z")||6.1L()},6),6.1a.4q)}}),$.1u(2F.23,{2z:11(a,b,c,d){b=b;14 e=$.1y(c,d||6);6.1F.5y.2K({1d:a,92:b,93:e}),$(a).2z(b,e)},4L:11(){$.1z(6.1F.5y,11(a,b){$(b.1d).4L(b.92,b.93)}),6.1F.5y=[]}}),$.1u(2F.23,{8m:11(){6.1n("3l")||6.1n("3l",!0)},8n:11(){6.1n("3l")&&6.1n("3l",!1)}}),$.1u(2F.23,{1n:11(a,b){1c"6k"==$.1G(b)&&(6.1F.1n[a]=b),6.1F.1n[a]},1T:11(){1c 6.1n("1T")}}),$.1u(2F.23,{5G:11(a,b,c){6.1F.3z[a]=2g.54(b,c)},6L:11(a){1c 6.1F.3z[a]},3m:11(a){6.1F.3z[a]&&(22.5w(6.1F.3z[a]),6j 6.1F.3z[a])},8s:11(){$.1z(6.1F.3z,11(a,b){22.5w(b)}),6.1F.3z={}}}),$.1u(X,{5t:11(){ba.5t()},4D:11(a,b,c){1c 42.4D(a,b,c),6.2A(a)},2A:11(a){1c 2w 42(a)},6C:11(a){1c ba.6C(a)},6D:11(a){1c ba.6D(a),6}}),$.1z("21 3S".1X(" "),11(a,b){X[b]=11(a){1c 6.2A(a)[b](),6}}),$.1u(42,{4D:11(a,b){1l(a){"6E"==$.1G(a)&&(a=$(a)[0]);14 c=1R[2]||{};1c 2g.2R(a)?2w 2F(a,b,c):$(a).1z(11(a,d){2w 2F(d,b,c)}),6}}}),$.1u(42.23,{94:11(){1c ba.2A(6.1d,{39:!0})},21:11(){1c ba.21(6.1d),6}}),$.1z("3S".1X(" "),11(a,b){42.23[b]=11(){1c $.1z(6.94(),11(a,c){c[b]()}),6}}),X.5t(),X}),11(a){"11"==7a 40&&40.7b?40(["7c"],a):41&&!22.95&&(22.95=a(41))}(11(a){11 b(c,d,e){1l(!(6 3h b))1c 2w b(c,d,e);14 f=a.1G(1R[1]),g="6E"===f?1R[1]:{},h="11"===f?1R[1]:"11"===a.1G(1R[2])?1R[2]:!1;1c 6.1a=a.1u({6X:"3b"},g),6.3B=2w 41.bD,h&&6.6Y(h),6.6Z=0,6.3V=[],6.96(c),6}a.1u(b.23,{96:11(b){14 d="2B"==a.1G(b)?a(b):b 3h 41||b.2o>0?b:[b];a.1z(d,a.1y(11(b,d){14 e=a(),f=a(d);e=f.1n("2N")?e.2C(f):e.2C(f.1t("2N")),e.1z(a.1y(11(b,d){6.3V.2K(2w c(d,a.1y(11(a){6.5N(a)},6),a.1y(11(a){6.5N(a)},6),6.1a))},6))},6)),6.3V.2o<1&&44(a.1y(11(){6.5O()},6))},3T:11(){6.5N=6.70=6.71=6.5O=11(){},a.1z(6.3V,11(a,b){b.3T()}),6.3V=[]},5N:11(a){6.6Z++,a.72||(6.98=!0),6.70(a),6.6Z==6.3V.2o&&6[6.98?"71":"5O"]()},70:11(a){6.3B.bE(6,a)},71:11(){6.3B.bF(6)},5O:11(){6.3B.bG(6)},6Y:11(a){1c 6.3B.6Y(a),6},99:11(a){1c 6.3B.99(a),6},9b:11(a){1c 6.3B.9b(a),6},9c:11(a){1c 6.3B.9c(a),6}}),a.8S.3f=11(){1c b.2O(b,[6].3E(64.23.53.2P(1R)))};14 c=11(){1c 6.2E.2O(6,64.23.53.2P(1R))};1c a.1u(c.23,{73:{3b:11(){1c"3b"4m 2w 9d}()},2E:11(b,c,d){1c 6.2N=a(b)[0],6.9e=c,6.74=d,6.72=!1,6.1a=a.1u({6X:"3b",76:9f},1R[3]||{}),6.73.3b&&"5P"!=6.1a.6X?6.2N.bH&&"8q"!=a.1G(6.2N.3b)?(44(a.1y(11(){6.2N.3b>0?6.5Q():6.4k()},6)),2h 0):(a(6.2N).2z("4k",a.1y(11(){44(a.1y(11(){6.4k()},6))},6)),6.4W=[[9f,10],[bI,50],[bJ,3L],[bK,bL]],6.4l=0,6.5R=0,6.5S=6.4W[6.4l][1],6.77(),2h 0):(44(a.1y(6.78,6)),2h 0)},77:11(){6.5T=44(a.1y(11(){1l(6.2N.3b>0)1c 6.5Q(),2h 0;1l(6.5R+=6.5S,6.1a.76&&6.5R>=6.1a.76&&!6.9g&&(6.9g=!0,6.78()),6.5R>6.4W[6.4l][0]){1l(!6.4W[6.4l+1])1c 6.4k(),2h 0;6.4l++,6.5S=6.4W[6.4l][1]}6.77()},6),6.5S)},78:11(){14 b=2w 9d;6.79=b,b.5P=a.1y(11(){b.5P=11(){},6.73.3b||(6.2N.3b=b.18,6.2N.bM=b.1b),6.5Q()},6),b.bN=a.1y(6.4k,6),b.6I=6.2N.6I},3T:11(){6.79&&(6.79.5P=11(){}),6.5T&&(5w(6.5T),6.5T=2n)},5Q:11(){6.9h||(6.9h=!0,6.72=!0,6.9e(6))},4k:11(){6.9i||(6.9i=!0,6.3T(),6.74&&6.74(6))}}),b});',62,732,'||||||this|||||||||||||||||||||||||||||||||||||||||||||||||||||||||function||left|var|||top|width|tpd|options|height|return|element|css|border|position|stem|px|dimensions|Math|if|Position|is|background|_css|right|addClass||find|extend|div|append|bottom|proxy|each|tooltip|_vars|title|target|max|_cache|type|_tooltip|connection|content|offset|hide|case|shift|box|margin|radius|arguments|getOrientation|visible|getSide|round|skin|split|horizontal|inside|show|remove|window|prototype|else||data|break|frames|zIndex|Browser|center|build|color|close|spinner|_|void|_content|cut|ajax|containment|vertical|null|length|padding|IE|outside|tooltips|tipped|replace|hideOn|new|transform|mouse|bind|get|string|add|queue|initialize|Tooltip|inline|showOn|indexOf|middle|push|loadingIcon|_titleWrapper|img|apply|call|shadow|isElement|Support|side|innerHeight|loading|attr|transparent|floor|_position||updated|layouts|deepExtend|switch|updating|spacer|alpha|solid|api|x1|naturalWidth|180|PI|container|voila|mouseenter|instanceof|restore|click|backgroundColor|disabled|clearTimer|for|detach|showDelay|mouseleave|parseFloat|parseInt|borderColor|before|connections|setPosition|uids|xhr|timers|x2|deferred|Spin|reset|concat|document|match|charAt|rgba|frame|opacity|100|_side|getMath|after|stopLoading|html|corner|refresh|abort|detached|images|y1|y2|getSideLine|contained|define|jQuery|Collection|Skins|setTimeout|body|uid|prefixed|getDistance|innerWidth|test|stop|destroy|first|auto|closest|inversedPosition|_close|updateDimensionsToContent|getContainmentLayout|error|_ipos|in|cos|cache|viewport|hideAfter|onShow|style|animation|url|regex|flip|inverseCornerPlane|min|isPointWithinBoxLayout|abs|_shift|spin|create|defaultSkin|Class|maxStemHeight|stem_|setDimensions|_useTransform|skew|unbind|getVisible|_getTooltips|attach|_contentSpacer|raise|elementMarker|getTargetLayout|targetPosition|stemPosition|correction|intervals|Visible|selector|fadeIn||fadeOut|dark|slice|delay||pageX|MobileSafari|behavior|isCenter|toLowerCase|isCorner|adjustOffsetBasedOnPosition|_dimensions|supported|_rotate|_restore|hideOnClickOutside|icon|999|outerHeight|index|startLoading|up|down|move|spacing|triangle|startingZIndex|init|_resizeHandler|_resizeTimer|clearTimeout|toggle|events|active|queues|showhide|_titleRelative|relative|_inner_close|setActive|setTimer|display|overlap|_maxWidthPass|maxWidth|getPositionBasedOnTarget|getContainment|_progress|_resolve|onload|success|_time|_delay|_polling|Tipped|degrees|sfcc|Skin|Stem|version|afterUpdate|hideDelay|mousemove|size|Array|pageY|isAttached|Opera|opera|Chrome|Android|IEMobile|toUpperCase|isPointWithinBox|intersectsLine|Bounds|Mouse|lines|deg|delete|boolean|getInversedPosition|no|backgrounds|outerWidth|insertFrame|updateDimensions|stemPx|stem_top|stemDimensions|removeClass|downscale|translate|inverse|class|atan|_emptyClickHandler|getTooltipByTooltipElement|findElement|setStartingZIndex|object|toggleable|parentTooltip|abortAjax|src|_titleSpacer|setIdle|getTimer|visibility|_show|_update|unshift|negativity|getTargetDimensions|getTargetPosition|scroll|targetDimensions|targetLayout|idle|method|always|_processed|_notify|_reject|isLoaded|supports|errorCallback||pollFallbackAfter|poll|fallback|_fallbackImg|typeof|amd|jquery|String|constructor|base|200|hideOthers|defer|parentNode|getUID|AppleWebKit|Gecko|CrMo|prefix|touch|DocumentTouch|positions|toOrientation|_flip|getBoxFromPoints|pow|_buffer|getPosition|number|getDimensions|Color|_default|000000|toRGB|start|rotate|line|GET|param|callbacks|clear|Options|sticky|fixed|107|getTooltipPositionFromTarget|150|_skin|_frame|further|hack|_getFrame|clone|updateBackground|updateVars|removeAttr|getConnectionLayout|stemOffset|setSide|setStemPosition|_stemPosition|setStemShift|siblings|_m|last|substring|lastIndexOf|rgb|notransform|borderOpacity|tan|onWindowResize|resize|orientationchange|removeAll|getNests|nest|hideAll|disable|enable|getHighestTooltip|resetZ|undefined|preBuild|clearTimers|restoreElementToMarker|abortImageLoad|removeData|10000px|createPreBuildObservers|wrapper|_titleRelativePadder|padder|_title|times|_contentRelative|_contentRelativePadder|createPostBuildObservers|showDelayed|hideDelayed|event|update|fadeTo|_hide|afterHide|_tooltipShadow|createElementMarker|has|sanitizeContent|finishUpdate|fn|measuring|getPaddingLine|getContainmentSpace|positioning|isSideWithinContainment|result|scrollTop||scrollLeft|eventName|handler|items|Voila|_add||_broken|done||fail|progress|Image|successCallback|1e3|_usedPollFallback|_calledSuccess|_calledError|radian|sec|fromCharCode|Object|onHide|medium|wrap|nodeType|pointer|_tipped|getElementById|RegExp|exec|attachEvent|MSIE|WebKit|KHTML|rv|Apple|Mobile|Safari|ChromeMobile|navigator|userAgent|substr|join|createElement|Webkit|Moz|ms|Khtml|boxShadow|pointerEvents|try|ontouchstart|catch|vml|group|default|VML|adj|topleft|topmiddle|topright|righttop|rightmiddle|rightbottom|bottomright|bottommiddle|bottomleft|leftbottom|leftmiddle|lefttop|toDimension|sqrt|toString|aqua|00ffff|black|blue|0000ff|fuchsia|ff00ff|gray|808080|green|008000|lime|00ff00|maroon|800000|navy|000080|olive|808000|purple|800080|red|ff0000|silver|c0c0c0|teal|008080|white|ffffff|yellow|ffff00|fA|toFixed|360|infinite|steps|none|array|elements|set|115|105|110|114|borderTopLeftRadius|zoom|backgroundOpacity|stem_left|frame_|buildNo|Transform|buildTransform|inversed|sides|scale|buildNoTransform|enabled|999999|getBySelector||isVisibleByElement|clearAjaxCache|removeDetached|setDefaultSkin|eval|skinned|sanatizing|fnCallContent|_aborted|setAttribute|__content|inArray|splice|delegation|iframeShim|iframe|iframeshim|frameBorder|javascript|_contentWrapper|delegate|documentElement|touchend|_onResizeDimensions|hidden|inner|containmentSpace|containmentLayout|Deferred|notify|reject|resolve|complete|2e3|4e3|2e4|500|naturalHeight|onerror'.split('|'),0,{}));

/**
               _ _____           _          _     _      
              | |  __ \         (_)        | |   | |     
      ___ ___ | | |__) |___  ___ _ ______ _| |__ | | ___ 
     / __/ _ \| |  _  // _ \/ __| |_  / _` | '_ \| |/ _ \
    | (_| (_) | | | \ \  __/\__ \ |/ / (_| | |_) | |  __/
     \___\___/|_|_|  \_\___||___/_/___\__,_|_.__/|_|\___|
	 
	v 1.5 - a jQuery plug-in by Alvaro Prieto Lauroba
	
	Licences: MIT & GPL
	Feel free to use or modify this plugin as far as my full name is kept	
	
	If you are going to use this plug-in in production environments it is 
	strongly recommended to use its minified version: colResizable.min.js

*/

(function($){ 	
	
	var d = $(document); 		//window object
	var h = $("head");			//head object
	var drag = null;			//reference to the current grip that is being dragged
	var tables = [];			//array of the already processed tables (table.id as key)
	var	count = 0;				//internal count to create unique IDs when needed.	
	
	//common strings for packing
	var ID = "id";	
	var PX = "px";
	var SIGNATURE ="JColResizer";
    var FLEX = "JCLRFlex";
	
	//short-cuts
	var I = parseInt;
	var M = Math;
	var ie = navigator.userAgent.indexOf('Trident/4.0')>0;
	var S;
	var dragTimeout;

	try{S = sessionStorage;}catch(e){}	//Firefox crashes when executed as local file system
	
	//append required CSS rules  
	h.append("<style type='text/css'>  .JColResizer{table-layout:fixed;width: 1050px;} .JColResizer td, .JColResizer th{overflow:hidden;}  .JCLRgrips{ height:0px; position:relative;} .JCLRgrip{margin-left:-5px; position:absolute; z-index:5; } .JCLRgrip .JColResizer{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:10px;height:100%;cursor: e-resize;top:0px} .JCLRLastGrip{position:absolute; width:1px; } .JCLRgripDrag{ border-left:1px dotted black;	} .JCLRFlex{width:auto!important;}</style>");

	
	/**
	 * Function to allow column resizing for table objects. It is the starting point to apply the plugin.
	 * @param {DOM node} tb - reference to the DOM table object to be enhanced
	 * @param {Object} options	- some customization values
	 */
	var init = function( tb, options){	
		var t = $(tb);										//the table object is wrapped
		t.opt = options;
		if(t.opt.disable) return destroy(t);				//the user is asking to destroy a previously colResized table
		var	id = t.id = t.attr(ID) || SIGNATURE+count++;	//its id is obtained, if null new one is generated		
		t.p = t.opt.postbackSafe; 							//short-cut to detect postback safe 		
		if(!t.is("table") || tables[id] && !t.opt.partialRefresh) return; 		//if the object is not a table or if it was already processed then it is ignored.
		t.addClass(SIGNATURE).attr(ID, id).before('<div class="JCLRgrips"/>');	//the grips container object is added. Signature class forces table rendering in fixed-layout mode to prevent column's min-width
		t.g = []; t.c = []; t.w = t.width(); t.gc = t.prev(); t.f=t.opt.fixed;	//t.c and t.g are arrays of columns and grips respectively				
		if(options.marginLeft) t.gc.css("marginLeft", options.marginLeft);  	//if the table contains margins, it must be specified
		if(options.marginRight) t.gc.css("marginRight", options.marginRight);  	//since there is no (direct) way to obtain margin values in its original units (%, em, ...)
		t.cs = I(ie? tb.cellSpacing || tb.currentStyle.borderSpacing :t.css('border-spacing'))||2;	//table cellspacing (not even jQuery is fully cross-browser)
		t.b  = I(ie? tb.border || tb.currentStyle.borderLeftWidth :t.css('border-left-width'))||1;	//outer border width (again cross-browser issues)
		// if(!(tb.style.width || tb.width)) t.width(t.width()); //I am not an IE fan at all, but it is a pity that only IE has the currentStyle attribute working as expected. For this reason I can not check easily if the table has an explicit width or if it is rendered as "auto"
		tables[id] = t; 	//the table object is stored using its id as key	
		createGrips(t);		//grips are created
	
	};


	/**
	 * This function allows to remove any enhancements performed by this plugin on a previously processed table.
	 * @param {jQuery ref} t - table object
	 */
	var destroy = function(t){
		var id=t.attr(ID), t=tables[id];		//its table object is found
		if(!t||!t.is("table")) return;			//if none, then it wasn't processed	 
		t.removeClass(SIGNATURE+" "+FLEX).gc.remove();	//class and grips are removed
		delete tables[id];						//clean up data
	};


	/**
	 * Function to create all the grips associated with the table given by parameters 
	 * @param {jQuery ref} t - table object
	 */
	var createGrips = function(t){	
	
		var th = t.find(">thead>tr>th,>thead>tr>td");	//if table headers are specified in its semantically correct tag, are obtained
		if(!th.length) th = t.find(">tbody>tr:first>th,>tr:first>th,>tbody>tr:first>td, >tr:first>td");	 //but headers can also be included in different ways
		th = th.filter(":visible");					//filter invisible columns
		t.cg = t.find("col"); 						//a table can also contain a colgroup with col elements		
		t.ln = th.length;							//table length is stored	
		if(t.p && S && S[t.id])memento(t,th);		//if 'postbackSafe' is enabled and there is data for the current table, its coloumn layout is restored
		th.each(function(i){						//iterate through the table column headers			
			var c = $(this); 						//jquery wrap for the current column			
			var g = $(t.gc.append('<div class="JCLRgrip"></div>')[0].lastChild); //add the visual node to be used as grip
            g.append(t.opt.gripInnerHtml).append('<div class="'+SIGNATURE+'"></div>');
            if(i == t.ln-1){
                g.addClass("JCLRLastGrip"); 
                if(t.f) g.html("");
            }
            g.bind('touchstart mousedown', onGripMouseDown); //bind the mousedown event to start dragging 

			g.t = t; g.i = i; g.c = c;	c.w =c.width();		//some values are stored in the grip's node data
			c.draggable = c.hasClass("col-resize"); //TODO
			g.draggable = c.draggable; //TODO

			if(!c.draggable){
				g.addClass("no-col-resize"); //TODO Set no cursor
				g.unbind('touchstart mousedown', onGripMouseDown);
			}

			console.log("before width ", c.w, c.text());
			t.g.push(g); t.c.push(c);						//the current grip and column are added to its table object

			if(t.opt.init){ //TODO
				//c.width(c.w).removeAttr("width"); 				//the width of the column is converted into pixel-based measurements
				c.css({
					"width":c.w+"px"					
				}).removeAttr("width");
			}
			console.log("after width", c.width(), c.text());
			g.data(SIGNATURE, {i:i, t:t.attr(ID), last: i == t.ln-1});	 //grip index and its table name are stored in the HTML 												
		}); 	
		t.cg.removeAttr("width");	//remove the width attribute from elements in the colgroup 
		syncGrips(t); 				//the grips are positioned according to the current table layout			
		//there is a small problem, some cells in the table could contain dimension values interfering with the 
		//width value set by this plugin. Those values are removed
		t.find('td, th').not(th).not('table th, table td').each(function(){  
			$(this).removeAttr('width');	//the width attribute is removed from all table cells which are not nested in other tables and dont belong to the header
		});		
        if(!t.f){
            t.removeAttr('width').addClass(FLEX); //if not fixed, let the table grow as needed
        }
	};
	
    
	/**
	 * Function to allow the persistence of columns dimensions after a browser postback. It is based in
	 * the HTML5 sessionStorage object, which can be emulated for older browsers using sessionstorage.js
	 * @param {jQuery ref} t - table object
	 * @param {jQuery ref} th - reference to the first row elements (only set in deserialization)
	 */
	var memento = function(t, th){ 
		var w,m=0,i=0,aux =[],tw;
		if(th){										//in deserialization mode (after a postback)
			t.cg.removeAttr("width");
			if(t.opt.flush){ S[t.id] =""; return;} 	//if flush is activated, stored data is removed
			w = S[t.id].split(";");					//column widths is obtained
			tw = w[t.ln+1];
			if(!t.f && tw)	t.width(tw);			//it not fixed and table width data available its size is restored
			for(;i<t.ln;i++){						//for each column
				aux.push(100*w[i]/w[t.ln]+"%"); 	//width is stored in an array since it will be required again a couple of lines ahead
				th.eq(i).css("width", aux[i] ); 	//each column width in % is restored
			}			
			for(i=0;i<t.ln;i++)
				t.cg.eq(i).css("width", aux[i]);	//this code is required in order to create an inline CSS rule with higher precedence than an existing CSS class in the "col" elements
		}else{							//in serialization mode (after resizing a column)
			S[t.id] ="";				//clean up previous data
			for(;i < t.c.length; i++){	//iterate through columns
				w = t.c[i].width();		//width is obtained
				S[t.id] += w+";";		//width is appended to the sessionStorage object using ID as key
				m+=w;					//carriage is updated to obtain the full size used by columns
			}
			S[t.id]+=m;							//the last item of the serialized string is the table's active area (width), 
												//to be able to obtain % width value of each columns while deserializing
			if(!t.f) S[t.id] += ";"+t.width(); 	//if not fixed, table width is stored
		}	
	};
	
	
	/**
	 * Function that places each grip in the correct position according to the current table layout	 
	 * @param {jQuery ref} t - table object
	 */
	var syncGrips = function (t){	
		t.gc.width(t.w);			//the grip's container width is updated				
		for(var i=0; i<t.ln; i++){	//for each column
			var c = t.c[i]; 			
			t.g[i].css({			//height and position of the grip is updated according to the table layout
				left: c.offset().left - t.offset().left + c.outerWidth(false) + t.cs / 2 + PX,
				height: t.opt.headerOnly? t.c[0].outerHeight(false) : t.outerHeight(false)				
			});			
		} 	
	};
	
	
	
	/**
	* This function updates column's width according to the horizontal position increment of the grip being
	* dragged. The function can be called while dragging if liveDragging is enabled and also from the onGripDragOver
	* event handler to synchronize grip's position with their related columns.
	* @param {jQuery ref} t - table object
	* @param {number} i - index of the grip being dragged
	* @param {bool} isOver - to identify when the function is being called from the onGripDragOver event	
	*/
	var syncCols = function(t,i,isOver){
		var inc = drag.x-drag.l, c = t.c[i], c2 = t.c[i+1]; 			
		var w = c.w + inc;	var w2= c2.w- inc;	//their new width is obtained					
		c.width( w + PX);			
		t.cg.eq(i).width( w + PX); 
        if(t.f){ //if fixed mode
            c2.width(w2 + PX);
            t.cg.eq(i+1).width( w2 + PX);
        }
		if(isOver){
            c.w=w; 
            c2.w= t.f ? w2 : c2.w;
        }
	};

	
	/**
	* This function updates all columns width according to its real width. It must be taken into account that the 
	* sum of all columns can exceed the table width in some cases (if fixed is set to false and table has some kind 
	* of max-width).
	* @param {jQuery ref} t - table object	
	*/
	var applyBounds = function(t){
        var w = $.map(t.c, function(c){			//obtain real widths
            return c.width();
        });
        t.width(t.width()).removeClass(FLEX);	//prevent table width changes
        $.each(t.c, function(i,c){
            c.width(w[i]).w = w[i];				//set column widths applying bounds (table's max-width)
        });
		t.addClass(FLEX);						//allow table width changes
	};
	
	
	/**
	 * Event handler used while dragging a grip. It checks if the next grip's position is valid and updates it. 
	 * @param {event} e - mousemove event binded to the window object
	 */
	var onGripDrag = function(e){	
		//if(!drag) return; 
		// clearTimeout(dragTimeout);

		dragTimeout = setTimeout(function() {
			if(!drag) return; 			
			var t = drag.t;		//table object reference 

	        var oe = e.originalEvent && e.originalEvent.touches; //TODO
	        var ox = oe ? oe[0].pageX : e.pageX;    //original position (touch or mouse)
	        var x =  ox - drag.ox + drag.l;	        //next position according to horizontal mouse position increment
			var mw = t.opt.minWidth, i = drag.i ;	//cell's min width
			var l = t.cs*1.5 + mw + t.b;
	        var last = i == t.ln-1;                 			//check if it is the last column's grip (usually hidden)
	        var min = i? t.g[i-1].position().left+t.cs+mw: l;	//min position according to the contiguous cells
			var max = t.f ? 	//fixed mode?
				i == t.ln-1? 
					t.w-l: 
					t.g[i+1].position().left-t.cs-mw:
				Infinity; 								//max position according to the contiguous cells 
			x = M.max(min, M.min(max, x));				//apply bounding		
			drag.x = x;	 drag.css("left",  x + PX); 	//apply position increment	
	        if(last){									//if it is the last grip
	            var c = t.c[drag.i];					//width of the last column is obtained
				drag.w = c.w + x- drag.l;         
	        }              
			if(t.opt.liveDrag){ 			//if liveDrag is enabled
				if(last){
				    c.width(drag.w);
	                t.w = t.width();
				}else{
					syncCols(t,i); 			//columns are synchronized
				}
				syncGrips(t);
				var cb = t.opt.onDrag;							//check if there is an onDrag callback
				if (cb) { e.currentTarget = t[0]; cb(e); }		//if any, it is fired			
			}

		}, 30);
        
		return false; 	//prevent text selection while dragging				
	};
	

	/**
	 * Event handler fired when the dragging is over, updating table layout
	 */
	var onGripDragOver = function(e){	
		
		d.unbind('touchend.'+SIGNATURE+' mouseup.'+SIGNATURE).unbind('touchmove.'+SIGNATURE+' mousemove.'+SIGNATURE);
		$("head :last-child").remove(); 				//remove the dragging cursor style		
		if(!drag) return;
		drag.removeClass(drag.t.opt.draggingClass);		//remove the grip's dragging css-class
		var t = drag.t;
		var cb = t.opt.onResize; 	    //get some values	
        var i = drag.i;                 //column index
        var last = i == t.ln-1;         //check if it is the last column's grip (usually hidden)
        var c = t.g[i].c;               //the column being dragged
        if(last){
            c.width(drag.w);
            c.w = drag.w;
        }else{
            syncCols(t, i, true);	//the columns are updated
        }
        if(!t.f) applyBounds(t);	//if not fixed mode, then apply bounds to obtain real width values
        syncGrips(t);				//the grips are updated
        if (cb) { e.currentTarget = t[0]; cb(e); }	//if there is a callback function, it is fired
		if(t.p && S) memento(t); 						//if postbackSafe is enabled and there is sessionStorage support, the new layout is serialized and stored
		drag = null;									//since the grip's dragging is over									
	};	
	
	
	/**
	 * Event handler fired when the grip's dragging is about to start. Its main goal is to set up events 
	 * and store some values used while dragging.
     * @param {event} e - grip's mousedown event
	 */
	var onGripMouseDown = function(e){
		var o = $(this).data(SIGNATURE);			//retrieve grip's data
		var t = tables[o.t],  g = t.g[o.i];			//shortcuts for the table and grip objects
        var oe = e.originalEvent && e.originalEvent.touches; //TODO          //touch or mouse event?
        g.ox = oe? oe[0].pageX: e.pageX;            //the initial position is kept
		g.l = g.position().left;
		d.bind('touchmove.'+SIGNATURE+' mousemove.'+SIGNATURE, onGripDrag ).bind('touchend.'+SIGNATURE+' mouseup.'+SIGNATURE, onGripDragOver);	//mousemove and mouseup events are bound
		h.append("<style type='text/css'>*{cursor:"+ t.opt.dragCursor +"!important}</style>"); 	//change the mouse cursor
		g.addClass(t.opt.draggingClass); 	//add the dragging class (to allow some visual feedback)				
		
		//TODO
		if(g.draggable){
			drag = g;							//the current grip is stored as the current dragging object	
		}else{
			g.removeClass(t.opt.draggingClass);  //TODO
		}		

		if(t.c[o.i].l) for(var i=0,c; i<t.ln; i++){ 
			c=t.c[i]; 
			c.l = false; 
			c.w = c.width(); //TODO
		} 	//if the colum is locked (after browser resize), then c.w must be updated		
		return false; 	//prevent text selection
	};
    
    
	/**
	 * Event handler fired when the browser is resized. The main purpose of this function is to update
	 * table layout according to the browser's size synchronizing related grips 
	 */
	var onResize = function(){
		for(t in tables){		
			var t = tables[t], i, mw=0;		
			try{		
				t.removeClass(SIGNATURE);						//firefox doesn't like layout-fixed in some cases
				if (t.f && t.w != t.width()) {					//if the the table's width has changed and it is in fixed mode
					t.w = t.width();							//its new value is kept the active cells area is obtained
					for(i=0; i<t.ln; i++) mw+= t.c[i].w;		
					//cell rendering is not as trivial as it might seem, and it is slightly different for
					//each browser. In the beginning i had a big switch for each browser, but since the code
					//was extremely ugly now I use a different approach with several re-flows. This works 
					//pretty well but it's a bit slower. For now, lets keep things simple...   
					for(i=0; i<t.ln; i++) t.c[i].css("width", M.round(1000*t.c[i].w/mw)/10 + "%").l=true; 
					//c.l locks the column, telling us that its c.w is outdated									
				}
				syncGrips(t.addClass(SIGNATURE));
			}catch(e){}
		} 
		
	};		


	//bind resize event, to update grips position 
	$(window).bind('resize.'+SIGNATURE, onResize); 


	/**
	 * The plugin is added to the jQuery library
	 * @param {Object} options -  an object that holds some basic customization values 
	 */
    $.fn.extend({  
        colResizable: function(options) {           
            var defaults = {
			
				//attributes:
                draggingClass: 'JCLRgripDrag',	//css-class used when a grip is being dragged (for visual feedback purposes)
				gripInnerHtml: '',				//if it is required to use a custom grip it can be done using some custom HTML				
				liveDrag: false,				//enables table-layout updating while dragging	
                fixed: true,                    //table width does not change if columns are resized
				minWidth: 15, 					//minimum width value in pixels allowed for a column 
				headerOnly: false,				//specifies that the size of the the column resizing anchors will be bounded to the size of the first row 
				hoverCursor: "e-resize",  		//cursor to be used on grip hover
				dragCursor: "e-resize",  		//cursor to be used while dragging
				postbackSafe: false, 			//when it is enabled, table layout can persist after postback or page refresh. It requires browsers with sessionStorage support (it can be emulated with sessionStorage.js). 
				flush: false, 					//when postbakSafe is enabled, and it is required to prevent layout restoration after postback, 'flush' will remove its associated layout data 
				marginLeft: null,				//in case the table contains any margins, colResizable needs to know the values used, e.g. "10%", "15em", "5px" ...
				marginRight: null, 				//in case the table contains any margins, colResizable needs to know the values used, e.g. "10%", "15em", "5px" ...
				disable: false,					//disables all the enhancements performed in a previously colResized table	
				partialRefresh: false,			//can be used in combination with postbackSafe when the table is inside of an updatePanel
				
				//events:
				onDrag: null, 					//callback function to be fired during the column resizing process if liveDrag is enabled
				onResize: null					//callback function fired when the dragging process is over
            };


			this.setGripperInPosition = function(){								
				setTimeout(function() {
					console.log("setGripperInPosition");
					onResize();
					onResize();

					setTimeout(function() {
					console.log("setGripperInPosition 2");
						onResize();						
					}, 1500);

				}, 1500);
			};

			var options =  $.extend(defaults, options);			
            return this.each(function() {				
             	init( this, options);             
            });
        }
    });
})(jQuery);


/*!

Split Pane v0.4.0

Copyright (c) 2014 Simon HagstrÃ¶m

Released under the MIT license
https://raw.github.com/shagstrom/split-pane/master/LICENSE

*/
(function($) {
	
	$.fn.splitPane = function() {
		var $splitPanes = this;
		$splitPanes.each(setMinHeightAndMinWidth);
		$splitPanes.append('<div class="split-pane-resize-shim">');
		
		//$splitPanes.children('.split-pane-divider').bind('dblclick', fullOpen);
		//$splitPanes.children('.split-pane-divider').bind('mousedown', mousedownHandler);
		//$splitPanes.children('.split-pane-divider').bind('dblclick', fullOpen);

		/*$splitPanes.children('.split-pane-divider').on('click', function(event){
			clicks++;
			var _self = this, e = event;
	      	if (clicks == 1) {
		        setTimeout(function(){
			          if(clicks == 1) {
			            mousedownHandler(e, _self);
			          } else {
			            fullOpen(_self);
			          }
			          clicks = 0;
		        }, 300);
		    }
		});*/

		setTimeout(function() {
			// Doing this later because of an issue with Chrome (v23.0.1271.64) returning split-pane width = 0
			// and triggering multiple resize events when page is being opened from an <a target="_blank"> .
			$splitPanes.each(function() {
				$(this).bind('_splitpaneparentresize', createParentresizeHandler($(this)));
			});
			$(window).trigger('resize');
		}, 100);
	};

	var SPLITPANERESIZE_HANDLER = '_splitpaneparentresizeHandler';

	/**
	 * A special event that will "capture" a resize event from the parent split-pane or window.
	 * The event will NOT propagate to grandchildren.
	 */
	jQuery.event.special._splitpaneparentresize = {
		setup: function(data, namespaces) {
			var element = this,
				parent = $(this).parent().closest('.split-pane')[0] || window;
			$(this).data(SPLITPANERESIZE_HANDLER, function(event) {
				var target = event.target === document ? window : event.target;
				if (target === parent) {
					event.type = "_splitpaneparentresize";
					jQuery.event.dispatch.apply(element, arguments);
				} else {
					event.stopPropagation();
				}
			});
			$(parent).bind('resize', $(this).data(SPLITPANERESIZE_HANDLER));
		},
		teardown: function(namespaces) {
			var parent = $(this).parent().closest('.split-pane')[0] || window;
			$(parent).unbind('resize', $(this).data(SPLITPANERESIZE_HANDLER));
			$(this).removeData(SPLITPANERESIZE_HANDLER);
		}
	};

	function setMinHeightAndMinWidth() {
		var $splitPane = $(this),
			$firstComponent = $splitPane.children('.split-pane-component:first'),
			$divider = $splitPane.children('.split-pane-divider'),
			$lastComponent = $splitPane.children('.split-pane-component:last');
		if ($splitPane.is('.fixed-top, .fixed-bottom, .horizontal-percent')) {
			$splitPane.css('min-height', (minHeight($firstComponent) + minHeight($lastComponent) + $divider.height()) + 'px');
		} else {
			$splitPane.css('min-width', (minWidth($firstComponent) + minWidth($lastComponent) + $divider.width()) + 'px');
		}
	}

	/*function fullOpen(elem) {
		var $firstComponent = $(elem).parent().children('.split-pane-component:first'),
		    $divider = $(elem).parent().children('.split-pane-divider'),
		    $lastComponent = $(elem).parent().children('.split-pane-component:last');

		    if($firstComponent.css('right') === '0px') {
			    $firstComponent.css('right', 80 + '%');
			    $divider.css('right', 80 + '%');
			    $lastComponent.css('width', 80 + '%');
		    }
		    else {
			    $firstComponent.css('right', 0 + '%');
			    $divider.css('right', 0 + '%');
			    $lastComponent.css('width', 0 + '%');
		    }    
	}*/

	/*function mousedownHandler(event) {
		event.preventDefault();
		var isTouchEvent = event.type.match(/^touch/),
			moveEvent = isTouchEvent ? 'touchmove' : 'mousemove',
			endEvent = isTouchEvent? 'touchend' : 'mouseup',
			$divider = $(this),
			$splitPane = $divider.parent(),
			$resizeShim = $divider.siblings('.split-pane-resize-shim');
		$resizeShim.show();
		$divider.addClass('dragged');
		if (isTouchEvent) {
			$divider.addClass('touch');
		}
		$(document).on(moveEvent, createMousemove($splitPane, pageXof(event), pageYof(event)));
		$(document).one(endEvent, function(event) {
			$(document).unbind(moveEvent);
			$divider.removeClass('dragged touch');
			$resizeShim.hide();
		});
	}*/

	function createParentresizeHandler($splitPane) {
		var splitPane = $splitPane[0],
			firstComponent = $splitPane.children('.split-pane-component:first')[0],
			divider = $splitPane.children('.split-pane-divider')[0],
			lastComponent = $splitPane.children('.split-pane-component:last')[0];
		if ($splitPane.is('.fixed-top')) {
			var lastComponentMinHeight = minHeight(lastComponent);
			return function(event) {
				var maxfirstComponentHeight = splitPane.offsetHeight - lastComponentMinHeight - divider.offsetHeight;
				if (firstComponent.offsetHeight > maxfirstComponentHeight) {
					setTop(firstComponent, divider, lastComponent, maxfirstComponentHeight + 'px');
				}
				$splitPane.resize();
			};
		} else if ($splitPane.is('.fixed-bottom')) {
			var firstComponentMinHeight = minHeight(firstComponent);
			return function(event) {
				var maxLastComponentHeight = splitPane.offsetHeight - firstComponentMinHeight - divider.offsetHeight;
				if (lastComponent.offsetHeight > maxLastComponentHeight) {
					setBottom(firstComponent, divider, lastComponent, maxLastComponentHeight + 'px')
				}
				$splitPane.resize();
			};
		} else if ($splitPane.is('.horizontal-percent')) {
			var lastComponentMinHeight = minHeight(lastComponent),
				firstComponentMinHeight = minHeight(firstComponent);
			return function(event) {
				var maxLastComponentHeight = splitPane.offsetHeight - firstComponentMinHeight - divider.offsetHeight;
				if (lastComponent.offsetHeight > maxLastComponentHeight) {
					setBottom(firstComponent, divider, lastComponent, (maxLastComponentHeight / splitPane.offsetHeight * 100) + '%');
				} else {
					if (splitPane.offsetHeight - firstComponent.offsetHeight - divider.offsetHeight < lastComponentMinHeight) {
						setBottom(firstComponent, divider, lastComponent, (lastComponentMinHeight / splitPane.offsetHeight * 100) + '%');
					}
				}
				$splitPane.resize();
			};
		} else if ($splitPane.is('.fixed-left')) {
			var lastComponentMinWidth = minWidth(lastComponent);
			return function(event) {
				var maxFirstComponentWidth = splitPane.offsetWidth - lastComponentMinWidth - divider.offsetWidth;
				if (firstComponent.offsetWidth > maxFirstComponentWidth) {
					setLeft(firstComponent, divider, lastComponent, maxFirstComponentWidth + 'px');
				}
				$splitPane.resize();
			};
		} else if ($splitPane.is('.fixed-right')) {
			var firstComponentMinWidth = minWidth(firstComponent);
			return function(event) {
				var maxLastComponentWidth = splitPane.offsetWidth - firstComponentMinWidth - divider.offsetWidth;
				if (lastComponent.offsetWidth > maxLastComponentWidth) {
					setRight(firstComponent, divider, lastComponent, maxLastComponentWidth + 'px');
				}
				$splitPane.resize();
			};
		} else if ($splitPane.is('.vertical-percent')) {
			var lastComponentMinWidth = minWidth(lastComponent),
				firstComponentMinWidth = minWidth(firstComponent);
			return function(event) {
				var maxLastComponentWidth = splitPane.offsetWidth - firstComponentMinWidth - divider.offsetWidth;
				if (lastComponent.offsetWidth > maxLastComponentWidth) {
					setRight(firstComponent, divider, lastComponent, (maxLastComponentWidth / splitPane.offsetWidth * 100) + '%');
				} else {
					if (splitPane.offsetWidth - firstComponent.offsetWidth - divider.offsetWidth < lastComponentMinWidth) {
						setRight(firstComponent, divider, lastComponent, (lastComponentMinWidth / splitPane.offsetWidth * 100) + '%');
					}
				}
				$splitPane.resize();
			};
		}
	}

	/*function createMousemove($splitPane, pageX, pageY) {
		var splitPane = $splitPane[0],
			firstComponent = $splitPane.children('.split-pane-component:first')[0],
			divider = $splitPane.children('.split-pane-divider')[0],
			lastComponent = $splitPane.children('.split-pane-component:last')[0];
		if ($splitPane.is('.fixed-top')) {
			var firstComponentMinHeight =  minHeight(firstComponent),
				maxFirstComponentHeight = splitPane.offsetHeight - minHeight(lastComponent) - divider.offsetHeight,
				topOffset = divider.offsetTop - pageY;
			return function(event) {
				event.preventDefault();
				var top = Math.min(Math.max(firstComponentMinHeight, topOffset + pageYof(event)), maxFirstComponentHeight);
				setTop(firstComponent, divider, lastComponent, top + 'px');
				$splitPane.resize();
			};
		} else if ($splitPane.is('.fixed-bottom')) {
			var lastComponentMinHeight = minHeight(lastComponent),
				maxLastComponentHeight = splitPane.offsetHeight - minHeight(firstComponent) - divider.offsetHeight,
				bottomOffset = lastComponent.offsetHeight + pageY;
			return function(event) {
				event.preventDefault();
				var bottom = Math.min(Math.max(lastComponentMinHeight, bottomOffset - pageYof(event)), maxLastComponentHeight);
				setBottom(firstComponent, divider, lastComponent, bottom + 'px');
				$splitPane.resize();
			};
		} else if ($splitPane.is('.horizontal-percent')) {
			var splitPaneHeight = splitPane.offsetHeight,
				lastComponentMinHeight = minHeight(lastComponent),
				maxLastComponentHeight = splitPaneHeight - minHeight(firstComponent) - divider.offsetHeight,
				bottomOffset = lastComponent.offsetHeight + pageY;
			return function(event) {
				event.preventDefault();
				var bottom = Math.min(Math.max(lastComponentMinHeight, bottomOffset - pageYof(event)), maxLastComponentHeight);
				setBottom(firstComponent, divider, lastComponent, (bottom / splitPaneHeight * 100) + '%');
				$splitPane.resize();
			};
		} else if ($splitPane.is('.fixed-left')) {
			var firstComponentMinWidth = minWidth(firstComponent),
				maxFirstComponentWidth = splitPane.offsetWidth - minWidth(lastComponent) - divider.offsetWidth,
				leftOffset = divider.offsetLeft - pageX;
			return function(event) {
				event.preventDefault();
				var left = Math.min(Math.max(firstComponentMinWidth, leftOffset + pageXof(event)), maxFirstComponentWidth);
				setLeft(firstComponent, divider, lastComponent, left + 'px')
				$splitPane.resize();
			};
		} else if ($splitPane.is('.fixed-right')) {
			var lastComponentMinWidth = minWidth(lastComponent),
				maxLastComponentWidth = splitPane.offsetWidth - minWidth(firstComponent) - divider.offsetWidth,
				rightOffset = lastComponent.offsetWidth + pageX;
			return function(event) {
				event.preventDefault();
				var right = Math.min(Math.max(lastComponentMinWidth, rightOffset - pageXof(event)), maxLastComponentWidth);
				setRight(firstComponent, divider, lastComponent, right + 'px');
				$splitPane.resize();
			};
		} else if ($splitPane.is('.vertical-percent')) {
			var splitPaneWidth = splitPane.offsetWidth,
				lastComponentMinWidth = minWidth(lastComponent),
				maxLastComponentWidth = splitPaneWidth - minWidth(firstComponent) - divider.offsetWidth,
				rightOffset = lastComponent.offsetWidth + pageX;
			return function(event) {
				event.preventDefault();
				var right = Math.min(Math.max(lastComponentMinWidth, rightOffset - pageXof(event)), maxLastComponentWidth);
				setRight(firstComponent, divider, lastComponent, (right / splitPaneWidth * 100) + '%');
				$splitPane.resize();
			};
		}
	}*/

	function pageXof(event) {
		return event.pageX || event.originalEvent.pageX;
	}

	function pageYof(event) {
		return event.pageY || event.originalEvent.pageY;
	}

	function minHeight(element) {
		return parseInt($(element).css('min-height')) || 0;
	}

	function minWidth(element) {
		return parseInt($(element).css('min-width')) || 0;
	}

	function setTop(firstComponent, divider, lastComponent, top) {
		firstComponent.style.height = top;
		divider.style.top = top;
		lastComponent.style.top = top;
	}

	function setBottom(firstComponent, divider, lastComponent, bottom) {
		firstComponent.style.bottom = bottom;
		divider.style.bottom = bottom;
		lastComponent.style.height = bottom;
	}

	function setLeft(firstComponent, divider, lastComponent, left) {
		firstComponent.style.width = left;
		divider.style.left = left;
		lastComponent.style.left = left;
	}

	function setRight(firstComponent, divider, lastComponent, right) {
		firstComponent.style.right = right;
		divider.style.right = right;
		lastComponent.style.width = right;
	}

})(jQuery);
/**
 * enables resizable data table columns.
 * Script by Ingo Hofmann
 */
(function($) {

    /**
     * Widget makes columns of a table resizable.
     */
    $.widget("ih.resizableColumns", {

        /**
         * initializing columns
         */
        _create: function() {
            this._initResizable();
        },


        refresh: function() {
            this._initResizable();
        },
        /**
         * init jQuery UI sortable
         */
        _initResizable: function() {

            var colElement, thElement, colWidth, originalSize, 
                originalTableSize, actualTableWidth, 
                updateTimeout, nextColWidth, 
                tempWidth = 80;

            var table = this.element;
            // this.element.find("th").resizable().resizable("destroy");

            this.element.find("th:not('.no-col-resize')").resizable({
                // use existing DIV rather than creating new nodes
                handles: {
                    "e": ".resizeHelper"
                },   
                
                // default min width in case there is no label
                minWidth: 80,
                
                // set min-width to label size
                create: function(event, ui) {
                    actualTableWidth = table.width();
                    var minWidth = $(this).find(".columnLabel").width();
                    if (minWidth) {
                        
                        // FF cannot handle absolute resizable helper
                        /*if ($.browser.mozilla) {
                            minWidth += $(this).find(".ui-resizable-e").width();
                        }*/
                        minWidth += $(this).find(".ui-resizable-e").width();
                        
                        $(this).resizable("option", "minWidth", minWidth);
                    }
                },

                // set correct COL element and original size
                start: function(event, ui) {
                    var colIndex = ui.helper.index() + 1;
                    colElement = table.find("colgroup > col:nth-child(" + colIndex + ")");
                    thElement = table.find("thead tr > th:nth-child(" + colIndex + ")");

                    colWidth = parseInt(colElement.get(0).style.width, 10); // faster than width
                    originalSize = ui.size.width;
                    originalTableSize = table.width();
                    nextColWidth  = thElement.next("th").width();
                },

                // set COL width
                resize: function(event, ui) {
                    
                    var resizeDelta = ui.size.width - originalSize;
                       var $this = $(this);
                    var newColWidth = colWidth + resizeDelta;

                    colElement.width(newColWidth);

                      if(nextColWidth - resizeDelta> 80){
                            thElement.next("th").width(nextColWidth - resizeDelta);
                            // tempWidth = thElement.width();
                        }else{                          
                            // event.stopPropagation();
                            // event.preventDefault();
                            //ui.element.resizable('destroy');
                        }
                    
                    var targetTdElements = table.find(".bulk-action-fixed-row").children("td");
                    if(targetTdElements.length > 0) {
                        table.find("th.ui-resizable").each(function(index) {
                            if(targetTdElements[index]) {
                                console.log('----->>> Th width - ', $(this).outerWidth());
                                $(targetTdElements[index]).width($(this).outerWidth());
                            }
                        });
                    }

                    // height must be set in order to prevent IE9 to set wrong height
                    $(this).css("height", "auto");
                },
                stop: function( event, ui ) { console.log("stop")}
            });
        }

    });

    // init resizable
    //$(".resizable").resizableColumns();
})(jQuery);
/**
 * jquery.multisortable.js - v0.2
 * https://github.com/shvetsgroup/jquery.multisortable
 *
 * Author: Ethan Atlakson, Jay Hayes, Gabriel Such, Alexander Shvets
 * Last Revision 3/16/2012
 * multi-selectable, multi-sortable jQuery plugin
 */

!function($) {

	$.fn.multiselectable = function(options) {
		if (!options) {
			options = {}
		}
		options = $.extend({}, $.fn.multiselectable.defaults, options);

		function mouseDown(e) {
			// var item = $(this),
			// 	parent = item.parent(),
			// 	myIndex = item.index();


			// var canPreventSelection = options.preventSelection(e,$());

			// // if(canPreventSelection) return;

			// var prev = parent.find('.multiselectable-previous');
			// // If no previous selection found, start selecting from first selected item.
			// prev = prev.length ? prev : $(parent.find('.' + options.selectedClass)[0]).addClass('multiselectable-previous');
			// var prevIndex = prev.index();

			// if (e.ctrlKey || e.metaKey) {				
			// 	if (item.hasClass(options.selectedClass)) {
			// 		item.removeClass(options.selectedClass).removeClass('multiselectable-previous')
			// 		if (item.not('.child').length) {
			// 			item.nextUntil(':not(.child)').removeClass(options.selectedClass);
			// 		}
			// 	}
			// 	else {
			// 		parent.find('.multiselectable-previous').removeClass('multiselectable-previous');
			// 		item.addClass(options.selectedClass).addClass('multiselectable-previous')
			// 		if (item.not('.child').length) {
			// 			item.nextUntil(':not(.child)').addClass(options.selectedClass);
			// 		}
			// 	}
			// }

			// if (e.shiftKey) {
			// 	var last_shift_range = parent.find('.multiselectable-shift');
			// 	last_shift_range.removeClass(options.selectedClass).removeClass('multiselectable-shift');

			// 	var shift_range;
			// 	if (prevIndex < myIndex) {
			// 		shift_range = item.prevUntil('.multiselectable-previous').add(prev).add(item);
			// 	}
			// 	else if (prevIndex > myIndex) {
			// 		shift_range = item.nextUntil('.multiselectable-previous').add(prev).add(item);
			// 	}
			// 	shift_range.addClass(options.selectedClass).addClass('multiselectable-shift');
			// }
			// else {
			// 	parent.find('.multiselectable-shift').removeClass('multiselectable-shift');
			// }

			// if (!e.ctrlKey && !e.metaKey && !e.shiftKey) {
			// 	parent.find('.multiselectable-previous').removeClass('multiselectable-previous');
			// 	if (!item.hasClass(options.selectedClass)) {
			// 		parent.find('.' + options.selectedClass).removeClass(options.selectedClass);
			// 		item.addClass(options.selectedClass).addClass('multiselectable-previous');
			// 		if (item.not('.child').length) {
			// 			item.nextUntil(':not(.child)').addClass(options.selectedClass);
			// 		}
			// 	}
			// }

			// options.mousedown(e, item);
		}

		function click(e) {
			if ( $(this).is('.ui-draggable-dragging') ) {
				return;
			}

			// var item = $(this),	parent = item.parent();

			// //If item wasn't draged and is not multiselected, it should reset selection for other items.
			// if (!e.ctrlKey && !e.metaKey && !e.shiftKey) {
			// 	parent.find('.multiselectable-previous').removeClass('multiselectable-previous');
			// 	parent.find('.' + options.selectedClass).removeClass(options.selectedClass);
			// 	item.addClass(options.selectedClass).addClass('multiselectable-previous');
			// 	if (item.not('.child').length) {
			// 		item.nextUntil(':not(.child)').addClass(options.selectedClass);
			// 	}
			// }

			// options.click(e, item);
		}

		return this.each(function() {
			var list = $(this);

			if (!list.data('multiselectable')) {
				list.data('multiselectable', true)
					.delegate(options.items, 'mousedown', mouseDown)
					.delegate(options.items, 'click', click)
					.disableSelection();
			}
		})
	};

	$.fn.multiselectable.defaults = {
		click: function(event, elem) {},
		mousedown: function(event, elem) {},
		selectedClass: 'selected',
		preventSelection:function(event,elem){},
		items: 'li'
	};


	$.fn.multisortable = function(options) {
		if (!options) {
			options = {}
		}
		var settings = $.extend({}, $.fn.multisortable.defaults, options);

		function regroup(item, list) {
			if (list.find('.' + settings.selectedClass).length > 0) {
				var myIndex = item.data('i');

				var itemsBefore = list.find('.' + settings.selectedClass).filter(function() {
					return $(this).data('i') < myIndex
				}).css({
						position: '',
						width: '',
						left: '',
						top: '',
						zIndex: ''
					});

				item.before(itemsBefore);

				var itemsAfter = list.find('.' + settings.selectedClass).filter(function() {
					return $(this).data('i') > myIndex
				}).css({
						position: '',
						width: '',
						left: '',
						top: '',
						zIndex: ''
					});

				item.after(itemsAfter);

				setTimeout(function() {
					itemsAfter.add(itemsBefore).addClass(settings.selectedClass);
				}, 0);
			}
		}

		return this.each(function() {
			var list = $(this);

			//enable multi-selection
			list.multiselectable({
				selectedClass: settings.selectedClass,
				click: settings.click,
				items: settings.items,
				mousedown: settings.mousedown,
				preventSelection:settings.preventSelection
			});

			//enable sorting
			options.cancel = settings.items + ':not(.' + settings.selectedClass + ')';
			options.placeholder = settings.placeholder;
			options.start = function(event, ui) {
				if (ui.item.hasClass(settings.selectedClass)) {
					var parent = ui.item.parent();

					//assign indexes to all selected items
					parent.find('.' + settings.selectedClass).each(function(i) {
						$(this).data('i', i);
					});

					// adjust placeholder size to be size of items
					var height = parent.find('.' + settings.selectedClass).length * ui.item.outerHeight();
					ui.placeholder.height(height);
				}

				settings.start(event, ui);
			};

			options.stop = function(event, ui) {
				regroup(ui.item, ui.item.parent());
				settings.stop(event, ui);
			};

			options.sort = function(event, ui) {
				var parent = ui.item.parent(),
					myIndex = ui.item.data('i'),
					top = parseInt(ui.item.css('top').replace('px', '')),
					left = parseInt(ui.item.css('left').replace('px', ''));

				// fix to keep compatibility using prototype.js and jquery together
				$.fn.reverse = Array.prototype._reverse || Array.prototype.reverse

				var height = 0;
				$('.' + settings.selectedClass, parent).filter(function() {
					return $(this).data('i') < myIndex;
				}).reverse().each(function() {
						height += $(this).outerHeight();
						$(this).css({
							left: left,
							top: top - height,
							position: 'absolute',
							zIndex: 1000,
							width: ui.item.width()
						})
					});

				height = ui.item.outerHeight();
				$('.' + settings.selectedClass, parent).filter(function() {
					return $(this).data('i') > myIndex;
				}).each(function() {
						var item = $(this);
						item.css({
							left: left,
							top: top + height,
							position: 'absolute',
							zIndex: 1000,
							width: ui.item.width()
						});

						height += item.outerHeight();
					});

				settings.sort(event, ui);
			};

			options.receive = function(event, ui) {
				regroup(ui.item, ui.sender);
				settings.receive(event, ui);
			};

			list.sortable(options).disableSelection();
		})
	};

	$.fn.multisortable.defaults = {
		start: function(event, ui) {},
		stop: function(event, ui) {},
		sort: function(event, ui) {},
		receive: function(event, ui) {},
		click: function(event, elem) {},
		mousedown: function(event, elem) {},
		preventSelection:function(event, elem) {},
		selectedClass: 'selected',
		placeholder: 'placeholder',
		items: 'li'
	};

}(jQuery);
/*!
 * jQuery UI Datepicker @VERSION
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Datepicker
//>>group: Widgets
//>>description: Displays a calendar from an input or inline for selecting dates.
//>>docs: http://api.jqueryui.com/datepicker/
//>>demos: http://jqueryui.com/datepicker/

(function( factory ) {
    if ( typeof define === "function" && define.amd ) {

        // AMD. Register as an anonymous module.
        define([
            "jquery",
            "./core"
        ], factory );
    } else {

        // Browser globals
        factory( jQuery );
    }
}(function( $ ) {

$.extend($.ui, { datepicker: { version: "@VERSION" } });

var datepicker_instActive;

function datepicker_getZindex( elem ) {
    var position, value;
    while ( elem.length && elem[ 0 ] !== document ) {
        // Ignore z-index if position is set to a value where z-index is ignored by the browser
        // This makes behavior of this function consistent across browsers
        // WebKit always returns auto if the element is positioned
        position = elem.css( "position" );
        if ( position === "absolute" || position === "relative" || position === "fixed" ) {
            // IE returns 0 when zIndex is not specified
            // other browsers return a string
            // we ignore the case of nested elements with an explicit value of 0
            // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
            value = parseInt( elem.css( "zIndex" ), 10 );
            if ( !isNaN( value ) && value !== 0 ) {
                return value;
            }
        }
        elem = elem.parent();
    }

    return 0;
}
/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
    this._curInst = null; // The current instance in use
    this._keyEvent = false; // If the last event was a key event
    this._disabledInputs = []; // List of date picker inputs that have been disabled
    this._datepickerShowing = false; // True if the popup picker is showing , false if not
    this._inDialog = false; // True if showing within a "dialog", false if not
    this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
    this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
    this._appendClass = "ui-datepicker-append"; // The name of the append marker class
    this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
    this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
    this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
    this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
    this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
    this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
    this.regional = []; // Available regional settings, indexed by language code
    this.regional[""] = { // Default regional settings
        closeText: "Done", // Display text for close link
        prevText: "Prev", // Display text for previous month link
        nextText: "Next", // Display text for next month link
        currentText: "Today", // Display text for current month link
        monthNames: ["January","February","March","April","May","June",
            "July","August","September","October","November","December"], // Names of months for drop-down and formatting
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
        dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
        weekHeader: "Wk", // Column header for week of the year
        dateFormat: "mm/dd/yy", // See format options on parseDate
        firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
        isRTL: false, // True if right-to-left language, false if left-to-right
        showMonthAfterYear: false, // True if the year select precedes month, false for month then year
        yearSuffix: "" // Additional text to append to the year in the month headers
    };
    this._defaults = { // Global defaults for all the date picker instances
        showOn: "focus", // "focus" for popup on focus,
            // "button" for trigger button, or "both" for either
        showAnim: "fadeIn", // Name of jQuery animation for popup
        showOptions: {}, // Options for enhanced animations
        defaultDate: null, // Used when field is blank: actual date,
            // +/-number for offset from today, null for today
        appendText: "", // Display text following the input box, e.g. showing the format
        buttonText: "...", // Text for trigger button
        buttonImage: "", // URL for trigger button image
        buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
        hideIfNoPrevNext: false, // True to hide next/previous month links
            // if not applicable, false to just disable them
        navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
        gotoCurrent: false, // True if today link goes back to current selection instead
        changeMonth: false, // True if month can be selected directly, false if only prev/next
        changeYear: false, // True if year can be selected directly, false if only prev/next
        yearRange: "c-10:c+10", // Range of years to display in drop-down,
            // either relative to today's year (-nn:+nn), relative to currently displayed year
            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
        showOtherMonths: false, // True to show dates in other months, false to leave blank
        selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
        showWeek: false, // True to show week of the year, false to not show it
        calculateWeek: this.iso8601Week, // How to calculate the week of the year,
            // takes a Date and returns the number of the week for it
        shortYearCutoff: "+10", // Short year values < this are in the current century,
            // > this are in the previous century,
            // string value starting with "+" for current year + value
        minDate: null, // The earliest selectable date, or null for no limit
        maxDate: null, // The latest selectable date, or null for no limit
        duration: "fast", // Duration of display/closure
        beforeShowDay: null, // Function that takes a date and returns an array with
            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
            // [2] = cell title (optional), e.g. $.datepicker.noWeekends
        beforeShow: null, // Function that takes an input field and
            // returns a set of custom settings for the date picker
        onSelect: null, // Define a callback function when a date is selected
        onChangeMonthYear: null, // Define a callback function when the month or year is changed
        onClose: null, // Define a callback function when the datepicker is closed
        numberOfMonths: 1, // Number of months to show at a time
        showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
        stepMonths: 1, // Number of months to step back/forward
        stepBigMonths: 12, // Number of months to step back/forward for the big links
        altField: "", // Selector for an alternate field to store selected dates into
        altFormat: "", // The date format to use for the alternate field
        constrainInput: true, // The input is constrained by the current date format
        showButtonPanel: false, // True to show button panel, false to not show it
        autoSize: false, // True to size the input for the date format, false to leave as is
        disabled: false // The initial disabled state
    };
    $.extend(this._defaults, this.regional[""]);
    this.regional.en = $.extend( true, {}, this.regional[ "" ]);
    this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
    this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}

$.extend(Datepicker.prototype, {
    /* Class name added to elements to indicate already configured with a date picker. */
    markerClassName: "hasDatepicker",

    //Keep track of the maximum number of rows displayed (see #7043)
    maxRows: 4,

    // TODO rename to "widget" when switching to widget factory
    _widgetDatepicker: function() {
        return this.dpDiv;
    },

    /* Override the default settings for all instances of the date picker.
     * @param  settings  object - the new settings to use as defaults (anonymous object)
     * @return the manager object
     */
    setDefaults: function(settings) {
        datepicker_extendRemove(this._defaults, settings || {});
        return this;
    },

    /* Attach the date picker to a jQuery selection.
     * @param  target   element - the target input field or division or span
     * @param  settings  object - the new settings to use for this date picker instance (anonymous)
     */
    _attachDatepicker: function(target, settings) {
        var nodeName, inline, inst;
        nodeName = target.nodeName.toLowerCase();
        inline = (nodeName === "div" || nodeName === "span");
        if (!target.id) {
            this.uuid += 1;
            target.id = "dp" + this.uuid;
        }
        inst = this._newInst($(target), inline);
        inst.settings = $.extend({}, settings || {});
        if (nodeName === "input") {
            this._connectDatepicker(target, inst);
        } else if (inline) {
            this._inlineDatepicker(target, inst);
        }
    },

    /* Create a new instance object. */
    _newInst: function(target, inline) {
        var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
        return {id: id, input: target, // associated target
            selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
            drawMonth: 0, drawYear: 0, // month being drawn
            inline: inline, // is datepicker inline or not
            dpDiv: (!inline ? this.dpDiv : // presentation div
            datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
    },

    /* Attach the date picker to an input field. */
    _connectDatepicker: function(target, inst) {
        var input = $(target);
        inst.append = $([]);
        inst.trigger = $([]);
        if (input.hasClass(this.markerClassName)) {
            return;
        }
        this._attachments(input, inst);
        input.addClass(this.markerClassName).keydown(this._doKeyDown).
            keypress(this._doKeyPress).keyup(this._doKeyUp);
        this._autoSize(inst);
        $.data(target, "datepicker", inst);
        //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
        if( inst.settings.disabled ) {
            this._disableDatepicker( target );
        }
    },

    /* Make attachments based on settings. */
    _attachments: function(input, inst) {
        var showOn, buttonText, buttonImage,
            appendText = this._get(inst, "appendText"),
            isRTL = this._get(inst, "isRTL");

        if (inst.append) {
            inst.append.remove();
        }
        if (appendText) {
            inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
            input[isRTL ? "before" : "after"](inst.append);
        }

        input.unbind("focus", this._showDatepicker);

        if (inst.trigger) {
            inst.trigger.remove();
        }

        showOn = this._get(inst, "showOn");
        if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
            input.focus(this._showDatepicker);
        }
        if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
            buttonText = this._get(inst, "buttonText");
            buttonImage = this._get(inst, "buttonImage");
            inst.trigger = $(this._get(inst, "buttonImageOnly") ?
                $("<img/>").addClass(this._triggerClass).
                    attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
                $("<button type='button'></button>").addClass(this._triggerClass).
                    html(!buttonImage ? buttonText : $("<img/>").attr(
                    { src:buttonImage, alt:buttonText, title:buttonText })));
            input[isRTL ? "before" : "after"](inst.trigger);
            inst.trigger.click(function() {
                if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                    $.datepicker._hideDatepicker();
                } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                    $.datepicker._hideDatepicker();
                    $.datepicker._showDatepicker(input[0]);
                } else {
                    $.datepicker._showDatepicker(input[0]);
                }
                return false;
            });
        }
    },

    /* Apply the maximum length for the date format. */
    _autoSize: function(inst) {
        if (this._get(inst, "autoSize") && !inst.inline) {
            var findMax, max, maxI, i,
                date = new Date(2009, 12 - 1, 20), // Ensure double digits
                dateFormat = this._get(inst, "dateFormat");

            if (dateFormat.match(/[DM]/)) {
                findMax = function(names) {
                    max = 0;
                    maxI = 0;
                    for (i = 0; i < names.length; i++) {
                        if (names[i].length > max) {
                            max = names[i].length;
                            maxI = i;
                        }
                    }
                    return maxI;
                };
                date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
                    "monthNames" : "monthNamesShort"))));
                date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
                    "dayNames" : "dayNamesShort"))) + 20 - date.getDay());
            }
            inst.input.attr("size", this._formatDate(inst, date).length);
        }
    },

    /* Attach an inline date picker to a div. */
    _inlineDatepicker: function(target, inst) {
        var divSpan = $(target);
        if (divSpan.hasClass(this.markerClassName)) {
            return;
        }
        divSpan.addClass(this.markerClassName).append(inst.dpDiv);
        $.data(target, "datepicker", inst);
        this._setDate(inst, this._getDefaultDate(inst), true);
        this._updateDatepicker(inst);
        this._updateAlternate(inst);
        //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
        if( inst.settings.disabled ) {
            this._disableDatepicker( target );
        }
        // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
        // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
        inst.dpDiv.css( "display", "block" );
    },

    /* Pop-up the date picker in a "dialog" box.
     * @param  input element - ignored
     * @param  date string or Date - the initial date to display
     * @param  onSelect  function - the function to call when a date is selected
     * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
     * @param  pos int[2] - coordinates for the dialog's position within the screen or
     *                  event - with x/y coordinates or
     *                  leave empty for default (screen centre)
     * @return the manager object
     */
    _dialogDatepicker: function(input, date, onSelect, settings, pos) {
        var id, browserWidth, browserHeight, scrollX, scrollY,
            inst = this._dialogInst; // internal instance

        if (!inst) {
            this.uuid += 1;
            id = "dp" + this.uuid;
            this._dialogInput = $("<input type='text' id='" + id +
                "' style='position: absolute; top: -100px; width: 0px;'/>");
            this._dialogInput.keydown(this._doKeyDown);
            $("body").append(this._dialogInput);
            inst = this._dialogInst = this._newInst(this._dialogInput, false);
            inst.settings = {};
            $.data(this._dialogInput[0], "datepicker", inst);
        }
        datepicker_extendRemove(inst.settings, settings || {});
        date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
        this._dialogInput.val(date);

        this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
        if (!this._pos) {
            browserWidth = document.documentElement.clientWidth;
            browserHeight = document.documentElement.clientHeight;
            scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
            scrollY = document.documentElement.scrollTop || document.body.scrollTop;
            this._pos = // should use actual width/height below
                [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
        }

        // move input on screen for focus, but hidden behind dialog
        this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
        inst.settings.onSelect = onSelect;
        this._inDialog = true;
        this.dpDiv.addClass(this._dialogClass);
        this._showDatepicker(this._dialogInput[0]);
        if ($.blockUI) {
            $.blockUI(this.dpDiv);
        }
        $.data(this._dialogInput[0], "datepicker", inst);
        return this;
    },

    /* Detach a datepicker from its control.
     * @param  target   element - the target input field or division or span
     */
    _destroyDatepicker: function(target) {
        var nodeName,
            $target = $(target),
            inst = $.data(target, "datepicker");

        if (!$target.hasClass(this.markerClassName)) {
            return;
        }

        nodeName = target.nodeName.toLowerCase();
        $.removeData(target, "datepicker");
        if (nodeName === "input") {
            inst.append.remove();
            inst.trigger.remove();
            $target.removeClass(this.markerClassName).
                unbind("focus", this._showDatepicker).
                unbind("keydown", this._doKeyDown).
                unbind("keypress", this._doKeyPress).
                unbind("keyup", this._doKeyUp);
        } else if (nodeName === "div" || nodeName === "span") {
            $target.removeClass(this.markerClassName).empty();
        }

        if ( datepicker_instActive === inst ) {
            datepicker_instActive = null;
        }
    },

    /* Enable the date picker to a jQuery selection.
     * @param  target   element - the target input field or division or span
     */
    _enableDatepicker: function(target) {
        var nodeName, inline,
            $target = $(target),
            inst = $.data(target, "datepicker");

        if (!$target.hasClass(this.markerClassName)) {
            return;
        }

        nodeName = target.nodeName.toLowerCase();
        if (nodeName === "input") {
            target.disabled = false;
            inst.trigger.filter("button").
                each(function() { this.disabled = false; }).end().
                filter("img").css({opacity: "1.0", cursor: ""});
        } else if (nodeName === "div" || nodeName === "span") {
            inline = $target.children("." + this._inlineClass);
            inline.children().removeClass("ui-state-disabled");
            inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                prop("disabled", false);
        }
        this._disabledInputs = $.map(this._disabledInputs,
            function(value) { return (value === target ? null : value); }); // delete entry
    },

    /* Disable the date picker to a jQuery selection.
     * @param  target   element - the target input field or division or span
     */
    _disableDatepicker: function(target) {
        var nodeName, inline,
            $target = $(target),
            inst = $.data(target, "datepicker");

        if (!$target.hasClass(this.markerClassName)) {
            return;
        }

        nodeName = target.nodeName.toLowerCase();
        if (nodeName === "input") {
            target.disabled = true;
            inst.trigger.filter("button").
                each(function() { this.disabled = true; }).end().
                filter("img").css({opacity: "0.5", cursor: "default"});
        } else if (nodeName === "div" || nodeName === "span") {
            inline = $target.children("." + this._inlineClass);
            inline.children().addClass("ui-state-disabled");
            inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                prop("disabled", true);
        }
        this._disabledInputs = $.map(this._disabledInputs,
            function(value) { return (value === target ? null : value); }); // delete entry
        this._disabledInputs[this._disabledInputs.length] = target;
    },

    /* Is the first field in a jQuery collection disabled as a datepicker?
     * @param  target   element - the target input field or division or span
     * @return boolean - true if disabled, false if enabled
     */
    _isDisabledDatepicker: function(target) {
        if (!target) {
            return false;
        }
        for (var i = 0; i < this._disabledInputs.length; i++) {
            if (this._disabledInputs[i] === target) {
                return true;
            }
        }
        return false;
    },

    /* Retrieve the instance data for the target control.
     * @param  target  element - the target input field or division or span
     * @return  object - the associated instance data
     * @throws  error if a jQuery problem getting data
     */
    _getInst: function(target) {
        try {
            return $.data(target, "datepicker");
        }
        catch (err) {
            throw "Missing instance data for this datepicker";
        }
    },

    /* Update or retrieve the settings for a date picker attached to an input field or division.
     * @param  target  element - the target input field or division or span
     * @param  name object - the new settings to update or
     *              string - the name of the setting to change or retrieve,
     *              when retrieving also "all" for all instance settings or
     *              "defaults" for all global defaults
     * @param  value   any - the new value for the setting
     *              (omit if above is an object or to retrieve a value)
     */
    _optionDatepicker: function(target, name, value) {
        var settings, date, minDate, maxDate,
            inst = this._getInst(target);

        if (arguments.length === 2 && typeof name === "string") {
            return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
                (inst ? (name === "all" ? $.extend({}, inst.settings) :
                this._get(inst, name)) : null));
        }

        settings = name || {};
        if (typeof name === "string") {
            settings = {};
            settings[name] = value;
        }

        if (inst) {
            if (this._curInst === inst) {
                this._hideDatepicker();
            }

            date = this._getDateDatepicker(target, true);
            minDate = this._getMinMaxDate(inst, "min");
            maxDate = this._getMinMaxDate(inst, "max");
            datepicker_extendRemove(inst.settings, settings);
            // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
            if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                inst.settings.minDate = this._formatDate(inst, minDate);
            }
            if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                inst.settings.maxDate = this._formatDate(inst, maxDate);
            }
            if ( "disabled" in settings ) {
                if ( settings.disabled ) {
                    this._disableDatepicker(target);
                } else {
                    this._enableDatepicker(target);
                }
            }
            this._attachments($(target), inst);
            this._autoSize(inst);
            this._setDate(inst, date);
            this._updateAlternate(inst);
            this._updateDatepicker(inst);
        }
    },

    // change method deprecated
    _changeDatepicker: function(target, name, value) {
        this._optionDatepicker(target, name, value);
    },

    /* Redraw the date picker attached to an input field or division.
     * @param  target  element - the target input field or division or span
     */
    _refreshDatepicker: function(target) {
        var inst = this._getInst(target);
        if (inst) {
            this._updateDatepicker(inst);
        }
    },

    /* Set the dates for a jQuery selection.
     * @param  target element - the target input field or division or span
     * @param  date Date - the new date
     */
    _setDateDatepicker: function(target, date) {
        var inst = this._getInst(target);
        if (inst) {
            this._setDate(inst, date);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
        }
    },

    /* Get the date(s) for the first entry in a jQuery selection.
     * @param  target element - the target input field or division or span
     * @param  noDefault boolean - true if no default date is to be used
     * @return Date - the current date
     */
    _getDateDatepicker: function(target, noDefault) {
        var inst = this._getInst(target);
        if (inst && !inst.inline) {
            this._setDateFromField(inst, noDefault);
        }
        return (inst ? this._getDate(inst) : null);
    },

    /* Handle keystrokes. */
    _doKeyDown: function(event) {
        var onSelect, dateStr, sel,
            inst = $.datepicker._getInst(event.target),
            handled = true,
            isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

        inst._keyEvent = true;
        if ($.datepicker._datepickerShowing) {
            switch (event.keyCode) {
                case 9: $.datepicker._hideDatepicker();
                        handled = false;
                        break; // hide on tab out
                case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
                                    $.datepicker._currentClass + ")", inst.dpDiv);
                        if (sel[0]) {
                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                        }

                        onSelect = $.datepicker._get(inst, "onSelect");
                        if (onSelect) {
                            dateStr = $.datepicker._formatDate(inst);

                            // trigger custom callback
                            onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
                        } else {
                            $.datepicker._hideDatepicker();
                        }

                        return false; // don't submit the form
                case 27: $.datepicker._hideDatepicker();
                        break; // hide on escape
                case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            -$.datepicker._get(inst, "stepBigMonths") :
                            -$.datepicker._get(inst, "stepMonths")), "M");
                        break; // previous month/year on page up/+ ctrl
                case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            +$.datepicker._get(inst, "stepBigMonths") :
                            +$.datepicker._get(inst, "stepMonths")), "M");
                        break; // next month/year on page down/+ ctrl
                case 35: if (event.ctrlKey || event.metaKey) {
                            $.datepicker._clearDate(event.target);
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // clear on ctrl or command +end
                case 36: if (event.ctrlKey || event.metaKey) {
                            $.datepicker._gotoToday(event.target);
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // current on ctrl or command +home
                case 37: if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
                        }
                        handled = event.ctrlKey || event.metaKey;
                        // -1 day on ctrl or command +left
                        if (event.originalEvent.altKey) {
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                -$.datepicker._get(inst, "stepBigMonths") :
                                -$.datepicker._get(inst, "stepMonths")), "M");
                        }
                        // next month/year on alt +left on Mac
                        break;
                case 38: if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, -7, "D");
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // -1 week on ctrl or command +up
                case 39: if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
                        }
                        handled = event.ctrlKey || event.metaKey;
                        // +1 day on ctrl or command +right
                        if (event.originalEvent.altKey) {
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                +$.datepicker._get(inst, "stepBigMonths") :
                                +$.datepicker._get(inst, "stepMonths")), "M");
                        }
                        // next month/year on alt +right
                        break;
                case 40: if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, +7, "D");
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // +1 week on ctrl or command +down
                default: handled = false;
            }
        } else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
            $.datepicker._showDatepicker(this);
        } else {
            handled = false;
        }

        if (handled) {
            event.preventDefault();
            event.stopPropagation();
        }
    },

    /* Filter entered characters - based on date format. */
    _doKeyPress: function(event) {
        var chars, chr,
            inst = $.datepicker._getInst(event.target);

        if ($.datepicker._get(inst, "constrainInput")) {
            chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
            chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
            return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
        }
    },

    /* Synchronise manual entry and field/alternate field. */
    _doKeyUp: function(event) {
        var date,
            inst = $.datepicker._getInst(event.target);

        if (inst.input.val() !== inst.lastVal) {
            try {
                date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
                    (inst.input ? inst.input.val() : null),
                    $.datepicker._getFormatConfig(inst));

                if (date) { // only if valid
                    $.datepicker._setDateFromField(inst);
                    $.datepicker._updateAlternate(inst);
                    $.datepicker._updateDatepicker(inst);
                }
            }
            catch (err) {
            }
        }
        return true;
    },

    /* Pop-up the date picker for a given input field.
     * If false returned from beforeShow event handler do not show.
     * @param  input  element - the input field attached to the date picker or
     *                  event - if triggered by focus
     */
    _showDatepicker: function(input) {
        input = input.target || input;
        if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
            input = $("input", input.parentNode)[0];
        }

        if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
            return;
        }

        var inst, beforeShow, beforeShowSettings, isFixed,
            offset, showAnim, duration;

        inst = $.datepicker._getInst(input);
        if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
            $.datepicker._curInst.dpDiv.stop(true, true);
            if ( inst && $.datepicker._datepickerShowing ) {
                $.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
            }
        }

        beforeShow = $.datepicker._get(inst, "beforeShow");
        beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
        if(beforeShowSettings === false){
            return;
        }
        datepicker_extendRemove(inst.settings, beforeShowSettings);

        inst.lastVal = null;
        $.datepicker._lastInput = input;
        $.datepicker._setDateFromField(inst);

        if ($.datepicker._inDialog) { // hide cursor
            input.value = "";
        }
        if (!$.datepicker._pos) { // position below input
            $.datepicker._pos = $.datepicker._findPos(input);
            $.datepicker._pos[1] += input.offsetHeight; // add the height
        }

        isFixed = false;
        $(input).parents().each(function() {
            isFixed |= $(this).css("position") === "fixed";
            return !isFixed;
        });

        offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
        $.datepicker._pos = null;
        //to avoid flashes on Firefox
        inst.dpDiv.empty();
        // determine sizing offscreen
        inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
        $.datepicker._updateDatepicker(inst);
        // fix width for dynamic number of date pickers
        // and adjust position before showing
        offset = $.datepicker._checkOffset(inst, offset, isFixed);
        inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
            "static" : (isFixed ? "fixed" : "absolute")), display: "none",
            left: offset.left + "px", top: offset.top + "px"});

        if (!inst.inline) {
            showAnim = $.datepicker._get(inst, "showAnim");
            duration = $.datepicker._get(inst, "duration");
            inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
            $.datepicker._datepickerShowing = true;

            if ( $.effects && $.effects.effect[ showAnim ] ) {
                inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
            } else {
                inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
            }

            if ( $.datepicker._shouldFocusInput( inst ) ) {
                inst.input.focus();
            }

            $.datepicker._curInst = inst;
        }
    },

    /* Generate the date picker content. */
    _updateDatepicker: function(inst) {
        this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
        datepicker_instActive = inst; // for delegate hover events
        inst.dpDiv.empty().append(this._generateHTML(inst));
        this._attachHandlers(inst);

        var origyearshtml,
            numMonths = this._getNumberOfMonths(inst),
            cols = numMonths[1],
            width = 17,
            activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );

        if ( activeCell.length > 0 ) {
            datepicker_handleMouseover.apply( activeCell.get( 0 ) );
        }

        inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
        if (cols > 1) {
            inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
        }
        inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
            "Class"]("ui-datepicker-multi");
        inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
            "Class"]("ui-datepicker-rtl");

        if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
            inst.input.focus();
        }

        // deffered render of the years select (to avoid flashes on Firefox)
        if( inst.yearshtml ){
            origyearshtml = inst.yearshtml;
            setTimeout(function(){
                //assure that inst.yearshtml didn't change.
                if( origyearshtml === inst.yearshtml && inst.yearshtml ){
                    inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
                }
                origyearshtml = inst.yearshtml = null;
            }, 0);
        }
    },

    // #6694 - don't focus the input if it's already focused
    // this breaks the change event in IE
    // Support: IE and jQuery <1.9
    _shouldFocusInput: function( inst ) {
        return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
    },

    /* Check positioning to remain on screen. */
    _checkOffset: function(inst, offset, isFixed) {
        var dpWidth = inst.dpDiv.outerWidth(),
            dpHeight = inst.dpDiv.outerHeight(),
            inputWidth = inst.input ? inst.input.outerWidth() : 0,
            inputHeight = inst.input ? inst.input.outerHeight() : 0,
            viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
            viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

        offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
        offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
        offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

        // now check if datepicker is showing outside window viewport - move to a better place if so.
        offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
            Math.abs(offset.left + dpWidth - viewWidth) : 0);
        offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
            Math.abs(dpHeight + inputHeight) : 0);

        return offset;
    },

    /* Find an object's position on the screen. */
    _findPos: function(obj) {
        var position,
            inst = this._getInst(obj),
            isRTL = this._get(inst, "isRTL");

        while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
            obj = obj[isRTL ? "previousSibling" : "nextSibling"];
        }

        position = $(obj).offset();
        return [position.left, position.top];
    },

    /* Hide the date picker from view.
     * @param  input  element - the input field attached to the date picker
     */
    _hideDatepicker: function(input) {
        var showAnim, duration, postProcess, onClose,
            inst = this._curInst;

        if (!inst || (input && inst !== $.data(input, "datepicker"))) {
            return;
        }

        if (this._datepickerShowing) {
            showAnim = this._get(inst, "showAnim");
            duration = this._get(inst, "duration");
            postProcess = function() {
                $.datepicker._tidyDialog(inst);
            };

            // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
            if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
                inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
            } else {
                inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
                    (showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
            }

            if (!showAnim) {
                postProcess();
            }
            this._datepickerShowing = false;

            onClose = this._get(inst, "onClose");
            if (onClose) {
                onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
            }

            this._lastInput = null;
            if (this._inDialog) {
                this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
                if ($.blockUI) {
                    $.unblockUI();
                    $("body").append(this.dpDiv);
                }
            }
            this._inDialog = false;
        }
    },

    /* Tidy up after a dialog display. */
    _tidyDialog: function(inst) {
        inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
    },

    /* Close date picker if clicked elsewhere. */
    _checkExternalClick: function(event) {
        if (!$.datepicker._curInst) {
            return;
        }

        var $target = $(event.target),
            inst = $.datepicker._getInst($target[0]);

        if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
                $target.parents("#" + $.datepicker._mainDivId).length === 0 &&
                !$target.hasClass($.datepicker.markerClassName) &&
                !$target.closest("." + $.datepicker._triggerClass).length &&
                $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
            ( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
                $.datepicker._hideDatepicker();
        }
    },

    /* Adjust one of the date sub-fields. */
    _adjustDate: function(id, offset, period) {
        var target = $(id),
            inst = this._getInst(target[0]);

        if (this._isDisabledDatepicker(target[0])) {
            return;
        }
        this._adjustInstDate(inst, offset +
            (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
            period);
        this._updateDatepicker(inst);
    },

    /* Action for current link. */
    _gotoToday: function(id) {
        var date,
            target = $(id),
            inst = this._getInst(target[0]);

        if (this._get(inst, "gotoCurrent") && inst.currentDay) {
            inst.selectedDay = inst.currentDay;
            inst.drawMonth = inst.selectedMonth = inst.currentMonth;
            inst.drawYear = inst.selectedYear = inst.currentYear;
        } else {
            date = new Date();
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
        }
        this._notifyChange(inst);
        this._adjustDate(target);
    },

    /* Action for selecting a new month/year. */
    _selectMonthYear: function(id, select, period) {
        var target = $(id),
            inst = this._getInst(target[0]);

        inst["selected" + (period === "M" ? "Month" : "Year")] =
        inst["draw" + (period === "M" ? "Month" : "Year")] =
            parseInt(select.options[select.selectedIndex].value,10);

        this._notifyChange(inst);
        this._adjustDate(target);
    },

    /* Action for selecting a day. */
    _selectDay: function(id, month, year, td) {
        var inst,
            target = $(id);

        if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
            return;
        }

        inst = this._getInst(target[0]);
        inst.selectedDay = inst.currentDay = $("a", td).html();
        inst.selectedMonth = inst.currentMonth = month;
        inst.selectedYear = inst.currentYear = year;
        this._selectDate(id, this._formatDate(inst,
            inst.currentDay, inst.currentMonth, inst.currentYear));
    },

    /* Erase the input field and hide the date picker. */
    _clearDate: function(id) {
        var target = $(id);
        this._selectDate(target, "");
    },

    /* Update the input field with the selected date. */
    _selectDate: function(id, dateStr) {
        var onSelect,
            target = $(id),
            inst = this._getInst(target[0]);

        dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
        if (inst.input) {
            inst.input.val(dateStr);
        }
        this._updateAlternate(inst);

        onSelect = this._get(inst, "onSelect");
        if (onSelect) {
            onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
        } else if (inst.input) {
            inst.input.trigger("change"); // fire the change event
        }

        if (inst.inline){
            this._updateDatepicker(inst);
        } else {
            this._hideDatepicker();
            this._lastInput = inst.input[0];
            if (typeof(inst.input[0]) !== "object") {
                inst.input.focus(); // restore focus
            }
            this._lastInput = null;
        }
    },

    /* Update any alternate field to synchronise with the main field. */
    _updateAlternate: function(inst) {
        var altFormat, date, dateStr,
            altField = this._get(inst, "altField");

        if (altField) { // update alternate field too
            altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
            date = this._getDate(inst);
            dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
            $(altField).each(function() { $(this).val(dateStr); });
        }
    },

    /* Set as beforeShowDay function to prevent selection of weekends.
     * @param  date  Date - the date to customise
     * @return [boolean, string] - is this date selectable?, what is its CSS class?
     */
    noWeekends: function(date) {
        var day = date.getDay();
        return [(day > 0 && day < 6), ""];
    },

    /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
     * @param  date  Date - the date to get the week for
     * @return  number - the number of the week within the year that contains this date
     */
    iso8601Week: function(date) {
        var time,
            checkDate = new Date(date.getTime());

        // Find Thursday of this week starting on Monday
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

        time = checkDate.getTime();
        checkDate.setMonth(0); // Compare with Jan 1
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
    },

    /* Parse a string value into a date object.
     * See formatDate below for the possible formats.
     *
     * @param  format string - the expected format of the date
     * @param  value string - the date in the above format
     * @param  settings Object - attributes include:
     *                  shortYearCutoff  number - the cutoff year for determining the century (optional)
     *                  dayNamesShort   string[7] - abbreviated names of the days from Sunday (optional)
     *                  dayNames        string[7] - names of the days from Sunday (optional)
     *                  monthNamesShort string[12] - abbreviated names of the months (optional)
     *                  monthNames      string[12] - names of the months (optional)
     * @return  Date - the extracted date value or null if value is blank
     */
    parseDate: function (format, value, settings) {
        if (format == null || value == null) {
            throw "Invalid arguments";
        }

        value = (typeof value === "object" ? value.toString() : value + "");
        if (value === "") {
            return null;
        }

        var iFormat, dim, extra,
            iValue = 0,
            shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
            shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
                new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
            dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
            dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
            monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
            monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
            year = -1,
            month = -1,
            day = -1,
            doy = -1,
            literal = false,
            date,
            // Check whether a format character is doubled
            lookAhead = function(match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                if (matches) {
                    iFormat++;
                }
                return matches;
            },
            // Extract a number from the string value
            getNumber = function(match) {
                var isDoubled = lookAhead(match),
                    size = (match === "@" ? 14 : (match === "!" ? 20 :
                    (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
                    minSize = (match === "y" ? size : 1),
                    digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
                    num = value.substring(iValue).match(digits);
                if (!num) {
                    throw "Missing number at position " + iValue;
                }
                iValue += num[0].length;
                return parseInt(num[0], 10);
            },
            // Extract a name from the string value and convert to an index
            getName = function(match, shortNames, longNames) {
                var index = -1,
                    names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
                        return [ [k, v] ];
                    }).sort(function (a, b) {
                        return -(a[1].length - b[1].length);
                    });

                $.each(names, function (i, pair) {
                    var name = pair[1];
                    if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                        index = pair[0];
                        iValue += name.length;
                        return false;
                    }
                });
                if (index !== -1) {
                    return index + 1;
                } else {
                    throw "Unknown name at position " + iValue;
                }
            },
            // Confirm that a literal character matches the string value
            checkLiteral = function() {
                if (value.charAt(iValue) !== format.charAt(iFormat)) {
                    throw "Unexpected literal at position " + iValue;
                }
                iValue++;
            };

        for (iFormat = 0; iFormat < format.length; iFormat++) {
            if (literal) {
                if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                    literal = false;
                } else {
                    checkLiteral();
                }
            } else {
                switch (format.charAt(iFormat)) {
                    case "d":
                        day = getNumber("d");
                        break;
                    case "D":
                        getName("D", dayNamesShort, dayNames);
                        break;
                    case "o":
                        doy = getNumber("o");
                        break;
                    case "m":
                        month = getNumber("m");
                        break;
                    case "M":
                        month = getName("M", monthNamesShort, monthNames);
                        break;
                    case "y":
                        year = getNumber("y");
                        break;
                    case "@":
                        date = new Date(getNumber("@"));
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "!":
                        date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "'":
                        if (lookAhead("'")){
                            checkLiteral();
                        } else {
                            literal = true;
                        }
                        break;
                    default:
                        checkLiteral();
                }
            }
        }

        if (iValue < value.length){
            extra = value.substr(iValue);
            if (!/^\s+/.test(extra)) {
                throw "Extra/unparsed characters found in date: " + extra;
            }
        }

        if (year === -1) {
            year = new Date().getFullYear();
        } else if (year < 100) {
            year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                (year <= shortYearCutoff ? 0 : -100);
        }

        if (doy > -1) {
            month = 1;
            day = doy;
            do {
                dim = this._getDaysInMonth(year, month - 1);
                if (day <= dim) {
                    break;
                }
                month++;
                day -= dim;
            } while (true);
        }

        date = this._daylightSavingAdjust(new Date(year, month - 1, day));
        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
            throw "Invalid date"; // E.g. 31/02/00
        }
        return date;
    },

    /* Standard date formats. */
    ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
    COOKIE: "D, dd M yy",
    ISO_8601: "yy-mm-dd",
    RFC_822: "D, d M y",
    RFC_850: "DD, dd-M-y",
    RFC_1036: "D, d M y",
    RFC_1123: "D, d M yy",
    RFC_2822: "D, d M yy",
    RSS: "D, d M y", // RFC 822
    TICKS: "!",
    TIMESTAMP: "@",
    W3C: "yy-mm-dd", // ISO 8601

    _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
        Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

    /* Format a date object into a string value.
     * The format can be combinations of the following:
     * d  - day of month (no leading zero)
     * dd - day of month (two digit)
     * o  - day of year (no leading zeros)
     * oo - day of year (three digit)
     * D  - day name short
     * DD - day name long
     * m  - month of year (no leading zero)
     * mm - month of year (two digit)
     * M  - month name short
     * MM - month name long
     * y  - year (two digit)
     * yy - year (four digit)
     * @ - Unix timestamp (ms since 01/01/1970)
     * ! - Windows ticks (100ns since 01/01/0001)
     * "..." - literal text
     * '' - single quote
     *
     * @param  format string - the desired format of the date
     * @param  date Date - the date value to format
     * @param  settings Object - attributes include:
     *                  dayNamesShort   string[7] - abbreviated names of the days from Sunday (optional)
     *                  dayNames        string[7] - names of the days from Sunday (optional)
     *                  monthNamesShort string[12] - abbreviated names of the months (optional)
     *                  monthNames      string[12] - names of the months (optional)
     * @return  string - the date in the above format
     */
    formatDate: function (format, date, settings) {
        if (!date) {
            return "";
        }

        var iFormat,
            dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
            dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
            monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
            monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
            // Check whether a format character is doubled
            lookAhead = function(match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                if (matches) {
                    iFormat++;
                }
                return matches;
            },
            // Format a number, with leading zero if necessary
            formatNumber = function(match, value, len) {
                var num = "" + value;
                if (lookAhead(match)) {
                    while (num.length < len) {
                        num = "0" + num;
                    }
                }
                return num;
            },
            // Format a name, short or long as requested
            formatName = function(match, value, shortNames, longNames) {
                return (lookAhead(match) ? longNames[value] : shortNames[value]);
            },
            output = "",
            literal = false;

        if (date) {
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    } else {
                        output += format.charAt(iFormat);
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case "d":
                            output += formatNumber("d", date.getDate(), 2);
                            break;
                        case "D":
                            output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                            break;
                        case "o":
                            output += formatNumber("o",
                                Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                            break;
                        case "m":
                            output += formatNumber("m", date.getMonth() + 1, 2);
                            break;
                        case "M":
                            output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                            break;
                        case "y":
                            output += (lookAhead("y") ? date.getFullYear() :
                                (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
                            break;
                        case "@":
                            output += date.getTime();
                            break;
                        case "!":
                            output += date.getTime() * 10000 + this._ticksTo1970;
                            break;
                        case "'":
                            if (lookAhead("'")) {
                                output += "'";
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            output += format.charAt(iFormat);
                    }
                }
            }
        }
        return output;
    },

    /* Extract all possible characters from the date format. */
    _possibleChars: function (format) {
        var iFormat,
            chars = "",
            literal = false,
            // Check whether a format character is doubled
            lookAhead = function(match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                if (matches) {
                    iFormat++;
                }
                return matches;
            };

        for (iFormat = 0; iFormat < format.length; iFormat++) {
            if (literal) {
                if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                    literal = false;
                } else {
                    chars += format.charAt(iFormat);
                }
            } else {
                switch (format.charAt(iFormat)) {
                    case "d": case "m": case "y": case "@":
                        chars += "0123456789";
                        break;
                    case "D": case "M":
                        return null; // Accept anything
                    case "'":
                        if (lookAhead("'")) {
                            chars += "'";
                        } else {
                            literal = true;
                        }
                        break;
                    default:
                        chars += format.charAt(iFormat);
                }
            }
        }
        return chars;
    },

    /* Get a setting value, defaulting if necessary. */
    _get: function(inst, name) {
        return inst.settings[name] !== undefined ?
            inst.settings[name] : this._defaults[name];
    },

    /* Parse existing date and initialise date picker. */
    _setDateFromField: function(inst, noDefault) {
        if (inst.input.val() === inst.lastVal) {
            return;
        }

        var dateFormat = this._get(inst, "dateFormat"),
            dates = inst.lastVal = inst.input ? inst.input.val() : null,
            defaultDate = this._getDefaultDate(inst),
            date = defaultDate,
            settings = this._getFormatConfig(inst);

        try {
            date = this.parseDate(dateFormat, dates, settings) || defaultDate;
        } catch (event) {
            dates = (noDefault ? "" : dates);
        }
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
        inst.currentDay = (dates ? date.getDate() : 0);
        inst.currentMonth = (dates ? date.getMonth() : 0);
        inst.currentYear = (dates ? date.getFullYear() : 0);
        this._adjustInstDate(inst);
    },

    /* Retrieve the default date shown on opening. */
    _getDefaultDate: function(inst) {
        return this._restrictMinMax(inst,
            this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
    },

    /* A date may be specified as an exact value or a relative one. */
    _determineDate: function(inst, date, defaultDate) {
        var offsetNumeric = function(offset) {
                var date = new Date();
                date.setDate(date.getDate() + offset);
                return date;
            },
            offsetString = function(offset) {
                try {
                    return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
                        offset, $.datepicker._getFormatConfig(inst));
                }
                catch (e) {
                    // Ignore
                }

                var date = (offset.toLowerCase().match(/^c/) ?
                    $.datepicker._getDate(inst) : null) || new Date(),
                    year = date.getFullYear(),
                    month = date.getMonth(),
                    day = date.getDate(),
                    pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                    matches = pattern.exec(offset);

                while (matches) {
                    switch (matches[2] || "d") {
                        case "d" : case "D" :
                            day += parseInt(matches[1],10); break;
                        case "w" : case "W" :
                            day += parseInt(matches[1],10) * 7; break;
                        case "m" : case "M" :
                            month += parseInt(matches[1],10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                        case "y": case "Y" :
                            year += parseInt(matches[1],10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                    }
                    matches = pattern.exec(offset);
                }
                return new Date(year, month, day);
            },
            newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
                (typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

        newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
        if (newDate) {
            newDate.setHours(0);
            newDate.setMinutes(0);
            newDate.setSeconds(0);
            newDate.setMilliseconds(0);
        }
        return this._daylightSavingAdjust(newDate);
    },

    /* Handle switch to/from daylight saving.
     * Hours may be non-zero on daylight saving cut-over:
     * > 12 when midnight changeover, but then cannot generate
     * midnight datetime, so jump to 1AM, otherwise reset.
     * @param  date  (Date) the date to check
     * @return  (Date) the corrected date
     */
    _daylightSavingAdjust: function(date) {
        if (!date) {
            return null;
        }
        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
        return date;
    },

    /* Set the date(s) directly. */
    _setDate: function(inst, date, noChange) {
        var clear = !date,
            origMonth = inst.selectedMonth,
            origYear = inst.selectedYear,
            newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

        inst.selectedDay = inst.currentDay = newDate.getDate();
        inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
        inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
        if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
            this._notifyChange(inst);
        }
        this._adjustInstDate(inst);
        if (inst.input) {
            inst.input.val(clear ? "" : this._formatDate(inst));
        }
    },

    /* Retrieve the date(s) directly. */
    _getDate: function(inst) {
        var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
            this._daylightSavingAdjust(new Date(
            inst.currentYear, inst.currentMonth, inst.currentDay)));
            return startDate;
    },

    /* Attach the onxxx handlers.  These are declared statically so
     * they work with static code transformers like Caja.
     */
    _attachHandlers: function(inst) {
        var stepMonths = this._get(inst, "stepMonths"),
            id = "#" + inst.id.replace( /\\\\/g, "\\" );
        inst.dpDiv.find("[data-handler]").map(function () {
            var handler = {
                prev: function () {
                    $.datepicker._adjustDate(id, -stepMonths, "M");
                },
                next: function () {
                    $.datepicker._adjustDate(id, +stepMonths, "M");
                },
                hide: function () {
                    $.datepicker._hideDatepicker();
                },
                today: function () {
                    $.datepicker._gotoToday(id);
                },
                selectDay: function () {
                    $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                    return false;
                },
                selectMonth: function () {
                    $.datepicker._selectMonthYear(id, this, "M");
                    return false;
                },
                selectYear: function () {
                    $.datepicker._selectMonthYear(id, this, "Y");
                    return false;
                }
            };
            $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
        });
    },

    /* Generate the HTML for the current state of the date picker. */
    _generateHTML: function(inst) {
        var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
            controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
            monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
            selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
            cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
            printDate, dRow, tbody, daySettings, otherMonth, unselectable,
            tempDate = new Date(),
            today = this._daylightSavingAdjust(
                new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
            isRTL = this._get(inst, "isRTL"),
            showButtonPanel = this._get(inst, "showButtonPanel"),
            hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
            navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
            numMonths = this._getNumberOfMonths(inst),
            showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
            stepMonths = this._get(inst, "stepMonths"),
            isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
            currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
                new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
            minDate = this._getMinMaxDate(inst, "min"),
            maxDate = this._getMinMaxDate(inst, "max"),
            drawMonth = inst.drawMonth - showCurrentAtPos,
            drawYear = inst.drawYear;

        if (drawMonth < 0) {
            drawMonth += 12;
            drawYear--;
        }
        if (maxDate) {
            maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
                maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
            maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
            while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                drawMonth--;
                if (drawMonth < 0) {
                    drawMonth = 11;
                    drawYear--;
                }
            }
        }
        inst.drawMonth = drawMonth;
        inst.drawYear = drawYear;

        prevText = this._get(inst, "prevText");
        prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
            this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
            this._getFormatConfig(inst)));

        prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
            "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
            " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
            (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

        nextText = this._get(inst, "nextText");
        nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
            this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
            this._getFormatConfig(inst)));

        next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
            "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
            " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
            (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

        currentText = this._get(inst, "currentText");
        gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
        currentText = (!navigationAsDateFormat ? currentText :
            this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

        controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
            this._get(inst, "closeText") + "</button>" : "");

        buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
            (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
            ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

        firstDay = parseInt(this._get(inst, "firstDay"),10);
        firstDay = (isNaN(firstDay) ? 0 : firstDay);

        showWeek = this._get(inst, "showWeek");
        dayNames = this._get(inst, "dayNames");
        dayNamesMin = this._get(inst, "dayNamesMin");
        monthNames = this._get(inst, "monthNames");
        monthNamesShort = this._get(inst, "monthNamesShort");
        beforeShowDay = this._get(inst, "beforeShowDay");
        showOtherMonths = this._get(inst, "showOtherMonths");
        selectOtherMonths = this._get(inst, "selectOtherMonths");
        defaultDate = this._getDefaultDate(inst);
        html = "";
        dow;
        for (row = 0; row < numMonths[0]; row++) {
            group = "";
            this.maxRows = 4;
            for (col = 0; col < numMonths[1]; col++) {
                selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                cornerClass = " ui-corner-all";
                calender = "";
                if (isMultiMonth) {
                    calender += "<div class='ui-datepicker-group";
                    if (numMonths[1] > 1) {
                        switch (col) {
                            case 0: calender += " ui-datepicker-group-first";
                                cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
                            case numMonths[1]-1: calender += " ui-datepicker-group-last";
                                cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
                            default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
                        }
                    }
                    calender += "'>";
                }
                calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
                    (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
                    (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
                    this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
                    row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                    "</div><table class='ui-datepicker-calendar'><thead>" +
                    "<tr>";
                thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
                for (dow = 0; dow < 7; dow++) { // days of the week
                    day = (dow + firstDay) % 7;
                    thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
                        "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                }
                calender += thead + "</tr></thead><tbody>";
                daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                    inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                }
                leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
                numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
                this.maxRows = numRows;
                printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
                    calender += "<tr>";
                    tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
                        this._get(inst, "calculateWeek")(printDate) + "</td>");
                    for (dow = 0; dow < 7; dow++) { // create date picker days
                        daySettings = (beforeShowDay ?
                            beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
                        otherMonth = (printDate.getMonth() !== drawMonth);
                        unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
                            (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                        tbody += "<td class='" +
                            ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
                            (otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
                            ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
                            (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
                            // or defaultDate is current printedDate and defaultDate is selectedDate
                            " " + this._dayOverClass : "") + // highlight selected day
                            (unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
                            (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
                            (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
                            (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
                            ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
                            (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
                            (otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
                            (unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
                            (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
                            (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
                            (otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
                            "' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
                        printDate.setDate(printDate.getDate() + 1);
                        printDate = this._daylightSavingAdjust(printDate);
                    }
                    calender += tbody + "</tr>";
                }
                drawMonth++;
                if (drawMonth > 11) {
                    drawMonth = 0;
                    drawYear++;
                }
                calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
                            ((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                group += calender;
            }
            html += group;
        }
        html += buttonPanel;
        inst._keyEvent = false;
        return html;
    },

    /* Generate the month and year header. */
    _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
            secondary, monthNames, monthNamesShort) {

        var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
            changeMonth = this._get(inst, "changeMonth"),
            changeYear = this._get(inst, "changeYear"),
            showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
            html = "<div class='ui-datepicker-title'>",
            monthHtml = "";

        // month selection
        if (secondary || !changeMonth) {
            monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
        } else {
            inMinYear = (minDate && minDate.getFullYear() === drawYear);
            inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
            monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
            for ( month = 0; month < 12; month++) {
                if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                    monthHtml += "<option value='" + month + "'" +
                        (month === drawMonth ? " selected='selected'" : "") +
                        ">" + monthNamesShort[month] + "</option>";
                }
            }
            monthHtml += "</select>";
        }

        if (!showMonthAfterYear) {
            html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
        }

        // year selection
        if ( !inst.yearshtml ) {
            inst.yearshtml = "";
            if (secondary || !changeYear) {
                html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
            } else {
                // determine range of years to display
                years = this._get(inst, "yearRange").split(":");
                thisYear = new Date().getFullYear();
                determineYear = function(value) {
                    var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
                        (value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
                        parseInt(value, 10)));
                    return (isNaN(year) ? thisYear : year);
                };
                year = determineYear(years[0]);
                endYear = Math.max(year, determineYear(years[1] || ""));
                year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                for (; year <= endYear; year++) {
                    inst.yearshtml += "<option value='" + year + "'" +
                        (year === drawYear ? " selected='selected'" : "") +
                        ">" + year + "</option>";
                }
                inst.yearshtml += "</select>";

                html += inst.yearshtml;
                inst.yearshtml = null;
            }
        }

        html += this._get(inst, "yearSuffix");
        if (showMonthAfterYear) {
            html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
        }
        html += "</div>"; // Close datepicker_header
        return html;
    },

    /* Adjust one of the date sub-fields. */
    _adjustInstDate: function(inst, offset, period) {
        var year = inst.drawYear + (period === "Y" ? offset : 0),
            month = inst.drawMonth + (period === "M" ? offset : 0),
            day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
            date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
        if (period === "M" || period === "Y") {
            this._notifyChange(inst);
        }
    },

    /* Ensure a date is within any min/max bounds. */
    _restrictMinMax: function(inst, date) {
        var minDate = this._getMinMaxDate(inst, "min"),
            maxDate = this._getMinMaxDate(inst, "max"),
            newDate = (minDate && date < minDate ? minDate : date);
        return (maxDate && newDate > maxDate ? maxDate : newDate);
    },

    /* Notify change of month/year. */
    _notifyChange: function(inst) {
        var onChange = this._get(inst, "onChangeMonthYear");
        if (onChange) {
            onChange.apply((inst.input ? inst.input[0] : null),
                [inst.selectedYear, inst.selectedMonth + 1, inst]);
        }
    },

    /* Determine the number of months to show. */
    _getNumberOfMonths: function(inst) {
        var numMonths = this._get(inst, "numberOfMonths");
        return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
    },

    /* Determine the current maximum date - ensure no time components are set. */
    _getMinMaxDate: function(inst, minMax) {
        return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
    },

    /* Find the number of days in a given month. */
    _getDaysInMonth: function(year, month) {
        return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
    },

    /* Find the day of the week of the first of a month. */
    _getFirstDayOfMonth: function(year, month) {
        return new Date(year, month, 1).getDay();
    },

    /* Determines if we should allow a "next/prev" month display change. */
    _canAdjustMonth: function(inst, offset, curYear, curMonth) {
        var numMonths = this._getNumberOfMonths(inst),
            date = this._daylightSavingAdjust(new Date(curYear,
            curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

        if (offset < 0) {
            date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
        }
        return this._isInRange(inst, date);
    },

    /* Is the given date in the accepted range? */
    _isInRange: function(inst, date) {
        var yearSplit, currentYear,
            minDate = this._getMinMaxDate(inst, "min"),
            maxDate = this._getMinMaxDate(inst, "max"),
            minYear = null,
            maxYear = null,
            years = this._get(inst, "yearRange");
            if (years){
                yearSplit = years.split(":");
                currentYear = new Date().getFullYear();
                minYear = parseInt(yearSplit[0], 10);
                maxYear = parseInt(yearSplit[1], 10);
                if ( yearSplit[0].match(/[+\-].*/) ) {
                    minYear += currentYear;
                }
                if ( yearSplit[1].match(/[+\-].*/) ) {
                    maxYear += currentYear;
                }
            }

        return ((!minDate || date.getTime() >= minDate.getTime()) &&
            (!maxDate || date.getTime() <= maxDate.getTime()) &&
            (!minYear || date.getFullYear() >= minYear) &&
            (!maxYear || date.getFullYear() <= maxYear));
    },

    /* Provide the configuration settings for formatting/parsing. */
    _getFormatConfig: function(inst) {
        var shortYearCutoff = this._get(inst, "shortYearCutoff");
        shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
            new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
        return {shortYearCutoff: shortYearCutoff,
            dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
            monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
    },

    /* Format the given date for display. */
    _formatDate: function(inst, day, month, year) {
        if (!day) {
            inst.currentDay = inst.selectedDay;
            inst.currentMonth = inst.selectedMonth;
            inst.currentYear = inst.selectedYear;
        }
        var date = (day ? (typeof day === "object" ? day :
            this._daylightSavingAdjust(new Date(year, month, day))) :
            this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
        return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
    }
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function datepicker_bindHover(dpDiv) {
    var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
    return dpDiv.delegate(selector, "mouseout", function() {
            $(this).removeClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                $(this).removeClass("ui-datepicker-prev-hover");
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                $(this).removeClass("ui-datepicker-next-hover");
            }
        })
        .delegate( selector, "mouseover", datepicker_handleMouseover );
}

function datepicker_handleMouseover() {
    if (!$.datepicker._isDisabledDatepicker( datepicker_instActive.inline? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
        $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
        $(this).addClass("ui-state-hover");
        if (this.className.indexOf("ui-datepicker-prev") !== -1) {
            $(this).addClass("ui-datepicker-prev-hover");
        }
        if (this.className.indexOf("ui-datepicker-next") !== -1) {
            $(this).addClass("ui-datepicker-next-hover");
        }
    }
}

/* jQuery extend now ignores nulls! */
function datepicker_extendRemove(target, props) {
    $.extend(target, props);
    for (var name in props) {
        if (props[name] == null) {
            target[name] = props[name];
        }
    }
    return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
                    Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

    /* Verify an empty collection wasn't passed - Fixes #6976 */
    if ( !this.length ) {
        return this;
    }

    /* Initialise the date picker. */
    if (!$.datepicker.initialized) {
        $(document).mousedown($.datepicker._checkExternalClick);
        $.datepicker.initialized = true;
    }

    /* Append datepicker main container to body if not exist. */
    if ($("#"+$.datepicker._mainDivId).length === 0) {
        $("body").append($.datepicker.dpDiv);
    }

    var otherArgs = Array.prototype.slice.call(arguments, 1);
    if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
        return $.datepicker["_" + options + "Datepicker"].
            apply($.datepicker, [this[0]].concat(otherArgs));
    }
    if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
        return $.datepicker["_" + options + "Datepicker"].
            apply($.datepicker, [this[0]].concat(otherArgs));
    }
    return this.each(function() {
        typeof options === "string" ?
            $.datepicker["_" + options + "Datepicker"].
                apply($.datepicker, [this].concat(otherArgs)) :
            $.datepicker._attachDatepicker(this, options);
    });
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "@VERSION";

return $.datepicker;

}));
/*!
 * dragtable
 *
 * @Version 2.0.14
 *
 * Copyright (c) 2010-2013, Andres akottr@gmail.com
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * Inspired by the the dragtable from Dan Vanderkam (danvk.org/dragtable/)
 * Thanks to the jquery and jqueryui comitters
 *
 * Any comment, bug report, feature-request is welcome
 * Feel free to contact me.
 */

/* TOKNOW:
 * For IE7 you need this css rule:
 * table {
 *   border-collapse: collapse;
 * }
 * Or take a clean reset.css (see http://meyerweb.com/eric/tools/css/reset/)
 */

/* TODO: investigate
 * Does not work properly with css rule:
 * html {
 *      overflow: -moz-scrollbars-vertical;
 *  }
 * Workaround:
 * Fixing Firefox issues by scrolling down the page
 * http://stackoverflow.com/questions/2451528/jquery-ui-sortable-scroll-helper-element-offset-firefox-issue
 *
 * var start = $.noop;
 * var beforeStop = $.noop;
 * if($.browser.mozilla) {
 * var start = function (event, ui) {
 *               if( ui.helper !== undefined )
 *                 ui.helper.css('position','absolute').css('margin-top', $(window).scrollTop() );
 *               }
 * var beforeStop = function (event, ui) {
 *              if( ui.offset !== undefined )
 *                ui.helper.css('margin-top', 0);
 *              }
 * }
 *
 * and pass this as start and stop function to the sortable initialisation
 * start: start,
 * beforeStop: beforeStop
 */
/*
 * Special thx to all pull requests comitters
 */

(function($) {
  $.widget("akottr.dragtable", {
    options: {
      revert: false,               // smooth revert
      dragHandle: '.table-handle', // handle for moving cols, if not exists the whole 'th' is the handle
      maxMovingRows: 40,           // 1 -> only header. 40 row should be enough, the rest is usually not in the viewport
      excludeFooter: false,        // excludes the footer row(s) while moving other columns. Make sense if there is a footer with a colspan. */
      onlyHeaderThreshold: 100,    // TODO:  not implemented yet, switch automatically between entire col moving / only header moving
      dragaccept: null,            // draggable cols -> default all
      persistState: null,          // url or function -> plug in your custom persistState function right here. function call is persistState(originalTable)
      restoreState: null,          // JSON-Object or function:  some kind of experimental aka Quick-Hack TODO: do it better
      exact: true,                 // removes pixels, so that the overlay table width fits exactly the original table width
      clickDelay: 10,              // ms to wait before rendering sortable list and delegating click event
      containment: null,           // @see http://api.jqueryui.com/sortable/#option-containment, use it if you want to move in 2 dimesnions (together with axis: null)
      cursor: 'move',              // @see http://api.jqueryui.com/sortable/#option-cursor
      cursorAt: false,             // @see http://api.jqueryui.com/sortable/#option-cursorAt
      distance: 0,                 // @see http://api.jqueryui.com/sortable/#option-distance, for immediate feedback use "0"
      tolerance: 'pointer',        // @see http://api.jqueryui.com/sortable/#option-tolerance
      axis: 'x',                   // @see http://api.jqueryui.com/sortable/#option-axis, Only vertical moving is allowed. Use 'x' or null. Use this in conjunction with the 'containment' setting
      beforeStart: $.noop,         // returning FALSE will stop the execution chain.
      beforeMoving: $.noop,
      beforeReorganize: $.noop,
      beforeStop: $.noop
    },
    originalTable: {
      el: null,
      selectedHandle: null,
      sortOrder: null,
      startIndex: 0,
      endIndex: 0
    },
    sortableTable: {
      el: $(),
      selectedHandle: $(),
      movingRow: $()
    },
    persistState: function() {
      var _this = this;
      this.originalTable.el.find('th').each(function(i) {
        if (this.id !== '') {
          _this.originalTable.sortOrder[this.id] = i;
        }
      });
      $.ajax({
        url: this.options.persistState,
        data: this.originalTable.sortOrder
      });
    },
    /*
     * persistObj looks like
     * {'id1':'2','id3':'3','id2':'1'}
     * table looks like
     * |   id2  |   id1   |   id3   |
     */
    _restoreState: function(persistObj) {
      for (var n in persistObj) {
        this.originalTable.startIndex = $('#' + n).closest('th').prevAll().size() + 1;
        this.originalTable.endIndex = parseInt(persistObj[n], 10) + 1;
        this._bubbleCols();
      }
    },
    // bubble the moved col left or right
    _bubbleCols: function() {
      var i, j, col1, col2;
      var from = this.originalTable.startIndex;
      var to = this.originalTable.endIndex;
      /* Find children thead and tbody.
       * Only to process the immediate tr-children. Bugfix for inner tables
       */
      var thtb = this.originalTable.el.children();
      if (this.options.excludeFooter) {
        thtb = thtb.not('tfoot');
      }
      if (from < to) {
        for (i = from; i < to; i++) {
          col1 = thtb.find('> tr > td:nth-child(' + i + ')')
            .add(thtb.find('> tr > th:nth-child(' + i + ')'));
          col2 = thtb.find('> tr > td:nth-child(' + (i + 1) + ')')
            .add(thtb.find('> tr > th:nth-child(' + (i + 1) + ')'));
          for (j = 0; j < col1.length; j++) {
            swapNodes(col1[j], col2[j]);
          }
        }
      } else {
        for (i = from; i > to; i--) {
          col1 = thtb.find('> tr > td:nth-child(' + i + ')')
            .add(thtb.find('> tr > th:nth-child(' + i + ')'));
          col2 = thtb.find('> tr > td:nth-child(' + (i - 1) + ')')
            .add(thtb.find('> tr > th:nth-child(' + (i - 1) + ')'));
          for (j = 0; j < col1.length; j++) {
            swapNodes(col1[j], col2[j]);
          }
        }
      }
    },
    _rearrangeTableBackroundProcessing: function() {
      var _this = this;
      return function() {
        _this._bubbleCols();
        _this.options.beforeStop(_this.originalTable);
        _this.sortableTable.el.remove();
        restoreTextSelection();
        // persist state if necessary
        if (_this.options.persistState !== null) {
          $.isFunction(_this.options.persistState) ? _this.options.persistState(_this.originalTable) : _this.persistState();
        }
      };
    },
    _rearrangeTable: function() {
      var _this = this;
      return function() {
        // remove handler-class -> handler is now finished
        _this.originalTable.selectedHandle.removeClass('dragtable-handle-selected');
        // add disabled class -> reorgorganisation starts soon
        _this.sortableTable.el.sortable("disable");
        _this.sortableTable.el.addClass('dragtable-disabled');
        _this.options.beforeReorganize(_this.originalTable, _this.sortableTable);
        // do reorganisation asynchronous
        // for chrome a little bit more than 1 ms because we want to force a rerender
        _this.originalTable.endIndex = _this.sortableTable.movingRow.prevAll().size() + 1;
        setTimeout(_this._rearrangeTableBackroundProcessing(), 50);
      };
    },
    /*
     * Disrupts the table. The original table stays the same.
     * But on a layer above the original table we are constructing a list (ul > li)
     * each li with a separate table representig a single col of the original table.
     */
    _generateSortable: function(e) {
      !e.cancelBubble && (e.cancelBubble = true);
      var _this = this;
      // table attributes
      var attrs = this.originalTable.el[0].attributes;
      var attrsString = '';
      for (var i = 0; i < attrs.length; i++) {
        if (attrs[i].value && attrs[i].nodeName != 'id' && attrs[i].nodeName != 'width') {
          attrsString += attrs[i].nodeName + '="' + attrs[i].value + '" ';
        }
      }

      // row attributes
      var rowAttrsArr = [];
      //compute height, special handling for ie needed :-(
      var heightArr = [];
      this.originalTable.el.find('tr').slice(0, this.options.maxMovingRows).each(function(i, v) {
        // row attributes
        var attrs = this.attributes;
        var attrsString = "";
        for (var j = 0; j < attrs.length; j++) {
          if (attrs[j].value && attrs[j].nodeName != 'id') {
            attrsString += " " + attrs[j].nodeName + '="' + attrs[j].value + '"';
          }
        }
        rowAttrsArr.push(attrsString);
        heightArr.push($(this).height());
      });

      // compute width, no special handling for ie needed :-)
      var widthArr = [];
      // compute total width, needed for not wrapping around after the screen ends (floating)
      var totalWidth = 0;
      /* Find children thead and tbody.
       * Only to process the immediate tr-children. Bugfix for inner tables
       */
      var thtb = _this.originalTable.el.children();
      if (this.options.excludeFooter) {
        thtb = thtb.not('tfoot');
      }
      thtb.find('> tr > th').each(function(i, v) {
        var w = $(this).outerWidth();
        widthArr.push(w);
        totalWidth += w;
      });
      if(_this.options.exact) {
          var difference = totalWidth - _this.originalTable.el.outerWidth();
          widthArr[0] -= difference;
      }
      // one extra px on right and left side
      totalWidth += 2

      var sortableHtml = '<ul class="dragtable-sortable" style="position:absolute; width:' + totalWidth + 'px;">';
      // assemble the needed html
      thtb.find('> tr > th').each(function(i, v) {
        var width_li = $(this).outerWidth();
        sortableHtml += '<li style="width:' + width_li + 'px;">';
        sortableHtml += '<table ' + attrsString + '>';
        var row = thtb.find('> tr > th:nth-child(' + (i + 1) + ')');
        if (_this.options.maxMovingRows > 1) {
          row = row.add(thtb.find('> tr > td:nth-child(' + (i + 1) + ')').slice(0, _this.options.maxMovingRows - 1));
        }
        row.each(function(j) {
          // TODO: May cause duplicate style-Attribute
          var row_content = $(this).clone().wrap('<div></div>').parent().html();
          if (row_content.toLowerCase().indexOf('<th') === 0) sortableHtml += "<thead>";
          sortableHtml += '<tr ' + rowAttrsArr[j] + '" style="height:' + heightArr[j] + 'px;">';
          sortableHtml += row_content;
          if (row_content.toLowerCase().indexOf('<th') === 0) sortableHtml += "</thead>";
          sortableHtml += '</tr>';
        });
        sortableHtml += '</table>';
        sortableHtml += '</li>';
      });
      sortableHtml += '</ul>';
      this.sortableTable.el = this.originalTable.el.before(sortableHtml).prev();
      // set width if necessary
      this.sortableTable.el.find('> li > table').each(function(i, v) {
        $(this).css('width', widthArr[i] + 'px');
      });

      // assign this.sortableTable.selectedHandle
      this.sortableTable.selectedHandle = this.sortableTable.el.find('th .dragtable-handle-selected');

      var items = !this.options.dragaccept ? 'li' : 'li:has(' + this.options.dragaccept + ')';
      this.sortableTable.el.sortable({
        items: items,
        stop: this._rearrangeTable(),
        // pass thru options for sortable widget
        revert: this.options.revert,
        tolerance: this.options.tolerance,
        containment: this.options.containment,
        cursor: this.options.cursor,
        cursorAt: this.options.cursorAt,
        distance: this.options.distance,
        axis: this.options.axis
      });

      // assign start index
      this.originalTable.startIndex = $(e.target).closest('th').prevAll().size() + 1;

      this.options.beforeMoving(this.originalTable, this.sortableTable);
      // Start moving by delegating the original event to the new sortable table
      this.sortableTable.movingRow = this.sortableTable.el.find('> li:nth-child(' + this.originalTable.startIndex + ')');

      // prevent the user from drag selecting "highlighting" surrounding page elements
      disableTextSelection();
      // clone the initial event and trigger the sort with it
      this.sortableTable.movingRow.trigger($.extend($.Event(e.type), {
        which: 1,
        clientX: e.clientX,
        clientY: e.clientY,
        pageX: e.pageX,
        pageY: e.pageY,
        screenX: e.screenX,
        screenY: e.screenY
      }));

      // Some inner divs to deliver the posibillity to style the placeholder more sophisticated
      var placeholder = this.sortableTable.el.find('.ui-sortable-placeholder');
      if(!placeholder.height()  <= 0) {
        placeholder.css('height', this.sortableTable.el.find('.ui-sortable-helper').height());
      }

      placeholder.html('<div class="outer" style="height:100%;"><div class="inner" style="height:100%;"></div></div>');
    },
    bindTo: {},
    _create: function() {
      this.originalTable = {
        el: this.element,
        selectedHandle: $(),
        sortOrder: {},
        startIndex: 0,
        endIndex: 0
      };
      // bind draggable to 'th' by default
      this.bindTo = this.originalTable.el.find('th');
      // filter only the cols that are accepted
      if (this.options.dragaccept) {
        this.bindTo = this.bindTo.filter(this.options.dragaccept);
      }
      // bind draggable to handle if exists
      if (this.bindTo.find(this.options.dragHandle).size() > 0) {
        this.bindTo = this.bindTo.find(this.options.dragHandle);
      }
      // restore state if necessary
      if (this.options.restoreState !== null) {
        $.isFunction(this.options.restoreState) ? this.options.restoreState(this.originalTable) : this._restoreState(this.options.restoreState);
      }
      var _this = this;
      var mouseClicked = false;

      this.bindTo.mousedown(function(evt) {
        // listen only to left mouse click
        if(evt.which!==1) return;
        if (_this.options.beforeStart(_this.originalTable) === false) {
          return;
        }
        mouseClicked = false;
        clearTimeout(this.downTimer);
        this.downTimer = setTimeout(function () {
           if (mouseClicked) return;
          _this.originalTable.selectedHandle = $(this);
          _this.originalTable.selectedHandle.addClass('dragtable-handle-selected');
          _this._generateSortable(evt);
        }, _this.options.clickDelay);
      }).mouseup(function (evt) {          
          clearTimeout(this.downTimer);
      }).click(function (evt) {          
          mouseClicked = true;
      });
    },
    redraw: function(){
      this.destroy();
      this._create();
    },
    destroy: function() {
      this.bindTo.unbind('mousedown');
      $.Widget.prototype.destroy.apply(this, arguments); // default destroy
      // now do other stuff particular to this widget
    }
  });

  /** closure-scoped "private" functions **/

  var body_onselectstart_save = $(document.body).attr('onselectstart'),
    body_unselectable_save = $(document.body).attr('unselectable');

  // css properties to disable user-select on the body tag by appending a <style> tag to the <head>
  // remove any current document selections

  function disableTextSelection() {
    // jQuery doesn't support the element.text attribute in MSIE 8
    // http://stackoverflow.com/questions/2692770/style-style-textcss-appendtohead-does-not-work-in-ie
    var $style = $('<style id="__dragtable_disable_text_selection__" type="text/css">body { -ms-user-select:none;-moz-user-select:-moz-none;-khtml-user-select:none;-webkit-user-select:none;user-select:none; }</style>');
    $(document.head).append($style);
    $(document.body).attr('onselectstart', 'return false;').attr('unselectable', 'on');
    if (window.getSelection) {
      window.getSelection().removeAllRanges();
    } else {
      document.selection.empty(); // MSIE http://msdn.microsoft.com/en-us/library/ms535869%28v=VS.85%29.aspx
    }
  }

  // remove the <style> tag, and restore the original <body> onselectstart attribute

  function restoreTextSelection() {
    $('#__dragtable_disable_text_selection__').remove();
    if (body_onselectstart_save) {
      $(document.body).attr('onselectstart', body_onselectstart_save);
    } else {
      $(document.body).removeAttr('onselectstart');
    }
    if (body_unselectable_save) {
      $(document.body).attr('unselectable', body_unselectable_save);
    } else {
      $(document.body).removeAttr('unselectable');
    }
  }

  function swapNodes(a, b) {
    var aparent = a.parentNode;
    var asibling = a.nextSibling === b ? a : a.nextSibling;
    b.parentNode.insertBefore(a, b);
    aparent.insertBefore(b, asibling);
  }
})(jQuery);

/**
 * @license AngularJS v1.2.27
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngTouch
 * @description
 *
 * # ngTouch
 *
 * The `ngTouch` module provides touch events and other helpers for touch-enabled devices.
 * The implementation is based on jQuery Mobile touch event handling
 * ([jquerymobile.com](http://jquerymobile.com/)).
 *
 *
 * See {@link ngTouch.$swipe `$swipe`} for usage.
 *
 * <div doc-module-components="ngTouch"></div>
 *
 */

// define ngTouch module
/* global -ngTouch */
var ngTouch = angular.module('ngTouch', []);

/* global ngTouch: false */

    /**
     * @ngdoc service
     * @name $swipe
     *
     * @description
     * The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe
     * behavior, to make implementing swipe-related directives more convenient.
     *
     * Requires the {@link ngTouch `ngTouch`} module to be installed.
     *
     * `$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`, and by
     * `ngCarousel` in a separate component.
     *
     * # Usage
     * The `$swipe` service is an object with a single method: `bind`. `bind` takes an element
     * which is to be watched for swipes, and an object with four handler functions. See the
     * documentation for `bind` below.
     */

ngTouch.factory('$swipe', [function() {
  // The total distance in any direction before we make the call on swipe vs. scroll.
  var MOVE_BUFFER_RADIUS = 10;

  function getCoordinates(event) {
    var touches = event.touches && event.touches.length ? event.touches : [event];
    var e = (event.changedTouches && event.changedTouches[0]) ||
        (event.originalEvent && event.originalEvent.changedTouches &&
            event.originalEvent.changedTouches[0]) ||
        touches[0].originalEvent || touches[0];

    return {
      x: e.clientX,
      y: e.clientY
    };
  }

  return {
    /**
     * @ngdoc method
     * @name $swipe#bind
     *
     * @description
     * The main method of `$swipe`. It takes an element to be watched for swipe motions, and an
     * object containing event handlers.
     *
     * The four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`
     * receive as a parameter a coordinates object of the form `{ x: 150, y: 310 }`.
     *
     * `start` is called on either `mousedown` or `touchstart`. After this event, `$swipe` is
     * watching for `touchmove` or `mousemove` events. These events are ignored until the total
     * distance moved in either dimension exceeds a small threshold.
     *
     * Once this threshold is exceeded, either the horizontal or vertical delta is greater.
     * - If the horizontal distance is greater, this is a swipe and `move` and `end` events follow.
     * - If the vertical distance is greater, this is a scroll, and we let the browser take over.
     *   A `cancel` event is sent.
     *
     * `move` is called on `mousemove` and `touchmove` after the above logic has determined that
     * a swipe is in progress.
     *
     * `end` is called when a swipe is successfully completed with a `touchend` or `mouseup`.
     *
     * `cancel` is called either on a `touchcancel` from the browser, or when we begin scrolling
     * as described above.
     *
     */
    bind: function(element, eventHandlers) {
      // Absolute total movement, used to control swipe vs. scroll.
      var totalX, totalY;
      // Coordinates of the start position.
      var startCoords;
      // Last event's position.
      var lastPos;
      // Whether a swipe is active.
      var active = false;

      element.on('touchstart mousedown', function(event) {
        startCoords = getCoordinates(event);
        active = true;
        totalX = 0;
        totalY = 0;
        lastPos = startCoords;
        eventHandlers['start'] && eventHandlers['start'](startCoords, event);
      });

      element.on('touchcancel', function(event) {
        active = false;
        eventHandlers['cancel'] && eventHandlers['cancel'](event);
      });

      element.on('touchmove mousemove', function(event) {
        if (!active) return;

        // Android will send a touchcancel if it thinks we're starting to scroll.
        // So when the total distance (+ or - or both) exceeds 10px in either direction,
        // we either:
        // - On totalX > totalY, we send preventDefault() and treat this as a swipe.
        // - On totalY > totalX, we let the browser handle it as a scroll.

        if (!startCoords) return;
        var coords = getCoordinates(event);

        totalX += Math.abs(coords.x - lastPos.x);
        totalY += Math.abs(coords.y - lastPos.y);

        lastPos = coords;

        if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {
          return;
        }

        // One of totalX or totalY has exceeded the buffer, so decide on swipe vs. scroll.
        if (totalY > totalX) {
          // Allow native scrolling to take over.
          active = false;
          eventHandlers['cancel'] && eventHandlers['cancel'](event);
          return;
        } else {
          // Prevent the browser from scrolling.
          event.preventDefault();
          eventHandlers['move'] && eventHandlers['move'](coords, event);
        }
      });

      element.on('touchend mouseup', function(event) {
        if (!active) return;
        active = false;
        eventHandlers['end'] && eventHandlers['end'](getCoordinates(event), event);
      });
    }
  };
}]);

/* global ngTouch: false */

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * A more powerful replacement for the default ngClick designed to be used on touchscreen
 * devices. Most mobile browsers wait about 300ms after a tap-and-release before sending
 * the click event. This version handles them immediately, and then prevents the
 * following click event from propagating.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * This directive can fall back to using an ordinary click event, and so works on desktop
 * browsers as well as mobile.
 *
 * This directive also sets the CSS class `ng-click-active` while the element is being held
 * down (by a mouse click or touch) so you can restyle the depressed element if you wish.
 *
 * @element ANY
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate
 * upon tap. (Event object is available as `$event`)
 *
 * @example
    <example module="ngClickExample" deps="angular-touch.js">
      <file name="index.html">
        <button ng-click="count = count + 1" ng-init="count=0">
          Increment
        </button>
        count: {{ count }}
      </file>
      <file name="script.js">
        angular.module('ngClickExample', ['ngTouch']);
      </file>
    </example>
 */

ngTouch.config(['$provide', function($provide) {
  $provide.decorator('ngClickDirective', ['$delegate', function($delegate) {
    // drop the default ngClick directive
    $delegate.shift();
    return $delegate;
  }]);
}]);

ngTouch.directive('ngClick', ['$parse', '$timeout', '$rootElement',
    function($parse, $timeout, $rootElement) {
  var TAP_DURATION = 750; // Shorter than 750ms is a tap, longer is a taphold or drag.
  var MOVE_TOLERANCE = 12; // 12px seems to work in most mobile browsers.
  var PREVENT_DURATION = 2500; // 2.5 seconds maximum from preventGhostClick call to click
  var CLICKBUSTER_THRESHOLD = 25; // 25 pixels in any dimension is the limit for busting clicks.

  var ACTIVE_CLASS_NAME = 'ng-click-active';
  var lastPreventedTime;
  var touchCoordinates;
  var lastLabelClickCoordinates;


  // TAP EVENTS AND GHOST CLICKS
  //
  // Why tap events?
  // Mobile browsers detect a tap, then wait a moment (usually ~300ms) to see if you're
  // double-tapping, and then fire a click event.
  //
  // This delay sucks and makes mobile apps feel unresponsive.
  // So we detect touchstart, touchmove, touchcancel and touchend ourselves and determine when
  // the user has tapped on something.
  //
  // What happens when the browser then generates a click event?
  // The browser, of course, also detects the tap and fires a click after a delay. This results in
  // tapping/clicking twice. We do "clickbusting" to prevent it.
  //
  // How does it work?
  // We attach global touchstart and click handlers, that run during the capture (early) phase.
  // So the sequence for a tap is:
  // - global touchstart: Sets an "allowable region" at the point touched.
  // - element's touchstart: Starts a touch
  // (- touchmove or touchcancel ends the touch, no click follows)
  // - element's touchend: Determines if the tap is valid (didn't move too far away, didn't hold
  //   too long) and fires the user's tap handler. The touchend also calls preventGhostClick().
  // - preventGhostClick() removes the allowable region the global touchstart created.
  // - The browser generates a click event.
  // - The global click handler catches the click, and checks whether it was in an allowable region.
  //     - If preventGhostClick was called, the region will have been removed, the click is busted.
  //     - If the region is still there, the click proceeds normally. Therefore clicks on links and
  //       other elements without ngTap on them work normally.
  //
  // This is an ugly, terrible hack!
  // Yeah, tell me about it. The alternatives are using the slow click events, or making our users
  // deal with the ghost clicks, so I consider this the least of evils. Fortunately Angular
  // encapsulates this ugly logic away from the user.
  //
  // Why not just put click handlers on the element?
  // We do that too, just to be sure. If the tap event caused the DOM to change,
  // it is possible another element is now in that position. To take account for these possibly
  // distinct elements, the handlers are global and care only about coordinates.

  // Checks if the coordinates are close enough to be within the region.
  function hit(x1, y1, x2, y2) {
    return Math.abs(x1 - x2) < CLICKBUSTER_THRESHOLD && Math.abs(y1 - y2) < CLICKBUSTER_THRESHOLD;
  }

  // Checks a list of allowable regions against a click location.
  // Returns true if the click should be allowed.
  // Splices out the allowable region from the list after it has been used.
  function checkAllowableRegions(touchCoordinates, x, y) {
    for (var i = 0; i < touchCoordinates.length; i += 2) {
      if (hit(touchCoordinates[i], touchCoordinates[i+1], x, y)) {
        touchCoordinates.splice(i, i + 2);
        return true; // allowable region
      }
    }
    return false; // No allowable region; bust it.
  }

  // Global click handler that prevents the click if it's in a bustable zone and preventGhostClick
  // was called recently.
  function onClick(event) {
    if (Date.now() - lastPreventedTime > PREVENT_DURATION) {
      return; // Too old.
    }

    var touches = event.touches && event.touches.length ? event.touches : [event];
    var x = touches[0].clientX;
    var y = touches[0].clientY;
    // Work around desktop Webkit quirk where clicking a label will fire two clicks (on the label
    // and on the input element). Depending on the exact browser, this second click we don't want
    // to bust has either (0,0), negative coordinates, or coordinates equal to triggering label
    // click event
    if (x < 1 && y < 1) {
      return; // offscreen
    }
    if (lastLabelClickCoordinates &&
        lastLabelClickCoordinates[0] === x && lastLabelClickCoordinates[1] === y) {
      return; // input click triggered by label click
    }
    // reset label click coordinates on first subsequent click
    if (lastLabelClickCoordinates) {
      lastLabelClickCoordinates = null;
    }
    // remember label click coordinates to prevent click busting of trigger click event on input
    if (event.target.tagName.toLowerCase() === 'label') {
      lastLabelClickCoordinates = [x, y];
    }

    // Look for an allowable region containing this click.
    // If we find one, that means it was created by touchstart and not removed by
    // preventGhostClick, so we don't bust it.
    if (checkAllowableRegions(touchCoordinates, x, y)) {
      return;
    }

    // If we didn't find an allowable region, bust the click.
    event.stopPropagation();
    event.preventDefault();

    // Blur focused form elements
    event.target && event.target.blur();
  }


  // Global touchstart handler that creates an allowable region for a click event.
  // This allowable region can be removed by preventGhostClick if we want to bust it.
  function onTouchStart(event) {
    var touches = event.touches && event.touches.length ? event.touches : [event];
    var x = touches[0].clientX;
    var y = touches[0].clientY;
    touchCoordinates.push(x, y);

    $timeout(function() {
      // Remove the allowable region.
      for (var i = 0; i < touchCoordinates.length; i += 2) {
        if (touchCoordinates[i] == x && touchCoordinates[i+1] == y) {
          touchCoordinates.splice(i, i + 2);
          return;
        }
      }
    }, PREVENT_DURATION, false);
  }

  // On the first call, attaches some event handlers. Then whenever it gets called, it creates a
  // zone around the touchstart where clicks will get busted.
  function preventGhostClick(x, y) {
    if (!touchCoordinates) {
      $rootElement[0].addEventListener('click', onClick, true);
      $rootElement[0].addEventListener('touchstart', onTouchStart, true);
      touchCoordinates = [];
    }

    lastPreventedTime = Date.now();

    checkAllowableRegions(touchCoordinates, x, y);
  }

  // Actual linking function.
  return function(scope, element, attr) {
    var clickHandler = $parse(attr.ngClick),
        tapping = false,
        tapElement,  // Used to blur the element after a tap.
        startTime,   // Used to check if the tap was held too long.
        touchStartX,
        touchStartY;

    function resetState() {
      tapping = false;
      element.removeClass(ACTIVE_CLASS_NAME);
    }

    element.on('touchstart', function(event) {
      tapping = true;
      tapElement = event.target ? event.target : event.srcElement; // IE uses srcElement.
      // Hack for Safari, which can target text nodes instead of containers.
      if(tapElement.nodeType == 3) {
        tapElement = tapElement.parentNode;
      }

      element.addClass(ACTIVE_CLASS_NAME);

      startTime = Date.now();

      var touches = event.touches && event.touches.length ? event.touches : [event];
      var e = touches[0].originalEvent || touches[0];
      touchStartX = e.clientX;
      touchStartY = e.clientY;
    });

    element.on('touchmove', function(event) {
      resetState();
    });

    element.on('touchcancel', function(event) {
      resetState();
    });

    element.on('touchend', function(event) {
      var diff = Date.now() - startTime;

      var touches = (event.changedTouches && event.changedTouches.length) ? event.changedTouches :
          ((event.touches && event.touches.length) ? event.touches : [event]);
      var e = touches[0].originalEvent || touches[0];
      var x = e.clientX;
      var y = e.clientY;
      var dist = Math.sqrt( Math.pow(x - touchStartX, 2) + Math.pow(y - touchStartY, 2) );

      if (tapping && diff < TAP_DURATION && dist < MOVE_TOLERANCE) {
        // Call preventGhostClick so the clickbuster will catch the corresponding click.
        preventGhostClick(x, y);

        // Blur the focused element (the button, probably) before firing the callback.
        // This doesn't work perfectly on Android Chrome, but seems to work elsewhere.
        // I couldn't get anything to work reliably on Android Chrome.
        if (tapElement) {
          tapElement.blur();
        }

        if (!angular.isDefined(attr.disabled) || attr.disabled === false) {
          element.triggerHandler('click', [event]);
        }
      }

      resetState();
    });

    // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
    // something else nearby.
    element.onclick = function(event) { };

    // Actual click handler.
    // There are three different kinds of clicks, only two of which reach this point.
    // - On desktop browsers without touch events, their clicks will always come here.
    // - On mobile browsers, the simulated "fast" click will call this.
    // - But the browser's follow-up slow click will be "busted" before it reaches this handler.
    // Therefore it's safe to use this directive on both mobile and desktop.
    element.on('click', function(event, touchend) {
      scope.$apply(function() {
        clickHandler(scope, {$event: (touchend || event)});
      });
    });

    element.on('mousedown', function(event) {
      element.addClass(ACTIVE_CLASS_NAME);
    });

    element.on('mousemove mouseup', function(event) {
      element.removeClass(ACTIVE_CLASS_NAME);
    });

  };
}]);

/* global ngTouch: false */

/**
 * @ngdoc directive
 * @name ngSwipeLeft
 *
 * @description
 * Specify custom behavior when an element is swiped to the left on a touchscreen device.
 * A leftward swipe is a quick, right-to-left slide of the finger.
 * Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeLeft {@link guide/expression Expression} to evaluate
 * upon left swipe. (Event object is available as `$event`)
 *
 * @example
    <example module="ngSwipeLeftExample" deps="angular-touch.js">
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
      <file name="script.js">
        angular.module('ngSwipeLeftExample', ['ngTouch']);
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSwipeRight
 *
 * @description
 * Specify custom behavior when an element is swiped to the right on a touchscreen device.
 * A rightward swipe is a quick, left-to-right slide of the finger.
 * Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeRight {@link guide/expression Expression} to evaluate
 * upon right swipe. (Event object is available as `$event`)
 *
 * @example
    <example module="ngSwipeRightExample" deps="angular-touch.js">
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
      <file name="script.js">
        angular.module('ngSwipeRightExample', ['ngTouch']);
      </file>
    </example>
 */

function makeSwipeDirective(directiveName, direction, eventName) {
  ngTouch.directive(directiveName, ['$parse', '$swipe', function($parse, $swipe) {
    // The maximum vertical delta for a swipe should be less than 75px.
    var MAX_VERTICAL_DISTANCE = 75;
    // Vertical distance should not be more than a fraction of the horizontal distance.
    var MAX_VERTICAL_RATIO = 0.3;
    // At least a 30px lateral motion is necessary for a swipe.
    var MIN_HORIZONTAL_DISTANCE = 30;

    return function(scope, element, attr) {
      var swipeHandler = $parse(attr[directiveName]);

      var startCoords, valid;

      function validSwipe(coords) {
        // Check that it's within the coordinates.
        // Absolute vertical distance must be within tolerances.
        // Horizontal distance, we take the current X - the starting X.
        // This is negative for leftward swipes and positive for rightward swipes.
        // After multiplying by the direction (-1 for left, +1 for right), legal swipes
        // (ie. same direction as the directive wants) will have a positive delta and
        // illegal ones a negative delta.
        // Therefore this delta must be positive, and larger than the minimum.
        if (!startCoords) return false;
        var deltaY = Math.abs(coords.y - startCoords.y);
        var deltaX = (coords.x - startCoords.x) * direction;
        return valid && // Short circuit for already-invalidated swipes.
            deltaY < MAX_VERTICAL_DISTANCE &&
            deltaX > 0 &&
            deltaX > MIN_HORIZONTAL_DISTANCE &&
            deltaY / deltaX < MAX_VERTICAL_RATIO;
      }

      $swipe.bind(element, {
        'start': function(coords, event) {
          startCoords = coords;
          valid = true;
        },
        'cancel': function(event) {
          valid = false;
        },
        'end': function(coords, event) {
          if (validSwipe(coords)) {
            scope.$apply(function() {
              element.triggerHandler(eventName);
              swipeHandler(scope, {$event: event});
            });
          }
        }
      });
    };
  }]);
}

// Left is negative X-coordinate, right is positive.
makeSwipeDirective('ngSwipeLeft', -1, 'swipeleft');
makeSwipeDirective('ngSwipeRight', 1, 'swiperight');



})(window, window.angular);
$(document).on('click', '.customCheckBox', function(e) {
    if ($(this).is(':enabled'))
        $(this).parent().toggleClass("selected");
});

$(document).on('click', '.customRadioBox input', function(e) {
    var radioButton = $(this).parents('fieldset').find('input');
    if ($(this).is(':enabled')) {
        $(this).closest('label').addClass("selected");
    }

    $(radioButton).not(this).each(function() {
        if ($(this).is(':enabled')) {
            $(this).closest('label').removeClass("selected");
        }
    });


});


$('.vmfModalChange .modalLoad ').hide();
$(document).on('click', '.vmfModalChange', function(e) {
    var attr = $(this).attr('back');
    if (typeof attr === typeof undefined) {
        $(this).find('.vmf-back-btn').eq(0).hide();
    }
    var back_over = $(this).find('.modal-backdrop').eq(0).css('display');
    var modal_over = $('.modal.fade').css('display');
    if (modal_over === "block") {
        $(this).find('.modal-backdrop').eq(0).css('display', 'block');
    }
    if (modal_over === "none") {
        $(this).find('.modal-backdrop').eq(0).css('display', 'none');
    }


    $('.vmfModalChange .modalLoad ').hide();
    $(this).find('.modalLoad').show();

});

/*IE7 fix*/
$(document).on('click', '.vmfloginChangeModal,.vmfModal', function(e) {
    $('html').addClass('modal-open');
});
$(document).on('click', '[data-dismiss="modal"],.closeIcon,.modal-backdrop', function(e) {
    $('html').removeClass('modal-open');
});


var app = angular.module('vmfModule', ['ngSanitize', 'ui.bootstrap', 'ui.router', 'ui.bootstrap.modal', 'ngTouch']);
app.config(function($sceProvider, $stateProvider, $urlRouterProvider) {
    $sceProvider.enabled(false);

    $urlRouterProvider.otherwise("/Radio");


    $stateProvider
        .state('Checkbox', {
            url: "/Checkbox",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Checkbox';
                $scope.url = 'checkbox/index.html';
                $scope.ctrl = 'checkbox/checkboxController.js';
                $scope.direc = 'checkbox/checkboxDirectives.js';

                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/checkbox";
                $scope.api = 'checkbox/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        })
        .state('Radio', {
            url: "/Radio",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Radio Buttons';
                $scope.url = 'radioButtons/index.html';
                $scope.ctrl = 'radioButtons/radioController.js';
                $scope.direc = 'radioButtons/radioDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/radio-buttons";
                $scope.api = 'radioButtons/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('PasswordStrength', {
          url: "/PasswordStrength",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Password Strength';
            $scope.url = 'passwordStrength/index.html';
            $scope.ctrl = 'passwordStrength/pwdStrengthController.js';
            $scope.direc = 'passwordStrength/pwdStrengthDirectives.js';
              $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/password-strength"; 
           $scope.api = 'passwordStrength/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            
          }
        })  
        .state('socialMedia', {
            url: "/socialMedia",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                $rootScope.activelink = 'Social Media';
                $scope.url = 'socialMedia/index.html';
                $scope.ctrl = 'socialMedia/socialMediaController.js';
                $scope.direc = 'socialMedia/socialMediaDirective.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/social-media-module";
                $scope.api = 'socialMedia/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        })  
        
        
        .state('formRegistration', {
          url: "/formRegistration",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Form Registration';
            $scope.url = 'formRegistration/index.html';
            $scope.ctrl = 'formRegistration/formRegistrationController.js';
            $scope.direc = 'formRegistration/formRegistrationDirectives.js';
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/my-vmware-registration"; 
            $scope.api = 'formRegistration/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api); 
            
          }
        }) 
        .state('formElements', {
              url: "/FormElements",
              templateUrl:'../template.html',
              controller: function($scope,$stateParams,$http,$rootScope){
                //console.log($stateParams);
                $rootScope.activelink = 'Form Elements & Structure';
                $scope.url = 'FormElements/index.html';
                $scope.ctrl = 'FormElements/FormElementsController.js';
                $scope.direc = 'FormElements/FormElementsDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/form-elements-structure"; 
                $scope.api = 'FormElements/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

              }
            }) 
        .state('HomepageHeroCarousel', {
            url: "/HomepageHeroCarousel",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Homepage Hero Carousel';
                $scope.url = 'HomepageHeroCarousel/index.html';
                $scope.ctrl = 'HomepageHeroCarousel/homepageHeroCarouselController.js';
                $scope.direc = 'HomepageHeroCarousel/homepageHeroCarouselDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/homepage-hero-carousel";
                $scope.api = 'HomepageHeroCarousel/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('FileUpload', {
            url : "/FileUpload",
            templateUrl : '../template.html',
            controller : function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'File Upload';
                $scope.url = 'FileUpload/index.html';
                $scope.ctrl = 'FileUpload/fileUploaderController.js';
                $scope.direc = 'FileUpload/fileUploaderDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/file-upload";
                $scope.api = 'FileUpload/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('TableBasic', {
          url: "/TableBasic",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Table Basic';
            $scope.url = 'TableBasic/index.html';
            $scope.ctrl = 'TableBasic/tableBasicController.js';
            $scope.direc = 'TableBasic/tableBasicDirectives.js';
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/table-basic";
            $scope.api = 'TableBasic/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
             
          }
        })
        .state('TableBulkActions', {
          url: "/TableBulkActions",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Table Bulk Actions';
            $scope.url = 'TableBulkActions/index.html';
            $scope.ctrl = 'TableBulkActions/tableBulkActionsController.js';
            $scope.direc = 'TableBulkActions/tableBulkActionsDirectives.js';
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/table-bulk-actions";
            $scope.api = 'TableBulkActions/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
          }
        })
        .state('TableQuickView', {
          url: "/TableQuickView",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Table QuickView';
            $scope.url = 'TableQuickView/index.html';
            $scope.ctrl = 'TableQuickView/tableQuickViewController.js';
            $scope.direc = 'TableQuickView/tableQuickViewDirectives.js';
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/table-quickview";
            $scope.api = 'TableQuickView/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
              
          }
        })
        .state('TableDragDrop', {
          url: "/TableDragDrop",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Table Drag and Drop';
            $scope.url = 'TableDragDrop/index.html';
            $scope.ctrl = 'TableDragDrop/TableDragDropController.js';
            $scope.direc = 'TableDragDrop/TableDragDropDirectives.js';
             $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/table-drag-drop";
            $scope.api = 'TableDragDrop/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
             
          }
        })
        .state('TableFilter', {
          url: "/TableFilter",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Table Filter';
            $scope.url = 'TableFilter/index.html';
            $scope.ctrl = 'TableFilter/TableFilterController.js';
            $scope.direc = 'TableFilter/TableFilterDirectives.js';
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/table-filter";
            $scope.api = 'TableFilter/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
             
          }
        })    
        .state('TableInlineEdit', {
          url: "/TableInlineEdit",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Table Inline Edit';
            $scope.url = 'TableInlineEdit/index.html';
            $scope.ctrl = 'TableInlineEdit/tableInlineEditController.js';
            $scope.direc = 'TableInlineEdit/tableInlineEditDirectives.js';
             $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/table-inline-editing";
            $scope.api = 'TableInlineEdit/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
             
          }
        })
        .state('TableStatic', {
          url: "/TableStatic",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Table Static';
            $scope.url = 'TableStatic/index.html';
            $scope.ctrl = 'TableStatic/tableStaticController.js';
            $scope.direc = 'TableStatic/tableStaticDirectives.js';
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/table-static";
            $scope.api = 'TableStatic/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
              
          }
        })
        .state('CoachMarks', {
            url: "/CoachMarks",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                $rootScope.activelink = 'Coach Marks';
                $scope.url = 'CoachMarks/index.html';
                $scope.ctrl = 'CoachMarks/coachMarksController.js';
                $scope.direc = 'CoachMarks/coachMarksDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/coach-marks";
                $scope.api = 'CoachMarks/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        })
        .state('TableComparison', {
          url: "/TableComparison",
          templateUrl:'../template.html',
          controller: function($scope,$stateParams,$http,$rootScope){
            //console.log($stateParams);
            $rootScope.activelink = 'Table Comparison';
            $scope.url = 'TableComparison/index.html';
            $scope.ctrl = 'TableComparison/tableComparisonController.js';
           $scope.direc = 'TableComparison/tableComparisonDirectives.js';
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/table-comparison";
            $scope.api = 'TableComparison/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
              
          }
        })
        
            .state('AdUnits', {
        url: "/AdUnits",
        templateUrl: '../template.html',
        controller: function($scope, $stateParams, $http, $rootScope) {
            //console.log($stateParams);
            $rootScope.activelink = 'Ad Units';
            $scope.url = 'AdUnits/index.html';
            $scope.ctrl = 'AdUnits/adUnitsController.js';
            $scope.direc = 'AdUnits/adUnitsDirectives.js';
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/ad-units";
           $scope.api = 'AdUnits/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
        }
    })
    .state('utility', {
        url: "/utility",
        templateUrl: '../template.html',
        controller: function($scope, $stateParams, $http, $rootScope) {
            $rootScope.activelink = 'Utility Navigation';
            $scope.url = 'utility/index.html';
            $scope.ctrl = 'utility/utilityController.js';
            $scope.direc = 'utility/utilityDirectives.js';
            //$scope.plink = "http://ui-patterns.vmware.com/2014/web-app/utility-navigation";            
            //dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http);
            $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/utility-navigation";
            $scope.api = 'utility/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
 
        }
    })
        .state('wizard', {
            url: "/wizard",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Wizard Progress Bar';
                $scope.url = 'WizardProgressBar/index.html';
                $scope.ctrl = 'WizardProgressBar/wizardProgressBarController.js';
                $scope.direc = 'WizardProgressBar/wizardProgressBarDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/wizard-progress-bar";
                $scope.api = 'WizardProgressBar/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('productCarousels', {
                url: "/productCarousels",
                templateUrl: '../template.html',
                controller: function($scope, $stateParams, $http, $rootScope) {
                    //console.log($stateParams);
                    $rootScope.activelink = 'Product Carousels';
                    $scope.url = 'productCarousel/index.html';
                    $scope.ctrl = 'productCarousel/productCarouselController.js';
                    $scope.direc = 'productCarousel/productCarouselDirectives.js';
                    $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/product-carousel";
                    $scope.api = 'productCarousel/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
         
             }
        })
        .state('Calendar', {
            url: "/Calendar",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Calendar Date Picker';
                $scope.url = 'Calendar/index.html';
                $scope.ctrl = 'Calendar/calendarController.js';
                $scope.direc = 'Calendar/calendarDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/calendar-date-picker";
                $scope.api = 'Calendar/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('FormValidations', {
            url: "/FormValidations",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Form Validations';
                $scope.url = 'FormValidations/index.html';
                $scope.ctrl = 'FormValidations/formValidationsController.js';
                $scope.direc = 'FormValidations/formValidationsDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/form-validation";
                $scope.api = 'FormValidations/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        })
        .state("Backlink", {
            url: "/Backlink",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Backlink';
                $scope.url = 'backlinks/index.html';
                $scope.ctrl = 'backlinks/backlinkController.js';
                $scope.direc = 'backlinks/backlinkDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/backlink-pattern";
                $scope.api = 'backlinks/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        })
        .state('Bigfooter', {
            url: "/Bigfooter",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Bigfooter';
                $scope.url = 'bigfooter/index.html';
                $scope.ctrl = 'bigfooter/bigfooterController.js';
                $scope.direc = 'bigfooter/bigfooterDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/big-footer";
               $scope.api = 'bigfooter/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        })
        .state('SliderControl', {
            url: "/SliderControl",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Slider Control';
                $scope.url = 'SliderControl/index.html';
                $scope.ctrl = 'SliderControl/SliderControlController.js';
                $scope.direc = 'SliderControl/SliderControlDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/slider-control";
                $scope.api = 'SliderControl/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        })
        .state('ProductAlerts', {
            url: "/ProductAlerts",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Product Alerts';
                $scope.url = 'productAlerts/index.html';
                $scope.ctrl = 'productAlerts/productAlertsController.js';
                $scope.direc = 'productAlerts/productAlertsDirectives.js';
                $scope.plink = " http://ui-patterns.vmware.com/2014/web-app/product-alerts";
               $scope.api = 'productAlerts/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                

            }
        })
        .state('Pagination', {
            url: "/Pagination",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Pagination';
                $scope.url = 'pagination/index.html';
                $scope.ctrl = 'pagination/paginationController.js';
                $scope.direc = 'pagination/paginationDirectives.js';
               $scope.api = 'pagination/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('Pagination2', {
            url: "/Pagination2",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Pagination2';
                $scope.url = 'pagination2/index.html';
                $scope.ctrl = 'pagination2/paginationController.js';
                $scope.direc = 'pagination2/paginationDirectives.js';
                 $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/pagination-0';
                $scope.api = 'pagination2/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('Search', {
            url: "/Search",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Search';
                $scope.url = 'Search/index.html';
                $scope.ctrl = 'Search/searchController.js';
                $scope.direc = 'Search/searchDirectives.js';
                 $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/search';
                $scope.api = 'Search/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
               

            }
        })
        .state('Carousels', {
            url: "/Carousels",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Carousels';
                $scope.url = 'carousels/index.html';
                $scope.ctrl = 'carousels/carouselsController.js';
                $scope.direc = 'carousels/carouselsDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/carousels";
                $scope.api = 'carousels/api.txt';
               dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })

        
        .state('TextInputBox', {
            url: "/TextInputBox",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Text Input Box';
                $scope.url = 'textinputbox/index.html';
                $scope.ctrl = 'textinputbox/textInputController.js';
                $scope.direc = 'textinputbox/textInputDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/text-input-box";
                $scope.api = 'textinputbox/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('Dropdown', {
            url: "/Dropdown",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Drop Down List';
                $scope.url = 'dropdown/index.html';
                $scope.ctrl = 'dropdown/dropdownController.js';
                $scope.direc = 'dropdown/dropdownDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/drop-down-list";
                $scope.api = 'dropdown/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('ActionButton', {
            url: "/ActionButton",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Action/Command Button';
                $scope.url = 'ActionButton/index.html';
                $scope.ctrl = 'ActionButton/actionButtonController.js';
                $scope.direc = 'ActionButton/actionButtonDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/actioncommand-buttons";
                $scope.api = 'ActionButton/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('ContentRating', {
            url: "/ContentRating",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Content Rating';
                $scope.url = 'contentRatingWidget/index.html';
                $scope.ctrl = 'contentRatingWidget/contentRatingWidgetController.js';
                $scope.direc = 'contentRatingWidget/contentRatingWidgetDirectives.js';
                $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/content-rating-widget';
                $scope.api = 'contentRatingWidget/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        })
        .state('TabNavigation', {
            url: "/TabNavigation",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Tab Navigation';
                $scope.url = 'tabNavigation/index.html';
                $scope.ctrl = 'tabNavigation/tabNavigationController.js';
                $scope.direc = 'tabNavigation/tabNavigationDirectives.js';
                $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/tab-navigation';
                $scope.api = 'tabNavigation/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        })

    .state('GlobalNavigation', {
        url: "/GlobalNavigation",
        templateUrl: '../template.html',
        controller: function($scope, $stateParams, $http, $rootScope) {
            $rootScope.activelink = 'Global Navigation';
            $scope.url = 'globalNavigation/index.html';
            $scope.ctrl = 'globalNavigation/globalNavigationController.js';
            $scope.direc = 'globalNavigation/globalNavigationDirectives.js';
             $scope.plink= 'http://ui-patterns.vmware.com/2014/web-app/global-navigation';
            $scope.api = 'globalNavigation/api.txt';
            dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
           
        }
    })

    .state('ToolTip', {
            url: "/ToolTip",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Tool Tip';
                $scope.url = 'Tooltip/index.html';
                $scope.ctrl = 'Tooltip/tooltipController.js';
                $scope.direc = 'Tooltip/tooltipDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/global-navigation";
                $scope.api = 'Tooltip/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('EmptyState', {
            url: "/EmptyState",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Empty State';
                $scope.url = 'emptyState/index.html';
                $scope.ctrl = 'emptyState/emptystateController.js';
                $scope.direc = 'emptyState/emptystateDirectives.js';
                $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/empty-state';
                $scope.api = 'emptyState/api.txt';
               dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        })
        .state('SystemAlerts', {
            url: "/SystemAlerts",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'System Alerts';
                $scope.url = 'systemAlerts/index.html';
                $scope.ctrl = 'systemAlerts/systemController.js';
                $scope.direc = 'systemAlerts/systemDirectives.js';
                 $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/system-alerts';
                $scope.api = 'systemAlerts/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
               

            }
        })
        .state('ModalOverlay', {
            url: "/ModalOverlay",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Modal Overlay';
                $scope.url = 'modal/index.html';
                $scope.ctrl = 'modal/modalController.js';
                $scope.direc = 'modal/modalDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/modaless-overlay";
                $scope.api = 'modal/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                

            }
        }).state('AutoComplete', {
            url: "/AutoComplete",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Auto Complete';
                $scope.url = 'autocomplete/index.html';
                $scope.ctrl = 'autocomplete/autocompleteController.js';
                $scope.direc = 'autocomplete/autocompleteDirectives.js';
                $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/auto-complete';
                $scope.api = 'autocomplete/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        })

    .state('UiShell', {
            url: "/UiShell",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'UiShell';
                $scope.url = 'UiShell/index.html';
                $scope.ctrl = 'UiShell/UiShellController.js';
                $scope.direc = 'UiShell/UiShellDirective.js';
                $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/ui-shell';
                $scope.api = 'UiShell/api.txt';
               dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('Breadcrumbs', {
            url: "/Breadcrumbs",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Breadcrumbs';
                $scope.url = 'Breadcrumbs/index.html';
                $scope.ctrl = 'Breadcrumbs/breadcrumbController.js';
                $scope.direc = 'Breadcrumbs/breadcrumbDirectives.js';
                $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/breadcrumb';
                $scope.api = 'Breadcrumbs/api.txt';
               dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        }).state('ActionBar', {
            url: "/ActionBar",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                $rootScope.activelink = 'Action Bar';
                $scope.url = 'ActionBar/index.html';
                $scope.ctrl = 'ActionBar/actionbarController.js';
                $scope.direc = 'ActionBar/actionbarDirectives.js';
                $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/action-bar';
                $scope.api = 'ActionBar/api.txt';
               dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                

            }
        }).state("Accordion", {
            url: "/Accordion",
            templateUrl: "../template.html",
            controller: function($scope, $stateParams, $http, $rootScope) {
                console.log($stateParams), $rootScope.activelink = "Accordion Containers", $scope.url = "Accordion/index.html",
                    $scope.ctrl = "Accordion/accordionController.js", $scope.direc = "Accordion/accordionDirectives.js",
                    //dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http);
                    $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/accordion-containers-0';
                    $scope.api = 'Accordion/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        }).state("HeaderInlineEditing", {
            url: "/HeaderInlineEditing",
            templateUrl: "template.html",
            controller: function($scope, $stateParams, $http, $rootScope) {
                console.log($stateParams), $rootScope.activelink = "Header Inline Editing", $scope.url = "HeaderInlineEditing/index.html",
                    $scope.ctrl = "HeaderInlineEditing/headerInlineEditingController.js", $scope.direc = "HeaderInlineEditing/headerInlineEditingDirectives.js",
                    //dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http);
                    $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/header-inline-editing';
                    $scope.api = 'HeaderInlineEditing/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        }).state("FormTemplates", {
            url: "/FormTemplates",
            templateUrl: "template.html",
            controller: function($scope, $stateParams, $http, $rootScope) {
                console.log($stateParams), $rootScope.activelink = "Form Templates", $scope.url = "FormTemplates/index.html",
                    $scope.ctrl = "FormTemplates/formTemplatesController.js", $scope.direc = "FormTemplates/formTemplatesDirectives.js",
                    //dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http);
                    $scope.plink = 'http://ui-patterns.vmware.com/2014/web-app/form-templates';
                    $scope.api = 'FormTemplates/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        }).state("ModalessOverlay", {
            url: "/ModalessOverlay",
            templateUrl: "template.html",
            controller: function($scope, $stateParams, $http, $rootScope) {
                console.log($stateParams), $rootScope.activelink = "Modaless Overlay", $scope.url = "Modaless/index.html",
                    $scope.ctrl = "Modaless/modalessController.js",
                    $scope.direc = "Modaless/modalessDirectives.js",
                    //dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http);
                    $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/modaless-overlay";
                    $scope.api = 'Modaless/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        })
        .state('customComponents', {
            url: "/customComponents",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'customComponents';
                $scope.url = 'customComponents/index.html';
                $scope.ctrl = 'customComponents/customComponentsController.js';
                $scope.direc = 'customComponents/customComponentsDirectives.js';
                
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/big-footer";
                $scope.api = 'customComponents/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }

        })
        .state('ComboBox', {
            url: "/ComboBox",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Combo Box';
                $scope.url = 'ComboBox/index.html';
                $scope.ctrl = 'ComboBox/comboboxController.js';
                $scope.direc = 'ComboBox/comboboxDirectives.js';
                
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/combo-box";
                $scope.api = 'ComboBox/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }

        })
        .state("SplitContainer", {
            url: "/SplitContainer",
            templateUrl: "template.html",
            controller: function($scope, $stateParams, $http, $rootScope) {
                $rootScope.activelink = "Split Container"; 
                $scope.url = "SplitContainer/index.html";
                $scope.ctrl = "SplitContainer/splitpaneController.js";
                $scope.direc = "SplitContainer/splitpaneDirectives.js";
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/split-container";
                $scope.api = 'SplitContainer/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        })
        .state('FirstRunExperience', {
            url : "/FirstRunExperience",
            templateUrl : '../template.html',
            controller : function($scope, $stateParams, $http, $rootScope) {
                $rootScope.activelink = 'First Run Experience';
                $scope.url = 'FirstRunExperience/index.html';
                $scope.ctrl = 'FirstRunExperience/firstrunexperienceController.js';
                $scope.direc = 'FirstRunExperience/firstrunexperienceDirectives.js';
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/first-run-experience";
                $scope.api = 'FirstRunExperience/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);

            }
        })
        .state('login', {
            url: "/login",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'login';
                $scope.url = 'login/index.html';
                $scope.ctrl = 'login/loginController.js';
                $scope.direc = 'login/loginDirectives.js';
                
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/login";
                $scope.api = 'login/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
            }
        })
        .state('FolderTree', {
            url: "/FolderTree",
            templateUrl: '../template.html',
            controller: function($scope, $stateParams, $http, $rootScope) {
                //console.log($stateParams);
                $rootScope.activelink = 'Folder Tree';
                $scope.url = 'FolderTree/index.html';
                $scope.ctrl = 'FolderTree/folderTreeController.js';
                $scope.direc = 'FolderTree/folderTreeDirectives.js';
               
                $scope.plink = "http://ui-patterns.vmware.com/2014/web-app/folder-tree";
                $scope.api = 'FolderTree/api.txt';
                dumphtml($scope.url, $scope.direc, $scope.ctrl, $scope, $http,$scope.plink,$scope.api);
                
            }
        });

});

function dumphtml(url, dirc, ctrl, $scope, $http, plink,api) {

    url = "modules/" + $scope.url;
    direc = "modules/" + $scope.direc;
    ctrl = "modules/" + $scope.ctrl;
    api = "modules/" + $scope.api;
    $scope.plink = plink;

    //console.log(url);
    //console.log(direc);
    //console.log(ctrl);
    $scope.component = "Select Component";

    $http.get('/api/filecontent/' + '?url=' + url)
        .success(function(data) {
            $scope.html = data.trim();
            //console.log($scope.html);

            // //console.log(data);

        })
        .error(function(data) {
            //console.log('Error: ' + data);
        });
    $http.get('/api/filecontent/' + '?url=' + direc)
        .success(function(data) {
            $scope.direc = data;
            // //console.log(data);

        })
        .error(function(data) {
            //console.log('Error: ' + data);
        });
    $http.get('/api/filecontent/' + '?url=' + ctrl)
        .success(function(data) {
            $scope.ctrl = data.trim();

            // //console.log(data);

        })
        .error(function(data) {
            //console.log('Error: ' + data);
        });
    $http.get('/api/filecontent/' + '?url=' + api)
        .success(function(data) {
            $scope.api = data.trim();

            // //console.log(data);

        })
        .error(function(data) {
            //console.log('Error: ' + data);
        });
    $http.get('/api/filecontent/' + '?url=' + 'header.html')
        .success(function(data) {
            $scope.header = data;
            // //console.log(data);

        })
        .error(function(data) {
            //console.log('Error: ' + data);
        });
    $http.get('/api/filecontent/' + '?url=' + 'footer.html')
        .success(function(data) {
            $scope.footer = data;
            // //console.log(data);

        })
        .error(function(data) {
            //console.log('Error: ' + data);
        });



}

/*In app.js please include end of the script*/
(function(window, angular, undefined) {
    'use strict';
    var agl = angular || {};
    var ua = navigator.userAgent;

    agl.ISFF = ua.indexOf('Firefox') !== -1;
    agl.ISOPERA = ua.indexOf('Opera') !== -1;
    agl.ISCHROME = ua.indexOf('Chrome') !== -1;
    agl.ISSAFARI = ua.indexOf('Safari') !== -1 && !agl.ISCHROME;
    agl.ISWEBKIT = ua.indexOf('WebKit') !== -1;

    agl.ISIE = ua.indexOf('Trident') > 0 || navigator.userAgent.indexOf('MSIE') > 0;
    agl.ISIE6 = ua.indexOf('MSIE 6') > 0;
    agl.ISIE7 = ua.indexOf('MSIE 7') > 0;
    agl.ISIE8 = ua.indexOf('MSIE 8') > 0;
    agl.ISIE9 = ua.indexOf('MSIE 9') > 0;
    agl.ISIE10 = ua.indexOf('MSIE 10') > 0;
    agl.ISOLD = agl.ISIE6 || agl.ISIE7 || agl.ISIE8; // MUST be here

    agl.ISIE11UP = ua.indexOf('MSIE') === -1 && ua.indexOf('Trident') > 0;
    agl.ISIE10UP = agl.ISIE10 || agl.ISIE11UP;
    agl.ISIE9UP = agl.ISIE9 || agl.ISIE10UP;

})(window, window.angular);
(function() {

  'use strict';



  app.factory('ModalService', ['$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$timeout', '$templateCache',
    function($document, $compile, $controller, $http, $rootScope, $q, $timeout, $templateCache) {

    //  Get the body of the document, we'll add the modal to this.
    var body = $document.find('body');

    function ModalService() {

      var self = this;

      //  Returns a promise which gets the template, either
      //  from the template parameter or via a request to the
      //  template url parameter.
      var getTemplate = function(template, templateUrl) {
        var deferred = $q.defer();
        if(template) {
          deferred.resolve(template);
        } else if(templateUrl) {
          // check to see if the template has already been loaded
          var cachedTemplate = $templateCache.get(templateUrl);
          if(cachedTemplate !== undefined) {
            deferred.resolve(cachedTemplate);
          }
          // if not, let's grab the template for the first time
          else {
            $http({method: 'GET', url: templateUrl, cache: true})
              .then(function(result) {
                // save template into the cache and return the template
                $templateCache.put(templateUrl, result.data);
                deferred.resolve(result.data); 
              });/*
              .catch(function(error) {
                deferred.reject(error);
              });*/
          }
        } else {
          deferred.reject("No template or templateUrl has been specified.");
        }
        return deferred.promise;
      };

      self.showModal = function(options) {

        //  Create a deferred we'll resolve when the modal is ready.
        var deferred = $q.defer();

        //  Validate the input parameters.
        var controllerName = options.controller;
        if(!controllerName) {
          deferred.reject("No controller has been specified.");
          return deferred.promise;
        }

        //  If a 'controllerAs' option has been provided, we change the controller
        //  name to use 'as' syntax. $controller will automatically handle this.
        if(options.controllerAs) {
          controllerName = controllerName + " as " + options.controllerAs;
        }

        //  Get the actual html of the template.
        getTemplate(options.template, options.templateUrl)
          .then(function(template) {

            //  Create a new scope for the modal.
            var modalScope = $rootScope.$new();

            //  Create the inputs object to the controller - this will include
            //  the scope, as well as all inputs provided.
            //  We will also create a deferred that is resolved with a provided
            //  close function. The controller can then call 'close(result)'.
            //  The controller can also provide a delay for closing - this is
            //  helpful if there are closing animations which must finish first.
            var closeDeferred = $q.defer();
            var inputs = {
              $scope: modalScope,
              close: function(result, delay) {
                if(delay === undefined || delay === null) delay = 0;
                $timeout(function () {
                  closeDeferred.resolve(result);
                }, delay);
              }
            };

            //  If we have provided any inputs, pass them to the controller.
            if(options.inputs) {
              for(var inputName in options.inputs) {
                inputs[inputName] = options.inputs[inputName];
              }
            }

            //  Parse the modal HTML into a DOM element (in template form).
            var modalElementTemplate = angular.element(template);

            //  Compile then link the template element, building the actual element.
            //  Set the $element on the inputs so that it can be injected if required.
            var linkFn = $compile(modalElementTemplate);
            var modalElement = linkFn(modalScope);
            inputs.$element = modalElement;

            //  Create the controller, explicitly specifying the scope to use.
            var modalController = $controller(controllerName, inputs);


            //  Finally, append the modal to the dom.
            if (options.appendElement) {
              // append to custom append element
              options.appendElement.append(modalElement);
            } else {
              // append to body when no custom append element is specified
              body.append(modalElement);
            }

            //  We now have a modal object.
            var modal = {
              controller: modalController,
              scope: modalScope,
              element: modalElement,
              close: closeDeferred.promise
            };

            //  When close is resolved, we'll clean up the scope and element.
            modal.close.then(function(result) {
              //  Clean up the scope
              modalScope.$destroy();
              //  Remove the element from the dom.
              modalElement.remove();
            });

            deferred.resolve(modal);

          });

        return deferred.promise;
      };

      self.createModal = function(required,allfolders){

      };

    }

    return new ModalService();
  }]);

}());

app.directive('vmfActionBar', ['$compile', function($compile){
return{
	restrict: 'EA',
    scope: {
        title: '@',
        name:'@',
        options:'='
    },

    link: function(scope, element, attrs ) {
         var temp ;
         temp = '<div class="vmf-action"> <ul>';
        var len = scope.options.length;
        var notifications;
        angular.forEach(scope.options,function(option,index){ 
            if(option.notification > 0) {
                notifications='<span class="vmf-notification"><span class="totalAlerts">'+option.notification+'</span></span>';
            }
            temp += '<li><a href="javascript: void(0)"><span class="bordRt">'+notifications+'<img src="/dev/assets/img/'+ option.icon +'" /><span class="labelText">' + option.name + '</span></span></a></li>'; 
            notifications="";
        });
        temp += '</ul></div>';
        
        element.append(temp);
        $compile(element.contents())(scope);

        /*scope.clickme = function(){
            console.log('i am being clicked');
        };*/

    }
    
};
}]);

/* AdUnits Directive */
app.factory("promotionData",function(){
			return {
				promotionName: "2014OSBETA",
				appliedSuccessfully: "has been applied",
				startUsing: "Start using today",
				expiryDate: "Expires on 2014-10-23"
			};
});

app.directive("vmfAdUnit", ["promotionData",function(promotionData){

	var directive = {
		restrict: "AEC",
		replace: true,
		scope: {
			datasource: "=",
			cancel: "&"
		}
	};

	directive.link = function(scope, attrs, element){
		scope.sidPromotionApplied = {
			costOff: "800 Off",
			productName: "for Object Storage",
			expiryDate: "Expires on 2014-10-23",
			btnApply: "Apply"
		};
	};

	directive.controller = function($scope, $attrs, $window){
		$scope.sidPromotionShow = true;

		$scope.getPromotionApplied = function(){
				$scope.sidPromotionShow = false;
				$scope.datasource1 = promotionData;
		};

		var windowObject 	= angular.element($window);
		$scope.resizeModal = function() {
	        var docWidth 	= angular.element(document).width();
	        var winHeight 	= angular.element(window).height();
	        var modalWidth 	= angular.element(".adunit_modalWindow").width();
	        var modalHeight = angular.element(".adunit_modalWindow").height();

	        angular.element(".adunit_modalWindow").css({
	            "left": (docWidth / 2) - (modalWidth / 2)//,
	            // //"top": ((winHeight/2) - (modalHeight/2))
	        });
    	};

	    windowObject.bind('resize', function() {
	         $scope.resizeModal();
	    });

		$scope.$watch('datasource', function(newVal, oldVal){
			$scope.datasource = newVal;
			if($scope.datasource.dispModal){
				 $scope.resizeModal();
			}
		}, true);	    

	};

	directive.template = function($tElement, $tAttrs){

		var templ = '<div class="adunit_wrapper adunit_addUnit_Container">'+
						'<div class="adunit_addUnit adunit_add_promo">'+
							'<div class="adunit_heading_promo"> {{datasource.company}}</div>'+
							'<div class="adunit_title_promo">'+
								'<div class="adunit_add_title"> {{datasource.productName}} </div>'+
								'<div class="adunit_add_subtitle"> {{datasource.productSplName}} </div>'+
							'</div>'+
							'<div class="adunit_num">{{datasource.versionNumber}}</div>'+
							'</br>'+
							'<div class="adunit_subtitle_promo">'+
								'<div class="adunit_promotion">'+
									'<span class="adunit_cost_promo">{{datasource.cost}}</span> </br>'+
									'<span class="adunit_buy_promo">{{datasource.labelBuy}}</span>'+
								'</div>'+
								'<span class="adunit_message_promo">'+
								'<span>{{datasource.buyThisInfo}}</span></br>'+
								'<span>{{datasource.upgradeInfo}}</span>'+
								'</span>'+
							'</div>'+
						'</div>'+
					'</div>';
		/* set primary as default */
		if($tAttrs.adtype){
			$tAttrs.adtype = $tAttrs.adtype.toLowerCase();
			if($tAttrs.adtype === "primary"){
			/* do Nothing, Primary template already set */
                templ = templ;
			}
            else if($tAttrs.adtype === "expiry"){
				templ = '<div class="adunit_wrapper adunit_addUnit_6">'+
							'<div class="adunit_promo_content_6"> '+
								'<div class="adunit_promo_heading_6">'+
									'<div class="adunit_promo_subheading_1">{{datasource.offAmount}}</div>'+
									'<div class="adunit_promo_subheading_2">{{datasource.offLabel}}</div>'+
								'</div>'+
								'<div class="adunit_promo_message_6">{{datasource.productName}}</div> '+
								'<div>'+
									'<a href="javascript: void(0);" class="vmf-btn vmf-primary adunit_btn_promo_6" vmf-button="" btn-text="{{datasource.btnApply}}" btn-type="vmf-secondary"></a>'+
									// '<button  class="adunit_btn_promo_6"> {{datasource.btnApply}} </button>'+
								'</div>'+
								'<div class="adunit_promo_expiry_6">{{datasource.applyByDate}}</div>'+
							'</div>'+
						'</div>';
			}else if($tAttrs.adtype === "secondary"){				
				templ = '<div class="adunit_wrapper adunit_addUnit_Container_1">'+
							'<div class="adunit_addUnit_2" ng-repeat="list in datasource">'+
								'<div class="adunit_heading_1"> {{list.heading}} </div>'+
								'<div class="adunit_subHeading_1"> {{list.subHeading}} </div>'+
								'<div class="adunit_subHeading_1 adunit_list" ng-repeat="bullet in list.bulletList">'+
								'	<span class="adunit_content adunit_bullet_{{bullet.type}}"> {{bullet.info}} </span>'+
								'</div>'+
							'</div>'+
						'</div>';
			}else if($tAttrs.adtype === "tertiary"){			
				templ = '<div class="adunit_wrapper adunit_addUnit_Container_3">'+
							'<div class="adunit_addUnit_5">'+
								'<div class="adunit_heading_2">{{datasource.heading}}</div>'+
								'<div class="adunit_content_1" ng-repeat="item in datasource.listItems"> '+
									'<div ng-switch on="item.type">'+
									'<span ng-switch-when="text"> {{item.info}} </span> '+
									'<a href="{{item.url}}" ng-switch-when="link"> {{item.info}} </a> '+
									'</div>'+
								'</div>'+
								'<div class="adunit_btn_wrapper">'+
								'<a href="javascript: void(0);" class="vmf-btn vmf-primary adunit_promo_btn_view" vmf-button="" btn-text="{{datasource.btnViewAll}}" btn-type="vmf-secondary"></a>'+
									// '<button class="adunit_promo_btn_view">{{datasource.btnViewAll}}</button>'+
								'</div>'+
							'</div>'+
						'</div>';
			}else if($tAttrs.adtype === "buyupgrade"){		
				templ = '<div class="adunit_wrapper adunit_addUnit_Container">'+
							'<div class="adunit_addUnit_1 adunit_add_promo">'+
								'<div class="adunit_heading_promo_1">{{datasource.company}}</div>'+
								'<div class="adunit_title_1">'+
									'<div class="adunit_add_title_1"> {{datasource.productName}} </div>'+
								'</div>'+
								'<div class="adunit_num_1">{{datasource.versionNumber}}</div>'+
								'<div class="adunit_subtitle_promo_1">'+
									'<div >'+
										'<span > {{datasource.buyThisInfo}} </span></br>'+
										'<span class="adunit_getWorkstation" ng-bind-html="datasource.upgradeInfo"></span>'+
									'</div>'+
								'</div>'+
								'<div>'+
									'<a href="javascript: void(0);" class="vmf-btn vmf-secondary adunit_btn_addUnit_buy adunit_btn_addUnit" vmf-button="" btn-text="{{datasource.btnBuy}}" btn-type="vmf-secondary"></a>'+
									'<a href="javascript: void(0);" class="vmf-btn vmf-secondary adunit_btn_addUnit_upgrade adunit_btn_addUnit" vmf-button="" btn-text="{{datasource.btnUpgrade}}" btn-type="vmf-secondary"></a>'+
									// '<button class="adunit_btn_addUnit adunit_btn_addUnit_buy adunit_button_rightmargin"> {{datasource.btnBuy}} </button> '+
									// '<button class="adunit_btn_addUnit adunit_btn_addUnit_upgrade"> {{datasource.btnUpgrade}}</button> '+
								'</div>'+
							'</div>'+
						'</div>';
			}else if($tAttrs.adtype === "sidpromotion"){				
				templ = '<div><div class="adunit_wrapper adunit_addUnit_3" ng-if="sidPromotionShow">'+
							'<div class="adunit_promo_content">'+
								'<div class="adunit_promo_heading_1">{{datasource.costOff}}</div>'+
								'<div class="adunit_promo_message_1">{{datasource.productName}}</div>'+
								'<div class="adunit_promo_expiry">{{datasource.expiryDate}}</div>'+
								'<div>'+
									'<a ng-click="getPromotionApplied()" href="javascript: void(0);" class="vmf-btn vmf-primary adunit_btn_promo" >{{datasource.btnApply}}</a>'+
									// '<button ng-click="getPromotionApplied()"  class="adunit_btn_promo">{{datasource.btnApply}} </button> '+
								'</div>'+
							'</div>'+
						'</div>';
				templ += '<div class="adunit_wrapper adunit_addUnit_3" ng-if="!sidPromotionShow">'+
							'<div class="adunit_promo_content adUnitBlue adunitBgchange">'+
								'<div class="adunit_promo_heading">{{datasource1.promotionName}}</div>'+
								'<div class="adunit_promo_subheading"><span class="adunit_content_promo adunit_promoApplied">{{datasource1.appliedSuccessfully}}</span></div>'+
								'<div class="adunit_promo_message">{{datasource1.startUsing}}</div>'+
								'<div class="adunit_promo_expiry">{{datasource1.expiryDate}}</div>'+
							'</div>'+
						'</div></div>';						
			}else if($tAttrs.adtype === "sidpromotionapplied"){				
				templ = '<div class="adunit_wrapper adunit_addUnit_3">'+
							'<div class="adunit_promo_content adUnitBlue">'+
								'<div class="adunit_promo_heading">{{datasource.promotionName}}</div>'+
								'<div class="adunit_promo_subheading"><span class="adunit_content_promo adunit_promoApplied">{{datasource.appliedSuccessfully}}</span></div>'+
								'<div class="adunit_promo_message">{{datasource.startUsing}}</div>'+
								'<div class="adunit_promo_expiry">{{datasource.expiryDate}}</div>'+
							'</div>'+
						'</div>';
			}else if($tAttrs.adtype === "modal"){ 
				templ = '<div>'+
							'<div ng-style="adUnitModalOverlayStyle" class="adunit_modalOverlay"></div> '+
							'<div class="adunit_wrapper adunit_modalWindow">'+
								'<div class="adunit_promo_title">'+
									'<div class="adunit_promotionCaption_1">{{datasource.modalTitle}}</div>'+
									'<div class="adunit_promo_close">'+
										'<a href="javascript:void(0)" ng-click="cancel()" class="adunit_modalCloseIcon"></a>'+
									'</div>'+
								'</div>'+

								'<div class="adunit_promo_container_1 adunit_row">'+
									'<vmf-ad-unit adtype="sidPromotion" datasource="sidPromotionApplied"> </vmf-ad-unit>'+
									'<vmf-ad-unit adtype="sidPromotion" datasource="sidPromotionApplied"> </vmf-ad-unit>'+
								'</div>'+

								'<div class="adunit_row">'+
									'<a href="#" class="adunit_promo_page">{{datasource.viewPromotionPage}}</a>'+
									'<div>'+
										'<a ng-click="cancel()" href="javascript: void(0);" class="vmf-btn vmf-secondary adunit_btn_close" btn-type="vmf-secondary">{{datasource.btnClose}}</a>'+
										// '<button ng-click="cancel()" class="adunit_btn_close"> {{datasource.btnClose}} </button>'+
									'</div>'+
								'</div>'+
							'</div>'+
						'</div>';
			}
		}
		return templ;
	};

	return directive;
}]);

/*app.directive("vmfBacklink",function(){
   return{
       restrict:"EA",
       template:"Back to home"
   };
});*/
app.directive('vmfBreadCrumb', ['$compile', function($compile){
return{
    restrict: 'E',
    transclude: true,
    scope: {
        title: '@',
        name:'@',
        options:'='
    },

    link: function(scope, element, attrs ) {
   
        var temp ;
         

        temp = '<div class="vmf-breadcrumb"> <ul>';
        angular.forEach(scope.options,function(option){
           option.text = option.text.charAt(0).toUpperCase() + option.text.slice(1);
            if(option.url === undefined){
                console.log('url is empty!!!!'+option.url);
                temp += '<li><a href="1">' + option.text + '</a>/</li>';
            }else{
                console.log('url is not empty!!!!'+option.url);
                temp += '<li><a href="1">' + option.text + '</a>/</li>';

            
        }
        });
        temp += '</ul></div>';
        
        element.append(temp);
        $compile(element.contents())(scope);

        /*scope.clickme = function(){
            console.log('i am being clicked');
        };*/

    }
    
};
}]);


app.directive('vmfButton', ['$compile', '$document', function($compile, $document) {
  return {
      restrict: 'EA',
      scope: {
          btnText: '@',
          btnSize: '@',
          /* normal OR large !!Default Normal*/
          btnContext: '@',
          /*action OR DropDown OR SplitDropDown  !!DEFAULT Action*/
          btnType: '@',
          /* Primary OR Secondary  !!Default primary*/
          btnDisabled: '=',
          icon: '@', /*Disabled true/false*/
          clickCallback: '&'
      },
      replace: true,
      transclude: true,
      template: function($tElem, $tAttrs) {
              if ($tAttrs.btnSize) //setting button size as a class name
                  $tAttrs.btnSize = 'vmf-btn-large';


              if ($tAttrs.btnText) { /*Setting the length of button text to max-47*/
                  if ($tAttrs.btnText.length >= 44) {
                      $tAttrs.btnText = $tAttrs.btnText.substring(0, 44) + '...';
                  }
                  console.log($tAttrs.btnText + ' ' + $tAttrs.btnText.length);
              }


              var templ = '<button ng-click="btnClicked()" class="vmf-btn {{btnType}} {{btnSize}} " >{{btnText}}</button>';
          
          if($tAttrs.btnDisabled) {
               templ = '<button ng-click="btnClicked()" class="vmf-btn vmfdisabled {{btnType}} {{btnSize}} "  >{{btnText}}</button>';
          }
              if ($tAttrs.icon === 'true') {
                  if($tAttrs.btnDisabled) {
                    templ = '<button ng-click="btnClicked()" class="vmf-btn icon-btn vmfdisabled_'+ $tAttrs.btnDisabled +' {{btnType}} {{btnSize}} vmfdisabled" ><span class="vmf-shopping">&nbsp;</span>{{btnText}}</button>';    
                  }
                  else {
                    templ = '<button ng-click="btnClicked()" class="vmf-btn icon-btn vmfdisabled_'+ $tAttrs.btnDisabled +' {{btnType}} {{btnSize}} " ><span class="vmf-shopping">&nbsp;</span>{{btnText}}</button>';
                  }

              }
              if ($tAttrs.btnContext === 'dropdown') { 
                            if($tAttrs.btnDisabled) {
							templ	=	'<div class="vmf-btn-group vmfdisabled_'+$tAttrs.btnDisabled+'">'+
											'<a ng-keyup="onKeydown($event)" ng-click="dropdownClicked($event)" href="javascript: void(0);" class="vmf-btn {{btnType}} {{btnSize}} dropdown vmfdisabled">'+
												'{{btnText}}'+
												' <span class="vmf-caret">'+
												'</span>'+
											'</a>'+
											
												'<div ng-transclude>'+
												'</div>'+
											
										'</div>';
                    }
                    else {
                        templ	=	'<div class="vmf-btn-group vmfdisabled_'+$tAttrs.btnDisabled+'">'+
											'<a ng-keyup="onKeydown($event)" ng-click="dropdownClicked($event)" href="javascript: void(0);" class="vmf-btn {{btnType}} {{btnSize}} dropdown">'+
												'{{btnText}}'+
												' <span class="vmf-caret">'+
												'</span>'+
											'</a>'+
											
												'<div ng-transclude>'+
												'</div>'+
											
										'</div>';    
                    }
				/*remove ng-transclude*/
				}	
				if($tAttrs.btnContext==='splitdropdown'){ 
                    if($tAttrs.btnDisabled) {
                        templ	=	'<div class=" vmf-btn-group">'+
									'<div class="vmf-split-btn vmfdisabled_'+$tAttrs.btnDisabled+'">'+
										'<a ng-click="btnClicked()" href="javascript: void(0);" class="vmf-btn {{btnType}} {{btnSize}} vmfdisabled">'+
										'{{btnText}}'+
										'</a>'+
										'<a ng-keyup="onKeydown($event)"  ng-click="dropdownClicked($event)" href="javascript: void(0);" class="vmf_split_arrow vmf-btn {{btnType}} {{btnSize}} vmfdisabled">'+
											'<span class="vmf-caret">'+
											'</span>'+
										'</a>'+
									
											'<div ng-transclude>'+
											'</div>'+
										
									'</div>'+
								'</div>';
                     }
                     else {
                         templ	=	'<div class=" vmf-btn-group">'+
									'<div class="vmf-split-btn vmfdisabled_'+$tAttrs.btnDisabled+'">'+
										'<a ng-click="btnClicked()" href="javascript: void(0);" class="vmf-btn {{btnType}} {{btnSize}} ">'+
										'{{btnText}}'+
										'</a>'+
										'<a ng-keyup="onKeydown($event)"  ng-click="dropdownClicked($event)" href="javascript: void(0);" class="vmf_split_arrow vmf-btn {{btnType}} {{btnSize}} ">'+
											'<span class="vmf-caret">'+
											'</span>'+
										'</a>'+
										
											'<div ng-transclude>'+
											'</div>'+
										
									'</div>'+
								'</div>';
                     }
				}
				return templ;
			},
			controller:function($scope){

			},
			compile:function($tElem,$tAttrs){ 
					return {
						post: function postLink(scope,iElem,iAttrs){
							angular.element("body").bind('click',function(){
								// console.log(angular.element(".btn-group ul").attr('class'));
								// var elm = angular.element(".btn-group ul");
								// if(elm.hasClass('dropdown-btn-menu')){
								//elm.addClass('ng-hide');

								// }
								angular.element(".vmf-btn-group ul").addClass('ng-hide');
								// if(angular.element(".dropdown-btn-menu").hasClass)
							});
							
//angular.element("body").bind('click',function () {
//if(!iElem.find("ul").hasClass('ng-hide')){	
//iElem.find("ul").addClass('ng-hide');
//}
//});
								if(!iAttrs.btnDisabled){  
									scope.btnClicked=function(){
										console.log('button Clicked '+scope.btnText);
										scope.clickCallback();									
									};
									scope.dropdownClicked=function(event){
                                       
										event.stopPropagation();
                                        angular.element(".vmf-btn-group").removeClass('vmfGroupActive');
                                        // angular.element(".vmf-dropdown-btn-menu").addClass('ng-hide');

                                        var bool = false;
                                        if(iElem.find('ul').hasClass('ng-hide')) {
											bool = true;
										}

                                        $('ul.vmf-dropdown-btn-menu').addClass('ng-hide');
                                        if(bool) {
											iElem.find('ul').removeClass('ng-hide');	
                                        }
                                        else {
											iElem.find('ul').addClass('ng-hide');	
                                        }
										// iElem.find('ul').removeClass('ng-hide');
                                        iElem.addClass('vmfGroupActive');
									};
								}		
									
										
								iElem.find("li").bind('click',function(){

									iElem.find("ul").toggleClass('ng-hide');
                                    console.log('hello');
									
								});

								if(iAttrs.btnSize)		//setting button size as a class name
									iAttrs.btnSize='vmf-btn-large';

								if(iAttrs.btnText){		/*Setting the length of button text to max-47*/
									if(iAttrs.btnText.length>=44){
										iAttrs.btnText=iAttrs.btnText.substring(0,44)+'...';
										}
									}	

					}
//					pre:function preLink(scope,iElem,iAttrs){
//                        $compile(iElem.contents())(scope);
//
//					}
				};
			}
	};
}]);
app.directive('vmfBreadCrumb', ['$compile', function($compile){
return{
restrict: 'EA',
    scope: {
        options:'='
    },
    link: function(scope, element, attrs ) {
        var temp ;
        temp = '<div class="vmf-breadcrumb"> <ul>';
        var len = scope.options.length;
        angular.forEach(scope.options,function(option,index){
           option.text = option.text.charAt(0).toUpperCase() + option.text.slice(1);
            if(option.url === undefined){
                 if(len -1 === index){
                    temp += '<li><a href="javascript: void(0)">' + option.text + '</a></li>';
                }else{
                temp += '<li><a href="javascript: void(0)">' + option.text + '</a>/</li>';
            }
            }else{
                if(len -1 === index){
                    temp += '<li><a href="javascript: void(0)">' + option.text + '</a></li>';
                }else{
                    temp += '<li><a href="javascript: void(0)">' + option.text + '</a>/</li>';
                }
        }
        });
        temp += '</ul></div>';
        element.append(temp);
        $compile(element.contents())(scope);

        /*scope.clickme = function(){
            console.log('i am being clicked');
        };*/
    }
    };
}]);

/* Calendar Directive */
app.directive('vmfCalendar', ['$compile', '$document', '$timeout', function($compile, $document, $timeout) {
    return {
        restrict: 'EA',
        scope: {
            historic:'=',
            startyear:'=',
            endyear:'='
        },
        controller: ['$scope', function($scope) {

        }],

        link: function(scope, elem, attrs) {
            var template;
            var j;
            var ind;
            var cfsd;
            var fsm;
            var fsy;
            var fsd;
            var firstdateofmonth;
            var lastdateofmonth;
            var split_first;
            var temp_check;
            //console.log('historic');
            
            //console.log(scope.historic);
            var temp_historic = scope.historic.split('/');
            var indexFirstCal;
            scope.historic = new Date(temp_historic[2],temp_historic[1]-1,temp_historic[0]);
            //console.log(scope.historic);
            scope.firstyearlist = [];      
            for(i=parseInt(scope.startyear);i<=parseInt(scope.endyear);i++){
                scope.firstyearlist.push(i);
            }




            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth(); 
            var yyyy = today.getFullYear();
            scope.first_year = yyyy;
            indexFirstCal = scope.firstyearlist.indexOf(parseInt(yyyy));
            scope.first_month = mm;
            var day = today.getDay();

            
            scope.secondyearlist = new Array(10);
            j = 0;
            for (i = scope.first_year; i <= (scope.first_year + 30); i++) {
                scope.secondyearlist[j++] = i;
            }

            // for first calendar calculating the dates needed , basically first and last day
            var lastday = new Date(yyyy, mm + 1, 0);

            var lastdate = lastday.getDate();
            

            var firstday = new Date(yyyy, mm, 1);
            
            firstday = firstday.getDay();

            var cal_data_first = [];
            var daycount = 1;
            
            daycount = 1;
            cal_data_first = [];
            i = firstday;
            counter = lastdate;
            while (counter !== 0) {
                cal_data_first[i++] = daycount++;

                counter = counter - 1;
            }
           
            daycount = 1;
            
            scope.first_cal = cal_data_first;
            
            mm = mm + 1;

            scope.second_year = yyyy;
            scope.second_month = mm;

          
            var slastday = new Date(yyyy, mm + 1, 0);
            var slastdate = slastday.getDate();
            
            var sfirstday = new Date(yyyy, mm, 1);
            sfirstday = sfirstday.getDay();
            var cal_data_second = [];
            daycount = 1;
            
            cal_data_first = [];
            i = sfirstday;
            counter = slastdate;
            while (counter !== 0) {
                cal_data_second[i++] = daycount++;
                counter = counter - 1;
            }   
            daycount = 1;
            scope.second_cal = cal_data_second;



            // scope.check_if_in_between('first');
            // scope.check_if_in_between('second');
            // functions to support left and right arrows of first calendar
            scope.goleftwithfirst = function(month, year) {
                // if(scope.first_selected_date && !scope.second_selected_date){
                //     scope.first_selected_date = undefined;
                // }   
                // if(!scope.first_selected_date || (scope.first_selected_date && scope.second_selected_date)){        
                    if (scope.first_year === scope.firstyearlist[0] && scope.first_month === 0) {
                        
                        return;
                    }
                    for (i = 0; i < cal_data_first.length; i++) {
                        elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                        elem.find('.first-calendar .' + i).removeClass('activeselectfirstcal');
                    }
                    if (month === 0) {
                        
                        year = year - 1;
                        ////console.log('change in year');
                        //console.log('this is changing the year')
                        elem.find('.firstcaldir .current-selection').text(year);
                        month = 11;
                    } else {
                      
                        month = month - 1;
                    }               
                    var firstday = new Date(year, month, 1);               
                    firstday = firstday.getDay();       
                    var lastday = new Date(year, month + 1, 0);             
                    var lastdate = lastday.getDate();
                    var daycount = 1;
                    cal_data_first = [];
                    i = firstday;
                    counter = lastdate;
                    while (counter !== 0) {
                        cal_data_first[i++] = daycount++;

                        counter = counter - 1;
                    }          
                    scope.first_cal = cal_data_first;           
                    scope.first_month = month;
                    scope.first_year = year;
                // }
                scope.check_if_in_between('first');
                 if(scope.second_month ===(scope.first_month) && scope.first_year === scope.second_year){
                    elem.find('.arrow-left').addClass('hiddenarrow');
                }else{
                    elem.find('.arrow-left').removeClass('hiddenarrow');

                }
                
            };
            scope.gorightwithfirst = function(month, year) { 
                //console.log('go right with first');
                // if(!scope.first_selected_date || (scope.first_selected_date && scope.second_selected_date)){ 
                    // if(scope.first_selected_date && !scope.second_selected_date){
                    //     scope.first_selected_date = undefined;
                    // }   
                    for (i = 0; i < cal_data_first.length; i++) {
                        elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                        elem.find('.first-calendar .' + i).removeClass('activeselectfirstcal');
                    }
                    if (month === 11) {
                     
                        year = parseInt(year) + 1;
                        elem.find('.firstcaldir .current-selection').text(year);

                        month = 0;

                    } else {
                       
                        month = month + 1;
                    }

               
                    var firstday = new Date(year, month, 1);
                   
                    firstday = firstday.getDay();
                   

                    var lastday = new Date(year, month + 1, 0);
                    
                    var lastdate = lastday.getDate();
                   


                    var daycount = 1;
                    cal_data_first = [];
                    i = firstday;
                    counter = lastdate;
                    while (counter !== 0) {
                        cal_data_first[i++] = daycount++;

                        counter = counter - 1;
                    }
                   
                    scope.first_cal = cal_data_first;


                    scope.first_month = month;
                    scope.first_year = year;

                    if (scope.first_year === scope.second_year && (scope.first_month === scope.second_month || (scope.first_month -1) === scope.second_month)) {
                        ////console.log('its meeting the condition');
                        scope.gorightwithsecond(scope.first_month, scope.first_year);
                    }
                // }
                scope.check_if_in_between('first');
                 if(scope.second_month ===(scope.first_month) && scope.first_year === scope.second_year){
                    elem.find('.second-calendar .arrow-left').addClass('hiddenarrow');
                }else{
                    elem.find('.second-calendar .arrow-left').removeClass('hiddenarrow');

                }
            };
            // end for first            
            // functions to support left and right arrows of second calendar
            scope.goleftwithsecond = function(month, year) {
                ////console.log('go left with second');
                if ((scope.first_year === scope.second_year && (scope.first_month ) === scope.second_month) && !(scope.first_year === (scope.second_year - 1) && scope.first_month === 11)) {
                    ////console.log('can\'t go left ');

                    return;
                }


                if (month === 0) {
                  
                    year = year - 1;

                    month = 11;
                } else {
                   
                    month = month - 1;
                }

           
                var firstday = new Date(year, month, 1);
            
                firstday = firstday.getDay();
              

                var lastday = new Date(year, month + 1, 0);
           
                var lastdate = lastday.getDate();
            


                var daycount = 1;
                cal_data_second = [];
                i = firstday;
                counter = lastdate;
                while (counter !== 0) {
                    cal_data_second[i++] = daycount++;

                    counter = counter - 1;
                }
                
                scope.second_cal = cal_data_second;
                scope.second_month = month;
                scope.second_year = year;
                // for(i=1;i<=42;i++){
                //     elem.find('.second-calendar .' + i).removeClass('vmf-disabled-date');
                // } 
                if(scope.first_selected_date && !scope.second_selected_date){
                    ////console.log('bhagwan chal ja');
                    var fd = new Date(scope.first_selected_date);
                    var sec_cal_first_date = new Date(scope.second_year,scope.second_month,1);
                    var first_date = fd.getDate();
                    // if(!(sec_cal_first_date>= fd)){
                    //     for(i=cal_data_second.indexOf(1);i<cal_data_second.indexOf(first_date);i++){
                    //         elem.find('.second-calendar .' + i).addClass('vmf-disabled-date');
                    //     }    
                    // }
                    
                }
                // //////console.log("currect scope month and year");
                // //////console.log(scope.first_month);
                // //////console.log(scope.first_year);
                 if(scope.second_month ===(scope.first_month) && scope.first_year === scope.second_year){
                    elem.find('.second-calendar .arrow-left').addClass('hiddenarrow');
                }else{
                    elem.find('.second-calendar .arrow-left').removeClass('hiddenarrow');

                }
                scope.clearsecondcal();
                scope.check_if_in_between('second');


            };
            scope.gorightwithsecond = function(month, year) {
                // for(i=1;i<=42;i++){
                //     elem.find('.second-calendar .' + i).removeClass('vmf-disabled-date');
                // } 
                if (month === 11) {
                    year = parseInt(year) + 1;
                    month = 0;
                } else {
                    month = month + 1;
                }
                var firstday = new Date(year, month, 1);
                firstday = firstday.getDay();
                var lastday = new Date(year, month + 1, 0);
                var lastdate = lastday.getDate();
                var daycount = 1;
                cal_data_second = [];
                i = firstday;
                counter = lastdate;
                while (counter !== 0) {
                    cal_data_second[i++] = daycount++;

                    counter = counter - 1;
                }
                scope.second_cal = cal_data_second;
                scope.second_month = month;
                scope.second_year = year;
                if(scope.second_month ===(scope.first_month+1) && scope.first_year === scope.second_year){
                    // elem.find('.second-calendar .arrow-left').hide();
                    console.log('');
                }else{
                    elem.find('.second-calendar .arrow-left').show();

                }
                scope.clearsecondcal();
                ////console.log('go right with second');
                scope.check_if_in_between('second');
                if(scope.second_month ===(scope.first_month) && scope.first_year === scope.second_year){
                    elem.find('.second-calendar .arrow-left').addClass('hiddenarrow');
                }else{
                    elem.find('.second-calendar .arrow-left').removeClass('hiddenarrow');

                }



            };
            scope.$watch("first_year", function(newval, oldval) {
                newval = parseInt(newval);
                if (newval) {
                    if(scope.first_selected_date && !scope.second_selected_date){
                        scope.first_selected_date = undefined;
                    }   
                    if((newval > scope.second_year )){
                        ////console.log('changing years');
                        newval = parseInt(newval);
                        scope.first_year = parseInt(newval);                  
                        j = 0;
                        scope.secondyearlist = [];
                        for (i = scope.first_year; i <= (scope.first_year + 25); i++) {
                            scope.secondyearlist[j++] = i;
                        }   
                        ////console.log('replacing the dropdown');               
                        scope.gorightwithfirst(scope.first_month - 1, newval);
                        // elem.find('.secondcaldir').replaceWith($compile('<div vmf-select-list model="second_year" list="secondyearlist" class="yearDropDown secondcaldir"></div>')(scope));
                        
                        
                        $timeout(function() {
                            //console.log('this is changing the year');
                            elem.find('.secondcaldir').replaceWith('<div vmf-select-list model="second_year" list="secondyearlist" pre-select-ind="0" class="yearDropDown secondcaldir"></div>');
                            $compile(elem.find('.secondcaldir')[0])(scope);
                            return;
                            
                        });
                        //console.log('this is changing the year')
                        elem.find('.secondcaldir .current-selection').text(scope.secondyearlist[0]);    
                        
                        if(scope.second_selected_date){
                            if(scope.first_month === scope.second_month){
                                scope.gorightwithsecond(scope.second_month+1,newval);
                            }
                            

                        }else{
                            scope.gorightwithsecond(scope.first_month, newval);    
                        }
                        
                    }else{
                        scope.gorightwithfirst(scope.first_month - 1, newval);
                        scope.first_year = parseInt(newval);                  
                        j = 0;
                        scope.secondyearlist = [];
                        for (i = scope.first_year; i <= (scope.first_year + 25); i++) {
                            scope.secondyearlist[j++] = i;
                        }  
                        $timeout(function() {
                            console.log('this is changing the second year');
                            console.log(scope.secondyearlist.indexOf(scope.second_year));
                            var newIndex = scope.secondyearlist.indexOf(scope.second_year);
                            str = '<div vmf-select-list model="second_year" list="secondyearlist" pre-select-ind="';
                            str += newIndex;
                            str += '" class="yearDropDown secondcaldir"></div>';
                            elem.find('.secondcaldir').replaceWith( str );
                            $compile(elem.find('.secondcaldir')[0])(scope);
                            return;
                            
                        });
                        //  if(scope.second_selected_date){
                        //     if(scope.first_month === scope.second_month){
                        //         // scope.gorightwithsecond(scope.second_month+1,newval);
                        //     }
                            

                        // }else{
                        //     // scope.gorightwithsecond(scope.first_month, newval);    
                        // }


                    }
                }
                
            });

            scope.$watch("second_year", function(newval, oldval) {
                if (newval) {
                    ////console.log("changing second year");
                    //////console.log(scope.second_month);
                    scope.second_year = parseInt(newval);
                    //////console.log(scope.second_year);
                    var index = scope.secondyearlist.indexOf(newval);
                    //console.log('this is changing the year')
                    elem.find('.secondcaldir .current-selection').text(scope.secondyearlist[index]);
                    ////console.log(scope.second_selected_date)
                    if(scope.second_selected_date && scope.second_month === (scope.second_selected_date.split('/')[1]-1)){
                        scope.second_selected_date = newval +'/'+ scope.second_selected_date.split('/')[1] +'/'+ scope.second_selected_date.split('/')[2]  ;

                    }
                    if(scope.second_month < scope.first_month){
                        scope.gorightwithsecond(scope.first_month - 1, scope.second_year);
                    }else{
                        scope.gorightwithsecond(scope.second_month - 1, scope.second_year);    
                    }
                    


                }
            });

            scope.displayCalendar = function() {
                elem.find(".calIcon").addClass("activeCal");
                elem.find('.calendercontainer').css("visibility", "visible");
                elem.find('.calendercontainer').closest('.vmf-calendar-drop').addClass('calendercontainerActive');
                elem.find('.first-calendar .month').focus();
                scope.calendar = true;
                if(scope.first_selected_date && scope.second_selected_date){
                    console.log('');
                    
                }
                // for(i=cal_data_first.indexOf(1);i<=42;i++){
                //     elem.find('.first-calendar .' + i).removeClass('vmf-disabled-date');
                // }
                // for(i=cal_data_second.indexOf(1);i<=42;i++){
                //     elem.find('.second-calendar .' + i).removeClass('vmf-disabled-date');
                // }
                // scope.first_selected_date = "";
                // scope.second_selected_date = "";
            };
            scope.hideCalendar = function() {
                elem.find(".calIcon").removeClass("activeCal");
                elem.find('.calendercontainer').css("visibility", "hidden");
                elem.find('.calendercontainer').closest('.vmf-calendar-drop').removeClass('calendercontainerActive');
                if(scope.first_selected_date && scope.second_selected_date){
                    elem.find('.placeholdersjs').removeClass('placeholdersjs');
                }
                
                scope.calendar = false;
            };
            scope.convertMonth = function(m_index) {
                var m = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                return m[m_index];

            };
            scope.month_double = function(m_index) {
                var m = ['00','01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
                return m[m_index];

            };
            scope.date_double = function(date){
                if((date < 9)){
                    var d = ['00','01', '02', '03', '04', '05', '06', '07', '08', '09'];
                    return d[date];
                }else{
                    return date;
                }
            };

            scope.selectFirstDate = function(date, month, year) {
                //console.log('select first date');
                // date = date;
                //////console.log(date);
                //////console.log(month);
                //////console.log(year);
                // if(!scope.first_selected_date || (scope.first_selected_date && scope.second_selected_date)){
                    if (cal_data_first[date]) {
                        for (i = 0; i < cal_data_first.length; i++) {
                            elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                            elem.find('.first-calendar .' + i).removeClass('activeselectfirstcal');
                            // elem.find('.first-calendar .' + i).removeClass('vmf-disabled-date');
                        }
                        // for (i = cal_data_first.indexOf(1); i < date; i++) {
                        //     elem.find('.first-calendar .' + i).addClass('vmf-disabled-date');

                        // }

                        
                    }
                    // var temp_f = scope.first_year + '/' + (parseInt(scope.first_month)) + '/' + (parseInt(cal_data_first[date]));
                    // //console.log(temp_f);
                    temp_f = new Date(scope.first_year,parseInt(scope.first_month),parseInt(cal_data_first[date]));
                    //console.log(temp_f);
                    //console.log(scope.historic);
                    if(temp_f>scope.historic){
                        //console.log(temp_f);
                        //console.log(scope.historic);
                        scope.first_selected_date = scope.first_year + '/' + (parseInt(scope.first_month) + 1) + '/' + (parseInt(cal_data_first[date]));
                        scope.show_first_selected_date =  scope.month_double((parseInt(scope.first_month) + 1))   + '/' +  scope.date_double((parseInt(cal_data_first[date]))) + '/' +scope.first_year;
                        elem.find('.first-calendar .' + date).addClass('activeselectfirstcal');
                    // scope.show_date = scope.show_first_selected_date;    
                    }
                    
                    if(scope.second_selected_date){
                        var afsd = scope.first_selected_date.split('/');
                        var fsd = new Date(afsd[0],afsd[1]-1,afsd[2]);
                        var assd = scope.show_second_selected_date.split('/');
                        var ssd = new Date(parseInt(assd[2]),parseInt(assd[0])-1,parseInt(assd[1]));
                        //console.log(fsd);
                        //console.log(ssd);
                        if((fsd < ssd)){
                            scope.show_date = scope.show_first_selected_date + " to " + scope.show_second_selected_date;     
                        }
                        
                    }

                    scope.check_if_in_between('first');
                    scope.check_if_in_between('second');

                    // scope.clearsecondcal();
                    //////console.log(scope.first_selected_date);
                // }
                
            };
            scope.hoverFirstDate = function(date, month, year) {
                
                // if(!scope.first_selected_date || (scope.first_selected_date && scope.second_selected_date)){
                    if (cal_data_first[date]) {
                        for (i = 0; i < cal_data_first.length; i++) {
                            elem.find('.first-calendar .' + i).removeClass('hoverselectfirstcal');

                        }
                        for (i = 0; i < cal_data_first.length; i++) {
                            elem.find('.first-calendar .' + i).removeClass('activefirstcalhover');

                        }
                        for (i = date; i < cal_data_first.length; i++) {
                            elem.find('.first-calendar .' + i).addClass('activefirstcalhover');

                        }


                        // elem.find('.first-calendar').removeClass('hoverselectfirstcal');
                        elem.find('.first-calendar .' + date).addClass('hoverselectfirstcal');
                        //////console.log(date);

                    }
                // }
                
                


            };
            scope.hoverSecondDate = function(date, month, year) {
                //console.log('hover second date');               
                if (scope.first_selected_date && scope.first_month !== scope.second_month || (scope.first_selected_date && scope.first_year !== scope.second_year) ) {
                  
                    cfsd = scope.first_selected_date.split('/');
                    fsm = parseInt(cfsd[1]) - 1;
                    fsy = parseInt(cfsd[0]);
                    fsd = parseInt(cfsd[2]);
                    
                    if(parseInt(fsy) === parseInt(scope.first_year)){
                        ind = cal_data_first.indexOf(fsd);     
                    }else{
                        ind = cal_data_first.indexOf(1);
                    }
                   
                   for (i=0;i<cal_data_first.length;i++){
                        elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                   }
                   for (i=ind;i<cal_data_first.length;i++){
                        elem.find('.first-calendar .' + i).addClass('activefirstcal');
                        
                   }                 
                    if (cal_data_second[date] ) {
                        for (i = 0; i < cal_data_second.length; i++) {
                            elem.find('.second-calendar .' + i).removeClass('hoverselectsecondcal');
                            elem.find('.second-calendar .' + i).removeClass('activesecondcal');

                        }
                        for (i = 0; i < date; i++) {
                            if (cal_data_second[i]) {
                                elem.find('.second-calendar .' + i).addClass('activesecondcal');
                            }


                        } 
                        if(cal_data_second[date]){
                            elem.find('.second-calendar .' + date).addClass('hoverselectsecondcal');
                        }            
                                           
                    }
                }
                if(scope.first_selected_date && scope.first_month === month && scope.first_year === year){
                    
                    
                    cfsd = scope.first_selected_date.split('/');
                    fsm = parseInt(cfsd[1]) - 1;
                    fsy = parseInt(cfsd[0]);
                    fsd = parseInt(cfsd[2]);
                    

                   ind = cal_data_first.indexOf(fsd);
                   
                    if(date >= ind){
                        for (i = 0; i < cal_data_second.length; i++) {
                            elem.find('.second-calendar .' + i).removeClass('hoverselectsecondcal');
                            elem.find('.second-calendar .' + i).removeClass('activesecondcal');

                        }
                        for (i = ind; i < date; i++) {
                            if (cal_data_second[i]) {
                                ////console.log(i);
                                ////console.log(cal_data_second[i]);

                                if(elem.find('.second-calendar .'+ i).text()!==''){
                                    elem.find('.second-calendar .' + i).addClass('activesecondcal');    
                                }
                                
                            }


                        }    
                        if(cal_data_second[date]){
                            elem.find('.second-calendar .' + date).addClass('hoverselectsecondcal');
                        }           
                        for (i=0;i<cal_data_first.length;i++){
                            elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                        }
                        for (i=ind;i<=date;i++){
                            if(cal_data_first[i]){
                                elem.find('.first-calendar .' + i).addClass('activefirstcal');
                            }

                            
                                
                        }



                    }
                }


            };
            scope.leavingfirstcal = function() {
                for (i = 0; i < cal_data_first.length; i++) {
                    elem.find('.first-calendar .' + i).removeClass('hoverselectfirstcal');

                }
                for (i = 0; i < cal_data_first.length; i++) {
                    elem.find('.first-calendar .' + i).removeClass('activefirstcalhover');

                }
            };
            scope.clearsecondcal = function() {
                if((scope.first_selected_date && scope.second_selected_date)){
                    //////console.log('leaving second calendar mouseover');
                    for (i = 0; i < 41; i++) {
                        elem.find('.second-calendar .' + i).removeClass('hoverselectsecondcal');
                        elem.find('.second-calendar .' + i).removeClass('activesecondcal');
                        elem.find('.second-calendar .' + i).removeClass('activeselectSecondcal');
                        elem.find('.second-calendar .' + i).removeClass('vmf-disabled-date');

                    }
                    //////console.log('inside if first left');
                    //////console.log(scope.first_selected_date);
                    var cfsd = scope.first_selected_date.split('/');
                    var fsm = parseInt(cfsd[1]) - 1;
                    var fsy = parseInt(cfsd[0]);
                    var fsd = parseInt(cfsd[2]);
                    

                   var ind = cal_data_first.indexOf(fsd);
                   // for (i=0;i<cal_data_first.length;i++){
                   //      elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                   // }
                   // for (i = 0; i < cal_data_second.length; i++) {
                   //      elem.find('.second-calendar .' + i).removeClass('hoverselectsecondcal');
                   //      elem.find('.second-calendar .' + i).removeClass('activesecondcal');

                   //  }

                }
                
            };
            scope.clearfirstcal = function(){
                if((scope.first_selected_date && scope.second_selected_date)){
                    //////console.log('leaving second calendar mouseover');
                    for (i = 0; i <= 41; i++) {
                        elem.find('.first-calendar .' + i).removeClass('activeselectfirstcal');
                        elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                        elem.find('.first-calendar .' + i).removeClass('activeselectSecondcal');
                        elem.find('.first-calendar .' + i).removeClass('vmf-disabled-date');
                         // elem.find('.first-calendar .' + i).removeClass('activefirstcal');


                    }
                    

                }

            };
            scope.leavingsecondcal = function() {
                // if(!scope.second_selected_date && scope.first_selected_date){
                    //////console.log('leaving second calendar mouseover');
                    for (i = 0; i < cal_data_second.length; i++) {
                        elem.find('.second-calendar .' + i).removeClass('hoverselectsecondcal');
                        elem.find('.second-calendar .' + i).removeClass('activesecondcal');

                    }
                    //////console.log('inside if first left');
                    //////console.log(scope.first_selected_date);
                    // var cfsd = scope.first_selected_date.split('/');
                    // var fsm = parseInt(cfsd[1]) - 1;
                    // var fsy = parseInt(cfsd[0]);
                    // var fsd = parseInt(cfsd[2]);
                    

                   // var ind = cal_data_first.indexOf(fsd);
                   for (i=0;i<cal_data_first.length;i++){
                        elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                   }
                   for (i = 0; i < cal_data_second.length; i++) {
                        elem.find('.second-calendar .' + i).removeClass('hoverselectsecondcal');
                        elem.find('.second-calendar .' + i).removeClass('activesecondcal');

                    }
                if(scope.first_selected_date && scope.second_selected_date){
                    scope.check_if_in_between('first');
                    scope.check_if_in_between('second');    
                }
                



                // }
                
            };

            scope.selectSecondDate = function(date, month, year) {
                ////console.log('select second date');
                if(scope.second_selected_date){
                    var ssd = new Date(scope.second_selected_date);
                    var ssdate = ssd.getDate();
                    elem.find('.second-calendar .' + cal_data_second.indexOf(ssdate)).removeClass('activeselectSecondcal');
                }

                if (scope.first_selected_date && cal_data_second[date]) {
                    var fd = parseInt(scope.first_selected_date.split('/')[2]);
                    // ////console.log(cal_data_first);
                    var ind = cal_data_first.indexOf(fd);
                    if(scope.first_month === month){
                        if(date >= ind){
                            
                            scope.second_selected_date = scope.second_year + '/' + (parseInt(scope.second_month) + 1) + '/' + (parseInt(cal_data_second[date]));
                            scope.date_range = scope.first_selected_date + " to " + scope.second_selected_date;
                            scope.show_second_selected_date =  scope.month_double((parseInt(scope.second_month) + 1))  + '/' + scope.date_double((parseInt(cal_data_second[date]))) + '/' + scope.second_year;
                            scope.show_date = scope.show_first_selected_date + " to " + scope.show_second_selected_date; 
                            elem.find('.second-calendar .'+date).addClass('activeselectSecondcal');
                            scope.hideCalendar();
                        }


                    }else{
                        
                        scope.second_selected_date = scope.second_year + '/' + (parseInt(scope.second_month) + 1) + '/' + (parseInt(cal_data_second[date]));
                        scope.date_range = scope.first_selected_date + " to " + scope.second_selected_date;
                        scope.show_second_selected_date = scope.month_double((parseInt(scope.second_month) + 1)) + '/' +  scope.date_double((parseInt(cal_data_second[date]))) + '/' + scope.second_year;
                        scope.show_date = scope.show_first_selected_date + " to " + scope.show_second_selected_date; 
                        elem.find('.second-calendar .'+date).addClass('activeselectSecondcal');
                        scope.hideCalendar();


                    }
                                        
                    //////console.log(scope.second_selected_date);
                    
                    //////console.log(scope.date_range);

                    // if(scope.first_selected_date){
                    //              if(cal_data_second[date]){
                    //              for (i=0;i< cal_data_second.length;i++){
                    //                  elem.find('.second-calendar .' + i).removeClass('hoverselectsecondcal');
                    //                  elem.find('.second-calendar .' + i).removeClass('activesecondcal');

                    //              }
                    //              for (i=0;i< date;i++){
                    //                  elem.find('.second-calendar .' + i).addClass('activesecondcal');

                    //              }

                    //              // elem.find('.first-calendar').removeClass('hoverselectfirstcal');
                    //              elem.find('.second-calendar .' + date).addClass('hoverselectsecondcal');
                    //              //////console.log(date);

                    //          }


                    //          }



                    
                }

            };

            // keyboard events
            scope.onKeydownfirstcal = function(e,first_month,first_year){
                //////console.log(e.keyCode);
                if(e.keyCode === 39){
                    scope.gorightwithfirst(first_month,first_year);
                }
                if(e.keyCode === 37){
                    scope.goleftwithfirst(first_month,first_year);
                }
            }; 
            scope.keyDateChangeFirst =function(e,x,y,z){
                //////console.log(e.keyCode);
                if(e.keyCode === 13){
                   
                    elem.find('.second-calendar .month').focus();
                    scope.selectFirstDate(x,y,z);

                }

                
            };
            scope.checkEmpty = function(val){
                // //////console.log("checkEmpty");
                // //////console.log(val);
                if(val){
                    return true;
                }else{
                    return false;
                }

            };


            $timeout(function() {
                scope.check_if_in_between('first');
                scope.check_if_in_between('second');
                // elem.find('.current-selection').text(scope.first_year);
                // elem.find('.second-calendar .arrow-left').hide();
                // var ul = elem.find('.secondcaldir ul');
                // var scrollPane = ul.jScrollPane({
                //     showArrows: true,
                //     verticalArrowPositions: 'after'
                // });

                // $(".jspDrag").bind('click',function(event) {
                //         event.stopImmediatePropagation();
                //     }
                // );
            });
            
            elem.bind('click',function(e){
                e.stopPropagation();
            });
            $document.bind('click',function(){
                scope.hideCalendar();
            });

            scope.check_if_in_between = function(calindex){
                //console.log('check if in between ');
                var fsd;
                var ind;
                if(scope.first_selected_date && scope.second_selected_date){
                    var cfsd = scope.first_selected_date.split('/');
                    var fsm = parseInt(cfsd[1]) - 1; 
                    var fsy = parseInt(cfsd[0]);
                    fsd = parseInt(cfsd[2]);                     
                    ind = cal_data_first.indexOf(fsd);

                    var cssd = scope.second_selected_date.split('/');
                    var ssm = parseInt(cssd[1]) - 1; 
                    var ssy = parseInt(cssd[0]);
                    var ssd = parseInt(cssd[2]);                     
                    var sind = cal_data_second.indexOf(ssd);

                    if(scope.first_month === fsm && parseInt(scope.first_year) === fsy && calindex === 'first'){
                        scope.highlightfirst();

                    }

                    if(scope.second_month === ssm && parseInt(scope.second_year) === ssy && calindex === 'second'){
                        scope.clearsecondcal();
                        scope.highlightsecond();


                    }
                    var firstsdate = new Date(scope.first_selected_date);
                    var secondsdate = new Date(scope.second_selected_date);
                    // ////console.log(firstsdate);
                    // ////console.log(secondsdate);
                    if(calindex==="first"){
                        ////console.log('inside to check for highlight whole');
                        firstdateofmonth = new Date(scope.first_year,scope.first_month,1);
                        if(scope.first_month === 11){
                            lastdateofmonth = new Date(scope.first_year+1,0,0);
                        }else{
                            lastdateofmonth = new Date(scope.first_year,scope.first_month+1,0);
                        }
                        if(firstdateofmonth >= firstsdate && lastdateofmonth <= secondsdate){
                            ////console.log('in between the selected dates');
                            scope.fullhighlightfirst(firstdateofmonth,lastdateofmonth);
                        }
                        if(firstdateofmonth <= secondsdate && secondsdate <= lastdateofmonth){
                            if(firstdateofmonth <= firstsdate){
                                ////console.log('we have both here');
                                scope.highlight_both_in_first(firstdateofmonth,lastdateofmonth,firstsdate,secondsdate,false);
                            }else{
                                ////console.log('Your r right bro we have an end date here.');
                                scope.highlight_both_in_first(firstdateofmonth,lastdateofmonth,firstdateofmonth,secondsdate,true);
                            }
                            
                        }
                                                
                        // ////console.log(firstdateofmonth);
                        // ////console.log(lastdateofmonth);
                    }
                    if(calindex==="second"){

                        ////console.log('full highlight for second calendar ');
                        firstdateofmonth = new Date(scope.second_year,scope.second_month,1);
                        if(scope.second_month === 11){
                            lastdateofmonth = new Date(scope.second_year+1,0,0);
                        }else{
                            lastdateofmonth = new Date(scope.second_year,scope.second_month+1,0);
                        }
                        if(firstdateofmonth > firstsdate && lastdateofmonth < secondsdate){
                            ////console.log('in between the selected dates');
                            scope.fullhighlightsecond(firstdateofmonth,lastdateofmonth);
                        }
                        if(firstdateofmonth <= firstsdate && firstsdate <= lastdateofmonth){
                            if(secondsdate <= lastdateofmonth){
                                ////console.log('we have both here for second month');
                                scope.highlight_both_in_second(firstdateofmonth,lastdateofmonth,firstsdate,secondsdate,false);
                            }else{
                                ////console.log('Your r right bro we have an start date here.');
                                scope.highlight_both_in_second(firstdateofmonth,lastdateofmonth,firstsdate,lastdateofmonth,true);
                            }
                            
                        }

                                                
                        ////console.log(firstdateofmonth);
                        ////console.log(lastdateofmonth);
                        
                    }



                }
                if(calindex==='first'){
                    firstdateofmonth = new Date(scope.first_year,scope.first_month,1);
                    if(scope.first_month === 11){
                        lastdateofmonth = new Date(scope.first_year+1,0,0);
                    }else{
                        lastdateofmonth = new Date(scope.first_year,scope.first_month+1,0);
                    }
                    if(firstdateofmonth <= scope.historic && scope.historic <= lastdateofmonth){
                        //console.log('disabled dates in first calendar');
                        for (i = 0; i <= 41; i++) {
                            elem.find('.first-calendar .' + i).removeClass('vmf-disabled-date');

                        }
                        for (i = cal_data_first.indexOf(1); i <= cal_data_first.indexOf(scope.historic.getDate()); i++) {
                            elem.find('.first-calendar .' + i).addClass('vmf-disabled-date');

                        }

                    }else if(lastdateofmonth< scope.historic){
                        for (i = 0; i <= 41; i++) {
                            elem.find('.first-calendar .' + i).removeClass('vmf-disabled-date');

                        }
                        for (i = cal_data_first.indexOf(1); i <= cal_data_first.indexOf(lastdateofmonth.getDate()); i++) {
                            elem.find('.first-calendar .' + i).addClass('vmf-disabled-date');

                        }

                    }else{
                        for (i = 0; i <= 41; i++) {
                            elem.find('.first-calendar .' + i).removeClass('vmf-disabled-date');

                        }


                    }
                    if(scope.first_selected_date && !scope.second_selected_date){
                        console.log('check if in between and only first selected date');
                        console.log(scope.first_selected_date);
                        fsd = new Date(scope.first_selected_date);
                        console.log(fsd);
                        if(firstdateofmonth <= fsd && fsd <= lastdateofmonth){
                            ind = cal_data_first.indexOf(parseInt(fsd.getDate()));
                            elem.find('.first-calendar .' + ind).addClass('activeselectfirstcal');
                            elem.find('.first-calendar .' + ind).addClass('activefirstcal');
                        }
                    }



                }else{
                    firstdateofmonth = new Date(scope.second_year,scope.second_month,1);
                    if(scope.first_selected_date){
                        split_first = scope.first_selected_date.split('/');
                        temp_check = new Date(parseInt(split_first[0]),parseInt(split_first[1] - 1),parseInt(split_first[2])); 
                    }else{  
                        temp_check = scope.historic;
                    }
                    if(scope.second_month === 11){
                        lastdateofmonth = new Date(scope.second_year+1,0,0);
                    }else{
                        lastdateofmonth = new Date(scope.second_year,scope.second_month+1,0);
                    }
                    if(firstdateofmonth <= temp_check && temp_check <= lastdateofmonth){
                        //console.log('disabled dates in second calendar');
                        for (i = 0; i <= 41; i++) {
                            elem.find('.second-calendar .' + i).removeClass('vmf-disabled-date');

                        }
                        for (i = cal_data_second.indexOf(1); i <= cal_data_second.indexOf(temp_check.getDate()); i++) {
                            elem.find('.second-calendar .' + i).addClass('vmf-disabled-date');

                        }
                    }else if(lastdateofmonth < temp_check){
                        for (i = 0; i <= 41; i++) {
                            elem.find('.second-calendar .' + i).removeClass('vmf-disabled-date');

                        }
                        for (i = cal_data_second.indexOf(1); i <= cal_data_second.indexOf(lastdateofmonth.getDate()); i++) {
                            elem.find('.second-calendar .' + i).addClass('vmf-disabled-date');

                        }


                    }else{
                        for (i = 0; i <= 41; i++) {
                            elem.find('.second-calendar .' + i).removeClass('vmf-disabled-date');

                        }


                    }





                }



            };
            scope.highlight_both_in_second = function(first,last,firstsdate,secondsdate,onlyenddate){
                ////console.log('highlight_both_in_second');
                scope.clearsecondcal();
                var daycount = 1;
                cal_data = [];
                firstday = first.getDay();
                lastdate = last.getDate();
                i = firstday;
                counter = lastdate;
                while (counter !== 0) {
                    cal_data[i++] = daycount++;

                    counter = counter - 1;
                }
                // var findex = cal_data.indexOf(fday);
                var fstart = firstsdate.getDate();
                var fend = secondsdate.getDate();
                if(!onlyenddate){
                    elem.find('.second-calendar .'+ cal_data.indexOf(secondsdate.getDate()) ).addClass('activeselectSecondcal');
                }
                // elem.find('.first-calendar .'+ cal_data.indexOf(fend)).addClass('activeselectSecondcal');
                for(i=cal_data.indexOf(firstsdate.getDate());i<=cal_data.indexOf(secondsdate.getDate());i++){
                    elem.find('.second-calendar .'+ i).addClass('activesecondcal');
                }
                // elem.find('.first-calendar .'+ cal_data.indexOf(fend)).addClass('activeselectSecondcal');

            };
            scope.highlight_both_in_first = function(first,last,firstsdate,secondsdate,onlyenddate){
                ////console.log('highlight_both_in_first');
                scope.clearfirstcal();
                var daycount = 1;
                cal_data = [];
                firstday = first.getDay();
                lastdate = last.getDate();
                i = firstday;
                counter = lastdate;
                while (counter !== 0) {
                    cal_data[i++] = daycount++;

                    counter = counter - 1;
                }
                // var findex = cal_data.indexOf(fday);
                var fstart = firstsdate.getDate();
                var fend = secondsdate.getDate();
                if(!onlyenddate){
                    elem.find('.first-calendar .'+ cal_data.indexOf(fstart) ).addClass('activeselectfirstcal');
                }
                // elem.find('.first-calendar .'+ cal_data.indexOf(fend)).addClass('activeselectSecondcal');
                for(i=cal_data.indexOf(fstart);i<=cal_data.indexOf(fend);i++){
                    elem.find('.first-calendar .'+ i).addClass('activefirstcal');
                }
                // elem.find('.first-calendar .'+ cal_data.indexOf(fend)).addClass('activeselectSecondcal');

            };
            scope.fullhighlightfirst = function(first,last){
                ////console.log('fullhighlightfirst');
                var daycount = 1;
                cal_data = [];
                firstday = first.getDay();
                lastdate = last.getDate();
                i = firstday;
                counter = lastdate;
                while (counter !== 0) {
                    cal_data[i++] = daycount++;

                    counter = counter - 1;
                }
                // var findex = cal_data.indexOf(fday);
                for(i=firstday;i<=cal_data.indexOf(lastdate);i++){
                    elem.find('.first-calendar .'+ i).addClass('activefirstcal');
                }

            };
            scope.fullhighlightsecond = function(first,last){
                ////console.log('fullhighlightsecond');
                scope.clearsecondcal();
                var daycount = 1;
                cal_data = [];
                firstday = first.getDay();
                lastdate = last.getDate();
                i = firstday;
                counter = lastdate;
                while (counter !== 0) {
                    cal_data[i++] = daycount++;

                    counter = counter - 1;
                }
                // var findex = cal_data.indexOf(fday);
                for(i=firstday;i<=cal_data.indexOf(lastdate);i++){
                    elem.find('.second-calendar .'+ i).addClass('activesecondcal');
                }

            };
            scope.highlightfirst = function(){
                var fday = parseInt(scope.first_selected_date.split('/')[2]);
                var fy = parseInt(scope.first_selected_date.split('/')[0]);
                var fm = parseInt(scope.first_selected_date.split('/')[1])-1;
                var lastday = new Date(fy, fm + 1, 0);
                var lastdate = lastday.getDate();
                var firstday = new Date(fy, fm, 1);
                firstday = firstday.getDay();
                var cal_data = [];
                var daycount = 1;
                
                
                cal_data = [];
                i = firstday;
                counter = lastdate;
                while (counter !== 0) {
                    cal_data[i++] = daycount++;

                    counter = counter - 1;
                }
                var findex = cal_data.indexOf(fday);
                elem.find('.first-calendar .' + findex).addClass('activeselectfirstcal');
                elem.find('.first-calendar .' + findex).addClass('activefirstcal');
                var end_date  = scope.find_if_in_same();
                if(end_date){
                    end_date = parseInt(scope.second_selected_date.split('/')[2]);
                    end_date = cal_data_second.indexOf(end_date);
                }else{
                    end_date = cal_data.length;
                }
                for(i=findex;i<end_date;i++){
                        elem.find('.first-calendar .' + i).addClass('activefirstcal');                    
                }
            };
            scope.highlightsecond = function(){
                ////console.log('highlight second being called.');
                var fday = parseInt(scope.second_selected_date.split('/')[2]);
                var fy = parseInt(scope.second_selected_date.split('/')[0]);
                var fm = parseInt(scope.second_selected_date.split('/')[1])-1;
                var lastday = new Date(fy, fm + 1, 0);
                var lastdate = lastday.getDate();
                var firstday = new Date(fy, fm, 1);
                firstday = firstday.getDay();
                var cal_data = [];
                daycount = 1;
                
                daycount = 1;
                scal_data = [];
                i = firstday;
                counter = lastdate;
                while (counter !== 0) {
                    scal_data[i++] = daycount++;

                    counter = counter - 1;
                }
                var findex = scal_data.indexOf(fday);
                // var firstdayindex = scal_data.indexOf(firstday);
                elem.find('.second-calendar .' + findex).addClass('activeselectsecondcal');
                elem.find('.second-calendar .' + findex).addClass('activesecondcal');
                var end_date  = scope.find_if_in_same();
                if(end_date){
                    end_date = parseInt(scope.second_selected_date.split('/')[2]);
                    end_date = cal_data_second.indexOf(end_date);
                }else{
                    end_date = scal_data.length;
                }
                for(i=firstday;i<findex;i++){
                        elem.find('.second-calendar .' + i).addClass('activesecondcal');                    
                }
                elem.find('.second-calendar .' + findex).addClass('activeselectSecondcal');                    
            };
            scope.find_if_in_same = function(){
                var fsm = parseInt(scope.first_selected_date.split('/')[1]);
                var fsy =  parseInt(scope.first_selected_date.split('/')[0]);
                var ssm = parseInt(scope.second_selected_date.split('/')[1]);
                var ssy =  parseInt(scope.second_selected_date.split('/')[0]);
                if(fsm === ssm && fsy === ssy){
                    return true;
                }else{
                    return false;
                }
                

            };

            scope.change_date_format = function(date_string){
                return "amit";
            };

            // end for second

            template = '<div class="vmf-calContainer" ng-click="displayCalendar();"><input ng-model="show_date"  class="vmf-calInput" type="text" id="coverageDates" placeholder="Select Dates" readonly><span class="calIcon" ></span></div>' +
                '<div class="calendercontainer">' +
                '<div class="vmf-dateContainer tableBorder">' +
                '   <div class="calSubHeader">' +
                '       <span class="dateSubHead">From..' +
                '       </span>' +
                '       <div vmf-select-list model="first_year" list="firstyearlist"  pre-select-ind="'+ indexFirstCal +'" class="yearDropDown firstcaldir" show-arrows="false">' +
                '       </div>' +
                '   </div>' +
                '<table class="table-condensed first-calendar">' +
                '   <thead>' +
                '      <tr>' +
                '         <th class="prev available"><a ng-click="goleftwithfirst(first_month,first_year);" ><span class="arrow-left"></span></a></th>' +
                '         <th colspan="5" tabindex="0" ng-keyup="onKeydownfirstcal($event,first_month,first_year);" class="month" ng-bind="convertMonth(first_month);"> </th>' +
                '         <th class="next available"><a ng-click="gorightwithfirst(first_month,first_year);" ><span class="arrow-right"></span></a></th>' +
                '      </tr>  ' +
                '      <tr>' +
                '         <th>S</th>' +
                '         <th>M</th>' +
                '         <th>T</th>' +
                '         <th>W</th>' +
                '         <th>T</th>' +
                '         <th>F</th>' +
                '         <th>S</th>' +
                '      </tr>' +
                '   </thead>' +
                '   <tbody ng-mouseleave = "leavingfirstcal();" ng-swipe-left="gorightwithfirst(first_month,first_year);" ng-swipe-right="goleftwithfirst(first_month,first_year);"  >' +
                '      <tr>' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [0,1,2,3,4,5,6]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +

                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [7,8,9,10,11,12,13]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +

                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [14,15,16,17,18,19,20]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [21,22,23,24,25,26,27]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr  >' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [28,29,30,31,32,33,34]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr  >' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [35,36,37,38,39,40,41]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +
                '      </tr>' +
                '   </tbody>' +
                '</table>' +
                '</div>' +
                '<div class="vmf-dateContainer">' +
                '<div class="calSubHeader">' +
                '   <span class="dateSubHead">To..' +
                '   </span>' +
                '   <span ><div vmf-select-list show-arrows="false" model="second_year" list="secondyearlist" pre-select-ind="0" class="yearDropDown secondcaldir"></div></span>' +
                 
                '</div>' +
                '<table class="table-condensed second-calendar">' +
                '   <thead>' +
                '      <tr>' +
                '         <th class="prev available"><a ng-click="goleftwithsecond(second_month,second_year);" ><span class="arrow-left"></span></a></th>' +

                '         <th colspan="5" class="month" ng-bind="convertMonth(second_month);"> </th>' +
                '         <th class="next available"><a ng-click="gorightwithsecond(second_month,second_year);" ><span class="arrow-right"></span></a></th>' +
                '      </tr>' +
                '      <tr>' +
                '         <th>S</th>' +
                '         <th>M</th>' +
                '         <th>T</th>' +
                '         <th>W</th>' +
                '         <th>T</th>' +
                '         <th>F</th>' +
                '         <th>S</th>' +
                '      </tr>' +
                '   </thead>' +
                '   <tbody ng-mouseleave = "leavingsecondcal();" ng-swipe-left="gorightwithsecond(second_month,second_year);" ng-swipe-right="goleftwithsecond(second_month,second_year);" >' +
                '      <tr>' +
                '         <td ng-mouseover="hoverSecondDate(i,second_month,second_year);" ng-click="selectSecondDate(i,second_month,second_year);" ng-repeat="i in [0,1,2,3,4,5,6]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(second_cal[i]);">{{second_cal[i]}}</a></td>' +

                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverSecondDate(i,second_month,second_year);" ng-click="selectSecondDate(i,second_month,second_year);" ng-repeat="i in [7,8,9,10,11,12,13]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(second_cal[i]);">{{second_cal[i]}}</a></td>' +

                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverSecondDate(i,second_month,second_year);" ng-click="selectSecondDate(i,second_month,second_year);" ng-repeat="i in [14,15,16,17,18,19,20]" class="{{i}}" data-title="r0c0"><a >{{second_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverSecondDate(i,second_month,second_year);" ng-click="selectSecondDate(i,second_month,second_year);" ng-repeat="i in [21,22,23,24,25,26,27]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(second_cal[i]);">{{second_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverSecondDate(i,second_month,second_year);" ng-click="selectSecondDate(i,second_month,second_year);" ng-repeat="i in [28,29,30,31,32,33,34]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(second_cal[i]);">{{second_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverSecondDate(i,second_month,second_year);" ng-click="selectSecondDate(i,second_month,second_year);" ng-repeat="i in [35,36,37,38,39,40,41]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(second_cal[i]);">{{second_cal[i]}}</a></td>' +
                '      </tr>' +
                '   </tbody>' +
                '</table></div></div>';




            elem.append(template);
            // if(scope.customClass){
            //     angular.forEach(scope.customClass, function(item) {
            //         elem.find(item.selector).addClass(item.cusclass);


            //     });
            // }
            $compile(elem.contents())(scope);


        }

    };
}]);



/* Calendar Directive Single */
app.directive('vmfCalendarSingle', ['$compile', '$document', '$timeout', function($compile, $document, $timeout) {
    return {
        restrict: 'EA',
        scope: {
            sdate: '@',
            edate: '@'
            
        },
        controller: ['$scope', function($scope) {

           

        }],

        link: function(scope, elem, attrs) {
            var template;
            temp_start = scope.sdate.split('/');
            scope.startdate = new Date(temp_start[2],temp_start[1]-1,temp_start[0]);


            temp_end = scope.edate.split('/');
            scope.enddate = new Date(temp_end[2],temp_end[1]-1,temp_end[0]);

            console.log(scope.startdate);
            console.log(scope.enddate);

            scope.firstyearlist = [];
            for(i=scope.startdate.getFullYear();i<= scope.enddate.getFullYear();i++){
                scope.firstyearlist.push(i);
            }
          
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth(); //January is 0!
            var yyyy = today.getFullYear();
            scope.first_year = yyyy;
            var curIndex = scope.firstyearlist.indexOf(yyyy);
            console.log(curIndex);

            scope.first_month = mm;
            var day = today.getDay();

            // scope.secondyearlist = new Array(10);
            // var j = 0;
            // for (i = scope.first_year; i <= (scope.first_year + 20); i++) {
            //     scope.secondyearlist[j++] = i;
            // }

            var lastday = new Date(yyyy, mm + 1, 0);

            var lastdate = lastday.getDate();
            

            var firstday = new Date(yyyy, mm, 1);
            
            firstday = firstday.getDay();
            
            var cal_data_first = [];
            var daycount = 1;
            
            daycount = 1;
            cal_data_first = [];
            i = firstday;
            counter = lastdate;
            while (counter !== 0) {
                cal_data_first[i++] = daycount++;

                counter = counter - 1;
            }
            
            daycount = 1;
        
            scope.first_cal = cal_data_first;
            
            mm = mm + 1;

            scope.second_year = yyyy;
            scope.second_month = mm;

            
            var slastday = new Date(yyyy, mm + 1, 0);
            var slastdate = slastday.getDate();
          

            var sfirstday = new Date(yyyy, mm, 1);
            sfirstday = sfirstday.getDay();
           



            var cal_data_second = [];
            daycount = 1;
            
            cal_data_first = [];
            i = sfirstday;
            counter = slastdate;
            while (counter !== 0) {
                cal_data_second[i++] = daycount++;

                counter = counter - 1;
            }


            
            daycount = 1;
         
            scope.second_cal = cal_data_second;
           

            scope.goleftwithfirst = function(month, year) {   
                    ////console.log('go left with first');
                    elem.find('.arrow-right').removeClass('hiddenarrow');
                    var firstday;
                    if (scope.first_year === scope.firstyearlist[0] && scope.first_month === 0) {
                        
                        return;
                    }
                    for (i = 0; i < cal_data_first.length; i++) {
                        elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                        elem.find('.first-calendar .' + i).removeClass('activeselectfirstcal');
                    }
                    if (month === 0) {
                        //////console.log('inside if ');
                        year = year - 1;
                        firstday = new Date(year, month, 1);   
                        if(firstday < scope.startdate){
                            console.log('cant go beyond this date');
                            return;
                        }


                        //console.log('this is changing the year')
                        elem.find('.current-selection').text(year);
                        month = 11;
                    } else {
                        //////console.log('inside else');
                        month = month - 1;
                    }               
                    firstday = new Date(year, month, 1);               
                    firstday = firstday.getDay();       
                    var lastday = new Date(year, month + 1, 0);             
                    var lastdate = lastday.getDate();
                    var daycount = 1;
                    cal_data_first = [];
                    i = firstday;
                    counter = lastdate;
                    while (counter !== 0) {
                        cal_data_first[i++] = daycount++;

                        counter = counter - 1;
                    }          
                    scope.first_cal = cal_data_first;           
                    scope.first_month = month;
                    scope.first_year = year;
                    if(scope.first_selected_date){
                        var fd = new Date(scope.first_selected_date);
                        var firstdate = fd.getDate();
                        var fm = fd.getMonth();
                        var fy = fd.getFullYear();
                        var ind = cal_data_first.indexOf(firstdate);
                        if(fm === scope.first_month && fy === scope.first_year){
                            elem.find('.first-calendar .'+ ind).addClass('activeselectfirstcal');
                        }
                        
                    }
                    if(month ===(scope.startdate.getMonth()) && parseInt(year) === scope.startdate.getFullYear()){
                        elem.find('.arrow-left').addClass('hiddenarrow');
                    }else{
                        elem.find('.arrow-left').removeClass('hiddenarrow');

                    }

               
                
            };


            scope.gorightwithfirst = function(month, year) { 
                    ////console.log('go right with first');
                    // if((month -1) ===(scope.enddate.getMonth()) && parseInt(year) === scope.enddate.getFullYear()){
                    //     console.log('cant go beyond this date');
                    //     return;
                    // }
                    elem.find('.arrow-left').removeClass('hiddenarrow');

                    var firstday;
                    for (i = 0; i < cal_data_first.length; i++) {
                        elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                        elem.find('.first-calendar .' + i).removeClass('activeselectfirstcal');
                    }
                    if (month === 11) {
                        //////console.log('inside if ');
                        year = parseInt(year) + 1;
                        //console.log('this is changing the year')
                        firstday = new Date(year, month, 1);
                        console.log(firstday);
                        if(firstday > scope.enddate){
                            console.log('cant go beyond this date');
                            return;
                        }
                        elem.find('.current-selection').text(year);

                        month = 0;

                    } else {
                        //////console.log('inside else');
                        month = month + 1;
                    }

               
                    
                    firstday = new Date(year, month, 1);
                    firstday = firstday.getDay();

                   

                    var lastday = new Date(year, month + 1, 0);
                    
                    var lastdate = lastday.getDate();
                   


                    var daycount = 1;
                    cal_data_first = [];
                    i = firstday;
                    counter = lastdate;
                    while (counter !== 0) {
                        cal_data_first[i++] = daycount++;

                        counter = counter - 1;
                    }
                   
                    scope.first_cal = cal_data_first;

                    //////console.log(cal_data_first);
                    scope.first_month = month;
                    scope.first_year = year;

                    if(scope.first_selected_date){
                        var fd = new Date(scope.first_selected_date);
                        var firstdate = fd.getDate();
                        var fm = fd.getMonth();
                        var fy = fd.getFullYear();
                        var ind = cal_data_first.indexOf(firstdate);
                        if(fm === scope.first_month && fy === scope.first_year){
                            elem.find('.first-calendar .'+ ind).addClass('activeselectfirstcal');
                        }
                        
                    }

                    if(month ===(scope.enddate.getMonth()) && parseInt(year) === scope.enddate.getFullYear()){
                        elem.find('.arrow-right').addClass('hiddenarrow');
                    }else{
                        elem.find('.arrow-right').removeClass('hiddenarrow');

                    }
                    if(month ===(scope.startdate.getMonth()) && parseInt(year) === scope.startdate.getFullYear()){
                        elem.find('.arrow-left').addClass('hiddenarrow');
                    }

                    // if (scope.first_year === scope.second_year && (scope.first_month === scope.second_month || (scope.first_month -1) === scope.second_month)) {
                    //     //////console.log('inside if of gorightwithfirst');
                    //     scope.gorightwithsecond(scope.first_month, scope.first_year);
                    // }
                
            };



            // end for first            


            // functions to support left and right arrows of second calendar

           

            

         

            scope.displayCalendar = function() {
                elem.find(".calIcon").addClass("activeCal");
                elem.find('.calendercontainersingle').css("visibility", "visible").addClass('calendercontainerActive');
                elem.find('.first-calendar .month').focus();
                scope.calendar = true;
            };
            scope.hideCalendar = function() {
                elem.find(".calIcon").removeClass("activeCal");
                elem.find('.calendercontainersingle').css("visibility", "hidden").removeClass('calendercontainerActive');
                elem.find('.placeholdersjs').removeClass('placeholdersjs');
                scope.calendar = false;
            };

            scope.convertMonth = function(m_index) {
                var m = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                return m[m_index];

            };
            scope.month_double = function(m_index) {
                var m = ['00','01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
                return m[m_index];

            };
            scope.month_double = function(m_index) {
                var m = ['00','01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
                return m[m_index];

            };
            scope.date_double = function(date){
                if((date < 9)){
                    var d = ['00','01', '02', '03', '04', '05', '06', '07', '08', '09'];
                    return d[date];
                }else{
                    return date;
                }
            };

            scope.selectFirstDate = function(date, month, year) {
                // date = date;
                //////console.log(date);
                //////console.log(month);
                //////console.log(year);
                if (cal_data_first[date]) {
                    for (i = 0; i < cal_data_first.length; i++) {
                        elem.find('.first-calendar .' + i).removeClass('activefirstcal');
                        elem.find('.first-calendar .' + i).removeClass('activeselectfirstcal');
                    }
                    // for (i = date; i < cal_data_first.length; i++) {
                    //     elem.find('.first-calendar .' + i).addClass('activefirstcal');

                    // }

                    elem.find('.first-calendar .' + date).addClass('activeselectfirstcal');
                }
                // var fdate = cal_data_first.indexOf(date);
                fdate = cal_data_first[date];
                scope.first_selected_date = scope.first_year + '/' + (parseInt(scope.first_month) + 1) + '/' + (parseInt(fdate));
                scope.date_range = scope.first_selected_date;
                scope.show_date = scope.month_double((parseInt(scope.first_month) + 1)) + '/' + scope.date_double((parseInt(fdate))) + '/' + scope.first_year;
                ////console.log(scope.date_range);
                scope.hideCalendar();
                //////console.log(scope.first_selected_date);
            };

            scope.hoverFirstDate = function(date, month, year) {
                    ////console.log('hover first entry');
                    ////console.log(date);
                    ////console.log(month);
                    ////console.log(year);
                
                    if (scope.first_cal[date]) {
                        for (i = 0; i < scope.first_cal.length; i++) {
                            elem.find('.first-calendar .' + i).removeClass('hoverselectfirstcal');

                        }
                        for (i = 0; i < scope.first_cal.length; i++) {
                            elem.find('.first-calendar .' + i).removeClass('activefirstcalhover');

                        }
                        for (i = date; i < scope.first_cal.length; i++) {
                            elem.find('.first-calendar .' + i).addClass('activefirstcalhover');

                        }


                        // elem.find('.first-calendar').removeClass('hoverselectfirstcal');
                        elem.find('.first-calendar .' + date).addClass('hoverselectfirstcal');
                        //////console.log(date);

                    }
             
                
                


            };

    


            scope.leavingfirstcal = function() {
                ////console.log('leaving first cal');
                for (i = 0; i < cal_data_first.length; i++) {
                    elem.find('.first-calendar .' + i).removeClass('hoverselectfirstcal');

                }
                for (i = 0; i < cal_data_first.length; i++) {
                    elem.find('.first-calendar .' + i).removeClass('activefirstcalhover');

                }
            };

           

            

            // keyboard events
            scope.onKeydownfirstcal = function(e,first_month,first_year){
                //////console.log(e.keyCode);
                if(e.keyCode === 39){
                    scope.gorightwithfirst(first_month,first_year);
                }
                if(e.keyCode === 37){
                    scope.goleftwithfirst(first_month,first_year);
                }
            }; 
            scope.keyDateChangeFirst =function(e,x,y,z){
                //////console.log(e.keyCode);
                if(e.keyCode === 13){
                   
                    elem.find('.second-calendar .month').focus();
                    scope.selectFirstDate(x,y,z);

                }

                
            };
            scope.checkEmpty = function(val){
                // //////console.log("checkEmpty");
                // //////console.log(val);
                if(val){
                    return true;
                }else{
                    return false;
                }

            };


            $timeout(function() {
                // elem.find('.current-selection').text(scope.first_year);
                // elem.find('.second-calendar .arrow-left').hide();
                // var ul = elem.find('.secondcaldir ul');
                // var scrollPane = ul.jScrollPane({
                //     showArrows: true,
                //     verticalArrowPositions: 'after'
                // });

                // $(".jspDrag").bind('click',function(event) {
                //         event.stopImmediatePropagation();
                //     }
                // );
            });
            
            elem.bind('click',function(e){
                e.stopPropagation();
            });
            $document.bind('click',function(){
                scope.hideCalendar();
            });

            scope.$watch("first_year", function(newval, oldval) {
                if (newval) {
                    scope.first_year = parseInt(newval);
                    // scope.secondyearlist = [];
                    var j = 0;
                    // for (i = scope.first_year; i <= (scope.first_year + 5); i++) {
                    //     scope.secondyearlist[j++] = i;
                    // }
                    //////console.log(scope.first_year);
                    // if(scope.first_selected_date){
                    //     scope.clearfirstcal(); 
                    // }
                   
                    scope.gorightwithfirst(scope.first_month - 1, newval);



                }
            });

            

            // end for second

            template = '<div class="vmf-calContainer" ng-click="displayCalendar();" ><input ng-model="show_date"  class="vmf-calInput" type="text" id="coverageDates" placeholder="Select Dates" readonly><span class="calIcon" ></span></div>' +
                '<div class="calendercontainersingle">' +
                '<div class="vmf-dateContainer tableBorder">' +
                '   <div class="calSubHeader">' +
                '       <span class="dateSubHead">Year' +
                '       </span>' +
                '       <div vmf-select-list model="first_year" list="firstyearlist"  pre-select-ind="'+ curIndex +'" class="yearDropDown" show-arrows="false">' +
                '       </div>' +
                '   </div>' +
                '<table class="table-condensed first-calendar">' +
                '   <thead>' +
                '      <tr>' +
                '         <th class="prev available"><a ng-click="goleftwithfirst(first_month,first_year);" ><span class="arrow-left"></span></a></th>' +
                '         <th colspan="5" tabindex="0" ng-keyup="onKeydownfirstcal($event,first_month,first_year);" class="month" ng-bind="convertMonth(first_month);"> </th>' +
                '         <th class="next available"><a ng-click="gorightwithfirst(first_month,first_year);" ><span class="arrow-right"></span></a></th>' +
                '      </tr>  ' +
                '      <tr>' +
                '         <th>S</th>' +
                '         <th>M</th>' +
                '         <th>T</th>' +
                '         <th>W</th>' +
                '         <th>T</th>' +
                '         <th>F</th>' +
                '         <th>S</th>' +
                '      </tr>' +
                '   </thead>' +
                '   <tbody ng-mouseleave = "leavingfirstcal();" ng-swipe-left="gorightwithfirst(first_month,first_year);" ng-swipe-right="goleftwithfirst(first_month,first_year);"  >' +
                '      <tr>' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [0,1,2,3,4,5,6]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +

                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [7,8,9,10,11,12,13]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +

                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [14,15,16,17,18,19,20]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr>' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [21,22,23,24,25,26,27]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr ng-if="checkEmpty(first_cal[28]);" >' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [28,29,30,31,32,33,34]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +
                '      </tr>' +
                '      <tr ng-if="checkEmpty(first_cal[35]);" >' +
                '         <td ng-mouseover="hoverFirstDate(i,first_month,first_year);" tabindex="0" ng-keyup="keyDateChangeFirst($event,i,first_month,first_year);" ng-click="selectFirstDate(i,first_month,first_year);" ng-repeat="i in [35,36,37,38,39,40,41]" class="{{i}}" data-title="r0c0"><a ng-if="checkEmpty(first_cal[i]);">{{first_cal[i]}}</a></td>' +
                '      </tr>' +
                '   </tbody>' +
                '</table>' +
                '</div>' +
                '</div>';




            elem.append(template);
            // if(scope.customClass){
            //     angular.forEach(scope.customClass, function(item) {
            //         elem.find(item.selector).addClass(item.cusclass);


            //     });
            // }
            $compile(elem.contents())(scope);


        }

    };
}]);
/*coachmarks directives*/
app.directive("vmfCoachMarks", function($compile,$timeout,$window){
	var isCoachMarkOn = false,
		template = '<div class="coachmarks-viewCoachMarks tourthispageLink" ng-click="showCoachMarks()">Tour this Page</div>';
 	return {
	 	restrict:"AE",
	 	scope:{
	 		config:'='
	 	},
	 	replace:true,
	 	template:template,
	 	link:function(scope,element,attr){	

	 		var windowObject = angular.element($window),
	 			docHeight; 	

			scope.currentPage = 0;

			// Initiaze the Coach Mark
			scope.initMethod = function(){
				if(scope.config.isCoachMarksDisplay===true){
					angular.element(".coachmarks-viewCoachMarks").show();
					scope.sortCoachMarks(); 					
				}
			};

			scope.sortCoachMarks = function() {
				scope.currentPageCoachMarks = [];	
				scope.config.coachMarksItems.forEach(function(coachMarks) {
					if (angular.element(coachMarks.domReference).is(':visible')) {
						scope.currentPageCoachMarks.push(coachMarks);
					}
				});	
				scope.currentPageCoachMarks.sort(function(a,b) { return parseFloat(a.seqOrder) - parseFloat(b.seqOrder); });	 		
				scope.pagination = scope.currentPageCoachMarks;
			};

			scope.initMethod();

	        angular.element("body").on('keyup', function(event) {
                if (scope.config.closeOnEscape && event.keyCode === 27 && isCoachMarkOn){
                    scope.hideOverlay();
                }
                if (isCoachMarkOn && event.keyCode === 9){
                		event.preventDefault();
            	}            	
	        });			        
			
			//closing the overlay when click on anywhere of the modal window
			scope.anyWhereClick = function() {
				if(scope.config.clickAnyWhereClose && isCoachMarkOn){
					scope.hideOverlay();
				}
			};

			scope.showCoachMarks = function(){
				isCoachMarkOn = true;
				docHeight = angular.element(document).height();
    			var coachElement = 	'<div class="coachmarks-closeBtn" ng-click="hideOverlay()"></div> <div ng-click = "anyWhereClick()" class="coachmarks-coach-overlay"></div>';
					coachElement += '<div class="coachmarks-paging"><button  class="coachmarks-leftNavigation" ng-disabled="disabledlefttrue" ng-click="gotoPage(currentPage-1,$event)"></button>';
					coachElement += '<span ng-repeat="page in pagination" class="coachmarks_pagination" ng-click="gotoPage($index,$event)"></span>';
					coachElement += '<button class="coachmarks-rightNavigation" ng-disabled="disabledrighttrue"  ng-click="gotoPage(currentPage+1,$event)"></button></div>';

				angular.element("body").append($compile(coachElement)(scope));
				scope.gotoPage(0,null);
				
				$timeout(function () { angular.element(".coachmarks-paging").find('span:eq(0)').addClass('active'); });				
			};

			scope.hideOverlay = function(){
				isCoachMarkOn = false;
				angular.element( ".coachmarks-coach-overlay, .coachmarks-paging, .coachmarks-closeBtn").remove();
				scope.removecoachMarks();
				angular.element('body').off('keyup',function() {});
			};


			scope.createcoachMarker = function (){
				scope.removecoachMarks();
				angular.element('<div class="coachmarks-disabled-layer"></div>' + '<div class="coachmarks-lineDiv"></div>' + '<div class="coachmarks-hintHolder"><div class="coachmarks-title"></div><div class="coachmarks-description"></div></div>' ).appendTo("body");	    					
				scope.resizeCoachMarks();			
			};

		    windowObject.bind('resize', function() {
		    	 if (isCoachMarkOn){
		    	 	 scope.sortCoachMarks();
		    	 	 $timeout(function () { angular.element(".coachmarks-paging span").removeClass('active').eq(scope.currentPage).addClass('active'); });
			    	 scope.removecoachMarks();
			    	 scope.createcoachMarker();	
		    	 }
		    });			

			scope.resizeCoachMarks =function(){

				var hintHolderDom = angular.element(".coachmarks-hintHolder"),
					hintHolderTitle = angular.element(".coachmarks-title"),
					hintHolderDescription = angular.element(".coachmarks-description"),
					coachMarkOverlay = angular.element(".coachmarks-coach-overlay"),
					coachMarkLineDiv = angular.element(".coachmarks-lineDiv"),
					DisableLayer = angular.element(".coachmarks-disabled-layer"),

					coachMarkObj = scope.currentPageCoachMarks[scope.currentPage],
					coachMarkDom = angular.element(coachMarkObj.domReference),
					coachMarkTitle = coachMarkObj.title,
					coachMarkDescription = coachMarkObj.description,
					coachMarkPosition = coachMarkObj.descPosition.toLowerCase(),

					width = coachMarkDom.outerWidth(),
					height = coachMarkDom.outerHeight(),
					objTop = coachMarkDom.offset().top,
					objLeft = coachMarkDom.offset().left;
					
					hintHolderTitle.text(coachMarkTitle);	
					hintHolderDescription.text(coachMarkDescription);	

				var hintHolderHeight = hintHolderDom.outerHeight(),
					hintHolderWidth = hintHolderDom.outerWidth(),
					zIndexOverlay = coachMarkOverlay.css("z-index"),
					DisableLayerBorderWidth = DisableLayer.css("border-width").replace('px',''),
					lineDivDimension = 32,

					lineDivAttr, hintHolderAttr, elemDisabledAttr;
					scope.constructOverlay(coachMarkDom);

					coachMarkPosition = (windowObject.width() <= width + hintHolderWidth + lineDivDimension + 4) ? "bottom"  : coachMarkPosition;
				
				switch(coachMarkPosition) {
					case "right":
						lineDivAttr = {
							"width" : lineDivDimension,
							"top" : objTop + height/2,
							"left": width + objLeft,
							"z-index" : parseInt(zIndexOverlay) + 10000000
						};
						hintHolderAttr = {
							"top": objTop + height/2 - hintHolderHeight/2,
							"left":Math.max(0, width+objLeft+lineDivDimension),							
							"z-index" : parseInt(zIndexOverlay) + 10000000
						};
					break;

					case "left":
						lineDivAttr = {
							"width": lineDivDimension,
							"top" : (objTop+height/2),
							"left" : (objLeft-lineDivDimension),
							"z-index" : parseInt(zIndexOverlay) + 10000000
							};

						hintHolderAttr = {
							"top":objTop + height/2- hintHolderHeight/2,
							"left": Math.max(0, objLeft-lineDivDimension-hintHolderWidth),	
							"z-index" : parseInt(zIndexOverlay) + 10000000
						};
					break;

					case "top":
						
						lineDivAttr = {
							"height": lineDivDimension,
							"top" : objTop-lineDivDimension,
							"left" : objLeft+width/2,
							"z-index" : parseInt(zIndexOverlay) + 10000000
							};
						hintHolderAttr = {
							"top" : objTop-lineDivDimension-hintHolderHeight,
							"left": Math.max(0, objLeft+width/2- hintHolderWidth/2 ),
							"z-index" : parseInt(zIndexOverlay) + 10000000
						};

						if(angular.ISFF){ hintHolderAttr.top = hintHolderAttr.top+1; }
					break;

					default:
						lineDivAttr = {
							"height" : lineDivDimension,
							"top" : objTop+height,
							"left" : objLeft+(width/2),
							"z-index" : parseInt(zIndexOverlay) + 10000000
						};
						hintHolderAttr = {
							"top" : objTop+height+lineDivDimension,
							"left" : Math.max(0, objLeft + width/2 - hintHolderWidth/2),
							"z-index" : parseInt(zIndexOverlay) + 10000000
						};	 
					break;
				}

				/* Fix position to bottom on defualt if its doesnt have enough space to accomodate */
				if( hintHolderAttr.left <= 0) {
						lineDivAttr = {
							"height" : lineDivDimension,
							"top" : objTop+height,
							"left" : objLeft+(width/2),
							"z-index" : parseInt(zIndexOverlay) + 10000000
						};
						hintHolderAttr = {
							"top" : objTop+height+lineDivDimension,
							"left" : Math.max(0, objLeft + width/2 - hintHolderWidth/2),
							"z-index" : parseInt(zIndexOverlay) + 10000000
						};
				}

				/* fix for ISIE7 box model issue */
				if(!angular.ISIE7) {
					width += DisableLayerBorderWidth * 2;
					height += DisableLayerBorderWidth * 2;
				} else {
					if (lineDivAttr.width) {
						lineDivAttr.width = parseInt(lineDivAttr.width) - DisableLayerBorderWidth;
					} else if (lineDivAttr.height){
						lineDivAttr.height = parseInt(lineDivAttr.height) - DisableLayerBorderWidth;
					}
				}

				elemDisabledAttr = {
					"width":width,
					"height":height,
					"left":objLeft-DisableLayerBorderWidth,
					"top":objTop-DisableLayerBorderWidth,
					"z-index": parseInt(zIndexOverlay) + 10000000
				};				
				
				coachMarkLineDiv.css(lineDivAttr);
				hintHolderDom.css(hintHolderAttr);
				DisableLayer.css(elemDisabledAttr);

				angular.element("html,body").animate( {scrollTop: objTop-(angular.element(window).height()/3) }, "slow");		
			};				
			

			scope.removecoachMarks = function(){
				angular.element(".coachmarks-coach-overlay .shadowlayer").remove();
				angular.element(".coachmarks-disabled-layer, .coachmarks-lineDiv, .coachmarks-hintHolder").remove();
			};

			scope.gotoPage = function(index,event) {
				if(event !== null) {
				 	event.stopPropagation();
				}
				angular.element(".coachmarks-paging").find('span.active').removeClass('active');
				scope.currentPage = index || 0 ;
				scope.disabledlefttrue = scope.disabledrighttrue  =false; 

				if ( scope.currentPage === 0 ) {
					scope.disabledlefttrue = true; 
				}
				if ( scope.currentPage === scope.pagination.length-1 ) {
					scope.disabledrighttrue = true; 
				}
				scope.createcoachMarker();
				angular.element(".coachmarks-paging").find('span').eq(scope.currentPage).addClass('active');
			};


			scope.constructOverlay = function(DOM) {
				var offset = angular.element(DOM).offset(),
					height = angular.element(DOM).outerHeight(),
					width = angular.element(DOM).outerWidth(),
					left =  offset.left,
					top = offset.top,
					bottom = top + height,
					right = left + width,
					docWidth = angular.element(document).width();

				
				angular.element('.coachmarks-coach-overlay .shadowlayer').remove();
				innerOverlay(0, 0, docWidth, top);						// top overlay
				innerOverlay(top, 0, left, height);						// left overlay		 
				innerOverlay(bottom, 0, docWidth, docHeight-bottom);	// bottom overlay
				innerOverlay(top, right, docWidth-right, height);		// right overlay

				function innerOverlay(top,left,width,height) {
					var innerOverLay = angular.element("<div class='shadowlayer'> </div>");
					innerOverLay.css({ "top" : top, "left" : left, "width" : width, "height" : height});
					angular.element('.coachmarks-coach-overlay').append($compile(innerOverLay)(scope));
				}

			};
			scope.$on('$destroy', function() {
		        scope.hideOverlay();
			});					
	 	}	
	 };

});


/*   Comobo box Directive     */


app.directive('vmfComboBox', ['$compile', '$timeout', '$document', function($compile, $timeout, $document) {
    return {
        restrict: 'EA',
        scope: {
            model: '=',
            options: '=',
            hint: '@',
            comboDisabled: '='
        },
        link: function(scope, elem, attrs) {
            var template;
            
            if(scope.comboDisabled) {
                // console.log('disabled');   
                template = '<div class="vmf-combobox combobox-disabled" tabindex="1" ng-keyDown="keyComboAction($event)" class="searchArea"><input type="text" placeholder="{{hint}}" ng-model="model" autocomplete="off" class="vmf-comboInput" disabled ng-click="$event.stopPropagation();" /><button type="button" class="searchBtn vmf-comboButton" ng-click="toggleDropdown($event)" ng-keyDown="toggleDropdownKey($event)" disabled><span class="vmf-comboBtnImg"></span></button>';
            }
            else {
                template = '<div class="vmf-combobox" tabindex="1" ng-keyDown="keyComboAction($event)" class="searchArea"><input type="text" placeholder="{{hint}}" ng-model="model" autocomplete="off" class="vmf-comboInput" ng-click="$event.stopPropagation();" /><button type="button" class="searchBtn vmf-comboButton" ng-click="toggleDropdown($event)" ng-keyDown="toggleDropdownKey($event)"><span class="vmf-comboBtnImg"></span></button>';
            }

            scope.options.sort();
            
            template += '<div class="vmf-combobox-filter-dropdown searchWrap"><ul class="vmf-combobox-suggest">';
            
            template += '<li class="vmf-combobox-opt" ng-repeat="item in filteredData = (options | filter:model:comparator)" ng-bind-html="item | comboBoxHighlight:model:$index:selectedIndex:filterDisabled" ng-click="optionSelect($event, $index, item)" ></li>';

            template += '</ul></div></div>';

            elem.append(template);
            $compile(elem.contents())(scope);
            
            var ul = elem.find('div.vmf-combobox-filter-dropdown');

            var scrollPane, scrollPaneApi;

            $timeout(function() {
          

                    scrollPane = ul.jScrollPane({
                        autoReinitialise: true,
                        showArrows: true,
                        verticalArrowPositions: 'after'
                    });
               
                    scrollPaneApi = scrollPane.data('jsp');
            });
            
            scope.currentIndex = -1;
            var lowestEleIndex = 8;
            var lowestEleHeight = 235;
            scope.selectedIndex = -1;
            scope.currentHeight = 0;

            scope.keyComboAction = function($event) {
                
                var list, dd;
                //console.log('executing from input');
                
                if($event.which === 40) {
                    dd = elem.find('div.vmf-combobox-filter-dropdown');
                    if(dd.is(':visible')) {
                        $event.preventDefault();
                        list = elem.find('li.vmf-combobox-opt');

                        if(scope.currentIndex < list.length - 1) {
                            elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-hover'); 
                            scope.currentIndex += 1;
                            // console.log(angular.element(list[scope.currentIndex]).height());
                            scope.currentHeight += angular.element(list[scope.currentIndex]).height();
                            
                            angular.element(list[scope.currentIndex]).addClass('vmf-combobox-opt-hover');
                            list[scope.currentIndex].focus();
                            if(scope.currentHeight >= 235) {
                                scrollPaneApi.scrollToElement(list[scope.currentIndex]);
                                lowestEleIndex = scope.currentIndex;
                                lowestEleHeight = scope.currentHeight;
                            }
                        }   
                    }
                    else {
                        angular.element('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-hover'); 
                        scope.currentIndex = -1;
                        lowestEleIndex = 8;
                    }    

                    // console.log(list);                                                       
                }
                else if($event.which === 38) {
                    dd = elem.find('div.vmf-combobox-filter-dropdown');
                    if(dd.is(':visible')) {
                        $event.preventDefault();
                        list = elem.find('li.vmf-combobox-opt'); 

                        if(scope.currentIndex > 0) {
                            elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-hover'); 
                            scope.currentIndex -= 1;
                            scope.currentHeight -= angular.element(list[scope.currentIndex]).height();
                           
                            angular.element(list[scope.currentIndex]).addClass('vmf-combobox-opt-hover');
                            list[scope.currentIndex].focus();
                            if(lowestEleHeight - scope.currentHeight >= 200) {
                                scrollPaneApi.scrollToElement(list[scope.currentIndex]);
                                lowestEleIndex -= 1;
                                lowestEleHeight -= angular.element(list[lowestEleIndex]).height();
                            }
                           
                        }   
                    }
                    else {
                        angular.element('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-hover'); 
                        scope.currentIndex = -1;
                        lowestEleIndex = 8;
                    }    

                    
                }
                else if($event.which === 13) {
                    $event.preventDefault();
                    list = elem.find('li.vmf-combobox-opt'); 
                     // console.log('select');console.log(scope.currentIndex);
                    if(scope.currentIndex >= 0 && scope.currentIndex < list.length) {

                        scope.updating = true;
                        scope.model = angular.element(list[scope.currentIndex]).text();
                        
                        elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-selected vmf-combobox-opt-hover'); 
                        angular.element(list[scope.currentIndex]).addClass('vmf-combobox-opt-selected');

                        angular.forEach(scope.preList, function(listItem, index) {
                    
                            if(angular.element(listItem).text() === scope.model) {
                                scope.currentIndex = index;
                                scope.selectedIndex = index;                        
                            }
                        });

                        

                        /* resetting currentIndex */
                        scope.currentIndex = -1;
                        lowestEleIndex = 8;
                    }
                    else {
                        elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-selected');
                        scope.selectedIndex = -1;
                    }
                  
                        elem.find('.vmf-combobox-filter-dropdown').hide();
                        scope.currentIndex = -1;
                        lowestEleIndex = 8;
                     

                }
                $event.stopPropagation();
               

            };

            scope.filterDisabled = false;

            scope.toggleDropdown = function($event) {
                if(!scope.comboDisabled) {
                    var dd = elem.find('div.vmf-combobox-filter-dropdown');
                    if(dd.is(':visible')) {
                        elem.find('.vmf-combobox').removeClass('vmf-combobox-active');
                        elem.parent().closest('.vmf-comboWrap').removeClass('vmf-combobox-active');
                        dd.hide();
                    }
                    else {
                        scope.filterDisabled = true;
                        dd.show();
                        elem.find('.vmf-combobox').addClass('vmf-combobox-active'); 
                        elem.parent().closest('.vmf-comboWrap').addClass('vmf-combobox-active'); 
                        
                        // console.log(list);
                        if(scope.selectedIndex !== -1) {
                            $timeout(function() {
                                var list = elem.find('li.vmf-combobox-opt');
                                // console.log('scroling to ' + scope.selectedIndex);
                                $timeout(function() {
                                    scrollPaneApi.scrollToElement(list[scope.selectedIndex]);
                                }, 700);   
                                scope.currentIndex = scope.selectedIndex;
                                if(scope.selectedIndex >= 9) {
                                    lowestEleIndex = scope.selectedIndex;
                                }    

                            });

                        }    

                    }

                    $event.stopPropagation();
                }
            };

            scope.toggleDropdownKey = function($event) {
                $event.preventDefault();
                if($event.which === 13) {
                    scope.toggleDropdown($event);

                    var list = elem.find('li.vmf-combobox-opt'); 
                     // console.log('select');console.log(scope.currentIndex);
                    if(scope.currentIndex >= 0 && scope.currentIndex < list.length) {

                        scope.updating = true;
                        scope.model = angular.element(list[scope.currentIndex]).text();
                        scope.selectedIndex = scope.currentIndex;

                        elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-selected vmf-combobox-opt-hover'); 
                        angular.element(list[scope.currentIndex]).addClass('vmf-combobox-opt-selected');

                        /* resetting currentIndex */
                        scope.currentIndex = -1;
                        lowestEleIndex = 8;
                    }
                }
            };

            $timeout(function(){
                scope.preList = elem.find('li.vmf-combobox-opt');
            });    

            scope.optionSelect = function($event, $index, item) {
                // console.log('optionSelect');
                // console.log($index);
                
                scope.model = item; 
                scope.updating = true;

                angular.element('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-selected'); 

                list = elem.find('li.vmf-combobox-opt'); 
                angular.element(list[$index]).addClass('vmf-combobox-opt-selected');
                
                angular.forEach(scope.preList, function(listItem, index) {
                    
                    if(angular.element(listItem).text() === item) {
                        scope.currentIndex = index;
                        scope.selectedIndex = index;                        
                    }
                });
                
                elem.find('div.vmf-combobox-filter-dropdown').hide();
              
                
            };

            scope.updating = false;

            scope.$watch('model', function(n, o) {
                scope.filterDisabled = false;
                $timeout(function(){
                    if(n && n.length >= 1) {
                        // console.log(scope.updating);
                        if(!scope.empty && !scope.updating) {               

                            elem.find('.vmf-combobox-filter-dropdown').show();
                            scope.updating = false; 
                           
                        }
                      
                        else {
                            elem.find('.vmf-combobox-filter-dropdown').hide();
                            scope.updating = false; 
                        }    
                    }
                    else{
                        elem.find('div.vmf-combobox-filter-dropdown').hide();
                        elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-hover');
                        elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-selected');
                        scope.currentIndex = -1;
                        lowestEleIndex = 8;      
                        scope.selectedIndex = -1;                     
                       
                    }
                });
                    
            });

            scope.empty = false;

            scope.scrollDestroyed = false;

            scope.$watchCollection('filteredData', function(n, o) {
                
                if(n.length === 0) {
                    scope.empty = true;
                    // console.log(true);
                    elem.find('.vmf-combobox-filter-dropdown').hide();
                }
                else {
                    scope.empty = false;
                    // console.log('not empty');
                }

                if(n.length < 9 && !scope.scrollDestroyed) {
                    // console.log('destroy');console.log(scrollPaneApi);
                    scrollPaneApi.destroy();
                    scope.scrollDestroyed = true;
                }
                else if(n.length >= 9 && scope.scrollDestroyed) {
                    
                    $timeout(function() {
                        
                        ul = elem.find('div.vmf-combobox-filter-dropdown');
                   
                        scrollPane = ul.jScrollPane({
                            autoReinitialise: true,
                            showArrows: true,
                            verticalArrowPositions: 'after'
                        });

                        $(".jspDrag").bind('click',function(event) {
                                event.stopImmediatePropagation();
                            }
                        );
                   
                        scrollPaneApi = scrollPane.data('jsp');

                        scope.scrollDestroyed = false;       
                    });
                    
                }

                elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-hover');
                scope.currentIndex = -1;
                lowestEleIndex = 8;
               
            });
            
            scope.$watch('comboDisabled', function(n, o) {
                if(n && n === true) {
                    elem.find('.vmf-comboInput').prop( 'disabled', true );
                    elem.find('.vmf-combobox').addClass('combobox-disabled');
                }
                else if(n === false) {
                    elem.find('.vmf-comboInput').prop( 'disabled', false );
                    elem.find('.vmf-combobox').removeClass('combobox-disabled');   
                }
            });

            scope.comparator = function(actual, expected) {
                if(!scope.filterDisabled) {
                    var actualWords = actual.split(' ');
                    var expectedWords = expected.split(' ');
                    // console.log(actualWords); console.log(expectedWords);

                    var i, j;

                    var match = true;

                    for(i = 0; i < expectedWords.length; i++) {
                        expectedWords[i] = expectedWords[i].toLowerCase();
                        // console.log('*****' + expectedWords[i]);
                    }    

                    for(j = 0; j < actualWords.length; j++) {
                        actualWords[j] = actualWords[j].toLowerCase();
                    }    

                    // console.log(actualWords); console.log(expectedWords);
                    var startingIndex = 0;
                    for(i = 0; i < expectedWords.length; i++) {
                        var found = false;

                        
                        // console.log('startingIndex ' + startingIndex);

                        for(j = startingIndex; j < actualWords.length; j++) {
                            // console.log('matching ' + expectedWords[i]);
                            // console.log(actualWords[j].indexOf(expectedWords[i]));
                            if(actualWords[j].indexOf(expectedWords[i]) !== -1) {
                                found = true;
                                // console.log('matching' + j);
                                startingIndex = j + 1;
                                // console.log('startingIndex inside ' + startingIndex);                            
                                break;            
                            }
                        }

                        if(!found) {
                            return false;
                        }

                        // console.log('startingIndex outside ' + startingIndex);
                    }

                    return true;
                }
                else {
                    return true;
                }    
            };

            $document.on('click', function($event) {
                if(!angular.element($event.target).hasClass('jspDrag') && !angular.element($event.target).hasClass('jspTrack')) {
                    elem.find('div.vmf-combobox-filter-dropdown').hide();
                    elem.find('li.vmf-combobox-opt').removeClass('vmf-combobox-opt-hover');
                    elem.find('.vmf-combobox').removeClass('vmf-combobox-active');
                    elem.parent().closest('.vmf-comboWrap').removeClass('vmf-combobox-active');
                    scope.currentIndex =-1;
                    lowestEleIndex = 8;
                }    
            });


            elem.find('.vmf-comboInput').focus(function() {
                
                elem.find('.vmf-combobox').addClass('vmf-combobox-active');
                elem.parent().closest('.vmf-comboWrap').addClass('vmf-combobox-active');
                

            });
           
        }
    };
}])
.filter('comboBoxHighlight', function() {
    return function(text, phrases, currentIndex, selectedIndex, filterDisabled) {
        /* return position of ith occurrence of m in str */
        var getPosition = function(str, m, i) {
            return str.split(m, i).join(m).length;
        };

        if(filterDisabled && currentIndex !== selectedIndex) {
            text = '<a href="javascript: void(0);" tabindex="-1">' + text + '</a>';
            return text;
        }
        else {    
            
            if (phrases) {
                phrases= phrases.split(' ');
                
                angular.forEach(phrases, function (phrase, index) {
                    // console.log(getPosition(text, ' ', index));
                    /* word boundary */
                    var splitIndex = getPosition(text, ' ', index);  
                    // console.log('replacing text');console.log(text);
                    
                    if(splitIndex !== 0) {
                        var subText = text.substring(splitIndex + 1).replace('<span>','', 'gi');
                        subText = subText.replace('</span>', '', 'gi');
                        text = text.substring(0, splitIndex + 1) +  subText.replace(new RegExp('('+phrase+')', 'gi'), '<span>$1</span>');   
                        
                    }
                    else {
                        text = text.replace(new RegExp('('+phrase+')', 'gi'), '<span>$1</span>');
                        
                    }  

                });    

            }
            
            text = '<a href="javascript: void(0);" tabindex="-1">' + text + '</a>';
            
            return text;
        }
        
    };
});

app.service("ModalCloseCheckService", function() {

	var _showModal = false;

	this.setModalShow = function(value) {
		_showModal = value;
	};

	this.getModalShow = function() {
		return _showModal;
	};
});

app.directive('vmfFileUpload', ['$parse', '$timeout', '$q', '$rootScope', 'ie7hideService', 'ModalCloseCheckService',
function($parse, $timeout, $q, $rootScope, ie7hideService, ModalCloseCheckService) {
	return {
		restrict : 'EA',
		templateUrl : "dev/modules/FileUpload/template/template.html",
		scope : {
			options : "=",
			heading : "@",
			minSpeed : "@"
		},
		link : function($scope, element, attrs) {
			$scope.fileUploading = false;
			$scope.minimizedView = false;
			$scope.filesList = [];
			$scope.prev = [];
			$scope.attrib = [];
			$scope.progress = [];
			$scope.retry = [];
			$scope.abort = [];
			$scope.success = [];
			$scope.progressAll = 0;
			$scope.failedUpload = [];
			$scope.activeUpload = 0;
			$scope.modalShown = false;
			$scope.flag = ie7hideService.getStatus();
			$scope.warningMsg = "Active uploads in progress";
			$scope.modernBrowser = 'draggable' in document.createElement('span');
			$scope.isSlowNet = false;
			$scope.oldIEUploadFileCount = 0;
			// In KB/s
			if ($scope.minSpeed === undefined) {
				$scope.minSpeed = 1000;
			}
			var ajaxC = [];
			var count = "";
			var complete = [];
			var selectedFiles = [];
			var totalLoaded = 0;
			var totalLoadBeforeProgressAll = 0;
			var totalSize = 0;
			var partialLoaded = [];
			var temp = 0;
			var filedragger = null;
			var $doneBtn = null;
			var oldIEIndexArr = [];
			var now;
			var then = null;
			var totalForSpeed = 0;
			var removedUploads = 0;

			function disableDragAndDropHandler(e) {
				e = e || event;
				e.preventDefault();
			}

			function disableDragAndDropInWindow() {
				if ($scope.modernBrowser && window.addEventListener) {
					window.addEventListener("dragover", disableDragAndDropHandler, false);
					window.addEventListener("drop", disableDragAndDropHandler, false);
				}
			}

			function enableDragAndDropInWindow() {
				if ($scope.modernBrowser && window.removeEventListener) {
					window.removeEventListener("dragover", disableDragAndDropHandler);
					window.removeEventListener("drop", disableDragAndDropHandler);
				}
			}

			function resetAll() {
				$scope.fileUploading = false;
				$scope.filesList = [];
				$scope.prev = [];
				$scope.attrib = [];
				$scope.progress = [];
				$scope.retry = [];
				$scope.abort = [];
				$scope.success = [];
				$scope.progressAll = 0;
				$scope.failedUpload = [];
				$scope.activeUpload = 0;
				$scope.minimizedView = false;
				ajaxC = [];
				count = "";
				complete = [];
				selectedFiles = [];
				totalLoaded = 0;
				totalLoadBeforeProgressAll = 0;
				totalSize = 0;
				partialLoaded = [];
				temp = 0;
				oldIEIndexArr = [];
				$scope.oldIEUploadFileCount = 0;
				then = null;
				totalForSpeed = 0;
				removedUploads = 0;

			}

			// IFrame Upload for IE < 10
			function createIframeUpload() {
				var len = $scope.filesList.length;
				$(".ie-file-upload").prepend('<iframe class="file-upload-iframe" name="fd_' + len + '" id="fd_' + len + '" src="javascript:false" style="display:none"></iframe>');
				$scope.oldIEUploadFileCount++;
				ieFileName = ($("#fileUploaderSec").val().split("\\").pop());
				$scope.$apply(function() {
					$scope.fileUploading = true;
					$scope.progressAll = 0;
					$scope.showCompleteMsg = false;
					$scope.filesList.push({
						fileName : ieFileName,
						uploadInProgress : true,
						success : false,
						current : 0,
						total : 0,
						size : 0,
						loaded : 0,
						uploadFailed : "",
						uploadCancelled : "",
						abort : true,
						overSizeLimit : false,
						percent : 0,
						visible : true
					});
				});
				$("#FormFileUploader").attr("target", "fd_" + len);

				//Binding Load event to newly created IFrame
				$("#fd_" + len).load(function() {
					var iframeId = $(this).attr("id").split("_")[1];
					$scope.$apply(function() {
						$scope.filesList[iframeId].percent = 100;
						$scope.filesList[iframeId].uploadInProgress = false;
						$scope.filesList[iframeId].success = true;
						$scope.filesList[iframeId].abort = false;
						$scope.oldIEUploadFileCount--;
						if ($scope.oldIEUploadFileCount === 0) {
							$scope.progressAll = 100;
						}
					});
					$(this).remove();
				});
				document.getElementById("FormFileUploader").submit();

				//Input file value is readonly in ie<=10.Workaround to enable to upload the last selected file again.
				document.getElementById("FormFileUploader").reset();
			}

			function checkIfUploadsinProgress() {
				var inProgress = false;
				for (var i = 0, j = $scope.filesList.length; i < j; i++) {
					if ($scope.filesList[i].uploadInProgress) {
						inProgress = true;
						break;
					}
				}
				return inProgress;
			}

			function checkIfAllUploadsComplete() {
				var val = true;
				for (var i = 0, j = $scope.filesList.length; i < j; i++) {
					if ($scope.filesList[i].overSizeLimit || $scope.filesList[i].uploadFailed || $scope.filesList[i].uploadCancelled) {
						val = false;
						break;
					}
				}
				return val;
			}

			function errorHandler(event, resp) {
				var isUploading;
				$scope.$apply(function() {
					$scope.filesList[resp.id].uploadFailed = true;
					$scope.filesList[resp.id].uploadCancelled = false;
					$scope.filesList[resp.id].uploadInProgress = false;
					$scope.attrib[resp.id].timeRemaining = 0.00;
					$scope.attrib[resp.id].formattedTime = "";
					$scope.activeUpload--;
					totalSize = totalSize - selectedFiles[resp.id].size;
					totalLoaded -= partialLoaded[resp.id];
					partialLoaded[resp.id] = 0;
					if ($scope.failedUpload.indexOf(resp.id) === -1) {
						$scope.failedUpload.push(resp.id);
					}
					isUploading = checkIfUploadsinProgress();
					if (!isUploading) {
						$scope.progressAll = 0;
					}
				});
				ModalCloseCheckService.setModalShow(isUploading);
			}

			function completeHandler(event, resp) {
				var isUploading;
				complete[resp.id] = true;
				$scope.$apply(function() {
					$scope.filesList[resp.id].success = true;
					$scope.filesList[resp.id].uploadInProgress = false;
					$scope.filesList[resp.id].abort = false;
					$scope.abort[resp.id] = false;
					$scope.retry[resp.id] = false;
					$scope.success[resp.id] = true;
					$scope.activeUpload--;
					if ( typeof $scope.attrib[resp.id] === 'undefined') {
						partialLoaded[resp.id] = selectedFiles[resp.id].size;
						$scope.attrib[resp.id] = {
							timeRemaining : 0
						};
						totalLoaded += selectedFiles[resp.id].size;
					}
					$scope.attrib[resp.id].timeRemaining = 0.00;
					$scope.filesList[resp.id].percent = 100;
					totalLoaded = totalLoaded - partialLoaded[resp.id] + selectedFiles[resp.id].size;
					$scope.progressAll = Math.floor(100 * totalLoaded / totalSize);
					totalLoaded -= selectedFiles[resp.id].size;
					totalSize -= selectedFiles[resp.id].size;
					for (var i = 0; i < $scope.failedUpload.length; i++) {
						if ($scope.failedUpload[i] === resp.id) {
							$scope.failedUpload.splice(i, 1);
						}
					}
					isUploading = checkIfUploadsinProgress();
				});
				ModalCloseCheckService.setModalShow(isUploading);
			}

			function unitSize(bytes) {
				var kb = 1024;
				var mb = kb * 1024;
				var gb = mb * 1024;
				if (bytes >= gb) {
					bytes = (bytes / gb).toFixed(2) + ' GB';
				} else if (bytes >= mb) {
					bytes = (bytes / mb).toFixed(2) + ' MB';
				} else if (bytes >= kb) {
					bytes = (bytes / kb).toFixed(2) + ' KB';
				} else if (bytes > 1) {
					bytes = bytes + ' bytes';
				} else if (bytes === 1) {
					bytes = bytes + ' byte';
				} else {
					bytes = '0 byte';
				}
				return bytes;
			}


			function progressHandler(event, data) {
				if (event.lengthComputable) {
					$scope.$apply(function() {
						var fileListLength = data.id;
						if ($scope.retry[fileListLength]) {
							return;
						}
						$scope.filesList[fileListLength].current = unitSize(event.loaded);
						$scope.filesList[fileListLength].loaded = event.loaded;
						$scope.filesList[fileListLength].percent = Math.round((event.loaded / event.total) * 100);
						if (partialLoaded[data.id]) {
							temp = partialLoaded[data.id];
						}
						partialLoaded[data.id] = event.loaded;
						if (totalLoaded) {
							totalLoaded = totalLoaded - temp;
							totalLoadBeforeProgressAll -= temp;
							temp = 0;
						}
						totalLoaded = totalLoaded + partialLoaded[data.id];
						totalLoadBeforeProgressAll += partialLoaded[data.id];
						if (!then) {
							then = new Date().getTime();
						}
						now = new Date().getTime();
						var diff = now - then;
						var speed, speedInKb;
						// Speed in bytes and Kb
						if (diff > 0) {
							speed = ((totalLoadBeforeProgressAll) / (diff / 1000));
							//.toFixed(2);
							//  In KB/s
							speedInKb = (speed / 1024);
							//.toFixed(2);
							$scope.isSlowNet = (speedInKb < parseFloat($scope.minSpeed, 10));
						}
						$scope.progressAll = Math.floor(100 * totalLoaded / totalSize);
						if (!$scope.prev[fileListLength]) {
							$scope.attrib[fileListLength] = {
								prev : 0,
								speed : 0,
								remainingBytes : 0
							};
						}
						$scope.attrib[fileListLength].speed = event.loaded - $scope.attrib[fileListLength].prev;
						$scope.attrib[fileListLength].prev = event.loaded;
						$scope.attrib[fileListLength].remainingBytes = event.total - event.loaded;
						//$scope.attrib[fileListLength].timeRemaining = ($scope.attrib[fileListLength].remainingBytes / $scope.attrib[fileListLength].speed).toFixed(3);
						$scope.attrib[fileListLength].timeRemaining = $scope.attrib[fileListLength].remainingBytes / speed;
						$scope.attrib[fileListLength].formattedTime = formatTime($scope.attrib[fileListLength].timeRemaining);
					});
				} else {
					console.log("error on uploading, uploading stopped");
				}
			}

			function formatTime(secs) {
				var sec_num = parseInt(Math.round(secs), 10);
				var hours = Math.floor(sec_num / 3600);
				var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
				var seconds = sec_num - (hours * 3600) - (minutes * 60);
				var val = "";
				if (secs > 0 && secs < 1.5) {
					val = parseFloat(secs).toFixed(2) + " secs left";
				} else if (hours > 0) {
					val = hours + " hours left";
				} else if (minutes > 0) {
					val = minutes + " mins left";
				} else if (seconds > 0) {
					val = Math.ceil(seconds) + " secs left";
				}
				return val;
			}

			function formatSpeed(speed) {
				var kb = 1024;
				var mb = kb * 1024;
				var gb = mb * 1024;
				var val = (speed / kb) + 'KB/s';
				if ((speed / gb) >= 1) {
					val = (speed / gb).toFixed(2) + 'GB/s';
				} else if (speed / mb >= 1) {
					val = (speed / mb).toFixed(2) + 'MB/s';
				}
				return val;
			}

			function uploadFile(file) {
				ModalCloseCheckService.setModalShow(true);
				if ("string" === ( typeof count)) {
					count = 0;
				} else {
					count++;
				}
				var fileObj = {
					id : count,
					file : file
				};
				$scope.$apply(function() {
					$scope.showCompleteMsg = false;
					$scope.fileUploading = true;
					$scope.filesList[count] = {
						fileName : file.name,
						uploadInProgress : true,
						success : false,
						current : 0,
						total : unitSize(file.size),
						size : file.size,
						loaded : 0,
						uploadFailed : "",
						uploadCancelled : "",
						abort : true,
						overSizeLimit : false,
						percent : 0,
						visible : true

					};
				});
				selectedFiles[count] = file;
				if (file.size > (1024 * 1024 * 1024 * 5)) {
					$scope.$apply(function() {
						$scope.filesList[count].overSizeLimit = true;
						$scope.filesList[count].percent = 100;
						$scope.filesList[count].abort = false;
						$scope.filesList[count].uploadInProgress = false;
						if (count === 0) {
							$scope.fileUploading = true;
							$scope.progressAll = 100;
						} 
						$scope.attrib[count] = {
							prev : 0,
							speed : 0,
							remainingBytes : 0,
							timeRemaining : 0
						};
					});
					ModalCloseCheckService.setModalShow(checkIfUploadsinProgress());
				} else {
					totalSize = totalSize + file.size;
					var DataToSend = new FormData();
					DataToSend.append("fileToUpload", file);
					$scope.abort[count] = true;
					ajaxC[count] = new XMLHttpRequest();
					if (ajaxC[count].upload) {
						ajaxC[count].upload.addEventListener("progress", function(event) {
							progressHandler(event, fileObj);
						}, false);
						ajaxC[count].addEventListener("error", function(event) {
							errorHandler(event, fileObj);
						}, false);
						ajaxC[count].addEventListener("load", function(event) {
							completeHandler(event, fileObj);
						}, false);
					}
					var date = new Date();
					ajaxC[count].open("POST", $scope.options.fileUploadScriptUrl + "?t=" + date.getTime(), true);
					ajaxC[count].send(DataToSend);
					ajaxC[count].onreadystatechange = function() {
						var index = ajaxC.indexOf(this);
						if (this.readyState === 4 && this.status === 200) {
							$scope.filesList[index].fileNameInServer = JSON.parse(this.responseText).fileName;
						}
					};
					$scope.$apply(function() {
						$scope.activeUpload++;
					});
				}
			}

			function processFile(file) {
				if (file) {
					for (var i = 0; i < file.length; i++) {
						// upload the file
						uploadFile(file[i]);
					}
				}
			}

			function addEvents(filedragger) {
				var fileDropper = filedragger[0];
				if (fileDropper.addEventListener) {
					fileDropper.addEventListener('dragover', function(e) {
						e.dataTransfer.dropEffect = 'move';
						// allows us to drop
						if (e.preventDefault) {
							e.preventDefault();
						}
						//this.classList.add('over');
						return false;
					}, false);
					fileDropper.addEventListener('dragenter', function(e) {
						//	this.classList.add('over');
						return false;
					}, false);

					fileDropper.addEventListener('dragleave', function(e) {
						this.classList.remove('over');
						return false;
					}, false);
					fileDropper.addEventListener('drop', function(e) {
						// Stops some browsers from redirecting.
						if (e.stopPropagation) {
							e.stopPropagation();
						}
						if (e.preventDefault) {
							e.preventDefault();
						}
						/* process the dropped file. */
						processFile(e.dataTransfer.files);
						return false;
					}, false);

				}
			}


			$rootScope.$on("primaryBtnClick", function() {

			});

			$rootScope.$on("modalVisible", function() {
				resetAll();
				disableDragAndDropInWindow();
				ModalCloseCheckService.setModalShow(false);
				$(element).find(".modaless-title").show();

				if (!filedragger) {
					var $elChildren = element.children();
					var reqTime;
					filedragger = $elChildren.find("#file-dropper");
					fileuploaderInput = $elChildren.find("#fileUploader");
					fileuploaderInput1 = $elChildren.find("#fileUploaderSec");
					$doneBtn = $(element).find(".vmf-secondary").filter(function() {
						return $(this).text().trim().toLowerCase() === "done";
					});
					if (fileuploaderInput[0].addEventListener) {
						if ($scope.modernBrowser) {
							fileuploaderInput[0].addEventListener("change", function(event) {
								processFile(event.target.files);
								$(this).val("");
								$(".for-file-reset")[0].reset();
							});
							//IE 10 add file click not triggering on some portions of button.
							if (navigator.userAgent.indexOf("MSIE") > 0) {
								$("#fileUploader").mousedown(function() {
									$(this).trigger('click');
								});
							}
						} else {
							//For ie8-9;
							reqTime = new Date();
							$scope.openUrl = $scope.options.fileUploadScriptUrl + "?t=" + reqTime.getTime();
							//In IE-9 ng-show not working.Workaround for that.
							if ($(".ie-file-upload").css("display") === "none") {
								$(".ie-file-upload").css("display", "block");
							}
							fileuploaderInput1[0].addEventListener("change", function(event) {
								createIframeUpload();
							});
						}
					} else {//for ie7
						$scope.IeFlag = true;
						reqTime = new Date();
						$scope.openUrl = $scope.options.fileUploadScriptUrl + "?t=" + reqTime.getTime();

						fileuploaderInput1[0].attachEvent("onchange", function(event) {
							createIframeUpload();
						});
					}
					addEvents(filedragger);
				}
				$doneBtn.attr("disabled", "disabled").addClass("done-disabled");
			});

			$rootScope.$on("modalMinimized", function() {
				var $vmfFileUpload = element.find(".vmf-file-upload");
				$scope.minimizedView = true;
				$vmfFileUpload.addClass("minimized");
				if ($scope.fileUploading && navigator.userAgent.indexOf('MSIE 7') < 0) {
					$vmfFileUpload.addClass("upload-in-mini");
					$(element).find(".modaless-title").hide();
					var upload = $(element).find(".upload-min").detach();
					$(element).find(".modaless-head").append(upload);
					if (!$scope.modernBrowser) {
						$(".upload-min").addClass("upload-min-old");
					}
				}
				enableDragAndDropInWindow();
			});

			$rootScope.$on("modalMaximized", function() {
				var $vmfFileUpload = element.find(".vmf-file-upload");
				$scope.minimizedView = false;
				$vmfFileUpload.removeClass("minimized");
				$vmfFileUpload.removeClass("upload-in-mini");
				$(element).find(".modaless-title").show();
				var upload = $(element).find(".upload-min").detach();
				$(element).find(".file-upload-wrapper").prepend(upload);
				disableDragAndDropInWindow();
			});

			$rootScope.$on("hideModal", function() {
				if (!checkIfUploadsinProgress()) {
					$scope.fileUploading = false;
					$scope.filesList = [];
					count = "";
					enableDragAndDropInWindow();
				}
			});

			$rootScope.$on("cancelClicked", function() {
				for (var i = 0, j = $scope.filesList.length; i < j; i++) {
					if ($scope.filesList[i].uploadInProgress) {
						$scope.abortAjax(i);
					}
				}
				enableDragAndDropInWindow();
			});

			$scope.getClass = function(file) {
				if (file.overSizeLimit || file.uploadCancelled || file.uploadFailed) {
					return 'failed';
				} else {
					return 'progress-status';
				}
			};

			$scope.calculateTotalTimeRemaining = function(attrib) {
				var total = 0;
				for (var i = 0, j = attrib.length; i < j; i++) {
					total += parseFloat(attrib[i].timeRemaining, 10);
				}
				total = formatTime(total);
				return total;
			};

			$scope.$watch("progressAll", function(newVal, oldVal) {
				if ($doneBtn) {
					if (newVal < 100) {
						$doneBtn.attr("disabled", "disabled").addClass("done-disabled");
					} else {
						totalLoadBeforeProgressAll = 0;
						then = null;
						$doneBtn.removeAttr("disabled").removeClass("done-disabled");
						if (checkIfAllUploadsComplete()) {
							$scope.showCompleteMsg = true;
						}
					}
				}

			});

			$scope.removeFile = function(index) {
				var ajax = new XMLHttpRequest();
				ajax.open("POST", $scope.options.removeFileUrl + "?t=" + new Date().getTime(), true);
				ajax.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
				ajax.send(JSON.stringify({
					fileName : $scope.filesList[index].fileNameInServer
				}));
				$scope.filesList[index].visible = false;
				if ($scope.filesList.length === ++removedUploads) {
					resetAll();
				}
			};

			$scope.abortAjax = function($index) {
				if ($scope.modernBrowser) {
					if (!complete[$index] && !$scope.retry[$index]) {
						if ($scope.activeUpload > 0) {
							$scope.activeUpload--;
						}
						if ($scope.activeUpload === 0) {
							totalLoadBeforeProgressAll = 0;
							then = null;
						}
						$scope.retry[$index] = true;
						$scope.progress[$index] = 'cancelled-class';
						if ($scope.filesList[$index].uploadInProgress) {
							$scope.filesList[$index].uploadInProgress = false;
						}
						if ($scope.filesList[$index].uploadFailed) {
							$scope.filesList[$index].uploadFailed = false;
						}
						$scope.filesList[$index].uploadCancelled = true;
						$scope.attrib[$index] = {
							prev : 0,
							speed : 0,
							remainingBytes : 0,
							timeRemaining : 0
						};
						$timeout(function() {
							ajaxC[$index].abort();
						}, 0);
						totalSize = totalSize - selectedFiles[$index].size;
						totalLoaded -= partialLoaded[$index];
						partialLoaded[$index] = 0;
						var isUploading = checkIfUploadsinProgress();
						ModalCloseCheckService.setModalShow(isUploading);
						//Hide row when cancel is clicked.
						//$scope.filesList[$index].visible = false;
					}
				} else {
					$scope.filesList[$index].visible = false;
					$scope.filesList[$index].uploadInProgress = false;
					$scope.oldIEUploadFileCount--;
					if ($scope.oldIEUploadFileCount === 0) {
						$scope.progressAll = 100;
					}
					if ($scope.filesList.length === ++removedUploads) {
						resetAll();
					}
					document.getElementById("fd_" + $index).contentWindow.document.execCommand('Stop');
					$("#fd_" + $index).remove();
				}
			};

			$scope.retryFailedCases = function() {
				for (var i = 0; i < $scope.failedUpload.length; i++) {
					$scope.retryAjax($scope.failedUpload[i]);
				}
			};

			$scope.retryAjax = function($index) {
				if (!complete[$index]) {
					count = $index;
					if (count > 0) {
						count = count - 1;
					} else {
						count = "";
					}
					$scope.filesList[$index].uploadCancelled = false;
					$scope.progress[$index] = '';
					$scope.retry[$index] = false;
					$timeout(function() {
						uploadFile(selectedFiles[$index]);
					}, 0);

				}
			};

		}
	};
}]);


app.directive('vmfFirstRunExperience', function() {
    return {
        restrict: 'EA',
        transclude: true,
        replace:true,
        scope: {
            images:"=freContent",
            freShown:"="
        },

        templateUrl: "dev/modules/FirstRunExperience/template/template.html",
        link: function(scope, elem) {
            
            var storedValue = function(){
                var localStorage = window.localStorage;
                var dontShowValue;
                
                if(!localStorage){
                    dontShowValue = getCookie("vmf_showFRE");             
                }else{
                     dontShowValue = localStorage.vmf_showFRE;
                }
                return dontShowValue;
            };


            scope.$watch("freShown", function(newValue, OldValue, scope) {
                if (scope.freShown) {
                    if(storedValue() === "true"){
                        scope.freShown = false;
                        return;
                    }
                    angular.element('html').addClass('modal-open');
                    angular.element('.modalLoad .modal').addClass('in');
                 } else {
                    angular.element('html').removeClass('modal-open');
                    angular.element('.modalLoad .modal').removeClass('in');
                }
            });
            
            scope.hideFRE = function() {
                i=0;
                scope.freShown = false;
                resetScope();

            };
            var self = this;
            
            
            var setScopeValues=function(index){
               
                scope.content = scope.images[index].url;
                scope.title = scope.images[index].title;
                scope.pagesLength = scope.images.length;
                scope.textVal = scope.images[index].textVal;
                scope.contentheader = scope.images[index].contentheader;
                scope.pageNo = index + 1;
            };
            var resetScope = function(){
                i=0;
                setScopeValues(i);
            };
            
            scope.pageNo = 1;
            var i;
            resetScope();
           
            
            scope.onForward = function(){
                if(i < scope.images.length-1)
                {
                    ++i;
                    setScopeValues(i);                 
                }
            };

            

            scope.onBackward = function(){
                if(i > 0){
                    --i;
                    setScopeValues(i);
                }
            };

            scope.toggleShowAgain = function(showAgain){
				var showAgainCookie;
                if(window.localStorage){
                    window.localStorage.setItem("vmf_showFRE", showAgain);
                }else
                {
                    showAgainCookie = getCookie('vmf_showFRE');
                    setCookie('vmf_showFRE',showAgain,"");
                }
                return showAgainCookie;
            };

            scope.escapeFRE = function($event) {
                if($event.which === 27) {
                    scope.freShown = false;
                    resetScope();
                }
            };



            //move function to util
            var getCookie = function(cookieName){
                var name = cookieName + "=";
                var ca = document.cookie.split(';');
                for(var i=0; i<ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0)===' ') c = c.substring(1);
                    if (c.indexOf(name) === 0) return c.substring(name.length,c.length);
                }
                return "";
            };

            //move function to util
            var setCookie = function(cookieName, cookieValue, timeout){
                //Uncomment once the expiry time for cookies are confirmed.
                //var d = new Date();
                //d.setTime(d.getTime() + (exdays*24*60*60*1000));
                //var timeout = "expires="+d.toUTCString();
                document.cookie = cookieName + "=" + cookieValue + "; " + timeout;
            }; 
           
            }
    };
});
/*jslint nomen: true, debug: true,
  evil: false, vars: true */
app.directive('vmfFolderTree', ['$compile', '$timeout', 'ModalService', 'folderDataService',
    function($compile, $timeout, ModalService, folderDataService) {
        return {
            restrict: 'A',
            scope: {
                tree: '=',
                multipleSelect: '@',
                rootName: '=',
                folderClickCallBack: '&'
            },
            link: function(scope, lElement, lAttrs) {

                lElement.find(".folderTreeWrapper").attr("id", scope.rootName.text.split(" ").join(""));
                scope.thisTree = lElement.find("#" + scope.rootName.text.split(" ").join(""));

                scope.foldersArray = [];
                scope.completeFolderStack = [];

                var folderPadding = 28;
                var collapsePadding = 15;

                scope.calculatePadding = function(level) {

                    scope.folderPadding = (level * 28) + folderPadding;
                    scope.collapsePadding = (level * 28) + collapsePadding;
                };

                scope.lowestlevelGetter = function(tree) {
                    scope.levels = [];
                    tree.forEach(function(folder) {
                        scope.levels.push(folder.folderLevel);
                    });

                    return (scope.levels.sort()[0] - 1);
                };

                //console.log(scope.tree);
                scope.subFolderCreator = function(parentFolder) {

                    scope.folderObj = parentFolder;
                    scope.indexHolder = [];

                    if (scope.folderObj.hasSubFolders) {

                        scope.folderObj.subFolders = [];
                        scope.tree.forEach(function(folder, index) {
                            if (folder.parentFolderId === parentFolder.folderId) {

                                scope.folderCount++;
                                scope.folderObj.subFolders.push(folder);

                                scope.indexHolder.push(index);
                            }

                        });

                        scope.indexHolder.reverse().forEach(function(index) {
                            scope.tree.splice(index, 1);
                        });

                    } else {

                        scope.folderObj.subFolders = [];
                    }

                    return scope.folderObj;
                };

                scope.$watch("tree", function(newVal, OldVal, scope) {

                    if (newVal !== OldVal && newVal.length > 1) {
                        scope.compiler(newVal);
                    }
                }, true);

                scope.compiler = function(responseFolders) {

                    folderDataService.allFolders = responseFolders || scope.tree;
                    scope.tree = JSON.parse(JSON.stringify(responseFolders));
                    angular.copy(scope.tree, scope.foldersArray);
                    angular.copy(scope.tree, scope.completeFolderStack);

                    scope.folderString = "<ul class='foldertreeUl'>";
                    scope.lowestlevel = scope.lowestlevelGetter(scope.tree) || 0;
                    scope.recursionCount = 0;
                    scope.folderHierarchyLevel = 1;

                    //Gets the number of recursions to be done.
                    for (var folderIndex in scope.tree) {
                        if (scope.tree[folderIndex].folderLevel > scope.lowestlevel) {
                            scope.recursionCount++;
                            scope.lowestlevel = scope.tree[folderIndex].folderLevel;
                        }

                    }

                    while (scope.recursionCount > scope.folderHierarchyLevel - 1) {
                        scope.lastIndex;
                        if (scope.folderHierarchyLevel === 1) {

                            folderArray = [];

                            scope.tree.forEach(function(folder, index) {
                                if (folder.folderType === "ROOT") {
                                    folderArray.push(folder);
                                }
                            });

                        }

                        scope.nextSet = [];
                        folderArray.forEach(function(folder, index) {

                            if (scope.folderHierarchyLevel === 1) {

                                folderArray[index] = scope.subFolderCreator(folder);
                                if (folderArray[index].subFolders.length) {
                                    /*ignore jslint start*/
                                    folderArray[index].subFolders.forEach(function(elem) {
                                        scope.nextSet.push(elem);
                                    });
                                    /*ignore jslint end*/
                                }

                            } else {

                                folder.subFolders = [];
                                folderArray[index] = scope.subFolderCreator(folder);

                                if (folderArray[index].subFolders.length) {
                                    /*ignore jslint start*/
                                    folderArray[index].subFolders.forEach(function(elem) {
                                        scope.nextSet.push(elem);
                                    });
                                    /*ignore jslint end*/
                                }

                            }

                            scope.lastIndex = index;
                        });

                        folderArray = scope.nextSet;
                        scope.folderHierarchyLevel++;
                    }

                    //console.log(scope.folderHierarchyLevel);
                    scope.firstIteration = true;
                    scope.totalIterations = 0;
                    while (scope.folderHierarchyLevel > 0) {

                        scope.calculatePadding(scope.totalIterations - 1);

                        if (scope.firstIteration) {

                            scope.folderString = scope.folderString + '<li ng-repeat="subfolder in tree" ng-class="{expandButton:subfolder.hasSubFolders}">';
                            scope.firstIteration = false;
                        } else {

                            scope.folderString = scope.folderString + '<ul class="subfolder">' +
                                '<li ng-repeat="subfolder in subfolder.subFolders"  ng-class="{expandButton:subfolder.hasSubFolders,plus:subfolder.hasSubFolders}">';
                        }

                        scope.folderString = scope.folderString + '<a href="javascript:void(0)"  style="padding-left: ' + scope.folderPadding + 'px" vmf-folder-options data-folder-options=subfolder.folderOptions data-this-tree = "thisTree"  ng-click="folderClickCallBack({$event:$event,this:this})" complete-folder-stack = "completeFolderStack">' +
                            '<span class="expandCollapseIcon" style="left: ' + scope.collapsePadding + 'px" ng-show="subfolder.hasSubFolders" ng-click="expander($event)">&nbsp;</span>';

                        if (angular.lowercase(scope.multipleSelect) === "off" || angular.lowercase(scope.multipleSelect) === "false") {

                            scope.folderString = scope.folderString + '<div style="margin-left:10px;" class="custom-checkbox" ng-class="{disabledColor:!subfolder.accessable}">{{subfolder.folderName}}</div>'; //disabledColor to be added.
                        } else {

                            scope.folderString = scope.folderString + '<div vmf-checkbox-group class="vmf-checkbox-group" type="1" model="subfolder.checked" c-label="subfolder.folderName" c-disabled="!subfolder.accessable"></div>';
                        }

                        scope.folderString = scope.folderString + '</a>';
                        scope.folderHierarchyLevel--;
                        scope.totalIterations++;
                    }

                    while (scope.totalIterations > 0) {

                        scope.folderString = scope.folderString + '</li></ul>';
                        scope.totalIterations--;
                    }


                    $timeout(function() {
                        scope.thisTree.find('.folderTree').find("ul").remove();
                        scope.thisTree.find('.folderTree').append($compile(scope.folderString)(scope));
                    });

                    $timeout(function() {
                        scope.thisTree.find(".custom-checkbox").addClass("folderSelector");
                        scope.thisTree.find(".folderTree").find("input").removeAttr("ng-click");
                        scope.thisTree.find(".subfolder").has("li").parent("li").addClass("expandButton plus");
                        scope.thisTree.find(".subfolder:first").has("li").parent("li").removeClass("plus");
                        scope.thisTree.find(".expandCollapseIcon").eq(0).addClass("ng-hide");
                        if (angular.lowercase(scope.multipleSelect) === "off" || angular.lowercase(scope.multipleSelect) === "false") {
                            scope.thisTree.find(".folderTreeHeader a:first span").remove();
                            scope.thisTree.addClass("withoutCheckBox");
                        }
                    });
                };

                scope.compiler(scope.tree);

                lElement.find(".folderTreeHeader .customCheckBox").off("click").on("click", function(event) {

                    scope.thisTree.find(".actionEach").remove();
                    scope.thisTree.find(".actionEachBox").remove();
                    scope.availableFolders = scope.thisTree.find(".folderSelector").not(".disabledColor");

                    if (angular.element(this).attr("checked")) {

                        scope.availableFolders.removeClass("selected").find("input").attr("checked", false);
                        scope.availableFolders.parent().removeClass("highlight");
                        angular.element(this).attr("checked", false);
                        return false;
                    } else {

                        scope.availableFolders.addClass("selected").find("input").attr("checked", true);
                        scope.availableFolders.parent().addClass("highlight");
                        angular.element(this).parents("a").removeClass("highlight");
                        angular.element(this).attr("checked", true);
                        return false;
                    }

                    //console.log("select all " +angular.element(this).attr("checked"))
                });

                //Updates
                scope.uniqueIDGenerator = function(currentFolders) {
                    var id;
                    var hitCount;
                    var validID = true;

                    while (validID === true) {

                        id = Math.floor(Math.random() * 10000);
                        hitCount = 0;
                        /*ignore jslint start*/
                        scope.completeFolderStack.forEach(function(folder) {

                            if (folder.folderId === id) {
                                hitCount++;
                            }
                        });
                        /*ignore jslint end*/

                        if (hitCount === 0)
                            validID = false;
                    }

                    return id;
                };

                scope.creatingFolder = function(referenceObj, source) {

                    var respObj = {};
                    var option = [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }];

                    respObj.status = "ACTIVE";
                    respObj.folderType = "ORDER";
                    respObj.fullFolderPath = source.folderPath + "\\" + source.folderName;
                    respObj.rootFolderId = 0;
                    respObj.folderId = scope.uniqueIDGenerator(scope.completeFolderStack);
                    respObj.folderName = source.folderName;
                    respObj.parentFolderId = referenceObj.folderId;
                    respObj.folderLevel = referenceObj.folderLevel + 1;
                    respObj.folderAccess = "NONE";
                    respObj.isLeaf = true;
                    respObj.hasSubFolders = false;
                    respObj.folderOptions = option;
                    respObj.accessable = true;
                    respObj.checked = false;

                    return respObj;
                };

                scope.resetFolders = function(change, type) {

                    scope.modifiedFolders = [];
                    scope.type = type || "";
                    scope.parentFolder;
                    scope.searchResult = {};

                    //logic to be changed
                    if (type.search("Create") >= 0) {

                        scope.newFolder = {};
                        scope.referenceObj = {};

                        scope.allFolders.forEach(function(folder, folderIndex) {
                            if (folder.fullFolderPath === change.folderPath) {
                                scope.allFolders[folderIndex].hasSubFolders = true;
                                scope.referenceObj = folder;
                            }
                        });

                        scope.newFolder = scope.creatingFolder(scope.referenceObj, change);

                        scope.allFolders.push(scope.newFolder);
                        scope.modifiedFolders = scope.allFolders;
                        //console.log(currentFolders);
                    } else if (type.search("Delete") >= 0) {

                        scope.delReference = change.ref;
                        scope.deleteIndice = [];
                        scope.deletedFolders = [];
                        scope.completeFolderStack.forEach(function(folder, folderIndex) {
                            if (folder.fullFolderPath.split(delReference).length > 1) {
                                scope.deleteIndice.push(folderIndex);
                            }
                        });

                        scope.deleteIndice.reverse().forEach(function(delFodler, folderIndex) {

                            scope.tempCount = 0;
                            scope.tempParentId = scope.completeFolderStack[folderIndex].parentFolderId;
                            deletedFolders.push(scope.completeFolderStack[folderIndex]);
                            scope.completeFolderStack.splice(folderIndex, 1);

                            scope.completeFolderStack.forEach(function(folder, index) {
                                if (scope.tempParentId === folder.parentFolderId) {
                                    scope.tempCount++;
                                }

                            });
                            if (scope.tempCount === 0) {
                                scope.completeFolderStack.forEach(function(folder, index) {
                                    if (scope.tempParentId === folder.folderId) {
                                        folder.hasSubFolders = false;
                                        return false;
                                    }
                                });
                            }
                        });

                        //scope.folderTreeDataService.previouslyDeletedFolders.push(deletedFolders);
                        scope.modifiedFolders = scope.completeFolderStack;
                    } else if (type.search("Rename") >= 0) {

                        scope.mainPathArray = [];
                        scope.newFullPath = "";
                        scope.bits = [];

                        scope.initialPath = change.currentFolderPath.split("\\");
                        scope.initialPath.pop();


                        scope.completeFolderStack.forEach(function(folder, folderIndex) {

                            scope.mainPathArray = [];
                            scope.mainPathArray = folder.fullFolderPath.split(change.currentFolderPath);
                            if (scope.mainPathArray.length >= 1) {

                                if (scope.mainPathArray[0] === "") {

                                    scope.mainPathArray[0] = change.folderName;
                                    scope.newFullPath = scope.initialPath.join("\\") + "\\" + scope.mainPathArray.join("");
                                    scope.completeFolderStack[folderIndex].fullFolderPath = scope.newFullPath;
                                }
                                if (scope.completeFolderStack[folderIndex].folderName === change.currentFolderPath.split("\\").pop()) {

                                    scope.completeFolderStack[folderIndex].folderName = change.folderName;
                                }
                            }


                        });

                        scope.modifiedFolders = scope.completeFolderStack;
                    } else if (type.search("Move") >= 0) {
                        // console.log("In Move Folder")

                        var tobemoved = [];
                        scope.parentFolder = {};
                        var immediateChildren = {};
                        var childFolder = {};

                        var ref = change.currentFolderPath.split("\\").pop();

                        scope.completeFolderStack.forEach(function(folder, folderIndex) {
                            if (folder.fullFolderPath === change.folderPath) {
                                scope.parentFolder = {
                                    "folder": folder,
                                    index: folderIndex
                                };
                            }
                            if (folder.fullFolderPath.split(change.currentFolderPath).length > 1) {

                                if (folder.fullFolderPath.split(change.currentFolderPath)[folder.fullFolderPath.split(change.currentFolderPath).length - 1] === "") {
                                    immediateChild = {
                                        "folder": folder,
                                        index: folderIndex
                                    };
                                } else {
                                    tobemoved.push({
                                        "folder": folder,
                                        index: folderIndex
                                    });
                                }
                            }
                        });


                        var tempCount = 0;
                        var tempParentId = scope.completeFolderStack[immediateChild.index].parentFolderId;

                        scope.completeFolderStack.forEach(function(folder, index) {
                            if (tempParentId === folder.parentFolderId) {
                                tempCount++;
                            }

                        });
                        if (tempCount <= 1) {
                            scope.completeFolderStack.forEach(function(folder, index) {
                                if (tempParentId === folder.folderId) {
                                    folder.hasSubFolders = false;
                                    return false;
                                }
                            });
                        }

                        scope.completeFolderStack[immediateChild.index].parentFolderId = scope.completeFolderStack[scope.parentFolder.index].folderId;
                        scope.completeFolderStack[immediateChild.index].folderLevel = scope.completeFolderStack[scope.parentFolder.index].folderLevel + 1;
                        scope.completeFolderStack[immediateChild.index].isLeaf = true;
                        scope.completeFolderStack[scope.parentFolder.index].hasSubFolders = true;
                        scope.completeFolderStack[immediateChild.index].fullFolderPath = scope.completeFolderStack[scope.parentFolder.index].fullFolderPath + "\\" + scope.completeFolderStack[immediateChild.index].folderName;



                        var iterate = true;
                        var lowestLevel = 0;
                        var levels = [];
                        if (Object.keys(tobemoved).length > 0) {
                            tobemoved.forEach(function(folder, folderIndex) {
                                // levels.push(folder.folderLevel)
                                if (scope.completeFolderStack[immediateChild.index].folderId === folder.folder.parentFolderId) {
                                    scope.completeFolderStack[folder.index].folderLevel = scope.completeFolderStack[immediateChild.index].folderLevel + 1;
                                    scope.completeFolderStack[folder.index].isLeaf = true;
                                    scope.completeFolderStack[folder.index].fullFolderPath = scope.completeFolderStack[immediateChild.index].fullFolderPath + "\\" + folder.folder.folderName;
                                }
                            });

                            scope.completeFolderStack.forEach(function(folderName, index) {
                                if (folderName.hasSubFolders) {
                                    tobemoved.forEach(function(folder, folderIndex) {
                                        if (folder.folder.folderId === folderName.parentFolderId) {
                                            scope.completeFolderStack[index].folderLevel = scope.completeFolderStack[folder.index].folderLevel + 1;
                                            scope.completeFolderStack[index].fullFolderPath = scope.completeFolderStack[folder.index].fullFolderPath + "\\" + folderName.folderName;
                                            return false;
                                        }
                                    });
                                } else {
                                    tobemoved.forEach(function(folder, folderIndex) {
                                        if (folder.folder.parentFolderId === folderName.folderId) {
                                            scope.completeFolderStack[folder.index].folderLevel = scope.completeFolderStack[index].folderLevel + 1;
                                            scope.completeFolderStack[folder.index].fullFolderPath = scope.completeFolderStack[index].fullFolderPath + "\\" + folder.folder.folderName;
                                            return false;
                                        }
                                    });
                                }
                            });
                        }

                        scope.modifiedFolders = scope.completeFolderStack;
                    } else if (type.search("Find") >= 0) {

                        scope.completeFolderStack.forEach(function(folder) {
                            if (angular.lowercase(folder.folderName).split(angular.lowercase(change.folderName)).length > 1) {
                                scope.searchResult = folder;
                            }
                        });
                        scope.findFolder.folderName = "";
                        //console.log(searchResult);
                        //scope.searchResult = searchResult;
                    }

                    //scope.folderTreeDataService.allFolderPaths = scope.folderTreeDataService.getAllFolderPaths();

                    //console.log(scope.allFolders);
                    if (scope.type.split("Find").length === 1) {

                        scope.folderStackUpdated(scope.modifiedFolders);

                    } else {
                        scope.foundElement(scope.searchResult);
                    }

                    //return modifiedFolders;
                };

                scope.folderStackUpdated = function(update) {
                    scope.tree = update;
                    //console.log(update);
                };

                //Modal Overlay functions

                scope.getAllFolderPaths = function(foldersArray) {

                    scope.foldersArray = foldersArray;
                    scope.pathArray = [];
                    scope.pathPresent = false;

                    if (!angular.isUndefined(scope.foldersArray)) {

                        scope.foldersArray.forEach(function(folder) {

                            scope.pathPresent = false;
                            scope.pathArray.forEach(function(folderPath) {

                                if (folderPath === folder.fullFolderPath) {

                                    scope.pathPresent = true;
                                }
                            });

                            if (!scope.pathPresent) {

                                scope.pathArray.push(folder.fullFolderPath);
                            }
                        });
                    }


                    //console.log(pathArray);
                    return scope.pathArray;
                };

                scope.find = function(folder) {

                    scope.findResult = [];
                    if (folder.folderName === "") {
                        angular.element(".resultPane.notpborder").children().remove();
                    } else {

                        scope.allFolders.forEach(function(folderObj) {
                            if (angular.lowercase(folderObj.folderName).split(angular.lowercase(folder.folderName)).length > 1) {
                                scope.findResult.push(folderObj);
                            }
                        });

                        //console.log(scope.searchResult);
                        scope.createOptions(scope.findResult);
                        scope.optionsString = '<div vmf-radio-group type="1" rtitle="radioTitle" options="radioOptions" name="radioName" model="radioModel" custom-class="customclass" mandatory="true" class="radio-controls"></div>';

                        angular.element(".resultPane.notpborder").children().remove();
                        angular.element(".resultPane.notpborder").append($compile(scope.optionsString)(scope));
                    }
                };

                scope.createOptions = function(optionsCollection) {

                    scope.radioOptions = [];
                    scope.value = 0;
                    optionsCollection.forEach(function(options) {

                        if (options.accessable) {
                            scope.tempOption = {};

                            scope.tempOption.text = options.folderName;
                            scope.tempOption.disabled = false;
                            scope.tempOption.checked = false;
                            scope.tempOption.value = scope.value.toString();
                            scope.value++;

                            scope.radioOptions.push(scope.tempOption);
                        }
                    });
                };

                scope.folderActions = function($event) {

                    $event.preventDefault();
                    scope.reqObj = {};
                    scope.operatable = false;

                    if (scope.modalData.operationScope.text === "Create Folder") {

                        scope.reqObj = scope.newFolder;
                        if (scope.reqObj.folderName && scope.reqObj.folderPath)
                            scope.operatable = true;
                    } else if (scope.modalData.operationScope.text === "Delete Folder") {

                        scope.reqObj.ref = scope.deleteFolderPath;
                        scope.operatable = true;
                    } else if (scope.modalData.operationScope.text === "Rename Folder") {
                        //console.log(scope.renewFolder);
                        scope.reqObj = scope.renewFolder;
                        if (scope.reqObj.folderName)
                            scope.operatable = true;
                    } else if (scope.modalData.operationScope.text === "Move Folder") {

                        scope.reqObj = scope.move;
                        if (!angular.isUndefined(scope.reqObj.folderPath))
                            scope.operatable = true;
                    } else if (scope.modalData.operationScope.text === "Find Folder") {

                        scope.reqObj.folderName = angular.element(".resultPane.notpborder").find(".custom-radio.selected").text();
                    }

                    //console.log(scope.allFolders);
                    if (scope.operatable || (scope.modalData.operationScope.text === "Find Folder" && scope.folderReference !== "")) {


                        $timeout(function() {
                            scope.resetFolders(scope.reqObj, scope.modalData.operationScope.text);
                        });

                        close(null, 500);
                        $('.modal-backdrop,.modal').remove();
                        $('body,html').removeClass('modal-open');
                    } else {
                        return false;
                    }
                    //console.log(scope.allFolders);
                };

            },
            templateUrl: "dev/modules/FolderTree/template/folderTreeTemplate.html",
            controller: function($scope, $element, $timeout, $document, ModalService) {
                _this = this;

                this.createModal = function(required, allFolders) {

                    $scope.modalData = required;
                    $scope.allFolders = allFolders;

                    //console.log($scope.allFolderPaths);

                    $scope.deleteWarning = "When you confirm, the folder and all its subfolders will be deleted.Users who are associated only to the selected folders will no longer be able to access the account.";

                    $scope.newFolder = {};
                    $scope.renewFolder = {};
                    $scope.move = {};
                    $scope.newUser = {};
                    $scope.parentFolderName;

                    $scope.folderPath;
                    $scope.deleteFolderPath;
                    $scope.deleteWarningType = "warning";

                    $scope.htmlString = "";



                    $scope.allFolderPaths = $scope.getAllFolderPaths($scope.allFolders);

                    if ($scope.modalData.operationScope.text === "Create Folder") {

                        if ($scope.modalData.folders.length > 0) {
                            $scope.parentFolderName = $scope.allFolderPaths.indexOf($scope.modalData.folders[0].fullFolderPath);
                        } else {
                            $scope.parentFolderName = "";
                        }

                        $scope.htmlString = '<p>Type the name of the folder.</p><div class="vmf-create-folder"><div vmf-select-list pre-select-ind="' + $scope.parentFolderName + '" dtitle="Parent Folder" validation=\'[{"name":"selectOne"},{"name":"required"}]\' model="newFolder.folderPath" list="allFolderPaths" mandatory="true" custom-class="customclass"></div>' +
                            '<div vmf-text-input type="normal" class="vmf-text-input clearfix" name="userForm" model="newFolder.folderName" title="Folder Name" validation=\'[{"name":"required"}]\' mandatory="true" custom-class="customclass"></div></div>';
                        $scope.footerBtn = '<input type="submit" class="vmf-btn vmf-primary vmfloginChange" href="javascript:void(0);" value="Save" ng-click="folderActions($event)" /><input type="submit" class="vmf-btn  vmfloginChange" href="javascript:void(0);" value="Cancel" data-dismiss="modal" ng-click="close(\'Cancel\');modalShown=false" />';
                    }

                    if ($scope.modalData.operationScope.text === "Delete Folder") {

                        $scope.deleteFolderPath = $scope.modalData.folders[0].fullFolderPath;

                        $scope.htmlString = '<div class="vmf-delete-folder"><p>Confirm that you want to delete the selected folder and its subfolders.</p>' +
                            '<div class="vmf-highlight"><div class="col-md-3 formLabel"> Delete Folder </div> <div class="col-md-4">\\\\{{deleteFolderPath}}</div><div class="clearfix"></div></div>' +
                            '<div information-message info-message="{{deleteWarning}}" is-info-message="true" info-type="{{deleteWarningType}}"></div></div>';
                        $scope.footerBtn = '<input type="submit" class="vmf-btn vmf-primary vmfloginChange" href="javascript:void(0);" value="Confirm" ng-click="folderActions($event)" /><input type="submit" class="vmf-btn  vmfloginChange" href="javascript:void(0);" value="Cancel" data-dismiss="modal" ng-click="close(\'Cancel\');modalShown=false" />';
                    }

                    if ($scope.modalData.operationScope.text === "Rename Folder") {

                        $scope.renewFolder.currentFolderPath = $scope.modalData.folders[0].fullFolderPath;
                        $scope.htmlString = '<div class="vmf-rename-folder"><p>To rename the folder, type the new folder name and click Confirm. The new folder name must be unique and not already in use for this account.</p>' +
                            '<div class="vmf-highlight"><div class="col-md-3 formLabel">Existing folder name   </div>  <div class="col-md-4">\\\\{{renewFolder.currentFolderPath}}</div>' +
                            '<div vmf-text-input type="normal" class="vmf-text-input clearfix" name="userForm" model="renewFolder.folderName" title="New Folder Name" mandatory="true" validation=\'[{"name":"required"}]\' custom-class="customclass"></div></div></div>';
                        $scope.footerBtn = '<input type="submit" class="vmf-btn vmf-primary vmfloginChange" href="javascript:void(0);" value="Save" ng-click="folderActions($event)" /><input type="submit" class="vmf-btn  vmfloginChange" href="javascript:void(0);" value="Cancel" data-dismiss="modal" ng-click="close(\'Cancel\');modalShown=false" />';
                    }

                    if ($scope.modalData.operationScope.text === "Move Folder") {

                        $scope.move.currentFolderPath = $scope.modalData.folders[0].fullFolderPath;
                        $scope.customFolderPaths = [];

                        // $scope.customFolderPaths.splice($scope.customFolderPaths.indexOf($scope.move.currentFolderPath),1);

                        $scope.allFolderPaths.forEach(function(path) {
                            if (path.split($scope.modalData.folders[0].fullFolderPath).length === 1) {

                                $scope.customFolderPaths.push(path);
                            }
                        });
                        //console.log($scope.customFolderPaths);
                        $scope.htmlString = '<div class="vmf-move-folder"><p>Select the target folder location.</p>' +
                            '<div class="vmf-highlight"><div class="col-md-3 formLabel">Move Folder    </div> <div class="col-md-4">\\\\{{move.currentFolderPath}}</div>' +
                            '<div class="clearfix" vmf-select-list dtitle="To" model="move.folderPath" validation=\'[{"name":"selectOne"},{"name":"required"}]\' list="customFolderPaths" mandatory="true" custom-class="customclass"></div></div></div>';
                        $scope.footerBtn = '<input type="submit" class="vmf-btn vmf-primary vmfloginChange" href="javascript:void(0);" value="Continue" ng-click="folderActions($event)" /><input type="submit" class="vmf-btn  vmfloginChange" href="javascript:void(0);" value="Cancel" data-dismiss="modal" ng-click="close(\'Cancel\');modalShown=false" />';
                    }

                    if ($scope.modalData.operationScope.text === "Find Folder") {

                        console.log('find fodler');

                        $scope.htmlString = '<p class="statictext_p">Find then select a folder.</p><div class="section-wrapper clearfix  bottomarea"><section class="column fiveFifty mtop11"><header><h1>License Key Folders </h1></header><div class="searchArea">' +
                            '<div vmf-text-input type="normal" class="vmf-text-input clearfix" name="userForm" model="findFolder.folderName" validation=\'[{"name":"required"}]\' custom-class="customclass"></div>' +
                            '<input type="submit" ng-click="find(findFolder)" value="Find" class="vmf-btn vmf-primary" /></div><div class="resultPane notpborder">' +
                            '</div></section></div>';

                        $scope.footerBtn = '<input type="submit" class="vmf-btn vmf-primary vmfloginChange" href="javascript:void(0);" value="Select" ng-click="folderActions($event)" /><input type="submit" class="vmf-btn  vmfloginChange" href="javascript:void(0);" value="Cancel" data-dismiss="modal" ng-click="close(\'Cancel\');modalShown=false" />';
                    }

                    if ($scope.modalData.operationScope.text === "Invite New User") {

                        $scope.InviteUserModal = "Invite_New_User";

                        $scope.htmlString = '<div  class="row inviteUser">' + ' <div>' + '  <div class="header-text"><span>Invite New Users</span></div>' + '  <div class="inviteUser-required"> Required*</div>' + '  <div class="left-align"><div>Email address*</div>' + '  <input type="text" id="" name="name" ng-model="newUser.emailAddress" placeholder="" class="ng-pristine ng-valid"></div>' + '  <div class="left-align"><div>First Name*</div>' + '   <input type="text" id="" name="name" ng-model="newUser.firstName" placeholder="" class="ng-pristine ng-valid"></div>' + '   <div class="left-align"><div> Last Name*</div>' + '   <input type="text" id="" name="name" ng-model="newUser.lastName" placeholder="" class="ng-pristine ng-valid"></div>' + '  <div class="left-align"><input type="submit" ng-click="find(findFolder)" value="Add >>" class="vmf-btn vmf-right-button"></div></div>' + ' </div>';
                        /*+'  <div style="border:1px solid #000000;height:350px;" class="col-md-7 noPadding">'
                        +'  <div class="header-text"><span>Selected Users(0)</span><input type="submit" ng-click="find(findFolder)" value="Add>>"                                  class="vmf-btn vmf-primary" style="float:right;"> </div>'
                        +'   <div class="section-text"><span style="width:170px;float:left;">Name</span><span>E-mail</span>'                                     +'   </div</div></div>';*/

                        $scope.footerBtn = '<input type="submit" class="vmf-btn vmfloginChange" href="javascript:void(0);" value="Continue" data-dismiss="modal" ng-click="folderActions($event)" /><input type="submit" class="vmf-btn  vmfloginChange vmf-primary" href="javascript:void(0);" data-dismiss="modal" value="Cancel" ng-click="folderActions($event)" />';
                    }

                    $scope.radioName = 'role';
                    $scope.radioModel = "";

                    $timeout(function() {
                        angular.element(".modal-body").append($compile($scope.htmlString)($scope));
                        angular.element(".modal-footer").append($compile($scope.footerBtn)($scope));
                    });
                };

                $scope.foundElement = function(searchResults) {
                    //console.log(searchResults);
                    $scope.requiredFolder = searchResults;
                    $scope.expanders = angular.element(".folderTree").find(".expandButton").find(".custom-checkbox");

                    $scope.expanders.removeClass("selected").parent().removeClass("highlight").parent().removeClass("minus").addClass("plus");
                    $scope.expanders.eq(0).parent().parent().removeClass("plus").addClass("minus");

                    $scope.folderRoots = $scope.requiredFolder.fullFolderPath.split("\\");
                    $scope.folderRoots.shift();
                    $scope.lastFName = $scope.folderRoots[$scope.folderRoots.length - 1];
                    $scope.lastElement;
                    $scope.expanderIndices = [];
                    $scope.folderRoots.forEach(function(root) {
                        for (var expanderIndex = 0; expanderIndex < $scope.expanders.length; expanderIndex++) {

                            if ($scope.expanders.eq(expanderIndex).text() === root && $scope.expanders.eq(expanderIndex).parent().parent().hasClass("plus")) {

                                $scope.expanders.eq(expanderIndex).parent().parent().removeClass("plus").addClass("minus");
                                if (root === $scope.lastFName) {
                                    $scope.expanderIndices.push(expanderIndex);
                                }
                                $scope.lastElement = $scope.expanders.eq(expanderIndex);

                            }

                        }
                    });

                    angular.element(".foldertreeUl>li").removeClass("plus");
                    $scope.expanderIndices.forEach(function(index) {
                        $scope.expanders.eq(index).addClass("selected").parent().addClass("highlight");
                    });

                    //$scope.lastElement.addClass("selected").parent().addClass("highlight");
                };

                $scope.expander = function(event) {

                    event.stopPropagation();
                    if ($scope.thisTree.find(event.currentTarget).parent().parent().hasClass("plus")) {
                        $scope.thisTree.find(event.currentTarget).parent().parent().removeClass("plus").addClass("minus");
                    } else if ($scope.thisTree.find(event.currentTarget).parent().parent().hasClass("minus")) {
                        $scope.thisTree.find(event.currentTarget).parent().parent().removeClass("minus").addClass("plus");
                    }
                    //$scope.mainOptions[0].disabled = false;
                };

                $scope.openMainOptions = function(event) {

                    event.preventDefault();
                    if ($scope.thisTree.find(".actionAllBox").hasClass("optionsOpen")) {

                        $scope.thisTree.find(".actionAllBox").removeClass("optionsOpen");
                        $scope.thisTree.find(".actionAllBox").find(".innerWrapper").children().remove();

                    } else {
                        $scope.mainOptions = [{
                            text: "Invite New User",
                            disabled: false
                        }, {
                            text: "Share Folder",
                            disabled: false
                        }, {
                            text: "Create Folder",
                            disabled: false
                        }, {
                            text: "Delete Folder",
                            disabled: false
                        }, {
                            text: "Rename Folder",
                            disabled: false
                        }, {
                            text: "Move Folder",
                            disabled: false
                        }, {
                            text: "Find Folder",
                            disabled: false
                        }, {
                            text: "Export to csv",
                            disabled: false
                        }, {
                            text: "Expand All Folders",
                            disabled: false
                        }];


                        if ($scope.thisTree.find(".folderSelector.selected").length === 0) {
                            $scope.mainOptions[3].disabledClass = "disabled";
                            $scope.mainOptions[4].disabledClass = "disabled";
                            $scope.mainOptions[5].disabledClass = "disabled";
                            $scope.mainOptions[7].disabledClass = "disabled";
                        }

                        $scope.mainOptionsString = '<ul>' +
                            '<li ng-repeat="mainOption in mainOptions" ng-class="{first:$first,last:$last,mainLink:$last}">' +
                            '<a href="javascript:void(0)" class="{{mainOption.disabledClass}}" ng-click="mainOptionsAction($event,this)">{{mainOption.text}}</a>' +
                            '</li></ul>';

                        $scope.thisTree.find(".actionAllBox").find(".innerWrapper").children().remove();

                        $timeout(function() {
                            $scope.thisTree.find(".actionAllBox").find(".innerWrapper").append($compile($scope.mainOptionsString)($scope));
                        });

                        $timeout(function() {
                            $scope.thisTree.find(".actionAllBox").addClass("optionsOpen");
                            $scope.thisTree.find(".actionEach").parent().removeClass("highlight");
                            $scope.thisTree.find(".actionEachBox").remove();
                            $scope.thisTree.find(".actionEach").remove();
                        });

                    }
                    event.stopPropagation();
                };

                $scope.mainOptionsAction = function(event, optionScope) {


                    if (optionScope.mainOption.text === "Expand All Folders") {
                        $scope.thisTree.find(".expandButton").removeClass("plus").addClass("minus");
                    } else {
                        if (optionScope.mainOption.disabledClass !== "disabled") {

                            $scope.selectedFolders = $scope.thisTree.find(".folderSelector.selected");
                            $scope.selectedFolderNames = [];

                            for (var selectedFolderIndex = 0; selectedFolderIndex < $scope.selectedFolders.length; selectedFolderIndex++) {
                                $scope.selectedFolderNames.push($scope.selectedFolders.eq(selectedFolderIndex).text());
                            }
                            $scope.required = {
                                operationScope: {},
                                folders: []
                            };

                            $scope.required.folders = [];

                            $scope.selectedFolderNames.forEach(function(name) {

                                $scope.foldersArray.forEach(function(folder) {

                                    if (folder.folderName === name) {
                                        $scope.required.folders.push(folder);
                                    }
                                });
                            });


                            $scope.required.operationScope = optionScope.mainOption;

                            $scope.modalInstance = ModalService.showModal({
                                templateUrl: 'dev/modules/FolderTree/template/folderActions.html',
                                controller: "folderTreeController"
                            }).then(function(modal) {
                                modal.element.modal();
                                _this.createModal($scope.required, $scope.completeFolderStack);
                            });

                        } else {
                            return false;
                        }
                    }

                    $scope.thisTree.find(".actionAllBox").removeClass("optionsOpen");
                };

                $document.off("click").on('click', function($event) {
                    if ($($event.target).is("label"))
                        return false;
                    angular.forEach(angular.element(".folderSelector"), function(value, key) {
                        if (!angular.element(angular.element(".folderSelector")[key]).hasClass("selected")) {
                            angular.element(angular.element(".folderSelector")[key]).parent().removeClass("highlight");
                        }
                    });
                    //angular.element(".actionEachBox").prev().not(".selected").parent().removeClass("highlight");
                    angular.element(".actionEachBox").remove();
                    angular.element(".actionAllBox").removeClass("optionsOpen");
                });
            }
        };
    }
]);

app.directive("vmfFolderOptions", ['$compile', '$timeout', '$document', '$rootScope', "ModalService",
    function($compile, $timeout, $document, $rootScope, ModalService) {
        return {
            restrict: "A",
            scope: {
                thisTree: "=",
                folderLevelOptions: "=folderOptions",
                completeFolderStack: "="
            },
            require: '^vmfFolderTree',
            link: function(scope, lElement, lAttrs, TreeCtrl) {

                //console.log("parentIndex" + scope.parentIndex);
                //TreeCtrl.testFn(lElement);

                scope.dropDownString = '<span class="actionEach" ng-click="showOptions($event)">&nbsp;</span>';
                scope.dropDownOptionsString = '<div class="actionEachBox">' +
                    '<div class="midWrapper">' +
                    '<div class="innerWrapper">' +
                    '<ul>' +
                    '<li ng-repeat="option in folderLevelOptions" ng-class="{first:$first,last:$last}" ng-click="optionsAction($event,this)">' +
                    '<a class="{{option.disabledClass}}" href="javascript:void(0);">{{option.text}}</a>' +
                    '</li>' +
                    '</ul>' +
                    '</div>' +
                    '</div>' +
                    '</div>';

                lElement.on("mouseenter", function(event) {

                    $timeout(function() {

                        if (!lElement.find(".actionEach").length) {

                            lElement.append($compile(scope.dropDownString)(scope));
                            lElement.addClass("highlight");
                            lElement.addClass("highlightActive");
                        }
                        if (!lElement.find(".actionEachBox").length) {

                            lElement.append($compile(scope.dropDownOptionsString)(scope));
                            lElement.addClass("highlight");
                            lElement.addClass("highlightActive");
                        }
                    });
                    lElement.addClass("highlightActive");
                });

                lElement.on("mouseleave", function(event) {


                    //checked folder's options should be removed
                    if (lElement.find(".folderSelector").hasClass("selected") || lElement.hasClass("nonCheckBox")) {

                        lElement.addClass("highlight");
                        lElement.find(".actionEach").remove();
                    } else if (lElement.find(".actionEachBox").hasClass("folderSelected")) {

                        lElement.addClass("highlight");

                        lElement.find(".actionEach").remove();
                    } else if (lElement.find(".actionEachBox").hasClass("rightClicked")) {

                        //alert("previously right clicked");
                        lElement.find(".actionEach").remove();
                    } else if (!lElement.find(".actionEachBox").hasClass("optionsOpen")) {

                        //alert("no options opend");
                        lElement.find(".actionEachBox").remove();
                        lElement.find(".actionEach").remove();
                        lElement.removeClass("highlight");
                    }
                    lElement.removeClass("highlightActive");
                });

                lElement.on("mousedown", function(event) {
                    event.stopPropagation();
                    scope.thisTree.find(".actionAllBox").removeClass("optionsOpen");
                    if (event.which === 3) {

                        lElement.on("contextmenu", function() {
                            event.stopPropagation();
                            return false;
                        });

                        lElement.find(".actionEach").remove();
                        var position = {
                            top: "",
                            left: ""
                        };


                        getClickPosition = function(event) {
                            var parentPosition = getPosition(event.currentTarget);
                            var windowWidth = angular.element(window).width();
                            var windowHeight = angular.element(window).height();
                            //var xPosition = event.clientX - parentPosition.x;
                            //var xPosition = (windowWidth - event.clientX) > (lElement.find(".actionEachBox").width()) ? event.clientX - parentPosition.x : 330;
                            var xPosition = (lElement.width() - (event.clientX - parentPosition.x)) > (lElement.find(".actionEachBox").width()) ? event.clientX - parentPosition.x : 330;
                            var yPosition = (windowHeight - parentPosition.y) > (lElement.find(".actionEachBox").height()) ? "20" : -(lElement.find(".actionEachBox").height()) + 20;
                            //var yPosition = event.clientY - parentPosition.y - ) ;


                            position.left = xPosition + "px";
                            position.top = yPosition + "px";
                        };

                        getPosition = function(element) {
                            var xPosition = 0;
                            var yPosition = 0;

                            while (element) {
                                xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);
                                yPosition += (element.offsetTop - element.scrollTop + element.clientTop);
                                element = element.offsetParent;
                            }
                            return {
                                x: xPosition,
                                y: yPosition
                            };
                        };

                        getClickPosition(event);

                        //console.log(position);
                        if (!lElement.find(".actionEachBox").hasClass("optionsOpen")) {

                            //target folder doesnt have options opened
                            scope.targetElements = scope.thisTree.find(".folderSelector").not(".selected").parent();
                            if (scope.thisTree.find(".actionEachBox").hasClass("flagClass")) {
                                //any other folder options are open
                                scope.targetElements.find(".actionEachBox").removeClass("rightClicked");
                                scope.thisTree.find(".folderSelector").not(".selected").parent().removeClass("highlight");
                                scope.thisTree.find(".actionEachBox.optionsOpen").remove();
                                lElement.find(".actionEachBox").addClass("optionsOpen flagClass rightClicked");
                                lElement.find(".actionEachBox").css(position);
                                lElement.addClass("highlight");

                            } else {

                                // If user opens a folder options without anyother folder options opened
                                scope.targetElements.find(".actionEachBox").removeClass("flagClass rightClicked");
                                lElement.find(".actionEachBox").addClass("optionsOpen flagClass rightClicked");
                                lElement.find(".actionEachBox").css(position);
                            }


                        } else {

                            //target folder haves options opned
                            if (lElement.find(".actionEachBox").hasClass("rightClicked")) {

                                //anyother folder has options opend on right click
                                lElement.find(".actionEachBox").removeAttr("style").css(position);
                            } else {

                                //folder options visible of dropdown
                                lElement.find(".actionEachBox").addClass("rightClicked");
                                lElement.find(".actionEachBox").css(position);
                            }
                        }

                    }

                });

                scope.showOptions = function(event) {

                    if (!lElement.find(".actionEachBox").hasClass("optionsOpen")) {

                        if (scope.thisTree.find(".actionEachBox").hasClass("optionsOpen")) {

                            // If options of someother folder are open and user trys to open another folder options
                            scope.thisTree.find(".actionEachBox.optionsOpen").parent().removeClass("highlight");
                            scope.thisTree.find(".actionEachBox.optionsOpen").remove();
                            lElement.find(".actionEachBox").addClass("optionsOpen flagClass");
                            angular.element(scope.thisTree.find(".actionEachBox.flagClass").not(".folderSelected").parent()).removeClass("highlight");
                            scope.thisTree.find(".actionEachBox").not(".optionsOpen").remove();
                            scope.thisTree.find(".actionEach").remove();
                        } else {

                            // If user opens a folder options without anyother folder options opened
                            lElement.find(".actionEachBox.rightClicked").remove();
                            lElement.find(".actionEachBox").addClass("optionsOpen flagClass");
                        }

                    } else {

                        if (lElement.find(".actionEachBox").hasClass("rightClicked")) {

                            //If options are opened on right click already
                            lElement.find(".actionEachBox").removeAttr("style").removeClass("rightClicked");
                            // lElement.find(".actionEachBox").removeClass("rightClicked");
                        } else {

                            //If options of curent folder are already open
                            lElement.find(".actionEachBox").removeClass("optionsOpen flagClass");
                        }


                    }

                    event.stopPropagation();

                };

                lElement.bind("click", function(event) {

                    if (lElement.parents(".folderTreeWrapper").hasClass("withoutCheckBox")) {


                        if (!lElement.find(".folderSelector").hasClass("disabledColor")) {
                            if (lElement.hasClass("nonCheckBox")) {
                                lElement.removeClass("nonCheckBox");
                            } else {

                                lElement.addClass("tempClass");
                                scope.anchors = lElement.parents(".withoutCheckBox").find(".folderSelector").not(".disabledColor").parents("a");
                                scope.anchors.removeClass("highlight highlightActive nonCheckBox");

                                for (var anchorIndex = 0; anchorIndex < scope.anchors.length; anchorIndex++) {

                                    if (scope.anchors.eq(anchorIndex).hasClass("tempClass")) {
                                        scope.anchors.eq(anchorIndex).addClass("highlight nonCheckBox");
                                        lElement.removeClass("tempClass");
                                        event.stopPropagation();
                                    }
                                }
                            }
                        }else{
                            return false;
                        }

                        // $scope.anchors.not(".tempClass").removeClass("highlight").find("actionEach").remove();

                    } else {
                        if (scope.thisTree.find(".actionEachBox").hasClass("optionsOpen")) {
                            scope.thisTree.find(".actionEachBox.optionsOpen").parent().removeClass("highlight").find(".actionEach").remove();
                            scope.thisTree.find(".actionEachBox").removeClass("optionsOpen flagClass rightClicked");
                        }
                        scope.availableFolders = scope.thisTree.find(".folderSelector").not(".disabledColor");

                        scope.allow = false;

                        if (scope.thisTree.find(event.target).hasClass("highlight") && !scope.thisTree.find(event.target).find(".folderSelector").hasClass("disabledColor")) {
                            scope.allow = true;
                        }

                        if (!scope.thisTree.find(event.target).hasClass("highlight") && !scope.thisTree.find(event.target).parents("a").find(".folderSelector").hasClass("disabledColor")) {
                            scope.allow = true;
                        }


                        if (scope.allow) {

                            if (!scope.thisTree.find(".innerWrapper").find(event.target).length) {

                                if (lElement.find("input").attr("checked")) {

                                    lElement.find(".actionEachBox").removeClass("folderSelected");
                                    lElement.find(".folderSelector").removeClass("selected");
                                    lElement.find("input").attr("checked", false);
                                    scope.thisTree.find("input").eq(0).attr("checked", false);
                                    scope.thisTree.find("input").eq(0).parents("label").removeClass("selected");
                                } else {

                                    lElement.find(".actionEachBox").addClass("folderSelected");
                                    scope.thisTree.find(".actionEachBox").not(".folderSelected").remove();
                                    lElement.find(".actionEachBox").removeClass("optionsOpen flagClass rightClicked");
                                    lElement.addClass("highlight").find(".folderSelector").addClass("selected");
                                    lElement.find("input").attr("checked", true);


                                    scope.allSelected = 0;
                                    angular.forEach(scope.availableFolders, function(value, index) {

                                        if (index !== 0 && !angular.element(value).hasClass("selected")) {
                                            scope.allSelected++;
                                        }
                                    });

                                    if (!scope.allSelected) {
                                        angular.element(scope.availableFolders[0]).addClass("selected").find("input").attr("checked", true);
                                    }


                                    //scope.setCurrentFolder(lElement);

                                }


                                //scope.folderSelectdCallBack(scope.thisTree.find(".folderSelector.selected"));
                            }
                            //console.log("folder level check box "+lElement.find("input").attr("checked"));

                            return false;
                        } else {
                            event.stopPropagation();
                        }
                    }


                });

                scope.optionsAction = function(event, optionScope) {

                    if (optionScope.option.text === "Request Permission" || optionScope.option.text === "Export to csv") {
                        console.log(" ");
                    } else {

                        if (optionScope.option.disabledClass !== "disabled") {

                            console.log(lElement.find(".folderSelector").text());

                            scope.required = {
                                operationScope: {},
                                folders: []
                            };

                            scope.completeFolderStack.forEach(function(folder) {
                                if (folder.folderName === lElement.find(".folderSelector").text()) {
                                    scope.required.folders.push(folder);
                                }
                            });

                            scope.required.operationScope = optionScope.option;

                            ModalService.showModal({
                                templateUrl: 'dev/modules/FolderTree/template/folderActions.html',
                                controller: "folderTreeController"
                            }).then(function(modal) {
                                modal.element.modal();
                                TreeCtrl.createModal(scope.required, scope.completeFolderStack);
                            });
                        } else {
                            return false;
                        }
                    }

                    scope.thisTree.find(".actionEachBox").removeClass("optionsOpen");

                    event.stopPropagation();

                };

            }
        };
    }
]);

app.directive('vmfFileBrowse', ['$compile', '$timeout',
    function($compile, $timeout) {
        return {
            restrict: 'EA',
            scope: {
                optionId: '@',                
                optionInput:'@',
                optionBtn: '@'
            },
            link: function(scope, elem, attrs) { 
                
                scope.optionInput=scope.optionInput? scope.optionInput: 'col-xs-7 col-sm-8 col-md-4 paddingRightNone'; 
                scope.optionBtn=scope.optionBtn ?scope.optionBtn: 'col-xs-5  col-sm-4 col-md-4 noPadding';   
                 
                var temp = "";
                temp += '<div class="'+scope.optionInput+'"><input readonly="false" type="file" id="your-files" name="file" class="fileUploadCustom" /><input type="text" readonly="false" name="' + scope.optionId + '" id="' + scope.optionId + ' ng-click="browseBtn($event)" class="customFileInput"></div><div class="'+scope.optionBtn+'"><a class="vmf-btn vmf-primary browse-btn" ng-click="browseBtn($event)">Browse</a>';
                elem.append(temp);
                $compile(elem.contents())(scope); 


                elem.find("input[type=file]").on('change', function() {

                    var files = [],
                        fileArr, filename;

                    filename = elem.find("input[type=file]").val().split('\\').pop();
                    //console.log(filename);
                    //scope.fileModel = filename;
                    elem.find('.customFileInput').val(filename);
                });

                scope.browseBtn = function(e) {
                    //console.log('browse button');
                    e.preventDefault();
                    //console.log(elem.find('input[type="file"]').val());
                    elem.find('input[type="file"]').focus().click();

                };

            }

        };
    }
]);
app.directive("vmfFormTemplate", ['$compile', function($compile) {
    return{
        restrict: "EA",
        replace:true,
        transclude: true,
        scope: true,
        template:function($tElem, $tAttrs) {
           // var templt = "<form name='vmfCustomFormTemplate'><div ng-transclude></div></form>";
          //  return templt;
        },
        link: function (scope, element, attrs) {
            //var template= "<form name='vmfCustomForm' ng-transclude></form>";
            //element.append(template);
            //$compile(element.contents())(scope);    /*Adding element to the DOM*/
            // $compile(element.contents())(scope, function(cloned, scope){
            //     element.append(cloned);
            // });
        }
    };
}]);
app.directive("validation",['$compile','$timeout', function($compile,$timeout) {
    return {
        restrict : "A",
        priority : 10,
        link: function(scope, element, attrs) {
            //disable browser's default form validation.
            element.parents("form").attr("novalidate", "true");
            var $inputs = null;
            if(element.is("input"))
                $inputs = element;
            else
                $inputs = element.find("input");
            $inputs.on("blur", function() {
                //Validation object can be on  native form elements or pattern form elements.
                _validate($(this).closest("[validation]"));
            });
            
            $inputs.on("change", function() {
                var _this = this;
                $timeout(function() {
                    _validate($(_this).closest("[validation]"));
                });
                
            });

            angular.element("form").off("submit").on("submit",function() {
                
                var $all = $(this).find("*");
                for (var i = 0, j = $all.length; i < j; i++) {
                    var _this = $all.eq(i);
                    if ( typeof _this.attr("validation") !== typeof undefined) {
                        _validate(_this);
                    }
                }

                $timeout(function (){
                    Placeholders.enable();
                });
                if($(this).find(".has-error").length === 0){
                    scope.$eval($(this).attr("submit-callback"));
                }
                return false;
            });
            
            
            angular.element("form").bind("reset", function() {
                _clearValidations();
                
                $timeout(function(){
                    Placeholders.enable();
                });

                scope.isInfoMessage = false;
                scope.$apply();
            });

            function _clearValidations() {
                element.parents("form").find(".has-error").removeClass("has-error");
                element.parents("form").find(".error-label").removeClass("error-label");
                element.parents("form").find(".error-msg").remove();
                element.parents("form").find(".form-error-msg").remove();
                element.parents("form").find("label").removeClass("has-error selected");
                //element.parents("form").find(".current-selection").text("Select");
                //element.parents("form").find(".dd-opt-selected").removeClass("dd-opt-selected");
                // element.find("input").scope().model = null;
                scope.user = angular.copy(scope.masterCopy);
                scope.$apply();
            }

            function _validate($el) {
                var rules = JSON.parse($el.attr("validation"));
               
                var $inputEl;
                var $inputVal;
                var isValid = true;
                var errorMsg = "";
                var tempVal;
                if ($el.is("input")) {
                    $inputEl = $el;
                    $el.find(".error-label").removeClass("error-label");
                    $inputVal = $inputEl.val();
                    $inputVal = $inputVal.trim();
                } else if($el.is("div[vmf-select-list]")) {
                    $inputVal = $el.find(".vmf-dropdown").scope().model;
                    $inputEl = $el.find(".vmf-dropdown-content");
                    $el.find(".vmf-dropdown-content").removeClass("error-label has-error");
                }else if($el.is("vmf-radio-group")) {
                    $inputVal = $el.find("input").scope().model;
                    $inputEl = $el.find(".radioContainer label:last");
                    $el.find(".radioContainer").find("fieldset").removeClass("error-label has-error");
                } else {
                    $inputEl = $el.find("input");
                    $el.find(".error-label").removeClass("error-label");
                    $inputVal = $inputEl.val() === $inputEl.attr("placeholder") ? "" : $inputEl.val();
                    $inputVal = $inputVal.trim();
                }

                $inputEl.removeClass("has-error");
                $inputEl.closest(".formRow ").find(".error-label").removeClass("error-label");
                $inputEl.siblings(".error-msg").remove();
                if($el.is("div[vmf-checkbox-group]")) {
                    $el.find("label span").removeClass("has-error");
                    $el.find(".error-msg").remove();
                    $inputEl = $el.find("input");
                    $inputVal = $inputEl.val() === $inputEl.attr("placeholder") ? "" : $inputEl.val();
                    $inputVal = $inputVal.trim();
                }
               
                var tempTest,rule;
                for (var i = 0, j = rules.length; i < j; i++) {
                    rule = rules[i];
                    if (rule.name === "required") {
                        if($el.is("div[vmf-checkbox-group]")) {
                            if($el.find("input").scope().model) {
                                isValid = true;
                                break;
                            } else {
                                errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.required;
                                isValid = false;
                                break;
                            }
                            
                        }
                        else if ($inputVal.length === 0) {
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.required;
                            isValid = false;
                            break;
                        }
                    }
                    if (rule.name === "alphabets") {
                        if (!/^[a-z A-Z]*$/.test($inputVal)) {  
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.alphabets;
                            isValid = false;
                            break;
                        }
                    }
                    if (rule.name === "digits") {
                        if (!/^[0-9]*$/i.test($inputVal)) {
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.digits;
                            isValid = false;
                            break;
                        }
                    }
                    if (rule.name === "numbers") {
                        
                        if (/^(?=.*[0-9]).+$/.test($inputVal) && $inputVal.split(" ").length !== 1) {
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.numbers;
                            isValid = false;
                            break;
                        }
                    }
                    if (rule.name === "alphanumeric") {
                        if (!/^[a-zA-Z0-9_\-\s]*$/.test($inputVal) || $inputVal.split(" ").length !== 1) {
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.alphanumeric;
                            isValid = false;
                            break;
                        }
                    }
                    if (rule.name === "email") {
                        
                        //if (!/^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/.test($inputVal)) {
                        if (!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test($inputVal)) {
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.email;
                            break;
                        }
                    }
                    if (rule.name === "url") {
                        if (!/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/.test($inputVal)) {
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.url;
                            break;
                        }
                    }
                    if(rule.name === "minvalue"){
                        if(parseInt($inputVal,10) < parseInt(rule.value, 10)){
                            isValid = false;
                            errorMsg = rule.message || DEFAULT_ERROR_MESSAGES.minvalue;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.minvalue;
                            break;
                        }
                    }
                    if(rule.name === "maxvalue"){
                        if(parseInt($inputVal,10) > parseInt(rule.value, 10)){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.maxvalue;
                            break;
                        }
                    }
                    if(rule.name === "minLength"){
                        if($inputVal.length < parseInt(rule.value, 10) && /[ ]*/i.test($inputVal)){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.minlength;
                            break;
                        }
                    }
                    if(rule.name === "maxLength"){
                        if($inputVal.length > parseInt(rule.value, 10)  && /[ ]*/i.test($inputVal)){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.maxlength;
                            break;
                        }
                    }
                    
                    if(rule.name === "equalTo"){
                        if($inputVal !== rule.value){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.equalTo;
                            break;
                        }
                    }

                    if(rule.name === "agreement"){
                        $inputVal = $inputEl["0"].checked;
                        if(!$inputVal){

                            $inputEl = $inputEl.parent().parent();
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.agreement;
                            break;                            
                        }
                    }

                    if(rule.name === "selectOne"){
                        
                        
                        if(!$inputVal){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.select;
                            break;
                        }
                    }

                    
                    if(rule.name === "radio"){
                        if(!$inputVal){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.radio;
                            break;
                        }
                    }

                    if(rule.name === "dynamicallydefinedvalidation"){
                        tempTest = scope[rule.handle]();
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.required;
                            break;
                        }                        
                    }
                    
                    if(rule.name === "pattern"){
                        var regRule = new RegExp($inputVal);
                        if(!(regRule).test(val)){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.pattern;
                            break;
                        }
                    }
                    
                    if(rule.name === "ipaddress"){
                        tempTest = (/^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.ipaddress;
                            break;
                        }
                    }
                    
                    if(rule.name === "confirmpassword"){
                        
                        var valueToCheck = $('#'+rule.confirm_with).val();                      
                        if (valueToCheck !=='' && $inputVal !== valueToCheck) {
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.confirmPass;
                            break;
                        } else {
                            isValid = true;
                        }
                    }   
                    
                    if(rule.name === "validationonlyalphabets"){
                        tempTest = (/^[a-z]*$/i).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.validationonlyalphabets;
                            break;
                        }
                    }
                    
                    if(rule.name === "validationoneuppercaseletter"){
                        tempTest = (/^(?=.*[A-Z]).+$/).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.validationoneuppercaseletter;
                            break;
                        }
                    }
                    
                    if(rule.name === "validationonelowercaseletter"){
                        tempTest = (/^(?=.*[a-z]).+$/).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.validationonelowercaseletter;
                            break;
                        }
                    }
                    
                    if(rule.name === "validationonenumber"){
                        tempTest = (/^(?=.*[0-9]).+$/).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.validationonenumber;
                            break;
                        }
                    }
                    
                    if(rule.name === "validationonealphabet"){
                        tempTest = (/^(?=.*[a-z]).+$/i).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.validationonealphabet;
                            break;
                        }
                    }
                    
                    if(rule.name === "validationnospecialchars"){
                        tempTest = (/^[a-z0-9_\-\s]*$/i).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.validationnospecialchars;
                            break;
                        }
                    }
                    
                    if(rule.name === "creditcard"){
                          // Luhn algorithm
                          var input = $inputVal;
                          var sum = 0;
                          var numdigits = input.length;
                          var parity = numdigits % 2;
                          for(var v=0; v < numdigits; v++) {
                            var digit = parseInt(input.charAt(v));
                            if(v % 2 === parity) digit *= 2;
                            if(digit > 9) digit -= 9;
                            sum += digit;
                          }
                          tempTest = (sum % 10) === 0;

                          if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.creditcard;
                            break;
                            }
                    }
                    
                    if(rule.name === "zipcode"){
                        tempTest = (/^[0-9]{5}(?:-[0-9]{4})?$/).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.zipcode;
                            break;
                        }
                    }
                    
                    if(rule.name === "phonenumber"){
                        
                        // (123) 456-7890
                        // 123-456-7890
                        // 123.456.7890
                        // 1234567890
                        
                        tempTest = (/^[(]{0,1}[0-9]{3}[)]{0,1}[-\s\.]{0,1}[0-9]{3}[-\s\.]{0,1}[0-9]{4}$/).test($inputVal);
                        if(!tempTest){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.phonenumber;
                            break;
                        }
                    }
                    
                    if(rule.name === "rangelength"){
                        if(parseFloat($inputVal) >= rule.value[0] && parseFloat($inputVal) <= rule.value[1] ){
                            isValid = true;                            
                        }
                        else{
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.range;   
                            break;
                        }                       
                    }
                    var dateValue;
                    if(rule.name === "validationdatebeforeToday"){
                        var now;
                        now = new Date();
                        dateValue = new Date($inputVal);
                        dateValue.setDate(dateValue.getDate() + 1);
                        isValid = dateValue < now;
                        if(!isValid){
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.datebeforetoday;
                            break;
                        }
                        
                    }
                    
                    if(rule.name === "validationdatebefore"){
                        var beforeDate = rule.beforedate;
                        dateValue = new Date($inputVal);
                        dateValue.setDate(dateValue.getDate() + 1);
                        isValid = dateValue < new Date(beforeDate);
                        if(!isValid){
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.datebeforeaday;
                            errorMsg = errorMsg + rule.beforedate;
                            break;
                        }
                        
                    }
                    
                    if(rule.name === "validationdateafter"){
                        var afterDate = rule.afterdate;
                        dateValue = new Date(val);
                        dateValue.setDate(dateValue.getDate() + 1);
                        dateValue.setHours(0);
                        isValid = dateValue > new Date(afterDate);
                        if(!isValid){
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.dateafteraday;
                            errorMsg = errorMsg + rule.afterdate;
                            break;
                        }                       
                    }

                    
                    if(rule.name === "confirmationFields"){
                        if($inputVal !== $(rule.value).val()){
                            isValid = false;
                            errorMsg = rule.message || scope.DEFAULT_ERROR_MESSAGES.equalTo;
                            break;
                        }
                    }
                }
                if (!isValid) {
                    if(rule.name === "radio"){
                        $inputEl.parent().addClass('has-error');
                    } else if($el.is("div[vmf-checkbox-group]")) {
                        $inputEl.parent().addClass('has-error');
                    } 
                    else
                        $inputEl.addClass('has-error');
                    $inputEl.closest(".formRow ").find(".formLabel").addClass("");

                    if($inputEl.attr("id") === "password") { 
                        if($inputEl.next().hasClass("error-msg"))
                            $inputEl.next().remove();
                        $inputEl.parent().removeClass("passwordMatch");
                        $inputEl.closest('.vmf-pwd-wrapper').removeClass("passwordMatchBlock");
                        if(!angular.element('input#conformPassword').next().hasClass("requiredLabel"))
                        angular.element('input#conformPassword').next(".error-msg").remove();   
                    }
                    if(rule.name === "confirmpassword") {
                        if(!angular.element('#'+rule.confirm_with).next().hasClass("requiredLabel"))
                            angular.element('#'+rule.confirm_with).next().remove();
                    }
                    if($el.is("div[vmf-checkbox-group]") && !$inputEl.next().hasClass("error-msg")) {
                        $("<div class='error-msg requiredLabel'>" + errorMsg + "</div>").appendTo($inputEl.parents("label"));
                    }
                    else if(!$inputEl.next().hasClass("error-msg"))
                        $("<div class='error-msg requiredLabel'>" + errorMsg + "</div>").insertAfter($inputEl);
                    

                    scope.isInfoMessage = true;
                    scope.$apply();
                } else {
                    if(rule.name === "confirmpassword" && angular.element('#'+rule.confirm_with).val() !== "") {
                        
                        if(!angular.element('#'+rule.confirm_with).next().hasClass("error-msg")) {
                            angular.element('#'+rule.confirm_with).parent().addClass("passwordMatch");
                            $("<div class='error-msg vmf-password-matched'><span class='vmf-password-tick'></span></div>").insertAfter(angular.element('#'+rule.confirm_with));
                            $inputEl.closest('.vmf-pwd-wrapper').addClass("passwordMatchBlock");
                        }   
                         
                        $inputEl.parent().addClass("passwordMatch");
                        if(!$inputEl.next().hasClass("error-msg") && !angular.element('#'+rule.confirm_with).next().hasClass("requiredLabel")) 
                            $("<div class='error-msg vmf-password-matched'><span class='vmf-password-tick'></span> matched</div>").insertAfter($inputEl);
                    }
                }
                if(_isFormValid()){
                    element.parents("form").find(".form-error-msg").remove();
                    scope.isInfoMessage = false;
                    scope.$apply();
                }

                function _isFormValid(){
                    var valid = true;

                    if(element.parents("form").find(".has-error").length > 0){
                        valid = false;
                    }
                    return valid;
                }
            }
        },
        controller: function($scope, $window) {
            $scope.DEFAULT_ERROR_MESSAGES = {
                required : "This field is required",
                email : "This is not a valid email",
                minlength : "Minimum character limit not met",
                maxlength : "Maximum character limit exceeded",
                equalTo : "Fields are not matching",
                alphabets: "Please enter alphabets only",
                alphanumeric:"Please enter alphabets and numbers only",
                numbers:"Please enter numbers only",
                digits:"Please enter digits only",
                minvalue:"Value less than minimum",
                maxvalue:"Value greater than maximum",
                range: "Please enter in the given range",
                datebeforetoday: "Must be prior to today",
                datebeforeaday: "Must be before ",
                afterdate: "Must be after ",
                pattern: "Not matching pattern",
                ipaddress: "Not a valid IP address",
                validationonlyalphabets: "Valid characters are: A-Z, a-z",
                validationoneuppercaseletter: "Must contain at least one uppercase letter",
                validationonelowercaseletter: "Must contain at least one lowercase letter",
                validationonenumber: "Must contain at least one number",
                validationonealphabet: "Must contain at least one alphabet",
                validationnospecialchars: "Valid characters are: A-Z, a-z, 0-9",
                creditcard: "Not a valid credit card",
                zipcode: "Not a valid zip code",
                phonenumber: "Not a valid phone number",
                url:"Please enter a valid URL",
                confirmPass : "Password doesn't match",
                select:"Please select an option",
                radio:"Please select one option",
                agreement:"You must agree to the terms and conditions in order to register for a My VMware account"
            };
        }
    };
}]).directive('numbersOnly', function(){
   return {
     require: 'ngModel',
     link: function(scope, element, attrs, modelCtrl) {
       modelCtrl.$parsers.push(function (inputValue) {
           // this next if is necessary for when using ng-required on your input. 
           // In such cases, when a letter is typed first, this parser will be called
           // again, and the 2nd time, the value will be undefined
           if (inputValue === undefined) return ''; 
           var transformedInput = inputValue.replace(/[^0-9]/g, ''); 
           if (transformedInput!==inputValue) {
              modelCtrl.$setViewValue(transformedInput);
              modelCtrl.$render();
           }         

           return transformedInput;         
       });
     }
   };
});

app.directive('vmfHeaderInlineEditing', ['$compile', '$document', '$timeout',
    function($compile, $document, $timeout) {
        return {
            restrict: 'EA',
            scope: {
                model: '=',
                placeholder: '@',
                ghostText: '@'
            },

            link: function(scope, elem, attrs) {
                // console.log(attrs.targetEle);
                var template;

                if (sessionStorage.getItem("vmf-header-text")) {
                    // console.log(sessionStorage.getItem("vmf-header-text"));
                    scope.model = sessionStorage.getItem("vmf-header-text");
                }

                var backupText = scope.model;

                if (scope.model !== '') {
                    template = '<span class="vmf-header-inline-text" ng-click="editHeader($event)">' + scope.model + '</span>';
                } else {
                    template = '<span class="vmf-header-inline-text vmf-header-inline-empty" ng-click="editHeader($event)">' + scope.placeholder + '</span>';
                }
                elem.append(template);
                $compile(elem.contents())(scope);
                $("vmf-header-inline-editing").css({
                    "display": "table"
                });

                scope.edited = false;
                scope.editHeader = function($event) {

                    Tipped.hideTooltip(elem[0]);
                    Tipped.disableTooltip(elem[0]);
                    elem.html('');
                    var template = '<div class="vmf-header-inline-text vmf-header-inline-active"><input class="vmf-header-inline-active" type="text" maxlength="50" ng-model="model" ng-click="$event.stopPropagation();" ng-keyup="keyPressHeader($event)" placeholder="' + scope.ghostText + '"/></div>';
                    elem.append(template);
                    $compile(elem.contents())(scope);

                    $timeout(function() {
                        elem.find(':input.vmf-header-inline-active')[0].select();
                        $("vmf-header-inline-editing").css({
                            "display": "block"
                        });
                    });

                    scope.edited = true;
                    $event.stopPropagation();
                };

                scope.keyPressHeader = function($event) {
                    // console.log($event.which);
                    if ($event.which === 27) {
                        scope.model = backupText;
                        elem.html('');
                        if (scope.model !== '') {
                            template = '<span class="vmf-header-inline-text" ng-click="editHeader($event)">' + scope.model + '</span>';
                        } else {
                            template = '<span class="vmf-header-inline-text vmf-header-inline-empty" ng-click="editHeader($event)">' + scope.placeholder + '</span>';
                        }
                        // var template = '<div class="vmf-header-inline-text vmf-header-inline-active"><input class="vmf-header-inline-active" type="text" maxlength="50" ng-model="model" ng-click="$event.stopPropagation();" ng-keyup="keyPressHeader($event)" placeholder="' + scope.ghostText + '"/></div>';
                        elem.append(template);
                        $compile(elem.contents())(scope);
                        $("vmf-header-inline-editing").css({
                            "display": "table"
                        });

                        scope.edited = false;
                        Tipped.enableTooltip(elem[0]);
                    } else if ($event.which === 13) {
                        scope.saveHeader();
                    }
                };

                $document.on('click', function() {
                    scope.saveHeader();
                });

                scope.saveHeader = function() {
                    // console.log('calling');
                    if (scope.edited) {
                        sessionStorage.setItem("vmf-header-text", scope.model);
                        // console.log(scope.model);
                        var template = '<span class="vmf-header-saving"></span>';

                        elem.find('.vmf-header-inline-text').addClass('vmf-header-text-saving');
                        elem.find('.vmf-header-inline-text').append(template);

                        scope.edited = false;
                        $timeout(function() {
                            // console.log(elem[0]);						
                            elem.html('');
                            var template;
                            if (scope.model !== '') {
                                template = '<span class="vmf-header-inline-text vmf-header-inline-edited" ng-click="editHeader($event)">' + scope.model + '<span class="vmf-header-tick"></span></span>';
                            } else {
                                template = '<span class="vmf-header-inline-text vmf-header-inline-empty" ng-click="editHeader($event)">' + scope.placeholder + '</span>';
                            }
                            elem.append(template);
                            $compile(elem.contents())(scope);

                            $timeout(function() {
                                $("vmf-header-inline-editing").css({
                                    "display": "table"
                                });
                                if (scope.model !== '') {
                                    $(elem.find('span.vmf-header-tick')).remove();
                                }
                                Tipped.enableTooltip(elem[0]);
                            }, 2000);
                        }, 2000);

                        backupText = scope.model;
                    }
                };
            }
        };
    }
]);
app.directive('vmfModalessPopup', ['$document', '$compile', '$timeout', '$rootScope', 'ModalCloseCheckService','$window',
function($document, $compile, $timeout, $rootScope, ModalCloseCheckService,$window) {
	return {
		restrict : 'E',
		transclude : true,
		//replace:true,
		scope : {
			size : '@',
			htitle : '@',
			buttonTitle : '@',
			back : '@',
			id : '@',
            btitle:'@'

		},
		templateUrl : "dev/modules/Modaless/template/modalessTemplate.html",
		link : function(scope, elem, attrs) {
            console.log(scope.btitle);
			scope.$watch("modalShown", function(newValue, OldValue, scope) {
				if (scope.modalShown) {
					angular.element('.modalLoad').addClass('modal-open');
					angular.element('.modalLoad .modal').addClass('in').removeClass('modal');
					$rootScope.$broadcast("modalVisible");
				} else {
					angular.element('.modalLoad').removeClass('modal-open');
					angular.element('.modalLoad .in').addClass('modal').removeClass('in');
				}
			});

			scope.hideModal = function() {
				//scope.modalShown = false;
				$rootScope.$broadcast("hideModal");
				scope.modalShown = ModalCloseCheckService.getModalShow();

			};

			scope.backBtn = function() {
				
				// console.log('back button');
				$rootScope.$broadcast("cancelClicked");

				scope.modalShown = false;
                $(".modal-content").removeAttr('style');
                $(".modaless-dialog").removeClass('modaless_mini');
                $(".vmf-file-upload").removeClass('minimized');
                $(".modal-content").draggable("option", "disabled", false);
                console.log("You had clicked Back Button2");
			};

			scope.primaryBtn = function() {
				console.log("You had clicked Next Button");
				//console.log('primaryBtn');
				$rootScope.$broadcast("primaryBtnClick");
			};

			scope.modalessMin = function($event) {

				elem.find(".modaless-dialog").toggleClass('modaless_mini');
				if (elem.find(".modaless-dialog").hasClass('modaless_mini')) {
					$rootScope.$broadcast("modalMinimized");
					elem.find(".modal-content").removeAttr("style");
					elem.find(".modal-content").draggable("option", "disabled", true);
				} else {
					$rootScope.$broadcast("modalMaximized");
					elem.find(".modal-content").draggable("option", "disabled", false);
				}
				$event.stopPropagation();
			};
			scope.modalUpMax = function($event) {

				elem.find(".modaless-dialog").toggleClass('modaless_upload');
				$event.stopPropagation();
			};
			scope.modalUpToggle = function($event) {
				elem.find(".modaless-dialog").toggleClass('modaless_upload');
				$event.stopPropagation();
			};
            
            
             var w = angular.element($window);
                scope.getWindowDimensions = function() {
                    return {
                        'h': w.height(),
                        'w': w.width()
                    };
                };
                scope.$watch(scope.getWindowDimensions, function(newValue, oldValue) {
                    scope.windowHeight = newValue.h;
                    scope.windowWidth = newValue.w;
                    $(".modal-content").removeAttr('style');
                    
                }, true);
                w.bind('resize', function() {
                    if (!angular.ISIE8 && !angular.ISIE7) {
                        scope.$apply();
                    }
                });
		}
	};
}]).directive('vmfDraggable', function() {
	return {
		restict : 'A',
		link : function(scope, elem, attr) {

			var targetElement;

			if (attr.dragElement) {

				if (elem.find("#" + attr.dragElement)[0]) {
					console.log("id");
					targetElement = elem.find("#" + attr.dragElement);
				} else if (elem.find("." + attr.dragElement)[0]) {
					console.log("class");
					targetElement = elem.find("." + attr.dragElement);
				}

			} else {
				// element is not specified
				targetElement = elem;
			}

			if (attr.vmfDraggable === "true" || attr.vmfDraggable === "") {
				targetElement.draggable({
					//containment : 'window'
				});
			} else if (attr.vmfDraggable === "false") {
				targetElement.draggable("option", "disabled", true);
			}
		}
	};
}); 
app.directive("vmfSearch", ['$compile', '$document', '$timeout', '$window', function($compile, $document, $timeout, $window){
	return {
		restrict: 'EA',
		scope: {
            type: '@',
			model: '=',
			sources: '=',
			sourceSelection: '=',
			searchCallback: '=',
			suggestionCallback: '&',
			suggestionList: '=',
            sortBy: '=',
            filterModel1: '=',
            filterModel2: '=',
            filterSuggestionList1: '=',
            filterSuggestionList2: '=',
            filterModel1Selection: '=',
            filterModel2Selection: '=',
            filterModel1Hint: '@',
            filterModel2Hint: '@',
            filterModel3: '=',
            filterModel3List: '=',
            filterModel3Title: '@',
            filterModel3ListOrder: '@',
            filterModel4: '=',
            filterModel4List: '=',
            filterModel4Title: '@',
            filterModel4ListOrder: '@',
            filterModel5: '=',
            filterModel6: '=',
            filterSuggestionList5: '=',
            filterSuggestionList6: '=',
            filterModel5Selection: '=',
            filterModel6Selection: '=',
            filterModel5Hint: '@',
            filterModel6Hint: '@',
            filterModel7: '=',
            filterModel7List: '=',
            filterModel7Title: '@',
            filterModel7ListOrder: '@',
            filterModel8: '=',
            filterModel8List: '=',
            filterModel8Title: '@',
            filterModel8ListOrder: '@',
            filterModel9: '=',
            filterModel9List: '=',
            filterModel9Title: '@',
            filterModel9ListOrder: '@',
            filterModel10: '=',
            filterModel11: '=',
            filterSuggestionList10: '=',
            filterSuggestionList11: '=',
            filterModel10Selection: '=',
            filterModel11Selection: '=',
            filterModel10Hint: '@',
            filterModel11Hint: '@'
		},

		link: function(scope, elem, attrs) {
			var template = '<div class="vmf-search-bar"><input type="input" ng-model="model" ng-keyup="keySearchAction($event)" class="vmf-search-input "id="search" autocomplete="off"/>'
			              + '<div class="vmf-search-select" ng-click="showSources($event)">Source<span class="vmf-search_arrow"></span>'
                          + '<div class="vmf-search-select_box"  ng-click="$event.stopPropagation();"><div class="chk_all">'
                          + '<label for="all" class="sel_Opt"  ng-click="selectAllSources($event)"><span class="_chk act_"><input type="checkbox"/></span><span class="_opt">All</span></div></label>'
                          + '<div class="chk_grp">'
                          + '<label class="sel_Opt" ng-repeat="source in sources" ng-click="toggleSelection($event, source);"><span class="_chk act_"><input type="checkbox" name="selectedSources[]" value="{{source}}" /></span><span class="_opt">{{source}}</span></label>';

         
			template += '</div></div> </div>' 
						  + '<button class="vmf-search-button" ng-click="search($event)"><img src="/images/Search-icon.png"/></button>';

			template += '<ul class="vmf-search-suggest"><li class="vmf-search-opts" ng-repeat="item in filteredData = (suggestionList | filter:model:comparator)" ng-bind-html="item | highlight:model" ng-click="optionSelect(item)" ></li></ul></div>';

            if(scope.type === '1') {
    			template += '<div class="vmf-search-adv-filter"><div class="vmf-search-adv-txt"><span ng-click="showAdvancedFilters()" tabindex="0" ng-keyup="showAdvancedFiltersKey($event)"> Advanced filters </span></div>'
                            + '<div class="vmf-search-hide-block"><div class="row"><div class="col-md-6 col-xs-6 vmf-search-hide-hdr" ng-click="hideAdvancedFilters()" tabindex="0" ng-keyup="hideAdvancedFiltersKey($event)">Hide filters</div>'
                            + '<div class="col-md-6 col-xs-6 text-right vmf-search-hide-hdr" ng-click="resetFilters()" tabindex="0" ng-keyup="resetFiltersKey($event)">Reset</div></div>'
                			+ '<div class="row"><div class="vmf-search-hide-field auto_suggest col-xs-12"><input type="text" ng-model="filterModel1" placeholder={{filterModel1Hint}} ng-click="closeOtherFilters($event)"/>'
                    	    + '<div class="vmf-search-adv_suggest">'
                            + '<label class="sel_Opt_sug" ng-click="toggleSelectionFilter1($event, suggestion, 0)" ng-repeat="suggestion in filteredData2 = (filterSuggestionList1 | filter:filterModel1:comparator)" ng-bind-html="injectHTML(suggestion, 1) | highlight2: filterModel1"></label> </div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><input type="text" ng-model="filterModel2" placeholder={{filterModel2Hint}} ng-click="closeOtherFilters($event)"/>' 
                            + '<div class="vmf-search-adv_suggest">'
                            + '<label class="sel_Opt_sug" ng-click="toggleSelectionFilter1($event, suggestion, 1)" ng-repeat="suggestion in filteredData3 = (filterSuggestionList2 | filter:filterModel2:comparator)" ng-bind-html="injectHTML(suggestion, 2) | highlight2: filterModel2"></label> </div><div class="vmf-search-adv-selected"></div></div>'
                        	+ '<div class="vmf-search-hide-field col-xs-12"><div vmf-select-list model="filterModel3" list="filterModel3List" htitle={{filterModel3Title}} sub="false" sortby={{filterModel3ListOrder}}></div><div class="vmf-search-adv-selected"></div></div>'
                    		+ '<div class="vmf-search-hide-field col-xs-12"><div vmf-select-list model="filterModel4" list="filterModel4List" htitle={{filterModel4Title}} sub="false" sortby={{filterModel4ListOrder}}></div><div class="vmf-search-adv-selected"></div></div></div></div>'
                			+ '<div class="row vmf-search_desc_md"><div class="col-md-6 col-xs-12 vmf-search-adv-res"><span class="res-count"></span> results for <span class="txt_bld search-keyword"></span></div>'
                    		+ '<div class="col-md-6  col-xs-12 vmf-search-adv-res text-right">';

                if(scope.sortBy === 0) {
                    template += '<span class="txt_bld">Sort by:</span> <a class="link_txt_act" ng-click="selectSortBy($event, 0)">Relevance</a>, <a class="link_txt" ng-click="selectSortBy($event, 1)">Creation Date</a>, <a class="link_txt" ng-click="selectSortBy($event, 2)">Update date</a></div></div></div>';
                }            
                else if(scope.sortBy === 1) {
                    template += '<span class="txt_bld">Sort by:</span> <a class="link_txt" ng-click="selectSortBy($event, 0)">Relevance</a>, <a class="link_txt_act" ng-click="selectSortBy($event, 1)">Creation Date</a>, <a class="link_txt" ng-click="selectSortBy($event, 2)">Update date</a></div></div></div>';
                }
                else if(scope.sortBy === 2) {
                    template += '<span class="txt_bld">Sort by:</span> <a class="link_txt" ng-click="selectSortBy($event, 0)">Relevance</a>, <a class="link_txt" ng-click="selectSortBy($event, 1)">Creation Date</a>, <a class="link_txt_act" ng-click="selectSortBy($event, 2)">Update date</a></div></div></div>';
                }        	
            }                
            else if(scope.type === '2') {
                template += '<div class="vmf-vertical-search"><div class="vmf-search-adv-txt"><span ng-click="showAdvancedFiltersVertical()" tabindex="0" ng-keyup="showAdvancedFiltersVerticalKey($event)"> Advanced filters</span></div><div class="vmf-search-left-filter"><div class="row"><div class="col-md-6 col-xs-6 vmf-search-hide-hdr" ng-click="hideAdvancedFiltersVertical()" tabindex="0" ng-keyup="hideAdvancedFiltersVerticalKey($event)">Hide filters</div>'
                            + '<div class="col-md-6 col-xs-6 text-right vmf-search-hide-hdr" ng-click="resetFilters()" tabindex="0" ng-keyup="resetFiltersKey($event)">Reset</div></div><div class="vmf-search-filter-hdr">Filter By:</div>'
                            + '<div class="row"><div class="vmf-search-hide-field col-xs-12"><input type="text" ng-model="filterModel1" placeholder={{filterModel1Hint}} ng-click="closeOtherFilters($event)"/>'
                            + '<div class="vmf-search-adv_suggest">'
                            + '<label class="sel_Opt_sug" ng-click="toggleSelectionFilter1($event, suggestion, 0)" ng-repeat="suggestion in filteredData2 = (filterSuggestionList1 | filter:filterModel1:comparator)" ng-bind-html="injectHTML(suggestion, 1) | highlight2: filterModel1"></label></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><input type="text" ng-model="filterModel2" placeholder={{filterModel2Hint}} ng-click="closeOtherFilters($event)"/>'
                            + '<div class="vmf-search-adv_suggest">'
                            + '<label class="sel_Opt_sug" ng-click="toggleSelectionFilter1($event, suggestion, 1)" ng-repeat="suggestion in filteredData3 = (filterSuggestionList2 | filter:filterModel2:comparator)" ng-bind-html="injectHTML(suggestion, 2) | highlight2: filterModel2"></label></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><div vmf-select-list model="filterModel3" list="filterModel3List" htitle={{filterModel3Title}} sub="false" sortby={{filterModel3ListOrder}}></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><div vmf-select-list model="filterModel4" list="filterModel4List" htitle={{filterModel4Title}} sub="false" sortby={{filterModel4ListOrder}}></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><input type="text" ng-model="filterModel5" placeholder={{filterModel5Hint}} ng-click="closeOtherFilters($event)"/>'
                            + '<div class="vmf-search-adv_suggest">'
                            + '<label class="sel_Opt_sug" ng-click="toggleSelectionFilter1($event, suggestion, 4)" ng-repeat="suggestion in filteredData4 = (filterSuggestionList5 | filter:filterModel5:comparator)" ng-bind-html="injectHTML(suggestion, 5) | highlight2: filterModel5"></label></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><input type="text" ng-model="filterModel6" placeholder={{filterModel6Hint}} ng-click="closeOtherFilters($event)"/>'
                            + '<div class="vmf-search-adv_suggest">'
                            + '<label class="sel_Opt_sug" ng-click="toggleSelectionFilter1($event, suggestion, 5)" ng-repeat="suggestion in filteredData5 = (filterSuggestionList6 | filter:filterModel6:comparator)" ng-bind-html="injectHTML(suggestion, 6) | highlight2: filterModel6"></label></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><div vmf-select-list model="filterModel7" list="filterModel7List" htitle={{filterModel7Title}} sub="false" sortby={{filterModel7ListOrder}}></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><div vmf-select-list model="filterModel8" list="filterModel8List" htitle={{filterModel8Title}} sub="false" sortby={{filterModel8ListOrder}}></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><div vmf-select-list model="filterModel9" list="filterModel9List" htitle={{filterModel9Title}} sub="false" sortby={{filterModel9ListOrder}}></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><input type="text" ng-model="filterModel10" placeholder={{filterModel10Hint}} ng-click="closeOtherFilters($event)"/>'
                            + '<div class="vmf-search-adv_suggest">'
                            + '<label class="sel_Opt_sug" ng-click="toggleSelectionFilter1($event, suggestion, 9)" ng-repeat="suggestion in filteredData6 = (filterSuggestionList10 | filter:filterModel10:comparator)" ng-bind-html="injectHTML(suggestion, 10) | highlight2: filterModel10"></label></div><div class="vmf-search-adv-selected"></div></div>'
                            + '<div class="vmf-search-hide-field col-xs-12"><input type="text" ng-model="filterModel11" placeholder={{filterModel11Hint}} ng-click="closeOtherFilters($event)"/>'
                            + '<div class="vmf-search-adv_suggest">'
                            + '<label class="sel_Opt_sug" ng-click="toggleSelectionFilter1($event, suggestion, 10)" ng-repeat="suggestion in filteredData7 = (filterSuggestionList11 | filter:filterModel11:comparator)" ng-bind-html="injectHTML(suggestion, 11) | highlight2: filterModel11"></label></div><div class="vmf-search-adv-selected"></div></div>'
                            + '</div></div>'
                            + '<div class="vmf-search-right-content"><div class="row"><div class="col-md-6 col-xs-12 vmf-search-adv-res">'
                            + '<span class="res-count"></span> results for <span class="txt_bld search-keyword"></span></div><div class="col-md-6  col-xs-12 vmf-search-adv-res text-right"><span class="txt_bld">Sort by:</span> ';
                
                if(scope.sortBy === 0) {
                    template += '<a class="link_txt_act" ng-click="selectSortBy($event, 0)">Relevance</a>, <a class="link_txt" ng-click="selectSortBy($event, 1)">Creation Date</a></div></div></div></div>';
                }            
                else if(scope.sortBy === 1) {
                    template += '<a class="link_txt" ng-click="selectSortBy($event, 0)">Relevance</a>, <a class="link_txt_act" ng-click="selectSortBy($event, 1)">Creation Date</a></div></div></div></div>';
                }
                
            
            }    
            
            scope.injectHTML = function(suggestion, id) {
                // console.log("injecting" + suggestion);
                // console.log(scope.filterModel1Selection.indexOf(suggestion));
                var idx;
                if(id === 1) {//console.log("injecting" + suggestion);
                    idx = scope.filterModel1Selection.indexOf(suggestion);
                    if(idx > -1) {
                        //suggested element is already checked
                        scope.chkboxHtml = "<span class=\"_chk act_\"><input type=\"checkbox\" name=\"selectedFilters1[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";
                    }
                    else {
                        scope.chkboxHtml = "<span class=\"_chk\"><input type=\"checkbox\" name=\"selectedFilters1[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";    
                    }
                }  
                else if(id === 2) {
                    idx = scope.filterModel2Selection.indexOf(suggestion);
                    if(idx > -1) {
                        //suggested element is already checked
                        scope.chkboxHtml = "<span class=\"_chk act_\"><input type=\"checkbox\" name=\"selectedFilters2[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";
                    }
                    else {
                        scope.chkboxHtml = "<span class=\"_chk\"><input type=\"checkbox\" name=\"selectedFilters2[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";    
                    }
                }   
                else if(id === 5) {
                    idx = scope.filterModel5Selection.indexOf(suggestion);
                    if(idx > -1) {
                        //suggested element is already checked
                        scope.chkboxHtml = "<span class=\"_chk act_\"><input type=\"checkbox\" name=\"selectedFilters5[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";
                    }
                    else {
                        scope.chkboxHtml = "<span class=\"_chk\"><input type=\"checkbox\" name=\"selectedFilters5[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";    
                    }
                } 
                else if(id === 6) {
                    idx = scope.filterModel6Selection.indexOf(suggestion);
                    if(idx > -1) {
                        //suggested element is already checked
                        scope.chkboxHtml = "<span class=\"_chk act_\"><input type=\"checkbox\" name=\"selectedFilters6[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";
                    }
                    else {
                        scope.chkboxHtml = "<span class=\"_chk\"><input type=\"checkbox\" name=\"selectedFilters6[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";    
                    }
                }
                else if(id === 10) {
                    idx = scope.filterModel10Selection.indexOf(suggestion);
                    if(idx > -1) {
                        //suggested element is already checked
                        scope.chkboxHtml = "<span class=\"_chk act_\"><input type=\"checkbox\" name=\"selectedFilters10[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";
                    }
                    else {
                        scope.chkboxHtml = "<span class=\"_chk\"><input type=\"checkbox\" name=\"selectedFilters10[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";    
                    }
                }
                else if(id === 11) {
                    idx = scope.filterModel11Selection.indexOf(suggestion);
                    if(idx > -1) {
                        //suggested element is already checked
                        scope.chkboxHtml = "<span class=\"_chk act_\"><input type=\"checkbox\" name=\"selectedFilters11[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";
                    }
                    else {
                        scope.chkboxHtml = "<span class=\"_chk\"><input type=\"checkbox\" name=\"selectedFilters11[]\" value=\"" + suggestion + "\" /></span><span class=\"_opt\">" + suggestion + "</span>";    
                    }
                }        
                // console.log(scope.chkboxHtml);
                return scope.chkboxHtml;
            };
        
    		elem.append(template);

    		$compile(elem.contents())(scope);
            // console.log(scope.filterModel1);
    		var sourcesVisible = false;
    		elem.find('.vmf-search-select_box').hide();
    		elem.find('.vmf-search-suggest').hide();
            elem.find('.vmf-search-hide-block').hide();
            elem.find('.vmf-search-left-filter').hide();
            elem.find('.vmf-search-adv-res').hide();

    		// console.log(scope.suggestionList);
    		scope.showSources = function($event) {
    			if(sourcesVisible) {
    				elem.find('.vmf-search-select_box').hide();
    				sourcesVisible = false;
    			}
    			else{
    				elem.find('.vmf-search-select_box').show();
    				sourcesVisible = true;
    			}

    			$event.stopPropagation();
    		};

            var selectSource = false;
    		scope.toggleSelection = function($event, source) {
    			// console.log($event.target.tagName);
    			if( $event.target.tagName === "INPUT" ) {

         			angular.element($event.currentTarget).find('._chk').toggleClass('act_');
         			elem.find('label[for="all"] > span._chk').removeClass('act_'); 

    				var idx = scope.sourceSelection.indexOf(source);
	  
			    	if (idx > -1) {
				        scope.sourceSelection.splice(idx, 1);
				    }
				  
				    else {
				        scope.sourceSelection.push(source);
				    }
                    selectSource = true;
                    scope.search();
                    selectSource = false;
    			}

    			
    		};

    		scope.selectAllSources = function($event) {
    			// console.log($event.target.tagName);
    			// console.log($event.currentTarget.tagName);
    			// if( $event.target.tagName === "INPUT" ) {
         		angular.element($event.currentTarget).find('._chk').toggleClass('act_');
         		var allSelected = angular.element($event.currentTarget).find('._chk').hasClass('act_');
         		if(allSelected) {
    				scope.sourceSelection = scope.sources.slice();
    				elem.find('div.chk_grp ._chk').addClass('act_');
    			}
    			else {
                    elem.find('div.chk_grp ._chk').removeClass('act_');
    				scope.sourceSelection = [];	
    			}
                selectSource = true;
                $timeout(function() {
                    scope.search();
                    selectSource = false;
                });
                
                
    		};

            scope.closeOtherFilters = function($event) {
                elem.find('.vmf-search-adv_suggest').hide();
                elem.find('.vmf-dropdown-content').find('ul').hide();
                $event.stopPropagation();
            };

    		scope.$watch('model', function(n, o) {
                $timeout(function(){
                    if(n && n.length >= 1) {
                        
                        if(!scope.empty && !scope.updating) {
                            elem.find('.vmf-search-suggest').show();
                            scope.updating = false; 
                        }
                        else if(scope.updating) {
                            scope.updating = false;
                        }    
                    }
                    else{
                        elem.find('li.vmf-search-opts').removeClass('vmf-search-opt-hover');
                        scope.currentIndex = -1;
                        elem.find('.vmf-search-suggest').hide();

                    }
                });
                    
            });

            scope.empty = false;

            scope.$watchCollection('filteredData', function(n, o) {
            	// console.log('filteredData'); console.log(n);console.log(o);
                if(n.length === 0) {
                    scope.empty = true;
                    // console.log(true);
                    elem.find('.vmf-search-suggest').hide();
                }
                else {
                    scope.empty = false;
                    // console.log(false);
                }
                elem.find('li.vmf-search-opts').removeClass('vmf-search-opt-hover');
                scope.currentIndex = -1;
               
            });

            var resultsPageInit = false;

    		scope.search = function($event) {
                if(!selectSource)
                    elem.find('.vmf-search-select_box').hide();
    			sourcesVisible = false;
                scope.model = $.trim(scope.model);
    			
                if(typeof scope.model !== 'undefined' && scope.model !== '') {
                    scope.results = scope.searchCallback(scope.model);
                    $timeout(function() {
                        elem.find('.vmf-search-adv-res').show();
                        elem.find('.vmf-search-adv-res > span.res-count').text(scope.results.articles.length);
                        elem.find('.vmf-search-adv-res > span.txt_bld.search-keyword').text(scope.model);

                        // console.log('length' + scope.results);
                    });
                        
                    // console.log(scope.sortBy);
                    // console.log(scope.results);
                    // console.log('before compiling');
                    if(!resultsPageInit) {
                        var template = '<div vmf-pagination2 class="vmf-pagination2" type="2" page-data="results"></div>';
                        if(scope.type === '1') {
                            elem.append(template);
                        }
                        else if(scope.type === '2') {
                            elem.find('.vmf-search-right-content').append(template);    
                        }  
                        $timeout(function() {
                            // console.log(elem.find('.vmf-pagination2')[0]);
                            $compile(elem.find('.vmf-pagination2')[0])(scope);
                        });   
                        resultsPageInit = true; 
                    }    
                }

    		};

            scope.currentIndex = -1;

    		scope.keySearchAction = function($event) {

                var list, dd;
    			
    			if($event.keyCode === 13) {        
                    scope.selected = true;
                    list = elem.find('li.vmf-search-opts'); 
                     // console.log('select');console.log(scope.currentIndex);
                    if(scope.currentIndex >= 0 && scope.currentIndex < list.length) {

                        scope.updating = true;
                        scope.model = angular.element(list[scope.currentIndex]).text();

                        elem.find('li.vmf-combobox-opt').removeClass('vmf-search-opt-hover'); 
                        // angular.element(list[scope.currentIndex]).addClass('vmf-combobox-opt-selected');

                        /* resetting currentIndex */
                        scope.currentIndex = -1;
                    }


                    // scope.searchCallback(scope.model);
                    elem.find('.vmf-search-suggest').hide();                    
                    scope.search($event);
                
                }
                else if($event.which === 40) {
                    dd = elem.find('.vmf-search-suggest');
                    if(dd.is(':visible')) {
                        $event.preventDefault();
                        list = elem.find('li.vmf-search-opts');

                        if(scope.currentIndex < list.length - 1) {
                            elem.find('li.vmf-search-opts').removeClass('vmf-search-opt-hover'); 
                            scope.currentIndex += 1;
                            angular.element(list[scope.currentIndex]).addClass('vmf-search-opt-hover');
                            list[scope.currentIndex].focus();
                        }   
                    }
                    else {
                        angular.element('li.vmf-search-opts').removeClass('vmf-search-opt-hover'); 
                        scope.currentIndex = -1;
                    }

                }
                else if($event.which === 38) {
                    dd = elem.find('.vmf-search-suggest');
                    if(dd.is(':visible')) {
                        $event.preventDefault();
                        list = elem.find('li.vmf-search-opts'); 

                        if(scope.currentIndex > 0) {
                            elem.find('li.vmf-search-opts').removeClass('vmf-search-opt-hover'); 
                            scope.currentIndex -= 1;
                            angular.element(list[scope.currentIndex]).addClass('vmf-search-opt-hover');
                            list[scope.currentIndex].focus();
                        }   
                    }                        
                    else {
                        elem.find('li.vmf-search-opts').removeClass('vmf-search-opt-hover');
                        scope.currentIndex = -1; 
                    }
                }
                else {
                	scope.suggestionCallback();
                }

    		};

            scope.updating = false;
    		scope.optionSelect =  function(item) {
                // console.log('clicked');
                // console.log(item);
                elem.find('input#search').val(item);

                scope.selected = true;

                scope.updating = true;    
                scope.model = item;
                

                scope.results = scope.searchCallback(item);
                if(!resultsPageInit) {
                    var template = '<div vmf-pagination2 class="vmf-pagination2" type="2" page-data="results"></div>';
                    if(scope.type === '1') {
                        elem.append(template);
                    }
                    else if(scope.type === '2') {
                        elem.find('.vmf-search-right-content').append(template);    
                    }
                    $timeout(function() {
                        // console.log(elem.find('.vmf-pagination2')[0]);
                        $compile(elem.find('.vmf-pagination2')[0])(scope);
                        $timeout(function() {
                            elem.find('.vmf-search-adv-res').show();
                            elem.find('.vmf-search-adv-res > span.res-count').text(scope.results.articles.length);
                            elem.find('.vmf-search-adv-res > span.txt_bld.search-keyword').text(scope.model);
                        });
                    });   
                    resultsPageInit = true; 
                }   
            };

    		$document.on('click', function() {
    			elem.find('.vmf-search-select_box').hide();
    			elem.find('.vmf-search-suggest').hide();
                elem.find('li.vmf-search-opts').removeClass('vmf-search-opt-hover');
                scope.currentIndex = -1; 
                elem.find('.vmf-search-adv_suggest').hide();
    			sourcesVisible = false;
    		});

    		scope.comparator = function(actual, expected) {
                var actualWords = actual.split(' ');
                var expectedWords = expected.split(' ');
                // console.log(actualWords); console.log(expectedWords);

                var i, j;

                var match = true;

                for(i = 0; i < expectedWords.length; i++) {
                    expectedWords[i] = expectedWords[i].toLowerCase();
                    // console.log('*****' + expectedWords[i]);
                }    

                for(j = 0; j < actualWords.length; j++) {
                    actualWords[j] = actualWords[j].toLowerCase();
                }    

                // console.log(actualWords); console.log(expectedWords);
                var startingIndex = 0;
                for(i = 0; i < expectedWords.length; i++) {
                    var found = false;

                    
                    // console.log('startingIndex ' + startingIndex);

                    for(j = startingIndex; j < actualWords.length; j++) {
                        // console.log('matching ' + expectedWords[i]);
                        // console.log(actualWords[j].indexOf(expectedWords[i]));
                        if(actualWords[j].indexOf(expectedWords[i]) !== -1) {
                            found = true;
                            // console.log('matching' + j);
                            startingIndex = j + 1;
                            // console.log('startingIndex inside ' + startingIndex);                            
                            break;            
                        }
                    }

                    if(!found) {
                        return false;
                    }

                    // console.log('startingIndex outside ' + startingIndex);
                }

                return true;
            };


            scope.selectSortBy = function($event, id) {
                
                if(scope.sortBy !== id) {
                    scope.sortBy = id;
                    $timeout(function() {
                        scope.search();    
                    });
                    
                    elem.find('.vmf-search-adv-res.text-right').find('a').removeClass('link_txt_act');
                    elem.find('.vmf-search-adv-res.text-right').find('a').addClass('link_txt');
                    angular.element(elem.find('.vmf-search-adv-res.text-right').find('a')[id]).addClass('link_txt_act');
                }    
            };

            scope.showAdvancedFilters = function() {
                elem.find('.vmf-search-adv-txt').hide();
                elem.find('.vmf-search-hide-block').show();
            };

            scope.showAdvancedFiltersKey = function($event) {
                if($event.which === 13) {
                    scope.showAdvancedFilters();
                }
            };

            scope.hideAdvancedFilters = function() {
                elem.find('.vmf-search-adv-txt').show();
                elem.find('.vmf-search-hide-block').hide();  
            };

            scope.hideAdvancedFiltersKey = function($event) {
                if($event.which === 13) {
                    scope.hideAdvancedFilters();
                }
            };

            var verticalAdvFiltersVisible = false;
            scope.showAdvancedFiltersVertical = function() {
                elem.find('.vmf-search-adv-txt').hide();
                elem.find('.vmf-search-left-filter').show();
                if($window.screen.availWidth >= 992) {
                    elem.find('.vmf-search-right-content').css('width', '525px');
                }
                else {
                    console.log($window.screen.availWidth);
                    elem.find('.vmf-search-right-content').css('width', 'auto');
                }
                verticalAdvFiltersVisible = true;
            };
            
            scope.showAdvancedFiltersVerticalKey = function($event) {
                if($event.which === 13) {
                    scope.showAdvancedFiltersVertical();        
                }
            };

            scope.hideAdvancedFiltersVertical = function() {
                elem.find('.vmf-search-adv-txt').show();
                elem.find('.vmf-search-left-filter').hide(); 
                if($window.screen.availWidth >= 992) {
                    elem.find('.vmf-search-right-content').css('width', '850px');
                }
                else {console.log($window.screen.availWidth);
                    elem.find('.vmf-search-right-content').css('width', 'auto');   
                }
                verticalAdvFiltersVisible = false;
            };

            $window.onresize = function() {
                if($window.innerHeight >= 992) {
                    
                    if(verticalAdvFiltersVisible) {
                        elem.find('.vmf-search-right-content').css('width', '525px');
                    }
                    else {
                        elem.find('.vmf-search-right-content').css('width', '850px');
                    }    
                }    
                else {
                    elem.find('.vmf-search-right-content').css('width', 'auto');
                }
            };

            scope.hideAdvancedFiltersVerticalKey = function($event) {
                if($event.which === 13) {
                    scope.hideAdvancedFiltersVertical();
                }
            };


            scope.toggleSelectionFilter1 = function($event, suggestion, ind) {
                
                $event.stopPropagation();
                if( $event.target.tagName === "INPUT" ) {

                    angular.element($event.currentTarget).find('._chk').toggleClass('act_');
                    var idx;
                    if(ind === 0) {
                        idx = scope.filterModel1Selection.indexOf(suggestion);
                    }
                    else if(ind === 1) {
                        idx = scope.filterModel2Selection.indexOf(suggestion);   
                    }    
                    else if(ind === 4) {
                        idx = scope.filterModel5Selection.indexOf(suggestion);   
                    }
                    else if(ind === 5) {
                        idx = scope.filterModel6Selection.indexOf(suggestion);   
                    }
                    else if(ind === 9) {
                        idx = scope.filterModel10Selection.indexOf(suggestion);   
                    }    
                    else if(ind === 10) {
                        idx = scope.filterModel11Selection.indexOf(suggestion);   
                    }    
      
                    if (idx > -1) {
                        if(ind === 0) {
                            scope.filterModel1Selection.splice(idx, 1);
                        }    
                        else if(ind === 1) {
                            scope.filterModel2Selection.splice(idx, 1);
                        }    
                        else if(ind === 4) {
                            scope.filterModel5Selection.splice(idx, 1);
                        }
                        else if(ind === 5) {
                            scope.filterModel6Selection.splice(idx, 1);
                        }     
                        else if(ind === 9) {
                            scope.filterModel10Selection.splice(idx, 1);
                        }     
                        else if(ind === 10) {
                            scope.filterModel11Selection.splice(idx, 1);
                        }     
                        //removing from dom
                        // console.log(angular.element(elem.find('.vmf-search-hide-field')[0]).find('.search_close_suggest'));
                        angular.element(elem.find('.vmf-search-hide-field')[ind]).find('.search_close_suggest')[idx].remove();
                    }
                  
                    else {
                    
                        var filterOptionTemplate = '<div class="search_close_suggest"><span class="close_sug_icon" ng-click="removeFilterOption($event, ' + ind + ')" tabindex="0" ng-keyup="removeFilterOptionKey($event, ' + ind + ')"></span><span class="close_sug_txt">' + suggestion + '</span></div>';
                        
                        angular.element(elem.find('.vmf-search-hide-field')[ind]).find('.vmf-search-adv-selected').append(filterOptionTemplate);
                        $compile(angular.element(elem.find('.vmf-search-hide-field')[ind]).find('.vmf-search-adv-selected'))(scope);

                        if(ind === 0) {
                            scope.filterModel1Selection.push(suggestion);
                        }
                        else if(ind === 1) {
                            scope.filterModel2Selection.push(suggestion);   
                        }
                        else if(ind === 4) {
                            scope.filterModel5Selection.push(suggestion);   
                        }
                        else if(ind === 5) {
                            scope.filterModel6Selection.push(suggestion);   
                        }
                        else if(ind === 9) {
                            scope.filterModel10Selection.push(suggestion);   
                        }
                        else if(ind === 10) {
                            scope.filterModel11Selection.push(suggestion);   
                        }
                            
                    }
                    
                    scope.search();
                }    
            };

            scope.removeFilterOption = function($event, ind) {

                // console.log(angular.element($event.currentTarget).parent());
                angular.element($event.currentTarget).parent().remove();
                var option = angular.element($event.currentTarget).parent().find('.close_sug_txt').text();
                // console.log(option);
                var idx;
                if(ind === 0) {
                    idx = scope.filterModel1Selection.indexOf(option);
                    scope.filterModel1Selection.splice(idx, 1);
                }
                else if(ind === 1) { 
                    idx = scope.filterModel2Selection.indexOf(option);   
                    scope.filterModel2Selection.splice(idx, 1);
                }
                else if(ind === 2) {
                    scope.filterModel3 = null;
                    angular.element(elem.find('.vmf-search-hide-field')[ind]).find('.vmf-dropdown-content').find('li').removeClass('dd-opt-selected');
                }
                else if(ind === 3) {
                    scope.filterModel4 = null;
                    angular.element(elem.find('.vmf-search-hide-field')[ind]).find('.vmf-dropdown-content').find('li').removeClass('dd-opt-selected');
                }
                else if(ind === 4) { 
                    idx = scope.filterModel5Selection.indexOf(option);   
                    scope.filterModel5Selection.splice(idx, 1);
                }    
                else if(ind === 5) { 
                    idx = scope.filterModel6Selection.indexOf(option);   
                    scope.filterModel6Selection.splice(idx, 1);
                }
                else if(ind === 6) {
                    scope.filterModel7 = null;
                    angular.element(elem.find('.vmf-search-hide-field')[ind]).find('.vmf-dropdown-content').find('li').removeClass('dd-opt-selected');
                }
                else if(ind === 7) {
                    scope.filterModel8 = null;
                    angular.element(elem.find('.vmf-search-hide-field')[ind]).find('.vmf-dropdown-content').find('li').removeClass('dd-opt-selected');
                }
                else if(ind === 8) {
                    scope.filterModel9 = null;
                    angular.element(elem.find('.vmf-search-hide-field')[ind]).find('.vmf-dropdown-content').find('li').removeClass('dd-opt-selected');
                }
                else if(ind === 9) { 
                    idx = scope.filterModel10Selection.indexOf(option);   
                    scope.filterModel10Selection.splice(idx, 1);
                }
                else if(ind === 10) { 
                    idx = scope.filterModel11Selection.indexOf(option);   
                    scope.filterModel11Selection.splice(idx, 1);
                }
                
                $event.stopPropagation();

                scope.search();

            };

            scope.removeFilterOptionKey = function($event, ind) {
                if($event.which === 13) {
                    scope.removeFilterOption($event, ind);
                }
            };
            
            scope.$watch('filterModel1', function(n, o) {
                $timeout(function(){
                    if(n && n.length >= 1) {
                        
                        if(!scope.empty2)
                            angular.element(elem.find('.vmf-search-adv_suggest')[0]).show();
                    }
                    else{
                        
                        angular.element(elem.find('.vmf-search-adv_suggest')[0]).hide();
                    }
                });
                    
            });

            scope.empty2 = false;

            scope.$watchCollection('filteredData2', function(n, o) {
                // console.log('filteredData'); console.log(n);console.log(o);
                if(n.length === 0) {
                    scope.empty2 = true;
                    // console.log(true);
                    angular.element(elem.find('.vmf-search-adv_suggest')[0]).hide();
                }
                else {
                    scope.empty2 = false;
                    // console.log(false);
                }
               
            });

            scope.$watch('filterModel2', function(n, o) {
                $timeout(function(){
                    if(n && n.length >= 1) {
                        
                        if(!scope.empty3)
                            angular.element(elem.find('.vmf-search-adv_suggest')[1]).show();
                    }
                    else{
                        
                        angular.element(elem.find('.vmf-search-adv_suggest')[1]).hide();
                    }
                });
                    
            });

            scope.empty3 = false;

            scope.$watchCollection('filteredData3', function(n, o) {
                // console.log('filteredData'); console.log(n);console.log(o);
                if(n.length === 0) {
                    scope.empty3 = true;
                    // console.log(true);
                    angular.element(elem.find('.vmf-search-adv_suggest')[1]).hide();
                }
                else {
                    scope.empty3 = false;
                    // console.log(false);
                }
               
            });

            scope.$watch('filterModel3', function(n, o) {
                if(n && n !== o) {
                    // console.log(n);console.log(o);

                    var pos = scope.filterModel3List.map(function(x) {return x.value;}).indexOf(n);

                    var filterOptionTemplate = '<div class="search_close_suggest vmf-search_opt-rem"><span class="close_sug_icon" ng-click="removeFilterOption($event, 2)" tabindex="0" ng-keyup="removeFilterOptionKey($event, 2)"></span><span class="close_sug_txt">' + scope.filterModel3List[pos].text + '</span></div>';
                    angular.element(elem.find('.vmf-search-hide-field')[2]).find('.vmf-search-adv-selected').html('');                        
                    angular.element(elem.find('.vmf-search-hide-field')[2]).find('.vmf-search-adv-selected').append(filterOptionTemplate);
                    $compile(angular.element(elem.find('.vmf-search-hide-field')[2]).find('.vmf-search-adv-selected'))(scope);

                    scope.search();
                }
                    
            });

            scope.$watch('filterModel4', function(n, o) {
                if(n && n !== o) {
                    // console.log(n);console.log(o);

                    var pos = scope.filterModel4List.map(function(x) {return x.value;}).indexOf(n);

                    var filterOptionTemplate = '<div class="search_close_suggest vmf-search_opt-rem"><span class="close_sug_icon" ng-click="removeFilterOption($event, 3)" tabindex="0" ng-keyup="removeFilterOptionKey($event, 3)"></span><span class="close_sug_txt">' + scope.filterModel4List[pos].text + '</span></div>';
                    angular.element(elem.find('.vmf-search-hide-field')[3]).find('.vmf-search-adv-selected').html('');                        
                    angular.element(elem.find('.vmf-search-hide-field')[3]).find('.vmf-search-adv-selected').append(filterOptionTemplate);
                    $compile(angular.element(elem.find('.vmf-search-hide-field')[3]).find('.vmf-search-adv-selected'))(scope);

                    scope.search();
                }
                    
            });

            scope.$watch('filterModel5', function(n, o) {
                $timeout(function(){
                    if(n && n.length >= 1) {
                        
                        if(!scope.empty5)
                            angular.element(elem.find('.vmf-search-adv_suggest')[2]).show();
                    }
                    else{
                        
                        angular.element(elem.find('.vmf-search-adv_suggest')[2]).hide();
                    }
                });
                    
            });

            scope.empty5 = false;

            scope.$watchCollection('filteredData4', function(n, o) {
                // console.log('filteredData'); console.log(n);console.log(o);
                if(n && n.length === 0) {
                    scope.empty5 = true;
                    // console.log(true);
                    angular.element(elem.find('.vmf-search-adv_suggest')[2]).hide();
                }
                else {
                    scope.empty5 = false;
                    // console.log(false);
                }
               
            });

            scope.$watch('filterModel6', function(n, o) {
                $timeout(function(){
                    if(n && n.length >= 1) {
                        
                        if(!scope.empty6)
                            angular.element(elem.find('.vmf-search-adv_suggest')[3]).show();
                    }
                    else{
                        
                        angular.element(elem.find('.vmf-search-adv_suggest')[3]).hide();
                    }
                });
                    
            });

            scope.empty6 = false;

            scope.$watchCollection('filteredData5', function(n, o) {
                // console.log('filteredData'); console.log(n);console.log(o);
                if(n && n.length === 0) {
                    scope.empty6 = true;
                    // console.log(true);
                    angular.element(elem.find('.vmf-search-adv_suggest')[3]).hide();
                }
                else {
                    scope.empty5 = false;
                    // console.log(false);
                }
               
            });

            scope.$watch('filterModel7', function(n, o) {
                if(n && n !== o) {
                    // console.log(n);console.log(o);

                    var pos = scope.filterModel7List.map(function(x) {return x.value;}).indexOf(n);

                    var filterOptionTemplate = '<div class="search_close_suggest vmf-search_opt-rem"><span class="close_sug_icon" ng-click="removeFilterOption($event, 6)" tabindex="0" ng-keyup="removeFilterOptionKey($event, 6)"></span><span class="close_sug_txt">' + scope.filterModel7List[pos].text + '</span></div>';
                    angular.element(elem.find('.vmf-search-hide-field')[6]).find('.vmf-search-adv-selected').html('');                        
                    angular.element(elem.find('.vmf-search-hide-field')[6]).find('.vmf-search-adv-selected').append(filterOptionTemplate);
                    $compile(angular.element(elem.find('.vmf-search-hide-field')[6]).find('.vmf-search-adv-selected'))(scope);

                    scope.search();
                }
                    
            });

            scope.$watch('filterModel8', function(n, o) {
                if(n && n !== o) {
                    // console.log(n);console.log(o);

                    var pos = scope.filterModel8List.map(function(x) {return x.value;}).indexOf(n);

                    var filterOptionTemplate = '<div class="search_close_suggest vmf-search_opt-rem"><span class="close_sug_icon" ng-click="removeFilterOption($event, 7)" tabindex="0" ng-keyup="removeFilterOptionKey($event, 7)"></span><span class="close_sug_txt">' + scope.filterModel8List[pos].text + '</span></div>';
                    angular.element(elem.find('.vmf-search-hide-field')[7]).find('.vmf-search-adv-selected').html('');                        
                    angular.element(elem.find('.vmf-search-hide-field')[7]).find('.vmf-search-adv-selected').append(filterOptionTemplate);
                    $compile(angular.element(elem.find('.vmf-search-hide-field')[7]).find('.vmf-search-adv-selected'))(scope);

                    scope.search();
                }
                    
            });

            scope.$watch('filterModel9', function(n, o) {
                if(n && n !== o) {
                    // console.log(n);console.log(o);

                    var pos = scope.filterModel9List.map(function(x) {return x.value;}).indexOf(n);

                    var filterOptionTemplate = '<div class="search_close_suggest vmf-search_opt-rem"><span class="close_sug_icon" ng-click="removeFilterOption($event, 8)" tabindex="0" ng-keyup="removeFilterOptionKey($event, 8)"></span><span class="close_sug_txt">' + scope.filterModel9List[pos].text + '</span></div>';
                    angular.element(elem.find('.vmf-search-hide-field')[8]).find('.vmf-search-adv-selected').html('');                        
                    angular.element(elem.find('.vmf-search-hide-field')[8]).find('.vmf-search-adv-selected').append(filterOptionTemplate);
                    $compile(angular.element(elem.find('.vmf-search-hide-field')[8]).find('.vmf-search-adv-selected'))(scope);

                    scope.search();
                }
                    
            });


            scope.$watch('filterModel10', function(n, o) {
                $timeout(function(){
                    if(n && n.length >= 1) {
                        
                        if(!scope.empty10)
                            angular.element(elem.find('.vmf-search-adv_suggest')[4]).show();
                    }
                    else{
                        
                        angular.element(elem.find('.vmf-search-adv_suggest')[4]).hide();
                    }
                });
                    
            });

            scope.empty10 = false;

            scope.$watchCollection('filteredData6', function(n, o) {
                // console.log('filteredData'); console.log(n);console.log(o);
                if(n && n.length === 0) {
                    scope.empty10 = true;
                    // console.log(true);
                    angular.element(elem.find('.vmf-search-adv_suggest')[4]).hide();
                }
                else {
                    scope.empty10 = false;
                    // console.log(false);
                }
               
            });

            scope.$watch('filterModel11', function(n, o) {
                $timeout(function(){
                    if(n && n.length >= 1) {
                        
                        if(!scope.empty11)
                            angular.element(elem.find('.vmf-search-adv_suggest')[5]).show();
                    }
                    else{
                        
                        angular.element(elem.find('.vmf-search-adv_suggest')[5]).hide();
                    }
                });
                    
            });

            scope.empty11 = false;

            scope.$watchCollection('filteredData7', function(n, o) {
                // console.log('filteredData'); console.log(n);console.log(o);
                if(n && n.length === 0) {
                    scope.empty11 = true;
                    // console.log(true);
                    angular.element(elem.find('.vmf-search-adv_suggest')[5]).hide();
                }
                else {
                    scope.empty11 = false;
                    // console.log(false);
                }
               
            });

            scope.resetFilters = function() {

                scope.filterModel1 = null;
                scope.filterModel1Selection = [];
                angular.element(elem.find('.vmf-search-hide-field')[0]).find('.chk_').removeClass('act_'); 
                scope.filterModel2 = null;
                scope.filterModel2Selection = [];
                angular.element(elem.find('.vmf-search-hide-field')[1]).find('.chk_').removeClass('act_');     
                scope.filterModel3 = null;
                
                scope.filterModel4 = null;
                elem.find('.vmf-search-adv-selected').html('');
                elem.find('.vmf-dropdown-content').find('li').removeClass('dd-opt-selected');

                if(scope.type === "2") {
                    scope.filterModel5 = null;
                    scope.filterModel5Selection = [];
                    angular.element(elem.find('.vmf-search-hide-field')[4]).find('.chk_').removeClass('act_'); 
                    scope.filterModel6 = null;
                    scope.filterModel6Selection = [];
                    angular.element(elem.find('.vmf-search-hide-field')[5]).find('.chk_').removeClass('act_');                                                            

                    scope.filterModel7 = null;
                    scope.filterModel8 = null;
                    scope.filterModel9 = null;

                    scope.filterModel10 = null;
                    scope.filterModel10Selection = [];
                    angular.element(elem.find('.vmf-search-hide-field')[9]).find('.chk_').removeClass('act_'); 
                    scope.filterModel11 = null;
                    scope.filterModel11Selection = [];
                    angular.element(elem.find('.vmf-search-hide-field')[10]).find('.chk_').removeClass('act_');                                                            

                } 
            
                $timeout(function() {
                    scope.search();
                }); 
            };

            scope.resetFiltersKey = function($event) {
                if($event.which === 13) {
                    scope.resetFilters();
                }
            };

		}
	};
}])
.filter('highlight2', function() {
    return function(text, phrases) {
        // console.log('text');
        // console.log(text);console.log('phrases');console.log(phrases);
        var optIndex = text.indexOf('_opt');
        // console.log(optIndex);
        var prefixText = text.substring(0, optIndex + 6);
        var optionText = text.substring(optIndex + 6, text.lastIndexOf('<'));
        var suffixText = text.substring(text.lastIndexOf('<'));

        // console.log(prefixText);console.log(optionText);console.log(suffixText);

        if (phrases) {
            phrases= phrases.split(' ');
            
            angular.forEach(phrases, function (phrase) {
                // console.log(text.lastIndexOf('>'));
                var splitIndex = optionText.lastIndexOf('>');
                // console.log('replacing text');console.log(text);
                optionText = optionText.substring(0, splitIndex + 1) +  optionText.substring(splitIndex + 1).replace(new RegExp('('+phrase+')', 'gi'), '<span>$1</span>');
                // console.log(text);
            });    

        }
        // text = prefixText + '<a href="javascript: void(0);" tabindex="-1">' + optionText + '</a>' + suffixText;
        text = prefixText + optionText + suffixText;
        // console.log('highlight2: ' + text);

        return text;
    };
});
app.directive("vmfHeroCarousel", ['$compile', '$timeout',
    function($compile, $timeout) {
        return {
            restrict: "E",
            replace: true,
            scope: {
                captionshow: "=",
                config: "=options",
                imagewidth: "=imagewidth",
                viewcount: "=viewcount"
            },
            template: function($tElem, $tAttrs) {
                var template = '<div class="vmf-hero-carouselWrapper">' +
                    '<div class="vmf-hero-carousel">' +
                    '<div class="vmf-hero-carousel-strip">' +
                    '<figure class="vmf-hero-carousel-img-caption" ng-swipe-right="prevSlide()" id="{{$index}}" ng-swipe-left="nextSlide()" ng-repeat="slide in slides">' +
                    '<figcaption class="vmf-hero-carousel-blue-hero">' +
                    '<div class="">' +
                    '<h2 class="vmf-hero-carousel-white">{{slide.title1}}</h2>' +
                    '<p class="vmf-hero-carousel-white">{{slide.title2}}</p>' +
                    '<a target="_top" alt="{{slide.title3}}" title="{{slide.title3}}" href="{{slide.href}}" class="l-arrow-white white">{{slide.title3}}</a>' +
                    '</div>' +
                    '</figcaption>' +
                    '<img class="desktop" ng-src="/images/homepageHeroCarousel/{{slide.image}}" alt="{{slide.description}}" title="" class="b-hero-carousel-bg">' +
                    '<img class="mobile" ng-src="/images/homepageHeroCarousel/{{slide.mobileImage}}" alt="{{slide.description}}" title="" class="b-hero-carousel-bg">' +

                '</figure>' +
                    '</div>' +
                    '</div>' +
                    '<a class="vmf-carouselButton back" ng-click="prevSlide()">Back</a>' +
                    '<a class="vmf-carouselButton next" ng-click="nextSlide()">Next</a>' +
                    '</div>';
                return template;
            },
            link: function(scope, element, attrs) {
                var
                    outerContainer = 0,
                    innerContainer = 0;
                scope.prevSlide = function() {
                    outerContainer = angular.element(".vmf-hero-carousel");
                    innerContainer = angular.element(".vmf-hero-carousel-strip");

                    var figWidth = element.find("figure").outerWidth();
                    var indent = parseInt(element.find(".vmf-hero-carousel-strip").css("margin-left").replace("px", "")) + figWidth;
                    element.find(".vmf-hero-carousel-strip")
                        .animate({
                            "margin-left": indent
                        }, {
                            duration: 500,
                            queue: false,
                            complete: function() {
                                element.find("figure").first().before(element.find("figure").last());
                                element.find(".vmf-hero-carousel-strip").css({
                                    "margin-left": -figWidth
                                });
                            }
                        });
                };

                scope.nextSlide = function() {
                    outerContainer = angular.element(".vmf-hero-carousel");
                    innerContainer = angular.element(".vmf-hero-carousel-strip");

                    var figWidth = element.find("figure").outerWidth();
                    var indent = parseInt(element.find(".vmf-hero-carousel-strip").css("margin-left").replace("px", "")) - figWidth;
                    element.find(".vmf-hero-carousel-strip").animate({
                        "margin-left": indent
                    }, {
                        duration: 500,
                        queue: false,
                        complete: function() {
                            element.find("figure").first().css("left", "0px").insertAfter(element.find("figure").last());
                            element.find(".vmf-hero-carousel-strip").css({
                                "margin-left": -figWidth
                            });
                        }
                    });
                };
            },
            controller: function($scope, $window) {
                $scope.slides = [{
                    "image": "vmw-hro-openstack.jpg",
                    "mobileImage": "vmw-hro-mobile-light-green.jpg",
                    "title1": "Build Your OpenStack Cloud in Minutes",
                    "title2": "VMware Integrated OpenStack makes it easy - and it’s free for vSphere Enterprise Plus customers.",
                    "title3": "Get Started",
                    "href": "http://www.vmware.com/in/products/openstack/?src=WWW_OpenStack_IN_HPHero_BuildYourOpenStackCloudinMinutes"
                }, {
                    "image": "One-cloud-16th-hero.jpg",
                    "mobileImage": "vmw-hro-mobile-light-green.jpg",
                    "title1": "Technology Workshop Online",
                    "title2": "Join us for a technical deep-dive and get the latest updates on our products.",
                    "title3": "Discover the Difference of vCloud Air",
                    "href": "http://www.vmware.com/in/products/hybrid-cloud/?src=WWW_vCloudAir_IN_HPHero_OneCloud"
                }, {
                    "image": "vmw-hro_vcloud-air.jpg",
                    "mobileImage": "vmw-hro-mobile-dark-blue.jpg",
                    "title1": "One Cloud, Any Application, Anywhere",
                    "title2": "Support current, future and next-gen apps on a single, unified hybrid cloud.",
                    "title3": "Discover the Difference of vCloud Air",
                    "href": "http://www.vmware.com/in/products/hybrid-cloud/?src=WWW_vCloudAir_IN_HPHero_OneCloud"
                }, {
                    "image": "vmw-hro-virtual-san6.jpg",
                    "mobileImage": "vmw-hro-mobile-teal.jpg",
                    "title1": "Build Your OpenStack Cloud in Minutes",
                    "title2": "VMware Integrated OpenStack makes it easy - and it’s free for vSphere Enterprise Plus customers.",
                    "title3": "Learn More About Virtual SAN 6",
                    "href": "http://www.vmware.com/in/products/virtual-san/?src=WWW_virtualSAN_IN_HPHero_BoostYourPerformance"
                }, {
                    "image": "vmw-hro-vsphere6.jpg",
                    "mobileImage": "vmw-hro-mobile-dark-blue.jpg",
                    "title1": "A Unified, Software-Defined Platform",
                    "title2": "Increase scale and performance, minimize downtime and simplify management.",
                    "title3": "See What’s New in vSphere 6",
                    "href": "http://www.vmware.com/in/products/vsphere/?src=WWW_vSphere6_IN_HPHero_Unified"
                }];
                var windowObject = angular.element($window);
                var
                    outerContainer = 0,
                    innerContainer = 0;
                $scope.init = function() {
                    var tempParent = angular.element(".vmf-hero-carousel");
                    var tempChild = angular.element(".vmf-hero-carousel-img-caption");
                    outerContainer = angular.element(".vmf-hero-carousel");
                    innerContainer = angular.element(".vmf-hero-carousel-strip");
                    innerContainer.find("figure").first().before(innerContainer.find("figure").last());
                    var figWidth = angular.element(".vmf-hero-carouselWrapper").outerWidth();
                    innerContainer.css("margin-left", -figWidth);
                };

                $scope.resize = function(self){
                 angular.element(".vmf-hero-carousel-img-caption").width(angular.element(".vmf-hero-carouselWrapper").outerWidth());
                 angular.element(".vmf-hero-carousel-strip").css("margin-left", -angular.element(".vmf-hero-carouselWrapper").outerWidth());
                };

                $timeout(function() {
                    $scope.resize();
                });

                windowObject.bind('resize', function() {
                    $scope.resize();
                });

            }
        };
    }
]);


    // check if we need to support legacy angular
    var legacySupport = (angular.version.major === 1 && angular.version.minor === 0);

   
    app.directive('vmfSliderControl', ['$document', '$filter', '$log', function($document, $filter, $log) {

            // test for mouse, pointer or touch
            var eventNamespace = '.rangeSlider',

                defaults = {
                    disabled: false,
                    orientation: 'horizontal',
                    step: 0,
                    decimalPlaces: 0,
                    showValues: true,
                    preventEqualMinMax: false,
                    attachHandleValues: false
                },

                // Determine the events to bind. IE11 implements pointerEvents without
                // a prefix, which breaks compatibility with the IE10 implementation.
                /** @const */
                actions = window.navigator.pointerEnabled ? {
                    start: 'pointerdown',
                    move: 'pointermove',
                    end: 'pointerup',
                    over: 'pointerdown',
                    out: 'mouseout'
                } : window.navigator.msPointerEnabled ? {
                    start: 'MSPointerDown',
                    move: 'MSPointerMove',
                    end: 'MSPointerUp',
                    over: 'MSPointerDown',
                    out: 'mouseout'
                } : {
                    start: 'mousedown touchstart',
                    move: 'mousemove touchmove',
                    end: 'mouseup touchend',
                    over: 'mouseover touchstart',
                    out: 'mouseout'
                },

                onEvent = actions.start + eventNamespace,
                moveEvent = actions.move + eventNamespace,
                offEvent = actions.end + eventNamespace,
                overEvent = actions.over + eventNamespace,
                outEvent = actions.out + eventNamespace,

                // get standarised clientX and clientY
                client = function(f) {
                    try {
                        return [(f.clientX || f.originalEvent.clientX || f.originalEvent.touches[0].clientX), (f.clientY || f.originalEvent.clientY || f.originalEvent.touches[0].clientY)];
                    } catch (e) {
                        return ['x', 'y'];
                    }
                },

                restrict = function(value) {

                    // normalize so it can't move out of bounds
                    return (value < 0 ? 0 : (value > 100 ? 100 : value));

                },

                isNumber = function(n) {
                    // console.log(n);
                    return !isNaN(parseFloat(n)) && isFinite(n);
                },

                scopeOptions = {
                    disabled: '=?',
                    min: '=',
                    max: '=',
                    modelMin: '=?',
                    modelMax: '=?',
                    onHandleDown: '&', // calls optional function when handle is grabbed
                    onHandleUp: '&', // calls optional function when handle is released 
                    orientation: '@', // options: horizontal | vertical | vertical left | vertical right
                    step: '@',
                    decimalPlaces: '@',
                    filter: '@',
                    filterOptions: '@',
                    showValues: '@',
                    pinHandle: '@',
                    preventEqualMinMax: '@',
                    attachHandleValues: '@',
                    tooltipData:'@'
                };


            if (legacySupport) {
                // make optional properties required
                scopeOptions.disabled = '=';
                scopeOptions.modelMin = '=';
                scopeOptions.modelMax = '=';
            }

            // if (EVENT < 4) {
            //     // some sort of touch has been detected
            //     angular.element('html').addClass('ngrs-touch');
            // } else {
            //     angular.element('html').addClass('ngrs-no-touch');
            // }


            return {
                restrict: 'A',
                replace: true,
                template: ['<div class="ngrs-range-slider">',
                    '<div class="ngrs-runner">',
                    '<div class="ngrs-handle ngrs-handle-min"><i></i></div>',
                    //'<div class="ngrs-handle ngrs-handle-max"><i></i><div class="sliderToolTip">{{filteredModelMax}} <span class="tooltipTriangle"></span></div></div>',
                    '<div class="ngrs-handle ngrs-handle-max" vmf-tooltip tooltip-options="{\'hideDelay\':\'1000\',\'position\':\'top\',\'text\':\'{{tooltipData}}\'}"><i></i></div>',
                    '<div class="ngrs-join"></div>',
                    '</div>',
                    //'<div class="ngrs-value-runner">',
                    //'<div class="ngrs-value ngrs-value-min" ng-show="showValues"><div>{{filteredModelMin}}</div></div>',
                    //'<div class="ngrs-value ngrs-value-max" ng-show="showValues"><div>{{filteredModelMax}}</div></div>',
                    //'</div>',
                    '</div>'
                ].join(''),
                scope: scopeOptions,
                link: function(scope, element, attrs, controller) {

                    /** 
                     *  FIND ELEMENTS
                     */
                    var $slider = angular.element(element),
                        handles = [element.find('.ngrs-handle-min'), element.find('.ngrs-handle-max')],
                        values = [element.find('.ngrs-value-min'), element.find('.ngrs-value-max')],
                        join = element.find('.ngrs-join'),
                        pos = 'left',
                        posOpp = 'right',
                        orientation = 0,
                        allowedRange = [0, 0],
                        range = 0,
                        down = false,
                        runner = element.find('.ngrs-runner');

                    // filtered
                    scope.filteredModelMin = scope.modelMin;
                    scope.filteredModelMax = scope.modelMax;

                    /**
                     *  FALL BACK TO DEFAULTS FOR SOME ATTRIBUTES
                     */

                    attrs.$observe('disabled', function(val) {
                        if (!angular.isDefined(val)) {
                            scope.disabled = defaults.disabled;
                        }

                        scope.$watch('disabled', setDisabledStatus);
                    });

                    attrs.$observe('orientation', function(val) {
                        if (!angular.isDefined(val)) {
                            scope.orientation = defaults.orientation;
                        }

                        var classNames = scope.orientation.split(' '),
                            useClass;

                        for (var i = 0, l = classNames.length; i < l; i++) {
                            classNames[i] = 'ngrs-' + classNames[i];
                        }

                        useClass = classNames.join(' ');

                        // add class to element
                        $slider.addClass(useClass);

                        // update pos
                        if (scope.orientation === 'vertical' || scope.orientation === 'vertical left' || scope.orientation === 'vertical right') {
                            pos = 'top';
                            posOpp = 'bottom';
                            orientation = 1;
                        }
                    });

                    attrs.$observe('step', function(val) {
                        if (!angular.isDefined(val)) {
                            scope.step = defaults.step;
                        }
                    });

                    attrs.$observe('decimalPlaces', function(val) {
                        if (!angular.isDefined(val)) {
                            scope.decimalPlaces = defaults.decimalPlaces;
                        }
                    });

                    attrs.$observe('showValues', function(val) {
                        if (!angular.isDefined(val)) {
                            scope.showValues = defaults.showValues;
                        } else {
                            if (val === 'false') {
                                scope.showValues = false;
                            } else {
                                scope.showValues = true;
                            }
                        }
                    });

                    attrs.$observe('pinHandle', function(val) {
                        if (!angular.isDefined(val)) {
                            scope.pinHandle = null;
                        } else {
                            if (val === 'min' || val === 'max') {
                                scope.pinHandle = val;
                            } else {
                                scope.pinHandle = null;
                            }
                        }

                        scope.$watch('pinHandle', setPinHandle);
                    });

                    attrs.$observe('preventEqualMinMax', function(val) {
                        if (!angular.isDefined(val)) {
                            scope.preventEqualMinMax = defaults.preventEqualMinMax;
                        } else {
                            if (val === 'false') {
                                scope.preventEqualMinMax = false;
                            } else {
                                scope.preventEqualMinMax = true;
                            }
                        }
                    });

                    attrs.$observe('attachHandleValues', function(val) {
                        if (!angular.isDefined(val)) {
                            scope.attachHandleValues = defaults.attachHandleValues;
                        } else {
                            if (val === 'false') {
                                scope.attachHandleValues = false;
                            } else {
                                scope.attachHandleValues = true;
                            }
                        }
                    });


                    // listen for changes to values
                    scope.$watch('min', setMinMax);
                    scope.$watch('max', setMinMax);

                    scope.$watch('modelMin', setModelMinMax);
                    scope.$watch('modelMax', setModelMinMax);
                    scope.$watch('tooltipData',tootTipUpdate);
                    /**
                     * HANDLE CHANGES
                     */

                    function setPinHandle(status) {
                        if (status === "min") {
                            angular.element(handles[0]).css('display', 'none');
                            angular.element(handles[1]).css('display', 'block');
                        } else if (status === "max") {
                            angular.element(handles[0]).css('display', 'block');
                            angular.element(handles[1]).css('display', 'none');
                        } else {
                            angular.element(handles[0]).css('display', 'block');
                            angular.element(handles[1]).css('display', 'block');
                        }
                    }

                    function setDisabledStatus(status) {
                        if (status) {
                            $slider.addClass('ngrs-disabled');
                        } else {
                            $slider.removeClass('ngrs-disabled');
                        }
                    }

                    function setMinMax() {

                        if (scope.min > scope.max) {
                            throwError('min must be less than or equal to max');
                        }

                        // only do stuff when both values are ready
                        if (angular.isDefined(scope.min) && angular.isDefined(scope.max)) {

                            // make sure they are numbers
                            if (!isNumber(scope.min)) {
                                throwError('min must be a number');
                            }

                            if (!isNumber(scope.max)) {
                                throwError('max must be a number');
                            }

                            range = scope.max - scope.min;
                            allowedRange = [scope.min, scope.max];

                            // update models too
                            setModelMinMax();

                        }
                    }

                    function setModelMinMax() {

                        if (scope.modelMin > scope.modelMax) {
                            throwWarning('modelMin must be less than or equal to modelMax');
                            // reset values to correct
                            scope.modelMin = scope.modelMax;
                        }

                        // only do stuff when both values are ready
                        if (
                            (angular.isDefined(scope.modelMin) || scope.pinHandle === 'min') &&
                            (angular.isDefined(scope.modelMax) || scope.pinHandle === 'max')
                        ) {

                            // make sure they are numbers
                            if (!isNumber(scope.modelMin)) {
                                if (scope.pinHandle !== 'min') {
                                    throwWarning('modelMin must be a number');
                                }
                                scope.modelMin = scope.min;
                            }

                            if (!isNumber(scope.modelMax)) {
                                if (scope.pinHandle !== 'max') {
                                    throwWarning('modelMax must be a number');
                                }
                                scope.modelMax = scope.min;
                            }

                            var handle1pos = restrict(((scope.modelMin - scope.min) / range) * 100),
                                handle2pos = restrict(((scope.modelMax - scope.min) / range) * 100),
                                value1pos,
                                value2pos;

                            if (scope.attachHandleValues) {
                                value1pos = handle1pos;
                                value2pos = handle2pos;
                            }

                            // make sure the model values are within the allowed range
                            scope.modelMin = Math.max(scope.min, scope.modelMin);
                            scope.modelMax = Math.min(scope.max, scope.modelMax);

                            if (scope.filter) {
                                scope.filteredModelMin = $filter(scope.filter)(scope.modelMin, scope.filterOptions);
                                scope.filteredModelMax = $filter(scope.filter)(scope.modelMax, scope.filterOptions);
                            } else {
                                scope.filteredModelMin = scope.modelMin;
                                scope.filteredModelMax = scope.modelMax;
                            }

                            // check for no range
                            if (scope.min === scope.max && scope.modelMin === scope.modelMax) {

                                // reposition handles
                                angular.element(handles[0]).css(pos, '0%');
                                angular.element(handles[1]).css(pos, '100%');

                                if (scope.attachHandleValues) {
                                    // reposition values
                                    angular.element('.ngrs-value-runner').addClass('ngrs-attached-handles');
                                    angular.element(values[0]).css(pos, '0%');
                                    angular.element(values[1]).css(pos, '100%');
                                }

                                // reposition join
                                angular.element(join).css(pos, '0%').css(posOpp, '0%');

                            } else {

                                // reposition handles
                                angular.element(handles[0]).css(pos, handle1pos + '%');
                                angular.element(handles[1]).css(pos, handle2pos + '%');

                                if (scope.attachHandleValues) {
                                    // reposition values
                                    angular.element('.ngrs-value-runner').addClass('ngrs-attached-handles');
                                    angular.element(values[0]).css(pos, value1pos + '%');
                                    angular.element(values[1]).css(pos, value2pos + '%');
                                    angular.element(values[1]).css(posOpp, 'auto');
                                }                
                                // reposition join
                                angular.element(join).css(pos, handle1pos + '%').css(posOpp, (100 - handle2pos) + '%');

                                // ensure min handle can't be hidden behind max handle
                                if (handle1pos > 95) {
                                    angular.element(handles[0]).css('z-index', 3);
                                }
                            }
                            //Tipped.updatePosition(handles[1], scope.tooltipData);
                            tootTipUpdate();
                        }
                    }

                    function tootTipUpdate(){
                        //console.log("value : "+scope.tooltipData);
                        Tipped.updatePosition(handles[1], scope.tooltipData);
                    }

                    runner.bind('click', function(event) {
                        var currentClick = client(event),
                                        runnerOffset,
                                        runnerDiv = $(this),
                                        val,width;
                        runnerOffset = runnerDiv.offset();
                        val = currentClick[0] - runnerOffset.left;
                        width = runnerDiv.innerWidth();
                        scope.modelMax = parseFloat((val * range) / width).toFixed(scope.decimalPlaces);
                        scope.$apply();
                    });

                    function handleMove(index) {

                        var $handle = handles[index];

                        // on mousedown / touchstart
                        $handle.bind(onEvent + 'X', function(event) {

                            var handleDownClass = (index === 0 ? 'ngrs-handle-min' : 'ngrs-handle-max') + '-down',
                                //unbind = $handle.add($document).add('body'),
                                modelValue = (index === 0 ? scope.modelMin : scope.modelMax) - scope.min,
                                originalPosition = (modelValue / range) * 100,
                                originalClick = client(event),
                                previousClick = originalClick,
                                previousProposal = false;

                            if (angular.isFunction(scope.onHandleDown)) {
                                scope.onHandleDown();
                            }

                            // stop user accidentally selecting stuff
                            angular.element('body').bind('selectstart' + eventNamespace, function() {
                                return false;
                            });

                            // only do stuff if we are disabled
                            if (!scope.disabled) {

                                // flag as down
                                down = true;

                                // add down class
                                $handle.addClass('ngrs-down');

                                $slider.addClass('ngrs-focus ' + handleDownClass);

                                // add touch class for MS styling
                                angular.element('body').addClass('ngrs-touching');

                                // listen for mousemove / touchmove document events
                                $document.bind(moveEvent, function(e) {
                                    // prevent default
                                    e.preventDefault();

                                    var currentClick = client(e),
                                        movement,
                                        proposal,
                                        other,
                                        per = (scope.step / range) * 100,
                                        otherModelPosition = (((index === 0 ? scope.modelMax : scope.modelMin) - scope.min) / range) * 100;

                                    if (currentClick[0] === "x") {
                                        return;
                                    }

                                    // calculate deltas
                                    currentClick[0] -= originalClick[0];
                                    currentClick[1] -= originalClick[1];

                                    // has movement occurred on either axis?
                                    movement = [
                                        (previousClick[0] !== currentClick[0]), (previousClick[1] !== currentClick[1])
                                    ];

                                    // propose a movement
                                    proposal = originalPosition + ((currentClick[orientation] * 100) / (orientation ? $slider.height() : $slider.width()));

                                    // normalize so it can't move out of bounds
                                    proposal = restrict(proposal);

                                    if (scope.preventEqualMinMax) {

                                        if (per === 0) {
                                            per = (1 / range) * 100; // restrict to 1
                                        }

                                        if (index === 0) {
                                            otherModelPosition = otherModelPosition - per;
                                        } else if (index === 1) {
                                            otherModelPosition = otherModelPosition + per;
                                        }
                                    }

                                    // check which handle is being moved and add / remove margin
                                    if (index === 0) {
                                        proposal = proposal > otherModelPosition ? otherModelPosition : proposal;
                                    } else if (index === 1) {
                                        proposal = proposal < otherModelPosition ? otherModelPosition : proposal;
                                    }

                                    if (scope.step > 0) {
                                        // only change if we are within the extremes, otherwise we get strange rounding
                                        if (proposal < 100 && proposal > 0) {
                                            proposal = Math.round(proposal / per) * per;
                                        }
                                    }

                                    if (proposal > 95 && index === 0) {
                                        $handle.css('z-index', 3);
                                    } else {
                                        $handle.css('z-index', '');
                                    }

                                    if (movement[orientation] && proposal !== previousProposal) {

                                        if (index === 0) {

                                            // update model as we slide
                                            scope.modelMin = parseFloat(parseFloat((((proposal * range) / 100) + scope.min)).toFixed(scope.decimalPlaces));

                                        } else if (index === 1) {

                                            scope.modelMax = parseFloat(parseFloat((((proposal * range) / 100) + scope.min)).toFixed(scope.decimalPlaces));
                                            //Tipped.updatePosition($handle, scope.tooltipData);
                                        }

                                        // update angular
                                        scope.$apply();

                                        previousProposal = proposal;

                                    }

                                    previousClick = currentClick;

                                }).bind(offEvent, function() {

                                    if (angular.isFunction(scope.onHandleUp)) {
                                        scope.onHandleUp();
                                    }

                                    // unbind listeners
                                    $document.off(moveEvent);
                                    $document.off(offEvent);

                                    angular.element('body').removeClass('ngrs-touching');

                                    // cancel down flag
                                    down = false;

                                    // remove down and over class
                                    $handle.removeClass('ngrs-down');
                                    $handle.removeClass('ngrs-over');

                                    // remove active class
                                    $slider.removeClass('ngrs-focus ' + handleDownClass);

                                });
                            }

                        }).on(overEvent, function () {
                            $handle.addClass('ngrs-over');
                        }).on(outEvent, function () {
                            if (!down) {
                                $handle.removeClass('ngrs-over');
                            }
                        });
                    }

                    function throwError(message) {
                        scope.disabled = true;
                        throw new Error('RangeSlider: ' + message);
                    }

                    function throwWarning(message) {
                        $log.warn(message);
                    }

                    /**
                     * DESTROY
                     */

                    scope.$on('$destroy', function() {

                        // unbind event from slider
                        $slider.off(eventNamespace);

                        // unbind from body
                        angular.element('body').off(eventNamespace);

                        // unbind from document
                        $document.off(eventNamespace);

                        // unbind from handles
                        for (var i = 0, l = handles.length; i < l; i++) {
                            handles[i].off(eventNamespace);
                            handles[i].off(eventNamespace + 'X');
                        }

                    });

                    /**
                     * INIT
                     */

                    $slider
                    // disable selection
                        .bind('selectstart' + eventNamespace, function(event) {
                            return false;
                        })
                        // stop propagation
                        .bind('click', function(event) {
                            event.stopPropagation();
                        });

                    // bind events to each handle
                    handleMove(0);
                    handleMove(1);

                }
            };
        }]);

    // requestAnimationFramePolyFill
    // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    // shim layer with setTimeout fallback
    window.requestAnimFrame = (function() {
        return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            function(callback) {
                window.setTimeout(callback, 1000 / 60);
            };
    })();


app.directive('vmfSplitContainer', function() {
	return {
		restrict: 'EA',
		replace: true,
		transclude: true,
		controller: function ($scope) {
			$scope.splitContainerTitle = "Split Container";
			$scope.components = [];
			$scope.values = [];
			this.addComponent = function(attributes) {
				$scope.components.push(attributes);
			};
			this.addDivider = function(attributes) {
				$scope.divider = attributes;
			};
		},
		link: function($scope, element, attrs) {
			var $firstComponent = element.children('.split-pane-component:first'),
				$divider = element.children('.split-pane-divider'),
				$lastComponent = element.children('.split-pane-component:last');
				for(var i=0; i<$scope.components.length; i++) {				
					if ($scope.components[i].width && $scope.components[i].width.match(/%$/)) {
						element.addClass('vertical-percent');
						var rightPercent = (100 - parseFloat($scope.components[i].width.match(/(\d+)%$/)[1])) + "%" ;
						$firstComponent.css({ right: rightPercent, marginRight: $scope.divider.width });
						$divider.css({ right: rightPercent, width: $scope.divider.width });
						$lastComponent.css({ width: rightPercent });
					} else if ($scope.components[i].width) {
						element.addClass('fixed-left');
						$firstComponent.css({ width: $scope.components[i].width });
						$divider.css({ left: $scope.components[i].width, width: $scope.divider.width });
						$lastComponent.css({ left: $scope.components[i].width, marginLeft: $scope.divider.width });				
					} else if ($scope.components[i].height && $scope.components[i].height.match(/%$/)) {
						element.addClass('horizontal-percent');
						var bottomPercent = (100 - parseFloat($scope.components[i].height.match(/(\d+)%$/)[1])) + "%" ;
						$firstComponent.css({ bottom: bottomPercent, marginBottom: $scope.divider.height });
						$divider.css({ bottom: bottomPercent, height: $scope.divider.height });
						$lastComponent.css({ height: bottomPercent });
					} else if ($scope.components[i].height) {
						element.addClass('fixed-top');
						$firstComponent.css({ height: $scope.components[i].height });
						$divider.css({ top: $scope.components[i].height, height: $scope.divider.height });
						$lastComponent.css({ top: $scope.components[i].height, marginLeft: $scope.divider.height });
					}
				}
			element.splitPane();
		},
		template: '<div class="vmf-split-container" ng-transclude></div>'
	};
});

app.directive('vmfSplitPaneComponent', function($compile) {
	return {
		restrict: 'EA',
		replace: true,
		transclude: true,
		require: '^vmfSplitContainer',
		scope: {
			panewidth: '@',
			paneheight: '@',
			maxwidth: '@',
			minwidth: '@'
		},
		link: function($scope, element, attrs, paneCtrl) {
			if($scope.panewidth) {
				paneCtrl.width = $scope.panewidth;
			}
			if($scope.paneheight) {
				paneCtrl.height = $scope.paneheight;
			}
			if($scope.maxwidth) {
				paneCtrl.maxwidth = $scope.maxwidth;
			}
			if($scope.minwidth) {
				paneCtrl.minwidth = $scope.minwidth;
			}
			paneCtrl.addComponent({ width: $scope.panewidth, height: $scope.paneheight });
		},
		template: '<div class="split-pane-component" ng-transclude></div>'
	};
});

app.directive('vmfSplitPaneDivider', function() {
	return {
		restrict: 'EA',
		replace: true,
		transclude: true,
		require: '^vmfSplitContainer',
		scope: {
			panewidth: '@',
			paneheight: '@',
			clicks: '@',
			close: '@'
		},
		controller: function ($scope) {
			$scope.mousedownHandler = function (event, element, minwidth, maxwidth, panewidth, paneheight) {
				var isTouchEvent = event.type.match(/^touch/),
					moveEvent = isTouchEvent ? 'touchmove' : 'mousemove',
					endEvent = isTouchEvent? 'touchend' : 'mouseup',
					$divider = element,
					$splitPane = $divider.parent(),
					$resizeShim = $divider.siblings('.split-pane-resize-shim');
				if(navigator.appVersion.indexOf("MSIE 7.") !== -1 || navigator.appVersion.indexOf("MSIE 8.") !== -1) {
					setTimeout(function(){
						$resizeShim.show();
					}, 500);
				} else {
					$resizeShim.show();
				}
				$divider.addClass('dragged');
				if (isTouchEvent) {
					$divider.addClass('touch');
				}
				
				var $clone = $divider.clone();
				$divider.after($clone);
					
				$(document).on(moveEvent, $scope.createMousemove($splitPane, $scope.pageXof(event), $scope.pageYof(event), minwidth, maxwidth, panewidth, paneheight));
				
				$(document).one(endEvent, function(event) {
					$(document).unbind(moveEvent);
					$clone.remove();
					$divider.removeClass('dragged touch');
					if(navigator.appVersion.indexOf("MSIE 7.") !== -1 || navigator.appVersion.indexOf("MSIE 8.") !== -1) {
						setTimeout(function(){
							$resizeShim.hide();
						}, 500);
					} else {
						$resizeShim.hide();
					}
				});
			};
			$scope.createMousemove = function($splitPane, pageX, pageY, minwidth, maxwidth, panewidth, paneheight) {
				var splitPane = $splitPane[0],
					firstComponent = $splitPane.children('.split-pane-component:first')[0],
					divider = $splitPane.children('.split-pane-divider')[0],
					divider2 = $splitPane.children('.split-pane-divider')[1],
					lastComponent = $splitPane.children('.split-pane-component:last')[0],
					lastComponentMinHeight,
					maxLastComponentHeight,
					bottomOffset,
					lastComponentMinWidth,
					maxLastComponentWidth,
					rightOffset;					
				if ($splitPane.is('.fixed-top')) {
					var firstComponentMinHeight =  $scope.minHeight(firstComponent),
						maxFirstComponentHeight = splitPane.offsetHeight - $scope.minHeight(lastComponent) - divider.offsetHeight,
						topOffset = divider.offsetTop - pageY;
					return function(event) {
						event.preventDefault();
						var top = Math.min(Math.max(firstComponentMinHeight, topOffset + $scope.pageYof(event)), maxFirstComponentHeight);
						$scope.setTop(firstComponent, divider, lastComponent, top + 'px');
						$splitPane.resize();
					};
				} else if ($splitPane.is('.fixed-bottom')) {
					lastComponentMinHeight = $scope.minHeight(lastComponent),
					maxLastComponentHeight = splitPane.offsetHeight - $scope.minHeight(firstComponent) - divider.offsetHeight,
					bottomOffset = lastComponent.offsetHeight + pageY;
					return function(event) {
						event.preventDefault();
						var bottom = Math.min(Math.max(lastComponentMinHeight, bottomOffset - $scope.pageYof(event)), maxLastComponentHeight);
						$scope.setBottom(firstComponent, divider, lastComponent, bottom + 'px');
						$splitPane.resize();
					};
				} else if ($splitPane.is('.horizontal-percent')) {
					var splitPaneHeight;
					if(splitPane.offsetHeight === 0) {
						splitPaneHeight = $splitPane[0].scrollHeight;
					} else {
						splitPaneHeight = $splitPane[0].offsetHeight;
					}					
					lastComponentMinHeight = splitPaneHeight - (splitPaneHeight*(parseInt(maxwidth)/100));//$scope.minHeight(lastComponent),
					maxLastComponentHeight = splitPaneHeight - $scope.minHeight(firstComponent) - divider.offsetHeight;
					bottomOffset = lastComponent.offsetHeight + pageY;
					return function(event) {
						event.preventDefault();
						var bottom = Math.min(Math.max(lastComponentMinHeight, bottomOffset - $scope.pageYof(event)), maxLastComponentHeight);
						if((bottom / splitPaneHeight * 100) < (100-minwidth)) {
							$scope.setBottom(firstComponent, divider, lastComponent, (bottom / splitPaneHeight * 100) + '%');
							$(document).one('mouseup', function () {
								$scope.setHorizontalDivider(divider, (bottom / splitPaneHeight * 100) + '%');
								$(divider2).remove();
							});		
							$splitPane.resize();
						}
					};
				} else if ($splitPane.is('.fixed-left')) {
					var firstComponentMinWidth = $scope.minWidth(firstComponent),
						maxFirstComponentWidth = splitPane.offsetWidth - $scope.minWidth(lastComponent) - divider.offsetWidth,
						leftOffset = divider.offsetLeft - pageX;
					return function(event) {
						event.preventDefault();
						var left = Math.min(Math.max(firstComponentMinWidth, leftOffset + $scope.pageXof(event)), maxFirstComponentWidth);
						$scope.setLeft(firstComponent, divider, lastComponent, left + 'px');
						$splitPane.resize();
					};
				} else if ($splitPane.is('.fixed-right')) {
					lastComponentMinWidth = $scope.minWidth(lastComponent);
					maxLastComponentWidth = splitPane.offsetWidth - $scope.minWidth(firstComponent) - divider.offsetWidth;
					rightOffset = lastComponent.offsetWidth + pageX;
					return function(event) {
						event.preventDefault();
						var right = Math.min(Math.max(lastComponentMinWidth, rightOffset - $scope.pageXof(event)), maxLastComponentWidth);
						$scope.setRight(firstComponent, divider, lastComponent, right + 'px');
						$splitPane.resize();
					};
				} else if ($splitPane.is('.vertical-percent')) {
					var splitPaneWidth;
					if(splitPane.offsetWidth === 0) {
						splitPaneWidth = $splitPane[0].scrollWidth;
					} else {
						splitPaneWidth = $splitPane[0].offsetWidth;
					}
					lastComponentMinWidth = splitPaneWidth - (splitPaneWidth*(parseInt(maxwidth)/100)); //$scope.minWidth(lastComponent),
					maxLastComponentWidth = splitPaneWidth - $scope.minWidth(firstComponent) - divider.offsetWidth;
					rightOffset = lastComponent.offsetWidth + pageX;
					var	leftContainerWidth = splitPane.offsetWidth*(panewidth/100),
						leftContainerWidthMin = leftContainerWidth*(30/100),
						minDraggableWidth = (leftContainerWidthMin + 10)/(splitPane.offsetWidth)*100; // 10 is the margin for the component
					return function(event) {
						event.preventDefault();
						var right = Math.min(Math.max(lastComponentMinWidth, rightOffset - $scope.pageXof(event)), maxLastComponentWidth);
						if((right / splitPaneWidth * 100) < (100-minDraggableWidth)){
							$scope.setRight(firstComponent, divider, lastComponent, (right / splitPaneWidth * 100) + '%');
							$(document).one('mouseup', function () {
								$scope.setVerticalDivider(divider, (right / splitPaneWidth * 100) + '%');
								$(divider2).remove();
							});
							$splitPane.resize();
						}	
					};
				}
			};

			$scope.pageXof = function(event) {
				return event.pageX || event.originalEvent.pageX;
			};

			$scope.pageYof = function(event) {
				return event.pageY || event.originalEvent.pageY;
			};

			$scope.minHeight = function(element) {
				return parseInt($(element).css('min-height')) || 0;
			};

			$scope.minWidth = function(element) {
				return parseInt($(element).css('min-width')) || 0;
			};

			$scope.setTop = function(firstComponent, divider, lastComponent, top) {
				firstComponent.style.height = top;
				divider.style.top = top;
				lastComponent.style.top = top;
			};

			$scope.setBottom = function(firstComponent, divider, lastComponent, bottom) {
				firstComponent.style.bottom = bottom;
				divider.style.bottom = bottom;
				lastComponent.style.height = bottom;
			};

			$scope.setLeft = function(firstComponent, divider, lastComponent, left) {
				firstComponent.style.width = left;
				divider.style.left = left;
				lastComponent.style.left = left;
			};

			$scope.setRight = function(firstComponent, divider, lastComponent, right) {
				firstComponent.style.right = right;
				divider.style.right = right;
				lastComponent.style.width = right;
			};
			
			$scope.setVerticalDivider = function(divider, right) {
				divider.style.right = right;
			};
			
			
			$scope.setHorizontalDivider = function(divider, bottom) {
				divider.style.bottom = bottom;
			};
		
		},
		link: function($scope, element, attrs, paneCtrl) {
			var minwidth;
			paneCtrl.addDivider({ width: $scope.panewidth, height: $scope.paneheight });
			if(parseInt(paneCtrl.minwidth)) {
				minwidth = paneCtrl.minwidth;
			} else {
				minwidth = paneCtrl.width;
			}
			$scope.doubleClickResizePane = function(element) {
				var $firstComponent = element.parent().children('.split-pane-component:first'),
				    $divider = element,
				    $lastComponent = element.parent().children('.split-pane-component:last'),
				    $remWidth = (100 - parseInt(paneCtrl.width)),
				    $remHeight = (100 - parseInt(paneCtrl.height));
				    $remWidth = $remWidth +'%';
				    $remHeight = $remHeight + '%';

				    if($scope.close === 'right') {
				    	if($firstComponent.prop('style').right === '0%') {
						    $firstComponent.css('right', (100 - parseInt(paneCtrl.width)) + '%');
						    $divider.css('right', (100 - parseInt(paneCtrl.width)) + '%');
						    $lastComponent.css('width', (100 - parseInt(paneCtrl.width)) + '%');
					    }
					    else {
						    $firstComponent.css('right', 0 + '%');
						    $divider.css('right', 0 + '%');
						    $lastComponent.css('width', 0 + '%');
					    }
				    } else if($scope.close === 'left') {
				    	if($firstComponent.prop('style').right < '99%') {
						    $firstComponent.css('right', 99 + '%');
						    $divider.css('right', 99 + '%');
						    $lastComponent.css('width', 99 + '%');
					    }
					    else {
						    $firstComponent.css('right', (100 - parseInt(paneCtrl.width)) + '%');
						    $divider.css('right', (100 - parseInt(paneCtrl.width)) + '%');
						    $lastComponent.css('width', (100 - parseInt(paneCtrl.width)) + '%');
					    }
				    } else if($scope.close === 'bottom') {
				    	if($firstComponent.prop('style').bottom === '0%') {
				    		$firstComponent.css('bottom', (100 - parseInt(paneCtrl.height)) + '%');
				    		$divider.css('bottom', (100 - parseInt(paneCtrl.height)) + '%');
				    		$lastComponent.css('height', (100 - parseInt(paneCtrl.height)) + '%');
				    	} else {
				    		$firstComponent.css('bottom', 0 + '%');
				    		$divider.css('bottom', 0 + '%');
				    		$lastComponent.css('height', 0 + '%');
				    	}
				    } else if($scope.close === 'top') {
				    	if($firstComponent.prop('style').bottom < '98%') {
				    		$firstComponent.css('bottom', 98 + '%');
						    $divider.css('bottom', 98 + '%');
						    $lastComponent.css('height', 98 + '%');
				    	} else {
				    		$firstComponent.css('bottom', (100 - parseInt(paneCtrl.height)) + '%');
						    $divider.css('bottom', (100 - parseInt(paneCtrl.height)) + '%');
						    $lastComponent.css('height', (100 - parseInt(paneCtrl.height)) + '%');
				    	}
				    }				
			};	
		if(navigator.appVersion.indexOf("MSIE 7.") !== -1 || navigator.appVersion.indexOf("MSIE 8.") !== -1) {
			element.on('mousedown', function (event) {
				var _self = element, e = event;
				$scope.mousedownHandler(e, _self, parseInt(minwidth), parseInt(paneCtrl.maxwidth), parseInt(paneCtrl.width), parseInt(paneCtrl.height));
			});
			element.on('dblclick', function (event) {
				$scope.doubleClickResizePane(element);
			});
		}
		else {
			element.on('mousedown', function (event){
				$scope.clicks++;
				var _self = element, e = event;
		      	if ($scope.clicks === 1) {
		      		event.preventDefault();
			        setTimeout(function(){
				          if($scope.clicks === 1) {
				          	$scope.mousedownHandler(e, _self, parseInt(minwidth), parseInt(paneCtrl.maxwidth), parseInt(paneCtrl.width), parseInt(paneCtrl.height));
				          } else {
				          	$scope.doubleClickResizePane(_self);				          	
				          }
				          $scope.clicks = 0;
			        }, 300);
			    }				
			});
		}
		},
		template: '<div class="split-pane-divider"><div class="threedots" ng-transclude></div></div>'
	};
});


    /*Static table component code */

    app.service("vmfUtils", function($filter){
            this.getGroupingCollection = function (array, f) {

                var groups = {};

                array = array || [];

                array.forEach(function (o) {
                    var group = f(o), parentObj;

                    if (!groups[group]) {
                        parentObj = {};
                        //var parentObj = angular.extend({}, o);
                        parentObj.type = group; //TODO
                        parentObj.isParent = true;
                    }

                    groups[group] = groups[group] || [];

                    if (parentObj) {
                        groups[group].push(parentObj);
                    }

                    groups[group].push(o);
                });

                var groupData = Object.keys(groups).map(function (group) {
                    return groups[group];
                });

                groupData = groupData || [];

                return groupData.reduce(function (a, b) {
                        return a.concat(b);
                });
            };

            this.toggleTriStateCheckbox = function (data, input, column, item, bulkActionCallback) {
                var isAllSelected = false,
                    isSelectedAll = true,
                    checked = input.checked,                
                    checkboxField = column.checkboxField,
                    isAnySelected = false;

                item[checkboxField] = checked;

                if (checked) {
                    $.each(data, function (idx, row) {
                        if (!row[checkboxField]) {
                            isSelectedAll = false;
                            return false;
                        } 
                    });                        
                } else {
                    isSelectedAll = false;
                }                                     

                column[checkboxField] = isSelectedAll;

                $.each(data, function (idx, row) {
                    if (row[checkboxField]) {
                        isAnySelected = true;
                    } 
                });
                if(isAnySelected) {
                    bulkActionCallback(true);
                } else {
                    bulkActionCallback(false);
                }
            };    

            this.toggleAllCheckboxState = function(data, column, checked, bulkActionCallback){
                column[column.checkboxField] = checked;

                if (column) {
                    angular.forEach(data, function (row) {
                        row[column.checkboxField] = checked;
                    });
                }
                bulkActionCallback(checked);
            };  

            this.sortByColumn = function(data, column, columns, sortingParams){

                var params = sortingParams;
                
                if (params.field === column.field) {
                    params.reverse = !params.reverse;
                }

                params.field = column.field;

                angular.forEach(columns, function (col) {
                    col.sorted = '';
                });

                column.sorted = (params.reverse) ? 'sort-desc' : 'sort-asc';

                return $filter('orderBy')(data, column.field, params.reverse);             
            };

            this.getUnique = function (arr, field, value) {
                var result = [];
                for (var i = 0; i < arr.length; i++) {
                    var item = arr[i];
                    if(item[field] === value){
                        result.push(item);
                    }
                }

                return result;
            };
            this.filterByColumn = function(data, text, column){
                return $filter('vmfTableSearch')(data, text, column || 'product'); 
            };
        this.getSelectedItems = function(data) {
                var selectedItems = [];
                angular.forEach(data, function(itemObj) {
                    if(itemObj.isCheckboxSelected) {
                        selectedItems.push(angular.copy(itemObj));
                    }
                });
                return selectedItems;
            };

        })

    .service('vmfDataService', function($http){

            this.getTableData =  function(url, params) {
         
                 return  $http({
                    method: 'GET',
                    url: url,
                    params: params
                });
            };
        })

        .filter('vmfTableSearch', function ($parse) {
                 return function (input, searchText, fields) {

                if (!angular.isArray(input) || angular.isUndefined(searchText)) {
                    return input;
                }

                var exp = new RegExp(searchText, 'i'),
                    columns = [];


                return  input.filter(function (row) {
                     var value = row[fields];
                     return exp.test(value);
                });

               //  angular.forEach(fields, function (field, i) {
               //      columns.push(field.field);
               //  });

               // return input.filter(function (inp) {
               //      columns.some(function (value, key) {
               //          //var tmpInpParsed = $parse(inp.value);
               //          var tmpInpParsed = inp[value];
               //          //data = tmpInpParsed(inp);
               //          data = tmpInpParsed;
               //          return exp.test(data);
               //      })
               //  });         
            };
        })
        .filter('capitalize', function() {
            return function(input, all) {
                return (!!input) ? input.replace(/([^\W_]+[^\s-]*) */g, function(txt){
                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();}) : '';
                };
        })
        .filter('unique', function () {

     return function (items, filterOn) {

            if (filterOn === false) {
                return items;
            }

            if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
                var hashCheck = {}, newItems = [];

                var extractValueToCompare = function (item) {
                    if (angular.isObject(item) && angular.isString(filterOn)) {
                        return item[filterOn];
                    } else {
                        return item;
                    }
                };

                angular.forEach(items, function (item) {
                    var valueToCheck, isDuplicate = false;

                    for (var i = 0; i < newItems.length; i++) {
                        if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
                            isDuplicate = true;
                            break;
                        }
                    }
                    if (!isDuplicate) {
                        newItems.push(item);
                    }

                });
                items = newItems;
            }
            return items;
        };
    })

     .directive('vmfTable', function ($filter, $sce, vmfUtils) {
            return {
                restrict: 'E',
                replace: true,
                scope: {
                    cellRenderers: '=?',
                    columns: '=?',                
                    serverSide:'=',
                    tablePagination:"=",
                    tablePaginationPattern:'@',
                    url:'=',
                    classes: '@',
                    data: '=?',
                    isGroupable: '=?',
                    groupingAttr:'@',   
                    isCompare: '=?',
                    filter: '@',
                    resource: '=?',
                    selectedRows: '=?',
                    showSearch: '@',
                    options: "=?",
                    headerRenderers:"=?",
                    actionItems: "=?"
                },
                controller: function ($scope,$timeout, $attrs, $element, vmfDataService) {
                    
                    $scope.$watch('url', function (url) {
                           
                        if(url){
                              vmfDataService.getTableData(url, {
                                "currentPage":1
                              }).success(function(response) { 
                                 $scope.totalRecords=response.totalRecords;
                                 $scope.currentPageData=response.data; 
                              });
                          
                        }
                       
                             
                    });
                    var ctrl = this,
                        lastSelected,
                        sortingParams = {
                            reverse: false,
                            field: null
                        };
                      
                    //set default vaule if undefined
                    $scope.data = $scope.data || vmfDataService.data || [];
                    $scope.cellRenderers = $scope.cellRenderers || {};
                    $scope.headerRenderers = $scope.headerRenderers || {};
                    $scope.selectedRows = $scope.selectedRows || {};
                    $scope.options = $scope.options || {};

                     $scope.$watch('options', function (newVal) {
                         ctrl.options = $scope.options  || {};
                     });
                  
                    //pagination
                     $scope.tablepaginationconfig = {"currentPage" : 0,"itemsPerPage" : 2};  
                             
                   
                     $scope.dataset = function(){ 
                         if($scope.tablePagination){    
                            $scope.currentPageData = $scope.data.slice($scope.tablepaginationconfig.currentPage*$scope.tablepaginationconfig.itemsPerPage).slice(0,$scope.tablepaginationconfig.itemsPerPage);
                          } 
                      };

                    // Bulk Actions on action Item select
                    $scope.bulkActionOnSelectActionItem = function(actionObj) {
                        var selectedItems = vmfUtils.getSelectedItems($scope.data);
                        // Sample purpose - will be removed
                        var alertText = "Action : " + actionObj.title + " ---> Selected Items : ";
                        angular.forEach(selectedItems, function(itemObj) {
                            alertText += " --- " + itemObj.product;
                        });
                        console.log(alertText);
                    };

                    //Access data for multiple row drag and drop feature
                    $scope.$watch('data', function (n,o) {
                       
                        if(!n) return;

                        ctrl.data = $scope.data;

                        if(!$scope.tablePagination){
                            $scope.currentPageData = $scope.data;
                        }                   

                    },true);


                    //Setting default property for each column object
                    var defaultSettingWatchListener = $scope.$watch('columns', function (newColumns) {
                        
                        angular.forEach($scope.columns, function(col){
                            col.visible = angular.isUndefined(col.visible) || col.visible;
                            col.columnVisible = col.visible;                        
                        });

                        // $scope.manageColumns = angular.copy($scope.columns)

                        var dataWatchListener = $scope.$watch('data', function (newData) {
                            angular.forEach(newColumns, function(col){
                                if(col.indexColumn){
                                    angular.forEach(newData, function(row, index){
                                        row[col.field] =  index + 1;                       
                                    });
                                }
                            });

                            //Set initial sort
                                // $timeout(function() {
                                //    $.each($scope.columns, function(i,col){                       
                                //         if(col.sorted && col.sort){
                                //             sortingParams.reverse = col.sorted === "sort-desc";
                                //             $scope.sortBy(col);                            
                                //             return false;
                                //         }
                                //     });
                                // }, 2000);
                            dataWatchListener();                        
                         }, true);

                        defaultSettingWatchListener();

                    },true);


                    


                    // If a resource is passed instead of separated cols and data
                    if ($scope.columns === undefined && $scope.data === undefined &&
                        $scope.resource) {

                        $scope.resource.$promise.then(function (result) {
                            $scope.columns = result.columns;
                            $scope.data = result.data;
                        });
                    }

                    $scope.sortBy = function (column, $event) {
                        if($event){
                            $event.stopImmediatePropagation();
                        }
                        if($event && ($($event.target).is("input") || $($event.target).is(".search-icon"))) {
                            return false;
                        }
                        // to prevent return false from stopping the event propogation to body element  
                        angular.element("body").trigger("click");
                        if (!column.sort)
                            return false;

                        $scope.data = vmfUtils.sortByColumn($scope.data, column, $scope.columns, sortingParams);                        
                        $scope.data = angular.copy($scope.data); 
                        $scope.dataset();
                    };

                    $scope.searchByColumn = function(column, text) {
                        /*$scope.searchByColumnObj = {};
                        if(text.trim()!='') {
                            $scope.searchByColumnObj[column.field] = text;
                        }*/
                    };

                    $scope.onSelectHeaderCheckBox = function(column, $event) {
                        vmfUtils.toggleAllCheckboxState($scope.data, column, $event.currentTarget.checked, function(enabled) {
                            $scope.$broadcast("vmfBulkActions.render.enbaled", vmfUtils.getSelectedItems($scope.data).length);
                        });
                    };

                    this.select = function select(row, mode) {
                        var rows = $scope.data;
                        var index = rows.indexOf(row);
                        if (index !== -1) {
                            if (mode === 'single') {
                                row.isSelected = row.isSelected !== true;
                                if (lastSelected) {
                                    lastSelected.isSelected = false;
                                }
                                lastSelected = row.isSelected === true ? row : undefined;
                            } else {
                                rows[index].isSelected = !rows[index].isSelected;
                            }
                        }
                    }; //End of select 

                    this.updateDataProivider = function(dataProdider){
                        $scope.$apply(function(){                       
                            $scope.data = dataProdider;
                        });                   
                    };

                    this.headerRendererCheckboxClicked = function (column, $event) {                    
                        var checked = $event.currentTarget.checked;
                        vmfUtils.toggleAllCheckboxState($scope.data,column,checked, function(enabled) {
                            $scope.$broadcast("vmfBulkActions.render.enbaled", vmfUtils.getSelectedItems($scope.data).length);
                        });                    
                    }; //End of headerRendererCheckboxClicked  
                    

                    this.filterByColum = function(searchText, column){
                        $scope.currentPageData = vmfUtils.filterByColumn($scope.data, searchText, column);
                    };

                    this.refreshTableColumnData = function(newColumns){
                        var columnsWidth = $scope.captureColumnWidth();

                        console.log("columnsWidth", columnsWidth);

                        $scope.$apply(function () {                        
                            //$scope.data[0].product = "TEST DATA";
                            $scope.columns = angular.copy(newColumns);
                            $scope.data = angular.copy($scope.data);
                            //$scope.currentPageData = angular.copy($scope.currentPageData);                       
                        });                                      

                        $scope.restoreColumnWidth(columnsWidth);
                    };

                     this.updateRowStrip = function(){
                        $scope.updateRowStrip();
                    };

                    this.refreshTable = function(newColumns){
                        console.log("refreshTable trigger $scope.data" ,$scope.data);
                        $scope.$apply(function(){                       
                            $scope.data = angular.copy($scope.data);                       
                        });                    
                    };

                     this.refreshTableColumn = function(newColumns){
                        console.log("refreshTableColumn trigger $scope.data" ,$scope.data);
                        $scope.$apply(function(){                               
                            $scope.columns[0] = angular.copy($scope.columns[0]);                   
                        });                    
                    };


                    this.onApplyClicked = function(){
                        $scope.$broadcast("vmftable.events.apply");
                        $scope.$broadcast("vmftable.events.bulkActions.render");
                    };

                    $scope.$on("vmftable.checkboxheaderrenderer.clicked", function ($event,eventData) {   
                        console.log("inside vmftable.checkboxheaderrenderer.clicked");
                        vmfUtils.toggleTriStateCheckbox($scope.data, eventData.target, eventData.column,eventData.item, function(isBulkActionsEnabled) {
                            $scope.$broadcast("vmfBulkActions.render.enbaled", vmfUtils.getSelectedItems($scope.data).length);
                        });
                    });               
                      
                },

                templateUrl: function (elem, attrs) {
                    if (attrs.isGroupable === "yes" && attrs.isStatic === "yes") {
                        return '../templates/vmf-table-grouping-tpl.html';
                    }
                    if (attrs.isGroupable === "no"  && attrs.isStatic === "yes") {
                        return '../templates/vmf-table-static-tpl.html';
                    }
                    else if (attrs.isCompare === "yes") {
                        return '../templates/vmf-table-comparison-tpl.html';
                    }
                    else if(attrs.isBulkActions === "yes") {
                        return '../templates/vmf-table-bulk-tpl.html';
                    }
                    else {
                        return '../templates/vmf-table-tpl.html';
                    }
                },

                link: function (scope,elem, attrs) {
                 
                  
                    if (attrs.isGroupable === "yes" || attrs.isCompare === "yes") {
                        var dataChangeListener = scope.$watch("data", function (newValue) {
                            var result = vmfUtils.getGroupingCollection(newValue, function (item) { return item[scope.groupingAttr]; });                      
                            scope.data = result;
                            //Clear the watch 
                            dataChangeListener();
                        }, true);
                    }

                    scope.captureColumnWidth = function () {
                        var columnsWidth = elem.find("table thead tr th").map(function () {
                            return this.style.width;
                        }).get();
                        return columnsWidth;
                    };

                    scope.restoreColumnWidth = function (columnsWidth) {

                        elem.find("table thead tr th").each(function (index) {
                            this.style.width = columnsWidth[index];                        
                        });
                    };

                    scope.updateRowStrip = function (columnsWidth) {  
                        elem.find("table.vmf-table tbody")
                            .find("tr").removeClass("row-odd row-even")
                            .end().find("tr:odd").addClass('row-odd')
                            .end().find("tr:even").addClass('row-even');
                    };

                }
            };
        })

        .directive('vmfTableCell', function ($compile) {
            return {
                restrict: 'A',
                scope: {
                    selectedRows: '=?',
                    cellRenderers: '=?',
                    field: '@',
                    item: '=',
                    trIndex: '=',
                    column :'='
                },
                require:"^vmfTable",
                link: function ($scope, $element, $attrs) {
                    //dynamically add first column class fcol to the first column items 
                  
                    //add row-odd class to the odd rows for ilder versions of IE
                    $element.closest("tbody").find("tr:odd").addClass('row-odd');
                    $scope.$watch('item', function () {
                        $scope.itemValue = $scope.$eval('item.' + $scope.field);
                    }, true);

                    $scope.itemValue = $scope.$eval('item.' + $scope.field);

                    // retrieve any defined cell renderers
                    var cellRenderer = $scope.cellRenderers[$scope.field] ||
                        'vmf-table-cell-renderer',
                        directive = cellRenderer;

                    // if cell renderer is object, get its defined renderer element
                    if (typeof cellRenderer === 'object') {
                        directive = cellRenderer.directive;

                        // if the cell renderer has options specified, save this
                        // object to the scope (for use by the compiled directive)
                        if (cellRenderer.config) {
                            $scope.config = cellRenderer.config;
                        }
                    }

                    // compile directive and attach
                    var renderer = angular.element('<' + directive + '>');                
                    $element.append(renderer);

                    $compile(renderer)($scope);
                }
            };
        })

         .directive('vmfTableHeaderRenderer', function ($compile) {
            return {
                restrict: 'A',
                scope: {
                    column :'=',
                    columns:'='
                },   
                require:"^vmfTable" ,            
                link: function ($scope, $element, $attrs ,ctrl) {
                
                   var columnObserveHandler =  $attrs.$observe('column', function () {
                        $scope.headerText = $scope.column.title;
                         var headerRenderer = $scope.column.headerRenderer || 'vmf-table-header-renderer',
                         directive = headerRenderer;
                        // compile directive and attach
                        var renderer = angular.element('<' + directive + '>');
                        $element.append(renderer);
                        $compile(renderer)($scope);    

                       // columnObserveHandler();                
                    }, true);
                }
            };
        })   
        
        .directive('vmfTableHeaderRenderer', function () {
            return {
                restrict: 'E',
                replace: true,
                template: '<div unselectable="on" class="unselectable">'+
                            '<span>{{headerText}}</span>'+
                            '<span class="icon-sort"></span>'+                        
                           '</div>',
                link:function(scope, elem, attrs){
                   
                    // if(!scope.column.notResizable){
                    //     elem.closest("th").append('<div class="resizeHelper ui-resizable-handle ui-resizable-e">&nbsp;</div>');
                    // }
                }
            };
        })
        .directive('vmfTableHeaderSearchRenderer', function () {
            return {
                restrict: 'E',
                replace: true,
                template: '<div unselectable="on" class="unselectable vmf-search-header">'+
                            '<div vmf-checkbox-group class="vmf-checkbox-group" no-text="true" type="1" model="column.isCheckboxSelected" click-callback="$parent.onSelectHeaderCheckBox(column, $event)"></div>'+
                            '<div class="vmf-search-head-title"><span>{{headerText}}</span><span class="icon-sort"></span></div>'+
                            '<div class="vmf-search-head-input">'+
                            '<input type="text" placeholder="Type a keyword..." ng-model="columnSearchText" ng-change="$parent.searchByColumn(column, columnSearchText)"/>'+
                            '<div class="icon search-icon"></div></div>'+                        
                          '</div>',
                link:function(scope, element, attrs){
                    scope.$watch('column.isCheckboxSelected', function(checked) {
                        if(checked) {
                            element.closest("th").addClass("header-checkbox-selected");
                        } else {
                            element.closest("th").removeClass("header-checkbox-selected");
                        }
                    });
                    if(!scope.column.notResizable){
                        element.closest("th").append('<div class="resizeHelper ui-resizable-handle ui-resizable-e">&nbsp;</div>');
                    }
                }
            };
        })
        .directive('vmfTableCellRenderer', function () {
            return {
                restrict: 'E',
                replace: true,
                template: '<div  class="truncate"><span toggle="tooltip" class="td-content" showToolTip="{{column.showToolTip}}" title-alt="{{itemValue}}">{{itemValue}}</span></div>'
            };
        })
        .directive('vmfTableCellCheckboxRenderer', ["$timeout", function ($timeout) {
            return {
                restrict: 'E',
                replace: true,
                template: '<div  class="truncate vmf-table-bulk-cell-wrapper">'+
                          '<div vmf-checkbox-group class="vmf-checkbox-group vmf-checkbox-group-inline" type="1" no-text="true" model="item.isCheckboxSelected" click-callback="checkbox_changeHandler($event)"></div>'+
                          '<span toggle="tooltip" showToolTip="{{column.showToolTip}}"   title-alt="{{itemValue}}">{{itemValue}}</span></div>',
                link: function(scope, element, attrs) {
                    var selectedRowTop = 0, bulkActionWrapperElement = element.closest('.vmf-table-bulk-wrapper');
                    scope.checkbox_changeHandler = function($event){
                        scope.$emit("vmftable.checkboxheaderrenderer.clicked", {
                            target: $event.currentTarget,
                            column: scope.column,
                            item: scope.item,
                            element: element
                        });
                    };
                    function renderSelectedRow() {

                        $timeout(function() {
                            var selectedRows = element.closest('.vmf-table').find('.vmf-checkbox-row-selected'),
                                rowElements = element.closest('.vmf-table').find('.vmf-rows'), tempClone;
                                headElements = $('#vmf-table-bulk-actual').find('th.header');
                            if(selectedRows.length === 1) {
                                if($('#vmf-table-bulk-actual').find('.header-checkbox-selected').length===0) {
                                    selectedRows.children("td").each(function(index) {
                                        $(this).width($(headElements[index]).outerWidth());
                                    });
                                    selectedRows.addClass('bulk-action-fixed-row').data("actualTop", selectedRows.position().top);
                                    if(bulkActionWrapperElement.data('jsp').getContentPositionY() > selectedRows.data("actualTop")) {
                                        selectedRows.css({
                                            "position": "absolute",
                                            "top": selectedRowTop + bulkActionWrapperElement.data('jsp').getContentPositionY() + 'px',
                                            "left": (navigator&&(navigator.userAgent.toLowerCase().indexOf('chrome')>-1?'0':1) || 1) + "px",
                                            "z-index": "1000"
                                        });
                                    }
                                }
                            } else {
                                rowElements.filter('.bulk-action-fixed-row').css({
                                    "position": "relative",
                                    "top": "0px",
                                    "zIndex": "0"
                                }).removeData("actualTop");
                                rowElements.removeClass('bulk-action-fixed-row');
                            }
                        }, 300);

                    }
                    scope.$watch("item.isCheckboxSelected",function(newValue){
                        if(newValue) {
                            element.closest("tr").addClass("vmf-checkbox-row-selected");   
                        } else {
                            element.closest("tr").removeClass("vmf-checkbox-row-selected");   
                        }
                        renderSelectedRow();
                    });
                    scope.$on('vmftable.events.bulkActions.render', function(event) {
                        var bulkRows = element.closest('.vmf-table').find('.bulk-action-fixed-row');
                        if(bulkRows.length > 0) {
                            bulkRows.css({
                                    "position": "relative",
                                    "top": "0px",
                                    "zIndex": "0"
                            }).removeData("actualTop");
                            bulkRows.removeClass('bulk-action-fixed-row');
                            renderSelectedRow();    
                        }
                    });
                }
            };
        }])
        .directive('vmfSelectRow', function () {
            return {
                restrict: 'A',
                require: '^vmfTable',
                scope: {
                    row: '=vmfSelectRow'
                },
                link: function (scope, element, attr, ctrl) {
                    var mode = attr.vmfSelectMode || 'single';
                    element.bind('click', function () {
                        scope.$apply(function () {
                            ctrl.select(scope.row, mode);
                        });
                    });

                    scope.$watch('row.isSelected', function (newValue) {
                        if (newValue === true) {
                            element.addClass('vmf-tr-selected');
                        } else {
                            element.removeClass('vmf-tr-selected');
                        }
                    });
                }
            };
        })

        .directive('toggle', function($timeout, $parse){
            return {
                restrict: 'A',
                link: function (scope, elem, attrs) {
                    var showTimeout;
                    if (attrs.toggle === "tooltip") {                    
                        scope.$watch('scope.itemValue', function (value) { 
                            if(!value) return;
                            $this.attr('title', scope.itemValue);
                            $this.attr('title-alt', scope.itemValue);                                              
                        });                    
                    }

                    function isEllipsisActive(e) {
                        return (e.offsetWidth < e.scrollWidth);
                    }


                     function isEllipsisActive2(e) {
                        var $element = $(e);
                        var $c = $element
                                   .clone()
                                   .css({display: 'inline', width: 'auto', visibility: 'hidden'})
                                   .appendTo('body');

                        console.log("$c.width()", $c.width(), "$element.width()",$element.width());

                        var result = $c.width() > $element.width();
                        //$c.remove();
                        return result;
                    }

                    // if (attrs.toggle == "popover") {
                    //     attrs.$observe('title', function (value) {    
                    //         $this.attr('title', $this.attr('title-alt'));                      
                    //         $(elem).popover();
                    //     });                    
                    // }

                    elem.on("mouseenter",function(){
                        var $this = $(this);
                        var showTooltip = $parse(attrs.showtooltip)();
                        var placement = $this.attr('placement') || "bottom";
                        if((isEllipsisActive(this) && $this.attr('title-alt')) || showTooltip){
                            
                            $this.attr('title', $this.attr('title-alt'));
                            $(elem).tooltip({selector:'',placement:placement});
                              

                            showTimeout = $timeout(function() {
                                elem.tooltip('show');
                                $(elem).attr("title","");
                            },500);
                                                    
                            // console.log("applied tooltip")
                        }
                    });

                    elem.on("mouseleave",function(){
                        var $this = $(this);                    
                        $timeout.cancel(showTimeout);
                        $timeout(function() {
                            elem.tooltip('destroy');
                        }, 1000);
                       
                        // console.log("destroy tooltip");                    
                    });
                }
            };
        })




    .directive('vmfSortable', function ($timeout) {

        // var fixHelper = function (e, ui) {
        //     ui.children().each(function () {
        //         $(this).width($(this).width());
        //     });
        //     return ui;
        // };

        var fixHelper = function (e, ui) {
            console.log("ui",ui.length);
            ui.parent().children("tr.vmf-checkbox-row-selected").each(function () {        
                $(this).outerWidth($(this).outerWidth());
                $(this).height($(this).height());
                var $tr = $(this);
                $tr.each(function () {
                    $(this).find("td").each(function(){
                       $(this).outerWidth($(this).outerWidth());
                       $(this).height($(this).height());
                    }); 
                });
            });
            return ui;
        };

        return {
            restrict: 'A',
            require: "^vmfTable",
            link: function (scope, elem, attrs, ctrl) {
                initSortable();

                function initSortable() {
                    $(elem).multisortable({
                        //axis: "y",
                        cursor: "move",
                        cursorAt: {left:30},
                        handle: '.vmf-drag-gripper-handle',//,'.drag-gripper-icon', //vmf-ui-handle
                        helper: fixHelper,//"clone",       /*.ui-sortable-helper {   display: table; }*/ 
                        forcePlaceholderSize:true,
                        selectedClass:"vmf-checkbox-row-selected",
                        placeholder: "ui-placeholder",
                        //containment: 'parent',//.table-wrapper,            
                        items: '>tr.vmf-rows',//tr:not(tr:first-child)',
                        connectWith: elem,//'.vmf-table',//table
                        delay: 200, //Needed to prevent accidental drag when trying to select
                        revert: 0,
                        opacity: 1,
                        refreshPositions: true,
                        stop: function (e, ui) {
                             ctrl.updateRowStrip();
                        }
                        // helper: function(e, item) {
                        //     console.log("inside helper");

                        //     if ( ! item.hasClass('vmf-checkbox-row-selected') ) {
                        //         item.parent().children('.vmf-checkbox-row-selected').removeClass('vmf-checkbox-row-selected');
                        //         item.addClass('vmf-checkbox-row-selected');
                        //     }

                        //     var selected = item.parent().children('.vmf-checkbox-row-selected').clone();
                        //     item.data('multidrag', selected).siblings('.vmf-checkbox-row-selected').remove();                             
                        //     return $('<li/>').append(selected);
                        // },
                        // stop: function(e, ui) {
                        //     var selected = ui.item.data('multidrag');
                        //     ui.item.after(selected);
                        //     ui.item.remove();
                            
                        //     $timeout(function(){
                        //         ctrl.refreshTable();     
                        //     },500);                        
                        // },
                        // start: function (event, ui) {
                        //     //Breathing room for PlaceHolder

                        //     console.log("tr selected length ", elem.find(".vmf-checkbox-row-selected").length);

                        //     if (ui.item && ui.item.length > 0) {
                        //         $(elem).find(".ui-placeholder").css({ height: '1px' });
                        //     }

                        //     var sibs = ui.item.siblings().find('input:checkbox');
                        //     var elements = ui.item.closest("tbody").children('tr.vmf-checkbox-row-selected');

                        //     // Visual representation appending to ui.item
                        //     sibs.each(function (i, item) {
                        //         if ($(item).closest("tr").hasClass('vmf-checkbox-row-selected')) {
                        //             //$(ui.item).after($(item).parents('tr'));
                        //             $(item).parents('tr').appendTo(ui.item);
                        //         }
                        //     });

                        //     ui.item.data("multidrag", elements);
                        // },
                        // update: function (event, ui) {
                        //     console.log("updating ", event, ui);
                        // },
                        // out: function (event, ui) {
                        //     console.log("out ", event, ui);
                        //     //$(elem).sortable("cancel");
                        //     // $timeout(function(){
                        //          //ctrl.refreshTable();     
                        //     // },500); 
                        //  },
                        // stop: function (e, ui) {
                        //     ui.item.after(ui.item.data("multidrag"));
                        // }
                    }).disableSelection();
                    
                    $(elem)
                     .on('mousedown.ui-disableSelection selectstart.ui-disableSelection','input,select', function(e) {
                      e.stopImmediatePropagation();
                    });
                }
            }
        };
    })
    //directive to enable column resize and drag features
    .directive('vmfColResizableAndDragtable', function ($document, $timeout) {
        
        return {
            restrict: 'A', 
            require:"^vmfTable",
            scope:{
                columns:"=",
                field:"@"
            },    
            link: function (scope, elem, attrs, ctrl) {
                var columns_table = [];
                var watchListener = scope.$watch("columns",function(newColumns){
                    columns_table = newColumns;
                    // watchListener();
                },true);

                 // watchColumnsVisible();   

                 initDragTableAndColResize();

                  scope.$on("vmftable.events.apply", function(){
                    $timeout(function() {
                        refreshDragTableAndColResize();   
                    }, 500);                 
                  });         
                
                // function watchColumnsVisible(){
                //     scope.$watch(function($scope){
                //         return $scope.columns.map(function(obj) {
                //             return obj.visible;
                //         });
                //     }, 
                //     function(newVal) {                    
                //         initDragTableAndColResize();
                //     },true);
                // } 
                var dragtableOptions = {
                    clickDelay: 300,
                    dragHandle:'.dragtable-handle',
                    dragaccept: '.drag-accept',
                    excludeFooter: true,
                    beforeStart:function(dragInfo){
                      // console.log("beforeStart dragInfo",dragInfo);
                    },
                    beforeStop: function (dragInfo) {                    
                        if(dragInfo.startIndex === dragInfo.endIndex) 
                            return;

                        updateColumnOrder();                    
                    }
                };


                function updateColumnOrder(){
                    $timeout(function(){
                        var newOrderedColumns = [];
                        var thOrder = elem.find("thead tr th").map(function(){
                            return $(this).attr("field");
                        }).get();
                        
                        angular.forEach(thOrder, function(field){
                            angular.forEach(columns_table, function(col){                            
                                if(col.field === field){
                                    newOrderedColumns.push(col);
                                    return false;
                                }
                            });
                        });

                            angular.forEach(columns_table, function(col){
                               if(newOrderedColumns.indexOf(col) === -1){
                                    newOrderedColumns.push(col);
                               }
                            });                           

                            console.log("thOrder newOrderedColumns columns",thOrder , newOrderedColumns);
                            
                            ctrl.refreshTableColumnData(newOrderedColumns); 

                        console.log("thOrder scope columns", scope.columns);

                        refreshDragTableAndColResize();
                        
                    },1000);//100
                }
                

                function refreshDragTableAndColResize(){
                    $timeout(function() {
                        var colResizeMinWidth = ctrl.options.colResizeMinWidth || 80;
                        console.log("refreshDragTableAndColResize"); 
                        //dragtable() call need for for IE8 below error
                        //Error: cannot call methods on dragtable prior to initialization; attempted to call method 'destroy'  
                        $(elem).dragtable().dragtable('destroy').dragtable(dragtableOptions);  

                        $timeout(function() {
                            // $(elem).resizableColumns().resizableColumns('refresh');
                            //elem.colResizable({ disable: true}).colResizable({ init:false, liveDrag: true, minWidth: 80 }).setGripperInPosition();
                            elem.colResizable({ disable: true}).colResizable({ init:false, liveDrag: true, minWidth: colResizeMinWidth }).setGripperInPosition();                    
                            setWidth();
                        },300);
                    },100);

                    // initDragTableAndColResize();
                }

                function initDragTableAndColResize(){
                    $timeout(function() {   
                        var colResizeMinWidth = ctrl.options.colResizeMinWidth || 80;
                        console.log("Re-init dragtable colResizable");                        
                        elem.dragtable().dragtable('destroy').dragtable(dragtableOptions);                     

                        $timeout(function() {
                            console.log("table resize init");                       
                            //Below work no jerk but again width decreasing each drag column
                           //elem.colResizable({ disable: true}).colResizable({init:true, liveDrag: true, minWidth: 80}).setGripperInPosition();
                           elem.colResizable({ disable: true}).colResizable({init:true, liveDrag: true, minWidth: colResizeMinWidth}).setGripperInPosition();
                           setWidth();                        
                        },300);  //100                          
                    }, 500); 
                }

                 //IE7 binding width override by colResize plugins
                function setWidth() {
                    elem.find("thead tr th").each(function (index) {
                        if (columns_table && columns_table[index] && columns_table[index].width) {                        
                            $(this).width(columns_table[index].width);
                            // $(this).css({
                            //     'minWidth':columns_table[index].width +'px',
                            //     'width':'auto !important',
                            //     'width':columns_table[index].width +'px'
                            // });
                        }
                    });
                }
            }
        };

    })



    //directive to enable inline editing
    .directive('vmfInlineEditor', function ($document) {

        return {
            restrict: 'A',
            templateUrl: "../templates/vmf-inline-editing-tpl.html",
            link: function (scope, elem, attrs) {
                    scope.currencyTypes = [{
                        'value': '$',
                        'text': 'USD'
                    }];

                    var isPrevEditable = false;
                    // To close quick view popups if any
                    function resetElements() {
                        $(".quick-view-popup").addClass("hide").removeClass("quick-view-popup-left");
                        $(".vmf-checkbox-row-selected").removeClass("vmf-checkbox-row-selected");
                        $(".vmf-quick-view-selected-icon").removeClass("vmf-quick-view-selected-icon");
                        $(".vmf-quick-view-cell-wrapper").css("zIndex", "0");
                    }
                     //reset all the inline edits present in the document
                    $document.click(function(e){
                        // check whether the user has clicked the date picker, if so do not do the reset
                        if(angular.element(e.target).closest(".ui-datepicker-header").length || 
                            angular.element(e.target).closest(".ui-datepicker").length){
                            return false;
                        }
                         //reset all the inline edits present in the document
                        scope.$broadcast("bodyClick");
                        elem.closest("tbody").find("td").removeAttr("editphase").removeClass("successfulEdit");
                        elem.closest("tbody").find(".edit-content").removeClass("hide");
                        elem.closest("tbody").find(".editField").addClass("hide");
                        elem.closest("tbody").find(".editInputs").trigger("blur");
                        elem.closest("tbody").find("tr").removeClass("vmf-edit-tr-selected");
                });

                elem.closest("tr").on("mouseenter", function () {
                    elem.closest("tr").siblings("tr").find("td").removeClass("editable-cue");
                    if (elem.data("editable") === "yes" && !elem.closest("tr").is(".vmf-edit-tr-selected")) {
                        elem.addClass("editable-cue");
                    }
                    isPrevEditable = false;
                    $(this).children("td").each(function() {
                        if(isPrevEditable) {
                            $(this).css("borderLeft", "none");
                        }
                        if($(this).is(".editable-cue")) {
                            isPrevEditable = true;
                        } else {
                            isPrevEditable = false;
                        }
                    });
                }).on('mouseleave', function () {
                  
                    if (elem.data("editable") === "yes") {
                        elem.removeClass("editable-cue");

                    }
                });
                elem.on('click', function (e) {
                    if (elem.data("editable") === "yes") {
                        elem.closest("tbody").find("td").removeClass("successfulEdit");
                        elem.closest("tbody").find("tr").removeClass("vmf-edit-tr-selected");
                        //close already available instances
                        if(angular.element(".edit-content").is(":visible")){
                            var base_table = angular.element(elem).closest("table");
                            angular.element(base_table).find("td").removeAttr("editphase");
                            angular.element(base_table).find(".edit-content").removeClass("hide");
                            angular.element(base_table).find(".editField").addClass("hide");
                        }

                        elem.closest("tr").addClass("vmf-edit-tr-selected").find("td").removeClass("editable-cue");
                        elem.attr("editphase","progress");
                        elem.find(".edit-content, .editField").toggleClass("hide");
                        elem.find(".basicEdit input").focus();
                        resetElements();
                        e.stopPropagation();                    
                    }
                }).on('click', ".editInputs", function (event) {
                    elem.closest("tr").addClass("vmf-tr-selected");
                    resetElements();
                    event.stopPropagation();
               });
            }

        };

    })
    //directive to bind the model change only on enter key press
    //http://stackoverflow.com/questions/25534290/update-angularjs-ng-model-only-on-keypress-enter
    .directive('ngModelOnenter', function ($timeout) {
        return {
            restrict: 'A',
            require: 'ngModel',
            priority: 1, // needed for angular 1.2.x
            link: function (scope, elm, attr, ngModelCtrl) {
                 scope.$on("bodyClick",function(){
                        if(val){
                        elm.val(val);
                    }
                });

                if (attr.type === 'radio' || attr.type === 'checkbox') return;

                elm.unbind('input').unbind('keydown').unbind('change');
                var val;
                elm.bind('focus', function () {
                    val = elm.val();
                });

                 elm.on('blur', function () {
                   
                    if(val){    
                     elm.val(val);
                    }
                });

                elm.bind("keydown", function (event) {
                    if (event.which === 13) {
                    
                                val = elm.val();
                                elm.closest("td").addClass("loader");
                                ngModelCtrl.$setViewValue(val);
                                elm.closest(".editField").addClass("hide");
                                elm.closest("td").addClass("successfulEdit");
                                elm.closest("td").removeAttr("editphase");//To remove attribute after editing.
                                elm.blur(); // to prevent the blink icon
                           
                  
                         $timeout(function(){ 
                        
                         elm.closest("td").find(".edit-content").removeClass("hide");
                         elm.closest("td").removeClass("loader");
                        },1000);
                    
                        
                        
                    }
                });
            }
        };
    })
    //advance inline edit directive to change the unit value only on the save button action
    .directive('ngModelOncustomEvent', function ($timeout) {
        return {
            restrict: 'A',
            require: 'ngModel',
            priority: 1, // needed for angular 1.2.x
            link: function (scope, elm, attr, ngModelCtrl) {
                if (attr.type === 'radio' || attr.type === 'checkbox') return;

                elm.unbind('input').unbind('keydown').unbind('change');
                var val;
                 //on body click
                scope.$on("bodyClick",function(){
                        if(val){
                        elm.val(val);
                    }
                });

                elm.bind('focus', function () {
                    val = elm.val();
                });
                scope.advanceEditCancel = function ($event) {
                    //set the original value only when the user has edited the value  
                    if(val){
                       elm.val(val);
                    }
                    angular.element($event.currentTarget).closest(".editField").addClass("hide");
                    angular.element("[editphase]").find(".edit-content").removeClass("hide");
                   
                };
                scope.advanceEditSave = function ($event) {
                    ngModelCtrl.$setViewValue(elm.val());
                    angular.element($event.currentTarget).closest(".editField").addClass("hide");
                    var el =  angular.element("[editphase]");
                    el.find(".edit-content").removeClass("hide");
                    elm.closest("td").addClass("loader");
                    $timeout(function(){
                        elm.closest("td").removeClass("loader");
                        el.addClass("successfulEdit");
                    },1000);
                    
                 

                };
            }
        };
    })
    //directive to enable pagination
    .directive("vmfTablePagination", function ($rootScope, $timeout) {

        return {
            restrict: "AEC",
            require: '^vmfTable',
            templateUrl: "../templates/vmf-table-pagination-tpl.html",
            scope: {
                itemsPerPage: "=",
                currentPage: "=",
                paginationPattern: "=",
                data: "=",
                dataset: "&"
            },
            link: function ($scope, elm, attr, ctrl) {
                
                $scope.tablepaginationconfig = {"itemsPerPage":$scope.itemsPerPage,"currentPageBox" :$scope.currentPage + 1};
                $scope.selectPerPage = [
                {"value":2, "text": "2 per page"},
                {"value":4, "text": "4 per page"},
                {"value":6, "text": "6 per page"},
                {"value":$scope.data.length, "text": "Show All"}
              ];

                $scope.$watch('tablepaginationconfig.itemsPerPage', function (n, o) {
                     $scope.$parent.tablepaginationconfig.itemsPerPage = n;
                     $scope.$parent.tablepaginationconfig.currentPage = 0;
                     $scope.tablepaginationconfig.currentPageBox = 1;
                     $scope.dataset();

                }, true);

                if($scope.paginationPattern === "patternone")
                {
                    $scope.patternone=true;
                     $timeout(function() {
                      //to set the first page as active page   
                      elm.find("ul").find("li").eq(1).addClass("active"); 

                  });
                }
                else
                {
                    $scope.patterntwo=true;
                }

                $scope.$watch('currentPage', function (n, o) {

                    $scope.dataset();

                }, true);



                $scope.recordsPerPage = [2, 4, 6,$scope.data.length];
                $scope.items = $scope.data;

                $scope.range = function () {
                    //toatal number of pages displayed
                    var rangeSize = 5;
                    var ret = [];
                    var start;

                    start = $scope.currentPage;
                    if (start > $scope.pageCount() - rangeSize) {
                        start = $scope.pageCount() - rangeSize + 1;
                    }

                    for (var i = start; i < start + rangeSize; i++) {
                        if (i >= 0) {
                            ret.push(i);
                        }
                    }
                    return ret;
                };

                $scope.prevPage = function (e) {
                    if ($scope.currentPage > 0) {
                        $scope.currentPage--;
                        $scope.tablepaginationconfig.currentPageBox--;
                          //enable disable next previous buttons logic for ie7
                        $(e.target).closest("ul").find("li").removeClass("active");
                        $(e.target).closest("ul").find("li").eq($scope.tablepaginationconfig.currentPageBox).addClass("active"); 
                    }
                      //enable disable next previous buttons logic for ie7
                    if($scope.currentPage < $scope.pageCount()) {
                        
                          if($scope.patternone) {
                                $(e.target).parents("ul").find(".pagination1NextArrow").parent("li").removeClass("disabled");
                               } else if($scope.patterntwo) {
                                $(e.target).parents(".pagination_pagination").find(".pagination2NextArrow").removeClass("disabled");
                              }
                    }
                      //enable disable next previous buttons logic for ie7
                     if ($scope.currentPage === 0) 
                    {
                        if($scope.patternone) {
                              $(e.target).parent("li").addClass("disabled");
                          } else if($scope.patterntwo) {
                              $(e.target).addClass("disabled");
                          }
                    }
                };

                $scope.prevPageDisabled = function () {
                    return $scope.currentPage === 0 ? "disabled" : "";
                };

                $scope.pageCount = function () {
                    return Math.ceil($scope.items.length / $scope.itemsPerPage) - 1;
                };

                $scope.nextPage = function (e) {

                     if ($scope.currentPage < $scope.pageCount()) {
                        $scope.currentPage++;
                        $scope.tablepaginationconfig.currentPageBox++;
                          //enable disable next previous buttons logic for ie7
                        $(e.target).closest("ul").find("li").removeClass("active");
                        $(e.target).closest("ul").find("li").eq($scope.tablepaginationconfig.currentPageBox).addClass("active"); 

                    }
                      //enable disable next previous buttons logic for ie7
                      if($scope.currentPage > 0) {
           
                          if($scope.patternone) {
                            $(e.target).parents("ul").find(".pagination1PrevArrow").parent("li").removeClass("disabled");
                         } else if($scope.patterntwo) {
                            $(e.target).parents(".pagination_pagination").find(".pagination2PrevArrow").removeClass("disabled");
                          }
                      
                      }
                   
                        //enable disable next previous buttons logic for ie7
                    if(parseInt($scope.currentPage) === parseInt($scope.pageCount())){
                    
                        if($scope.patternone) {
                              $(e.target).parent("li").addClass("disabled");
                           } else if($scope.patterntwo) {
                              $(e.target).addClass("disabled");
                          }
                       
                      }
                };

                $scope.nextPageDisabled = function () {
                    return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
                };

                $scope.setPage = function (n,e) {
                    $scope.currentPage = n;
                    $scope.tablepaginationconfig.currentPageBox = n + 1;
                    $(e.target).closest("ul").find("li").removeClass("active");
                    $(e.target).parent("li").addClass("active"); 
                    //enable disable next previous buttons logic for ie7
                    if(parseInt($scope.currentPage) > 0) {
                        $(e.target).parents("ul").find(".pagination1PrevArrow").parent("li").removeClass("disabled");
                    }
                    if ($scope.currentPage < $scope.pageCount()) {
                        $(e.target).parents("ul").find(".pagination1NextArrow").parent("li").removeClass("disabled");
                    }
                    if(parseInt($scope.currentPage) === 0) {
                        $(e.target).parents("ul").find(".pagination1PrevArrow").parent("li").addClass("disabled");
                    }
                    if(parseInt($scope.currentPage) === parseInt($scope.pageCount())){
                        $(e.target).parents("ul").find(".pagination1NextArrow").parent("li").addClass("disabled");
                    }
                };
                $scope.setTextbox = function (e) {
                    if (e.which === 13) {
                        if ($scope.tablepaginationconfig.currentPageBox >= 1 && $scope.tablepaginationconfig.currentPageBox <= ($scope.pageCount() + 1)) {
                            $scope.currentPage = e.currentTarget.value - 1;
                              //enable disable next previous buttons logic for ie7
                            if(parseInt($scope.currentPage) > 0) {
                                $(e.target).closest(".pagination_pagination").find(".pagination2PrevArrow").removeClass("disabled");
                            }
                            if ($scope.currentPage < $scope.pageCount()) {
                                $(e.target).closest(".pagination_pagination").find(".pagination2NextArrow").removeClass("disabled");
                            }
                            if(parseInt($scope.currentPage) === 0) {
                                $(e.target).closest(".pagination_pagination").find(".pagination2PrevArrow").addClass("disabled");
                            }
                            if(parseInt($scope.currentPage) === parseInt($scope.pageCount())){
                                $(e.target).closest(".pagination_pagination").find(".pagination2NextArrow").addClass("disabled");
                            }
                        }
                    }
                };
            }
        };
    })

    //directive to enable show/hide columns
    .directive('vmfManageColumns', function () {
        return {
            restrict: 'EA',
            replace: true,
            require:"^vmfTable",
            templateUrl: '../templates/vmf-table-toplink-tpl.html',
            link: function (scope, elem, attrs, vmfTableCtrl) {
                elem.find(".Manage").on("mouseleave", function($event){
                     elem.find(".drop_down_holder").hide();
                });

                elem.find(".Manage").on("mouseenter", function(){
                   angular.forEach(scope.columns, function(col){
                        col.visible = angular.isUndefined(col.visible) || col.visible;                        
                   });
                   elem.find(".drop_down_holder").show();
                   scope.$apply();
                });
              
                scope.applyBtn = function ($event) {                
                    angular.forEach(scope.columns, function (col) {
                        col.visible = col.columnVisible;
                    });

                    vmfTableCtrl.onApplyClicked();
                    console.log("(scope.columns", scope.columns);
                      
                        if($event){
                              angular.element($event.currentTarget).closest(".drop_down_holder").hide();
                        }
                };

                scope.cancelBtn = function ($event) {                
                    angular.forEach(scope.columns, function (col) {
                        col.columnVisible = col.visible;
                    });
                   
                    if($event){
                             angular.element($event.currentTarget).closest(".drop_down_holder").hide();
                        }
                };

                elem.on("mouseleave", function () {
                    scope.$apply(function () {
                        scope.cancelBtn();
                    });
                });
            }
        };
    })

    //Directive will help us to prevent default action when clicking on '<a/>' tag
    .directive('a', function () {
        return {
            restrict: 'E',
            link: function (scope, elem, attrs) {
                if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                    elem.on('click', function (e) {
                        e.preventDefault();
                    });
                }
            }
        };
    })

    //Directive will help us to load the itemsperpage options and load appropriately
    .directive('selectItemsPerPageOption', function () {
        return {
            restrict: 'A',
             require: 'ngModel',
             scope:false,
            link: function (scope, elem, attrs, ngModelCtrl) {

                  scope.$watch('itemsPerPage', function (n, o) {
                    scope.dataset(scope.currentPage,scope.itemsPerPage);

                }, true);
               var options="",temp = scope.recordsPerPage;
               for(var i=0;i<temp.length-1;i++){
                options+="<option value="+temp[i]+">"+temp[i]+" per page</option>";
               }
               options+="<option value='"+temp[temp.length-1]+"'>Show All</option>";
               elem.append(options);
               ngModelCtrl.$setViewValue(scope.itemsPerPage);
               elem.on("change",function(){
                    scope.$parent.currentPage = 0;
                    scope.currentPageBox = 1;
                    scope.$parent.itemsPerPage = elem.val();
                   
               });
            }
        };
    })

    //Directive for loading jquery-ui datepicker
    .directive('tableDatepicker', function() {
        return {
            restrict: 'A',
            require : 'ngModel',
            link : function (scope, element, attrs, ngModelCtrl) {
                $(function(){
                    $(element).datepicker({
                        dateFormat:'dd/mm/yy',
                           showOn: "both",
                        onSelect:function (date) {
                            scope.$apply(function () {
                                ngModelCtrl.$setViewValue(date);
                            });
                        }
                    });
                });
            }
        };
    })

    .directive('vmfCheckboxColumnCellRenderer', function () {
            return {
                restrict: 'E',   
                replace: true,         
                template: '<span><input type="checkbox" ng-model="item[column.checkboxField]" ng-click="checkbox_changeHandler($event)"></input></span>',
                link: function (scope, elem, attrs) {
                    
                    scope.checkbox_changeHandler = function($event){                    
                        scope.$emit("vmftable.checkboxheaderrenderer.clicked", {
                            target: $event.currentTarget,
                            column: scope.column,
                            item: scope.item
                        });
                    };                
                }
            };
        })

        .directive('vmfCheckboxGripperColumnCellRenderer', function ($document) {
            return {
                restrict: 'E',   
                replace: true,            
                //template: '<span><i class="drag-gripper-icon"></i><input type="checkbox" ng-if="column.enableMultiRowsDragAndDrop" ng-model="item.isCheckboxSelected" ng-click="checkbox_changeHandler($event)"></input></span>',
                 template: '<div><i class="drag-gripper-icon" ng-class="{\'no-multidrag\':!column.enableMultiRowsDragAndDrop}"></i>'+
                            '<div vmf-checkbox-group class="vmf-checkbox-group" type="1" ng-if="column.enableMultiRowsDragAndDrop" model="item.isCheckboxSelected" click-callback="checkbox_changeHandler($event)">'+                        
                            '</div>'+
                            '</div>',
                link: function (scope, elem, attrs) {
                    var dragClass = "vmf-drag-gripper-handle"; //vmf-ui-handle

                    if(scope.column.enableMultiRowsDragAndDrop){
                        scope.checkbox_changeHandler = function($event){        
                        console.log("checkbox_changeHandler vmf-checkbox-row-selected");             
                            scope.$emit("vmftable.checkboxheaderrenderer.clicked", {
                                target: $event.currentTarget,
                                column: scope.column,
                                item: scope.item
                            });
                        };

                        scope.$watch("item.isCheckboxSelected",function(newValue){
                            if(newValue){
                                elem.closest("tr").addClass("vmf-checkbox-row-selected");   
                                elem.closest("td").find("i").addClass("vmf-drag-gripper-handle");
                                console.log("vmf-checkbox-row-selected addClass");
                            }
                            else{
                                elem.closest("tr").removeClass("vmf-checkbox-row-selected");   
                                elem.closest("td").find("i").removeClass("vmf-drag-gripper-handle");
                                console.log("vmf-checkbox-row-selected removeClass");
                            }
                        });
                    }
                    else{
                       var mousedownTriggerd = false;

                       elem.on("mousedown",function(){
                            mousedownTriggerd = true;
                            elem.closest("tbody tr").removeClass("vmf-checkbox-row-selected");
                            elem.closest("tr").addClass("vmf-checkbox-row-selected");                                    
                            elem.closest("td").find("i").addClass("vmf-drag-gripper-handle"); 
                        });

                       $document.on("mouseup",function(){
                            if(mousedownTriggerd){
                                elem.closest("tbody tr").removeClass("vmf-checkbox-row-selected");   
                                elem.closest("td").find("i").removeClass("vmf-drag-gripper-handle"); 
                            }
                            mousedownTriggerd = false;
                        });                
                    }
                }
            };
        })
       
        .directive('vmfNameCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<span>{{itemValue}}</span>'
            };
        })    
       
        .directive('vmfTableButtonCellRenderer', function () {
            return {
                restrict: 'E',
                link: function ($scope, $element, $attrs) {
                    $scope.buttonText = $scope.$parent.column.title;

                    $scope.buttonClicked = function (item) {
                        $scope.$emit('cellButtonClicked', item);
                    };
                },
                template: '<a class="btn btn-default"' +
                    ' ng-click="buttonClicked(item)" >{{ buttonText }}</a>'
            };
        })
        .directive('vmfTableCurrencyCellRenderer', function (lodash) {
            return {
                restrict: 'E',
                template: '{{itemValue | currency:currency}}',
                link: function ($scope, $element, $attrs) {
                    var currency = '$',
                        config = $scope.config,
                        configEmpty = lodash.isEmpty(config);

                    if (config.currency) {
                        currency = config.currency;
                    }

                    $scope.currency = currency;
                }
            };
        })
        .directive('vmfTableDatetimeCellRenderer', function (lodash) {
            return {
                restrict: 'E',
                template: '{{itemValue | date:format}}',
                link: function ($scope, $element, $attrs) {
                    var format = 'dd/MM/yyyy HH:mm',
                        config = $scope.config;

                    if (config.format) {
                        format = config.format;
                    }

                    $scope.format = format;
                }
            };
        })
        .directive('vmfTableSelectableCellRenderer', function () {
            return {
                restrict: 'E',
                template: '<label><input type="checkbox" ng-model="value" ' +
                    'ng-change="onChange()"> {{itemValue}}</label>',
                link: function ($scope, $element) {
                    $scope.value = $scope.selectedRows[$scope.item.id] || false;
                    $scope.onChange = function () {
                        $scope.selectedRows[$scope.item.id] = $scope.value;
                    };
                }
            };
        })
        .directive('vmfTableStateLinkCellRenderer', function (lodash, $state) {
            return {
                restrict: 'E',
                link: function ($scope, $element, $attrs) {

                    // parse text for link
                    var text = $scope.item[$scope.config.linkKey] ||
                            $scope.$eval('item[' + $scope.config.linkKey + ']'),
                        data = {};

                    // parse data object (if set)
                    if ($scope.config.stateData) {
                        lodash.each($scope.config.stateData, function (el, index) {
                            data[index] = $scope.item[el];
                        });
                    }

                    // create link
                    $element.append(
                        angular.element('<a>')
                            .attr('href', $state.href($scope.config.state, data))
                            .text(text)
                    );
                }
            };
        })    
        .directive('vmfTitleCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<div>'+
                          '<h6>{{item.title}}</h6>'+
                          '<div>{{item.desc}}</div>'+  
                          '</div>'
            };
        })
        .directive('vmfLicenseCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<div class="license">'+
                          '{{item.currency}} {{item.license}}'+  
                          '</div>'
            };
        })
        .directive('vmfSubscriptionCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<table class="innrtbl">'+
                          '<tr class="innrtblrow1"><td class="innrtblcol1">Basic</td><td class="innrtblcol2">{{item.currency}} {{item.basic}}</td></tr>'+
                          '<tr class="innrtblrow2"><td class="innrtblcol1">Production</td><td class="innrtblcol2">{{item.currency}} {{item.production}}</td></tr>'+ 
                          '</table>'
            };
        })
        .directive('vmfBuyCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<div>'+
                          '<div vmf-button btn-text="Find a Reseller" btn-size="large" btn-type="vmf-primary"></div>'+
                          '<div vmf-button btn-text="Contact Seller" btn-size="large" btn-type="vmf-primary"></div>'+
                          '</div>'
            };
        })
        .directive('vmfCommitteCellRenderer', function () {
           return {
                restrict: 'E',
                replace: true,
                template: '<div class="truncate content"  title="{{itemValue}}">{{itemValue}}</div>'
            };
        })
        .directive('vmfSizeCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<div class="sizeLabelDiv">'+
                          '<span class="pdf_icon"> </span>'+
                          '<span class="sizeLabel">{{itemValue}}</span>'+
                          '<span class="add_icon">  </span>'+
                          '</div>',

                link:function($scope,$elem,$attrs){
                     $elem.closest("table").find("tr:odd").addClass('row-odd');
                }
            };
        })
        .directive('vmfStatusCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,           
                template: '<div>'+
                          '<span ng-if="(item.standard == \'Available\')" class="green_dot_icon"> </span>'+
                          '<span ng-if="(item.standard != \'Available\')"> {{item.standard}} </span>'+
                          '</div>'

            };
        })
         .directive('vmfAddonTitleCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<div>'+
                          '<h6>  {{item.title}}  </h6><p>  {{item.desc}}   </p><p>  {{item.address}}  {{item.note}}   </p>'+
                          '<p class="subscriptionTitle" ng-if=item.subscriptionTitle>{{item.subscriptionTitle}} </p><p class="subscriptionDesc" ng-if=item.subscriptionDesc> {{item.subscriptionDesc}} </p>'+
                          '</div>'
            };
        })
        .directive('vmfProductQuantityCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<div ng-controller="ProductTableCtrl" class="inputbox-group">'+
                          '<div vmf-text-input type="normal" class="vmf-text-input" model="item.quantity"></div>'+
                          '</div>'
            };
        })

        .directive('vmfBillingTypeCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<div ng-controller="ProductTableCtrl">'+
                          '<span vmf-select-list pre-select-ind="0" model="item.billingType" list="billingTypeList"></span>'+
                          '</div>'
            };
        })
        
        .directive('vmfBillingRateCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,
                template: '<div class="rateCell">'+
                          '{{itemValue}}'+
                          '</div>'
            };
        })   

        // .directive('vmfIndexColumnCellRenderer', function () {
        //    return {
        //         restrict: 'E',            
        //         replace:true,            
        //         template: '<div>{{trIndex + 1}}</div>'
        //     };
        // })

        .directive('vmfContentWrapperCellRenderer', function () {
            return {
                restrict: 'E',            
                replace:true,            
                template: '<div>'+
                                '<div class="head-title" ng-click="toggleContent()">{{item[config.headerField]}}<div/>'+
                                '<div class="content" ng-show="contentVisible">{{item[config.contentField]}}<div/>'+
                           '</div>',

                link:function($scope,$elem,$attrs){
                    $scope.toggleContent = function(){
                        $scope.contentVisible = !$scope.contentVisible;                    
                    };
                }
            };
        })

        .directive('vmfQuickViewCellRenderer', function ($http, $compile, $document) {
            return {
                restrict: 'E',            
                replace:true,            
                templateUrl : '../templates/vmf-table-quickview-tpl.html',
                link:function(scope, elem, attrs){
                        function resetElements() {
                            $(".quick-view-popup").addClass("hide").removeClass("quick-view-popup-left");
                            $(".vmf-checkbox-row-selected").removeClass("vmf-checkbox-row-selected");
                            $(".vmf-quick-view-selected-icon").removeClass("vmf-quick-view-selected-icon");
                            $(".vmf-quick-view-cell-wrapper").css("zIndex", "0");
                        }

                        function onClickQuickViewIcon() {
                            resetElements();
                            var popupElement = $(elem).find(".quick-view-popup").removeClass("hide");
                            $(this).closest("tr").addClass("vmf-checkbox-row-selected");
                            $(this).closest(".vmf-quick-view-cell-wrapper").css("zIndex", "1");
                            $(this).addClass("vmf-quick-view-selected-icon");
                            if(($(this).offset().left+popupElement.find(".widgets").outerWidth()+20) > $(window).width()) {
                                popupElement.addClass("quick-view-popup-left");
                            }
                        }

                        function onClickQuickViewCloseIcon() {
                            resetElements();
                        }
                        
                        function onDocumentClick(event) {
                            if($(".quick-view-popup").has(event.target).length === 0 && !$(event.target).is(".vmf-quick-view-icon")) {
                                resetElements();
                            }
                        }

                        elem.on("click",".vmf-quick-view-icon", onClickQuickViewIcon);
                        elem.on("click",".vmf-quick-close-icon", onClickQuickViewCloseIcon);
                        $(document).on("click", onDocumentClick);

                        scope.$on("$destroy", function() {
                            elem.off("click",".vmf-quick-view-icon", onClickQuickViewIcon);
                            elem.off("click",".vmf-quick-close-icon", onClickQuickViewCloseIcon);
                            $(document).off("click", onDocumentClick);                        
                        });
                }

            };
        })

        .directive('vmfProductCellRenderer', function () {
                return {
                restrict: 'E',            
                replace:true,
                template: '<div><input type="checkbox" ng-model="item[column.checkboxField]" ng-click="checkbox_changeHandler($event)"></span><span>{{itemValue}}</span></div>',
                link: function (scope, elem, attrs, ctrl) {
                    
                    scope.checkbox_changeHandler = function($event){    
                    console.log("checkbox_changeHandler trigger");
                        scope.$emit("vmftable.checkboxheaderrenderer.clicked", {
                            target: $event.currentTarget,
                            column: scope.column,
                            item: scope.item
                        });
                    };           
                }
            };
        })

        .directive('vmfAddUnit', function () {
            return {
                restrict: 'E',            
                replace:true,            
                template: '<div class="edit-content">'+
                                '<div class="edit-content-section">'+
                                    '<span class="validationsuccessful"></span>'+
                                    '<span class="monetary-unit">{{item.unit}}</span>'+
                                    '<span class="monetary">{{itemValue}}</span>'+
                                '</div>'+
                           '</div>'
            };
        })


        .directive('vmfServiceStatusCellRenderer', function () {
            return {
                restrict: 'E',
                replace: true,
                template: '<div ng-switch on="itemValue | lowercase">' +
                            '<div ng-switch-when="active"><span class="ss-active"><i class="icon-file"></i> Active</span></div>' +
                            '<div ng-switch-when="inactive"><span class="ss-inactive"><i class="icon-file"></i>In-active</span></div>' +
                            '<div ng-switch-when="underprovisioning"><span class="ss-underprovision"><i class="icon-file"></i>Under Provisioning</span></div>' +
                            '<div ng-switch-when="expired"><span class="ss-expired"><i class="icon-file"></i>Expired</span></div>' +
                        '</div>'


            };
        })





        //HEADER RENDER

        .directive('vmfProductHeaderRenderer', function () {
                return {
                restrict: 'E',
                replace:true,
                require:"^vmfTable",          
                template: '<div>'+
                              '<input type="checkbox" ng-model="column[column.checkboxField]" ng-click="headerClickFunc(column,$event)">'+
                              '<span>{{headerText}}</span><span class="icon-sort"></span>'+
                              '<span><input type="text" ng-model="search" ng-change="filterByProduct(search, column)" ng-click="mouseDownHandler($event)" ></span>'+
                          '</div>',
                link:function(scope, elem, attrs, ctrl){
                   scope.headerClickFunc = function(column,$event){
                      $event.stopImmediatePropagation();
                      ctrl.headerRendererCheckboxClicked(column, $event);
                   };

                  scope.mouseDownHandler = function($event){
                    $event.stopImmediatePropagation();                  
                  };

                  scope.filterByProduct = function(searchText, column){
                    ctrl.filterByColum(searchText, column);               
                  };

              }
                 
            };
        })
    .directive('vmfProductFeatureCellRenderer', function () {       
                return {        
                    restrict: 'E',      
                    replace: true,      
                    template: '<div class="truncate"><span toggle="tooltip" showToolTip = "{{column.showToolTip}}"  title-alt="{{item.desc}}">{{itemValue}}</span></div>'
                };      
            }) 

        .directive('vmfCheckboxHeaderRenderer', function () {
                return {
                restrict: 'E',
                replace:true,    
                require:"^vmfTable",          
                //template: '<div><input type="checkbox" ng-if="column.enableMultiRowsDragAndDrop" ng-model="column[column.checkboxField]" ng-click="headerClickFunc(column,$event)"></div>',
                 template: '<div vmf-checkbox-group ng-if="column.enableMultiRowsDragAndDrop" class="vmf-checkbox-group" type="1" model="column[column.checkboxField]" click-callback="headerClickCheckbox($event)"></div>',
                link:function(scope, elem, attrs, ctrl){
                    scope.headerClickCheckbox = function($event) {
                        scope.headerClickFunc(scope.column, $event);
                    };

                   scope.headerClickFunc = function(column,$event){
                      $event.stopImmediatePropagation();
                      ctrl.headerRendererCheckboxClicked(column, $event);
                  };
              }             
            };
    })
    .directive('vmfBulkActionItems', function() {
        return {
            restrict: 'A',
            require: "^vmfTable",
            scope: {
                inputData: '=',
                callbackOnSelect: '='
            },
            template: '<div class="vmf-bulk-actions-wrap">'+
                            '<ul><li class="action" vmf-bulk-action-item-status="action.isEnabled" ng-click="onActionItemClicked(action)" ng-repeat="action in list.displayActions" vmf-bulk-action-item-render>{{action.title}}</li>'+
                                '<li class="more-actions" ng-show="list.moreActions.length > 0">'+
                                    '<span>More Actions</span><span class="icon-sort"></span>'+
                                    '<ul class="sub-actions">'+
                                        '<li class="sub-action" vmf-bulk-action-item-status="action.isEnabled" ng-click="onActionItemClicked(action)" ng-repeat="action in list.moreActions">{{action.title}}</li>'+
                                    '</ul></li></ul></div>',
            controller: ['$scope', '$element', function($scope, $element) {
                var _this = this, callOnWindowResize;
                _this.bulkActionWrapperWidth = 0;
                _this.actionItems = [];
                $scope.list = {
                    "displayActions": [],
                    "moreActions": []
                };
                
                $scope.safeApply = function(fn) {
                    var phase = this.$root.$$phase;
                    if(phase === '$apply' || phase === '$digest') {
                        if(fn && (typeof(fn) === 'function')) {
                            fn();
                        }
                    } else {
                        this.$apply(fn);
                    }
                };
                
                $scope.onActionItemClicked = function(actionObj) {
                    if(angular.isFunction($scope.callbackOnSelect) && actionObj.isEnabled) {
                        $scope.callbackOnSelect(actionObj);
                    }
                };

                function calculatElementWidth() {
                    var wrapperWidth = $element.children(".vmf-bulk-actions-wrap").width(),
                        actionsWidth = 120;
                    _this.bulkActionWrapperWidth = wrapperWidth - actionsWidth;
                }

                function assignActionItems(index) {
                    $scope.list.displayActions = [];
                    $scope.list.moreActions = [];
                    for(var i = 0; i <= index; i++) {
                        $scope.list.displayActions.push(angular.copy($scope.inputData[i]));
                    }
                    for(var j = index+1; j < $scope.inputData.length; j++) {
                        $scope.list.moreActions.push(angular.copy($scope.inputData[j]));
                    }
                    enableActionItems(0);
                    $scope.safeApply();
                }

                function initActionItems(values) {
                    calculatElementWidth();
                    $scope.list.displayActions = [];
                    angular.forEach(values, function(valueObj) {
                        $scope.list.displayActions.push(angular.copy(valueObj));
                    });
                }

                function enableActionItems(count) {
                    angular.forEach($scope.list.displayActions, function(actionObj) {
                        if(actionObj) {
                            actionObj.isEnabled = (actionObj.enableType===undefined || actionObj.enableType===null) || actionObj.enableType&&actionObj.enableType==="default" || actionObj.enableType&&actionObj.enableType==="single"&&count===1 || actionObj.enableType&&actionObj.enableType==="multiple"&&count>=1;
                        }
                    });
                    angular.forEach($scope.list.moreActions, function(actionObj) {
                        if(actionObj) {
                            actionObj.isEnabled = (actionObj.enableType===undefined || actionObj.enableType===null) || actionObj.enableType&&actionObj.enableType==="default" || actionObj.enableType&&actionObj.enableType==="single"&&count===1 || actionObj.enableType&&actionObj.enableType==="multiple"&&count>=1;
                        }
                    });
                }

                $scope.$on('vmfBulkActions.render.exceeded', function(event, index) {
                    assignActionItems(index);
                });

                $scope.$on('vmfBulkActions.render.enbaled', function(event, selectedCount) {
                    enableActionItems(selectedCount);
                });

                $scope.$watch("inputData", function(values) {
                    if(values) {
                        initActionItems(values);
                    }
                });

                callOnWindowResize = function() {
                    calculatElementWidth();
                    var length = _this.actionItems.length, i = 0;
                    for(i = 0; i < length; i++) {
                        if((_this.actionItems[i].left + _this.actionItems[i].width + 40) > _this.bulkActionWrapperWidth) {
                            break;
                        }
                    }
                    assignActionItems(i);
                };
                $(window).on('resize', callOnWindowResize);

                $scope.$on('$destroy', function() {
                    $(window).off('resize', callOnWindowResize);
                });
            }],
            link: function(scope, element, attrs) {}
        };
    })
    .directive('vmfBulkActionItemRender', ["$timeout", function($timeout) {
        return {
            restrict: 'A',
            require: '^vmfBulkActionItems',
            link: function(scope, element, attrs, bulkAction) {
                if(scope.action) {
                    var tempElement = $("<span></span>").text(scope.action.title).appendTo(element);
                    bulkAction.actionItems[scope.$index] = {
                        "left": element.position().left,
                        "width": tempElement.width() + 20
                    };
                    tempElement.remove();
                    if((element.position().left + bulkAction.actionItems[scope.$index].width + 40) > bulkAction.bulkActionWrapperWidth && !bulkAction.isExceedTriggered) {
                        scope.$emit('vmfBulkActions.render.exceeded', scope.$index);
                        bulkAction.isExceedTriggered = true;
                    }
                    if(bulkAction.isExceedTriggered) {
                        element.css("visibility", "none");
                    }
                    if(scope.$last) {
                        element.css("marginRight", "0px");
                    }
                }
            }
        };
    }])
    .directive('vmfBulkActionItemStatus', function() {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                scope.$watch(attrs.vmfBulkActionItemStatus, function(enabled) {
                    if(enabled) {
                        element.addClass('action-enabled');
                    } else {
                        element.removeClass('action-enabled');
                    }
                });
            }
        };
    })
    .directive('vmfBulkActionScroll', ["$timeout", function($timeout) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                var selectedRowTop = 0,
                jScrollPaneSettings = {
                        autoReinitialise: true,
                        showArrows: true,
                        verticalArrowPositions: 'after'
                }, onScrollCallback = function(event) {
                    var fixedRow = element.find('.bulk-action-fixed-row');
                    if(fixedRow.length === 1) {
                        if(element.data('jsp').getContentPositionY() > fixedRow.data("actualTop")) {
                            fixedRow.css({
                                "position": "absolute",
                                "top": selectedRowTop + element.data('jsp').getContentPositionY() + 'px',
                                "left": (navigator&&(navigator.userAgent.toLowerCase().indexOf('chrome')>-1?'0':1) || 1) + "px",
                                "z-index": "1000"
                            });
                        } else {
                            fixedRow.css({
                                "position": "relative",
                                "top": '0px',
                                "z-index": "0"
                            });
                        }
                    }
                    $('.vmf-table-bulk-actual-wrap table').css('left', element.find('.jspPane').position().left + 'px');
                };
                element.jScrollPane(jScrollPaneSettings);
                element.on("scroll", onScrollCallback);
                scope.$on('$destroy', function() {
                    element.off('scroll', onScrollCallback);
                });
            }
        };
    }])
    .directive('vmfTableBulkVirtualCol', ["$timeout", function($timeout) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                function calculateVirtualHeaderWidth() {
                    var actualHeaders =$("#vmf-table-bulk-actual").find("thead th");
                    element.width($(actualHeaders[scope.$index]).outerWidth());                
                }
                var callOnWindowResize = function() {
                    $timeout(function() {
                        calculateVirtualHeaderWidth();
                    }, 500);
                    $timeout(function() {
                        calculateVirtualHeaderWidth();
                    }, 1500);
                    $timeout(function() {
                        calculateVirtualHeaderWidth();
                    }, 2000);
                    $timeout(function() {
                        calculateVirtualHeaderWidth();
                    }, 2500);
                    $timeout(function() {
                        calculateVirtualHeaderWidth();
                    }, 3000);
                    $timeout(function() {
                        calculateVirtualHeaderWidth();
                    }, 5000);
                };
                callOnWindowResize();
                scope.$on('vmftable.events.bulkActions.render', function(event) {
                    callOnWindowResize();
                });
                $(window).on('resize', callOnWindowResize);
                scope.$on("$destroy", function(event) {
                    $(window).off('resize', callOnWindowResize);
                });
            }
        };
    }])
    .directive('vmfClass', ['$timeout','$parse','$http', function($timeout, $parse, $http) {
      return {
            restrict: 'A',               
            link: function(scope, elem, attrs) {   

               var expArr = attrs.vmfClass.substr(1,attrs.vmfClass.length-2).split(':');
               var classStyle = expArr[0];
               var evalExp = $.trim(expArr[1]); 
               var value = $parse(evalExp)(scope);

               if(value){
                  elem.addClass(classStyle);
               }else{
                  elem.removeClass(classStyle);            
               }
            }
          };
        }
    ])
    .directive('vmfTableSortClass', function() {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                var prevClass = '';
                scope.$watch(attrs.vmfTableSortClass, function(value) {
                    if(value) {
                        element.removeClass(prevClass);
                        element.addClass(value);
                        prevClass = value;
                    }
                });
                scope.$watch(attrs.sortEnabled, function(value) {
                    if(value) {
                        element.addClass('sortable');
                    } else {
                        element.removeClass('sortable');
                    }
                });
            }
        };
    });
/* Accordion directive */
app.directive('vmfAccordionContainer', ['$compile', function($compile) {
    return {
        restrict: 'EA',
        scope: {
            type: '@',
            headers: '=',
            accData: '=',
            selAcc: '=',
            customClass:'='
        },

        link: function(scope, elem, attrs) {
            
            var template;
            if(scope.type === '1') {
                template = '<table class="vmf-accordion-table1"><thead class="vmf-accordion-table-header"><tr><td class="col1"></td>';

                var count = 1;
                angular.forEach(scope.headers, function(item) {
                    // if(count === 1) {
                    //     template += '<td colspan="2">' + item + '</td>';    
                    // }
                    // else {
                       template += '<td class="col' + (count + 1) +'">' + item + '</td>';
                    // }
                    count += 1;

                });    
                
                template += '</tr></thead><tbody class="vmf-accordion-table-body">';
                scope.accordionIndex = 0;

                angular.forEach(scope.accData, function(item) {
                    template += '<tr class="vmf-accordion-header" ng-click="toggleAccordion(' +  scope.accordionIndex + ')"><td ><span class="vmf-arrow"></span></td><td colspan="3">' + item.header + '</td></tr>';

                    angular.forEach(item.contents, function(content) {
                        template += '<tr class="vmf-accordion-row" ng-show="activeIndex =='+ scope.accordionIndex + '"><td colspan="1"></td>';
                        angular.forEach(content, function(cellData) {
                            template += '<td colspan="1">' + cellData + '</td>';    
                        });
                            
                        template += '</tr>';
                        
                    });

                    scope.accordionIndex += 1;

                });    

                template += '</tbody></table>';

                elem.append(template);
                // console.log(template);
                $compile(elem.contents())(scope);

                // for IE7    
                elem.find('.vmf-accordion-row').hide();  
            }

            else if(scope.type === '2') {
                template = '<table class="vmf-accordion-table2"><thead class="vmf-accordion-table2-header" style="background-color: lightgray;"><tr><td class="col1"></td>';

                var headerCount = 0;

                angular.forEach(scope.headers, function(item) {
                    if(headerCount !== scope.headers.length - 1) {
                        template += '<td class="col' + (headerCount + 1 + 1)+ '">' + item + '</td>';
                    }
                    else {
                        template += '<td colspan="2" class="col' + (headerCount + 1 + 1)+ '">' + item + '</td>';   
                    }    
                    headerCount += 1;

                });    
                
                template += '</tr></thead><tbody class="vmf-accordion-table2-body">';
                scope.accordionIndex = 0;

                angular.forEach(scope.accData, function(item) {
                    template += '<tr class="vmf-accordion-header2" ng-click="toggleAccordion(' +  scope.accordionIndex + ')"><td><span class="vmf-arrow"></span></td>';

                    var accHeadersCount = 1;

                    angular.forEach(item.headers, function(header) {
                        if(accHeadersCount !== item.headers.length) {
                            template += '<td>' + header + '</td>';
                        }
                        else {
                            template += '<td class="vmf-acc-header-last-child">' + header + '</td>';   
                        }    

                        accHeadersCount += 1;
                    });    

                    template += '</tr><tr class="vmf-accordion-row2"><td></td><td class="vmf-acc-header-last-child" colspan="' + item.headers.length + '"><table class="vmf-accordion-sub-table" ng-show="activeIndex =='+ scope.accordionIndex + '">';

                    var count = 0;
                    angular.forEach(item.contents, function(content) {

                        if(count !== 0) {
                            template += '<tr class="vmf-accordion-sub-table-row">';
                            angular.forEach(content, function(cellData) {
                                template += '<td>' + cellData + '</td>';                                    
                            });

                            template += '</tr>';

                        }
                        else {
                            template += '<thead class="vmf-accordion-sub-table-header"><tr>';

                            var subHeaderCount = 1;

                            angular.forEach(content, function(cellData) {
                                template += '<td class="col' + subHeaderCount + '">' + cellData + '</td>';
                                subHeaderCount += 1;                                    
                            });

                            template += '</tr></thead><tbody class="vmf-accordion-sub-table-body">';
                        }

                        count += 1;   
                        
                        
                    });

                    template += '</tbody></table></td></tr>';

                    scope.accordionIndex += 1;

                });                    

                template += '</tbody></table>';

                elem.append(template);
                // console.log(template);
                if(scope.customClass){
                    angular.forEach(scope.customClass, function(item) {
                        elem.find(item.selector).addClass(item.cusclass);
                        
                        
                    });
                }
                
                $compile(elem.contents())(scope);

                // for IE7    
                elem.find('.vmf-accordion-row2').hide();  
                // elem.find('.vmf-accordion-row2').hide();  
            }


            scope.toggleAccordion = function(index) {
                scope.activeIndex = scope.activeIndex === index ? -1 : index;

                var accordions, accordionRows;
                if(scope.type === '1') {
                    elem.find('.vmf-accordion-row').hide();
                    
                    accordions = elem.find('.vmf-accordion-header');
                        
                    accordions.removeClass('vmf-active-row');    
                    
                    // for IE7
                    if(scope.activeIndex !== -1) {
                        // accordions = elem.find('.vmf-accordion-header');
                        // console.log(accordions[index]);
                        $(accordions[index]).addClass('vmf-active-row');
                        accordionRows = $(accordions[index]).nextUntil('.vmf-accordion-header');

                        
                        $(accordionRows).show();

                    }
                }
                else if(scope.type === '2') {
                    elem.find('.vmf-accordion-row2').hide();

                    accordions = elem.find('.vmf-accordion-header2');
                    accordions.removeClass('vmf-active-row');
                    // for IE7
                    if(scope.activeIndex !== -1) {
                        $(accordions[index]).addClass('vmf-active-row');
                        
                        accordionRows = $(accordions[index]).nextUntil('.vmf-accordion-header2');
                        
                        $(accordionRows).show();

                    }
                }

            };

            scope.buttonClick = function($event, index) {
                
                $event.stopPropagation();
                scope.selAcc = index;
            }; 
        }

    };
}]);

app.directive('vmfTableAutoComplete', ['$timeout','$parse','$http', function($timeout, $parse, $http) {
    return {
        restrict: 'A',
        scope: {
          url:"@",
          filterBy:"@",
          data:"=",          
          onSelect:"&"
        },         
        link: function(scope, elem, attrs) {
          //scope.url = "../data/countries.json";

            scope.$watch("data", function(newValue){
                // if(newValue && newValue.length == 0) return;

                var sourceArray = scope.data;

                $timeout(function(){
                      elem.autocomplete().autocomplete("destroy").autocomplete({            
                        source: function(request, response){

                          var term = request.term;
                          var searchRegex= "^"+term;

                          var regex = new RegExp(searchRegex,'i');
                          //var regex = new RegExp("^"+term,"gi");
                          var result =[];

                         angular.forEach(sourceArray, function(item){
                             if(item && regex.test(item.name)){
                                  result.push(item);
                              }
                          });

                          console.log("result",result);

                          response(result);
                        },
                        minLength: 1,
                        select: function( event, ui ) {                          
                          event.stopImmediatePropagation();                   
                          scope.onSelect({item:ui.item});
                          //scope.onSelect(ui.item);
                        }
                      })
                      .autocomplete( "instance" )._renderItem = function( ul, item ) {
                          return $( "<li>" )
                            .append( "<a>" + item.name + "</a>" )
                            .appendTo( ul );
                      };
              },0);              
            });            
        }           
    };
}]);

app.directive('vmfTableFilterButton', ['$compile','$templateCache','$timeout','$document', function( $compile, $templateCache,$timeout,$document) {
    return {
        restrict: 'A',
        scope: {
            title: '@',
            name: '@',            
            data: '=',
            url: '@',
            mandatoryDate:'@',
            onChange :'&'
        },
        controller: function($scope, $http) {

           $scope.$on('vmfTable.event.resetfilter', function (event, data) {
              console.log("vmfTable.event.resetfilter data, data"); // 'Data to send'
              $scope.selectedItems = [];
              $scope.selectedDate=null;
              $scope.clearAll();
           });
            
            $scope.clearAll = function(target){
              if(target){
            $(target.currentTarget).closest('.dropdown').removeClass('open'); 
                 }
            $scope.selectedItems = [];             
              angular.forEach($scope.parsedData, function(item){
                item.selected = false;
              });
            };

            $scope.applyFilter = function(event){
              $(event.currentTarget).closest('.dropdown').removeClass('open');
              $scope.selectedItems = [];
              angular.forEach($scope.parsedData, function(item){
                if(item.selected){
                    $scope.selectedItems.push(item);
                }
              });

              var params = {event:event, target: $scope.name, items : $scope.selectedItems};              
              $scope.onChange({params:params});
            };
             
             $scope.onDateSelect =function(item, $event){               
                item.label = $($event.target).closest(".checkbox").find("input.vmf-calInput").val();
               //$scope.apply();                   
             };

            $scope.deleteItem = function (item, index, event) {
              $scope.selectedItems.splice(index, 1);                
                item.selected = false;

                if(item.isDateField){
                  $(event.target).closest(".selected-item-container")                                 
                                 .siblings(".table-filter").find("input.vmf-calInput").val("");   
                }

               // $scope.tempParsedData = angular.copy($scope.parsedData);
              };
            
            $scope.liClickHandler = function($event){
              $event.stopPropagation();
            };
                  
            $scope.loadData = function(){
                if($scope.url){                   
                    $http.get($scope.url).success(function (result) {
                        $scope.data = result.data;
                    })
                    .error(function (data, status, headers, config) {
                        console.log("TABLE FILTER SERVICE FOR "+ $scope.name + " NOT ABLE");                       
                    });
                }
            };

            $scope.init = function(){
                $scope.loadData();
            };

            $scope.init();
                   

        }, 
        
        link: function(scope, elem, attrs) {
            scope.selectedItems=[];
            scope.parsedData = [];
            scope.selectedDate = '';            
          
            scope.$watch("data", function(newValue){
                scope.parsedData = scope.data;
                 //scope.tempParsedData = angular.copy(scope.parsedData);
            });
             

            $document.on("click", function(e){  
                var found = false;                      

              if($(e.target).closest(".btn-group.dropdown").length === 0){                        
                    //scope.parsedData = angular.copy(scope.tempParsedData);    
                    if(scope.selectedItems && scope.selectedItems.length === 0){
                        scope.clearAll();
                    }else{

                      angular.forEach(scope.parsedData, function(item){     
                          found = false;                     
                          angular.forEach(scope.selectedItems, function(selItems){
                              if(item === selItems){
                                item.selected = true;
                                found = true;
                              }
                          });

                          if(!found){
                            item.selected = false;
                          }
                      });   
                  }

                }

                scope.$apply();
            });

            $timeout(function(){
                $('.dropdown-menu li').click(function(e) {
                    e.stopPropagation();
                });

                if(scope.mandatoryDate===true){
                    var tableFilterDateContainer = $(elem).find('.table-filter-date-container');
                    $(tableFilterDateContainer).datepicker({
                        format: "dd/mm/yyyy"
                    });  
                }
            }, 1000);
        },
         templateUrl:'../templates/table-filter-button-tpl.html' 
        
    };
}]);

app.directive('vmfTableFilterButtonLocation', ['$compile','$templateCache','$timeout','vmfUtils','$document', function( $compile, $templateCache,$timeout, vmfUtils,$document) {
    return {
        restrict: 'A',
        scope: {
            title: '@',
            name: '@',            
            data: '@',
            url: '@',
            mandatoryDate:'@',
            autoCompleteData:"=",
            onChange :'&',  
            countryDataURL :'@'
        },
                    
        link: function(scope, elem, attrs) {
            
            $timeout(function(){
                $('.dropdown-menu li').click(function(e) {
                    e.stopPropagation();
                });
            }, 1000);

            $timeout(function(){
                $('.dropdown-menu p').click(function(e) {
                    e.stopPropagation();
                });
            }, 1000);

           $timeout(function(){
                $('.ui-menu-item').click(function(e) {
                    e.stopPropagation();
                });
            }, 1000);

            $document.on("click", function(e){  
                var found = false;                      

                if($(e.target).closest(".btn-group.dropdown").length === 0){                        
                    //scope.parsedData = angular.copy(scope.tempParsedData);    
                    if(scope.selectedItems && scope.selectedItems.length === 0){
                        scope.clearAll();
                    }else{

                      angular.forEach(scope.filterRegionData, function(item){     
                          found = false;                     
                          angular.forEach(scope.selectedItems, function(selItems){
                              if(item === selItems){
                                item.selected = true;
                                found = true;
                              }
                          });

                          if(!found){
                            item.selected = false;
                          }
                      });   
                  }

                  scope.$apply();

                }
            });
        },
        controller: function($scope, $http) {
            $scope.selectedItems=[];
            $scope.countryData = [];
            $scope.countryDataURL = 'data/countries.json';   

            $scope.filterRegionData = [];
            $scope.filterCountryData = [];
            $scope.filterStatesData = [];

            $scope.selectedRegionData = [];
            $scope.selectedCountryData = [];
            $scope.selectedStatesData = [];

            $scope.$on('vmfTable.event.resetfilter', function (event, data) {
              console.log("vmfTable.event.resetfilter data, data"); // 'Data to send'
              $scope.selectedItems = [];
              $scope.clearAll();
           });

            $scope.eventStop= function(event){
              event.stopPropagation();
            };

            $scope.onChangeRegion = function(region){

              if(region){
                region.type="region";
              }

               $timeout(function(){
                if(region.selected){
                  if($scope.selectedRegionData.indexOf(region) === -1){
                      $scope.selectedRegionData.push(region);
                  }
                }else{
                  var arr = $scope.selectedRegionData,
                  idxRemove = arr.indexOf(region);

                  if(idxRemove > -1)
                    arr.splice(idxRemove,1);
                }

                console.log("selected region", region, $scope.selectedRegionData);

                var regionSelected = $scope.filterRegionData.filter(function(item){                  
                  return item.selected;                  
                }).map(function(item){
                   return item.name;
                });

                if(regionSelected.length === 0){
                  $scope.clearAll();
                }
                else{

                    $scope.filterCountryData = [];

                    for (var i = 0; i < $scope.countryData.length; i++) {
                       var current = $scope.countryData[i];
                        if(regionSelected.indexOf(current.region) > -1){
                            $scope.filterCountryData.push(current);
                        }
                    }
                }

              updateSelectedCountryStates(region);

                  console.log(regionSelected, $scope.filterRegionData);
              },0);
            };

            function updateSelectedCountryStates(selRegion){
              if(!selRegion.selected){               
                $scope.selectedCountryData = filterNotMatchData($scope.selectedCountryData,"region", selRegion.name);                
                $scope.selectedStatesData = filterNotMatchData($scope.selectedStatesData,"region", selRegion.name);               
              }
            }

            function filterNotMatchData(input, prop, value){
              return input.filter(function(item){
                      return item[prop] !== value;
                  });
            }
          
            $scope.onCountrySelect = function(item){

              console.log("selected country ", item); 

              if(item){
                item.type="country";
              }

              $scope.$apply(function(){
                var selectedCodes = vmfUtils.getUnique($scope.selectedCountryData,"code", item.code);
                
                if(selectedCodes.length > 0)
                  return;

                $scope.selectedCountryData.push(item);

                if(item.states){ 
                  $scope.filterStatesData = $scope.filterStatesData.concat(item.states);
               }

                console.log("$scope.filterStatesData ", $scope.filterStatesData); 
              });
            };

            $scope.onStatesSelect = function(item){

              console.log("selected states ", item); 

              if(item){
                item.type="state";
              }

              $scope.$apply(function(){
                var selectedCodes = vmfUtils.getUnique($scope.selectedStatesData,"code", item.code);
                if(selectedCodes.length > 0)
                  return;

                $scope.selectedStatesData.push(item);                
              });              
            };          
            
            $scope.clearAll = function(target){ 

              if(target){        
                $(target.currentTarget).closest('.dropdown').removeClass('open');
              }

              $scope.filterCountryData = [];
              $scope.filterStatesData = [];
              $scope.selectedCountryData = [];
              $scope.selectedStatesData = [];
              $scope.selectedRegionData=[];
              $scope.selectedItems = [];

              angular.forEach($scope.filterRegionData, function(item){
                item.selected = false;
              });

            };

            $scope.applyFilter = function(target){     

              $(target.currentTarget).closest('.dropdown').removeClass('open');              
                $scope.selectedItems = [];
                $scope.selectedItems = $scope.selectedItems.concat(
                    $scope.selectedRegionData,
                    $scope.selectedCountryData,
                    $scope.selectedStatesData
                );              

                console.log("selectedItems ", $scope.selectedItems);

                $scope.onChange({event:target, targetName: $scope.name, items : $scope.selectedItems});
            };

            $scope.deleteItem = function (item,index) {
              item.selected = false;    
              $scope.selectedItems.splice(index, 1);

              if(item.type === "region"){                
                removeItem($scope.selectedRegionData,item);    
                $scope.onChangeRegion(item);
                removeSelectedRegionItem(item);
              }else if(item.type === "country"){
                removeItem($scope.selectedCountryData,item);  
                $scope.deleteCountry(item,$scope.selectedCountryData.indexOf(item));
                removeSelectedCountryItem(item);
              }else if(item.type === "state"){
                removeItem($scope.selectedStatesData,item);  
                $scope.deleteState(item,$scope.selectedStatesData.indexOf(item));
              }
              
            };

            function removeSelectedRegionItem(item) {
              angular.forEach(item.countries, function(country) {
                var index, flag = false;
                angular.forEach($scope.selectedItems, function(item, itemIndex) {
                    if(item.name === country.name) {
                        flag = true;
                        index = itemIndex;
                    }
                });
                if(flag) {
                  removeSelectedCountryItem($scope.selectedItems[index]);
                  $scope.selectedItems.splice(index, 1);
                }
              });
            }

            function removeSelectedCountryItem(item) {
              angular.forEach(item.states, function(state) {
                var index, flag = false;
                angular.forEach($scope.selectedItems, function(item, itemIndex) {
                    if(item.name === state.name) {
                        flag = true;
                        index = itemIndex;
                    }
                });
                if(flag) {
                  $scope.selectedItems.splice(index, 1);
                }
              });
            }

            function removeItem(arr,item){
              arr = arr || [];
              for (var i = arr.length - 1; i > -1 ; i--) {
                if(item.name === arr[i].name && item.type === arr[i].type){
                    arr.splice(i,1);
                }
              }
            }

            $scope.deleteState = function (item, index) {            
              $scope.selectedStatesData.splice(index, 1); 
            };

            $scope.deleteCountry = function (item, index) {  

               var filteredData = $scope.filterStatesData || [];

                for (var idx = filteredData.length - 1; idx >= 0; idx--) {
                  if(filteredData[idx].countryCode === item.code){
                    filteredData.splice(idx,1);
                  }
                }

                $scope.selectedCountryData.splice(index, 1); 

                var selectedStatesData = $scope.selectedStatesData;

                for (var indx = selectedStatesData.length - 1; indx >= 0; indx--) {
                  if(selectedStatesData[indx].countryCode === item.code){
                    selectedStatesData.splice(indx, 1);
                  }
                }
            };
            

            $scope.loadData = function(url){      
             

                    
                      var countries = [];
                      $scope.filterRegionData = [];
                      angular.forEach($scope.autoCompleteData.data,function(item){
                          countries = countries.concat(item.countries);
                          $scope.filterRegionData.push(item);
                      });

                      $scope.countryData = countries;


               
                  
            };

            $scope.init = function(){
               $scope.loadData($scope.countryDataURL); 
               $scope.clearAll();      
            };

            console.log("LIMRA gridTableFilterButton INIT");
            $scope.init();
        },  
       // template : '<div ng-include="tableUrl"></div>'
       templateUrl:'../templates/table-filter-button-location-tpl.html'
        
    };
}]);

app.directive('vmfTableFilter', ['$timeout', function($timeout) {
    return {
        restrict: 'EA',
        scope: {
            title: '=',
            filterData: '=', 
            name:"=",
            onItemSelected:'&',
            autoCompleteData:"="
        },
       controller:function($scope) {
          var filterItems = {};
          
          $scope.onChange = function(params){    
            if(params){
                filterItems[params.target] = params.items;
                $scope.onItemSelected({event: params.event, target:params.target, itemSelected: params.items, allSelectedItems: filterItems});
            }
          };

          $scope.isLocation = function(item){
              return item && item.type === "location";
          };  

          $scope.filterReset = function(){
            console.log("filterReset trigger");
            $scope.$broadcast("vmfTable.event.resetfilter",{}); 
          };     
         
          angular.forEach($scope.filterData, function(item){
                console.log(item.tableFilterTitle, item.data, item.url);            
                filterItems[item.name] = [];
          });

        },
       template : '<div id="dropdown-holder">'+
                      '<div id="reset-bar">'+
                          '<span class="pull-left">Filter by:</span>'+
                          '<span id="reset-link" ng-click="filterReset()">Reset</span>'+
                      '</div>'+
                    '<div class="dropdowns-container">'+
                        '<div ng-repeat="item in filterData" class="each-dropdown">'+
                            '<div vmf-table-filter-button  ng-if="!isLocation(item)" title="{{item.tableFilterTitle}}" name="{{item.name}}" mandatory-date="{{item.mandatoryDate}}" data="item.data" url="{{item.url}}" on-change="onChange(params)"></div>'+
                            '<div vmf-table-filter-button-location auto-complete-data="autoCompleteData" ng-if="isLocation(item)" title="{{item.tableFilterTitle}}" name="{{item.name}}" mandatory-date="{{item.mandatoryDate}}" data="item.data" url="{{item.url}}" on-change="onChange(params)"></div>'+                            
                        '</div>'+
                    '</div>' +
                    '</div>'
    };
}]);



/*Static table component code */

app.directive('staticTableColspanRow',["$compile","$timeout", function($compile,$timeout){
return {
        restrict: 'A', 
        scope:{
                item:"=",
                field:"@"
        },
        link: function(scope, elem, attrs) {
            if(scope.item.discounts && scope.item.discounts.length){
                $timeout(function(){
                    elem.closest("tr").addClass("preColspanRow");
                    var colspan = elem.closest("table").find("th").length;
                    var tr = $compile("<tr class='colspanRow'><td colspan="+colspan+"><span class='capitalizeFirstletter'>{{field}} : </span>{{item[field]}}</td></tr>")(scope);
                    angular.element(elem).after(tr);

                });
                    
            }
        }
    };
}]);



app.directive('vmfAutocompleteInput', ['$compile', '$document', '$timeout', function($compile, $document, $timeout){
    return {
        restrict: 'EA',
        scope: {
            type: '@',
            name: '@',
            title: '@',
            model: '=',
            searchCallback: '&',
            psearchCallback: '=',
            hint: '@',
            rows: '@',
            clearTextLength: '@',
            searchModel: '=',
            mandatory: '@',
            customClass:'=',
            theme:'@'
        },
        controller: ['$scope', function($scope) {

            $scope.defaults = {
                rows: 10,
                hint: '',
                clearTextLength: 3

            };

           
            $scope.options = {};
            // console.log('rows' + $scope.rows);
            if($scope.rows) {
                $scope.options.rows = $scope.rows;
            }
            else {
                $scope.options.rows = $scope.defaults.rows;
            }

            if($scope.hint) {
                $scope.options.hint = $scope.hint;
            }
            else {
                $scope.options.hint = $scope.defaults.hint;
            }

            if($scope.clearTextLength) {
                $scope.options.clearTextLength = $scope.clearTextLength;
            }
            else {
                $scope.options.clearTextLength = $scope.defaults.clearTextLength;
            }
            
        }],

        link: function(scope, elem, attrs) {
            var template;
            
            if(attrs.type === 'normal') {
                if(scope.mandatory === 'true') {
                    template = '<div class="formRow"><label class="col-md-3 formLabel"><span class="mandatory">*</span> ' + scope.title + '</label><div class="col-md-4"><input type="text" ng-model="model"/></div></div>';
                }
                else {
                    template = '<div class="formRow"><label class="col-md-3 formLabel">' + scope.title + '</label><div class="col-md-4"><input type="text" ng-model="model"/></div></div>';
                }
                
                elem.append(template);
                if(scope.customClass){
                    angular.forEach(scope.customClass, function(item) {
                        elem.find(item.selector).addClass(item.cusclass);
                        
                        
                    });
                }
                $compile(elem.contents())(scope);

            }
            else if(attrs.type === 'search') {
                template = '<form autocomplete="off" class="searchArea"><input type="text" ng-model="model" ng-focus="onsearchFocus()" ng-blur="onsearchBlur()" ng-keyup="keyPressSearch($event)" placeholder={{options.hint}} /><input type="button" class="searchBtn" ng-click="searchAction()"/></form>';
                elem.append(template);
                if(scope.customClass){
                    angular.forEach(scope.customClass, function(item) {
                        elem.find(item.selector).addClass(item.cusclass);
                        
                        
                    });
                }
                $compile(elem.contents())(scope);

                scope.$watch('model', function(n, o) {
                
                    // console.log(n);console.log(n.length);
                    if(n && n.length >= scope.options.clearTextLength) {
                        elem.find('.searchArea').addClass('active');
                    }
                    else {
                        elem.find('.searchArea').removeClass('active');   
                    }
                        
                });
            }
            else if(attrs.type === 'psearch') {
                if(attrs.theme ==='normal'){
                    template = '<form autocomplete="off" class="searchArea psearch"><input  type="text" ng-model="model"   ng-keyup="keyPressSearch($event)" placeholder={{options.hint}} /><!--input type="button" class="searchBtn" ng-click="psearchAction()"/--><ul class="searchWrap"><li ng-repeat="item in filteredData = (searchModel | mySearchFilter:model)" ng-bind-html="item | highlight1:model" ng-click="optionSelect(item)" ng-keyup="optionSelectByKey($event, item)" tabindex="0"></li></ul></form>';

                }else{
                    template = '<form autocomplete="off" class="searchArea psearch"><span class="vmf-autoComplete vmf-autocomplete-search"><input class="vmf-autocomplete-text-area" type="text" ng-model="model"   ng-keyup="keyPressSearch($event)" placeholder={{options.hint}} /><input type="button" class="vmf-autoComplete-searchBtn" ng-click="psearchAction()"/><ul class="searchWrap"><li ng-repeat="item in filteredData = (searchModel | mySearchFilter:model)" ng-bind-html="item | highlight1:model" ng-click="optionSelect(item)" ng-keyup="optionSelectByKey($event, item)" tabindex="0"></li></ul></span></form>';

                }
                
                // template = '<form autocomplete="off" class="searchArea psearch"><input  type="text" ng-model="model"   ng-keyup="keyPressSearch($event)" placeholder={{options.hint}} /><input type="button" class="searchBtn" ng-click="psearchAction()"/><ul class="searchWrap"><li ng-repeat="item in filteredData = (searchModel | filter:model)" ng-bind-html="item | highlight:model" ng-click="optionSelect(item)" ng-keyup="optionSelectByKey($event, item)" tabindex="0"></li></ul></form>';
                
                elem.append(template);
                if(scope.customClass){
                    angular.forEach(scope.customClass, function(item) {
                        elem.find(item.selector).addClass(item.cusclass);
                        
                        
                    });
                }
                elem.find('.vmf-autoComplete input[type="text"]').addClass("vmf-autocomplete-text-area");
                $compile(elem.contents())(scope);
                
                scope.$watch('model', function(n, o) {
                    $timeout(function(){
                        if(n && n.length >= 1) {
                            elem.find('.searchArea').addClass('active');
                            if(!scope.empty)
                                elem.find('.searchWrap').show();
                        }
                        else{
                            elem.find('.searchArea').removeClass('active');
                            elem.find('.searchWrap').hide();
                        }
                    });
                    
                });

                scope.empty = false;

                scope.$watchCollection('filteredData', function(n, o) {
                    if(n && n.length === 0) {
                        scope.empty = true;
                        // console.log(true);
                        elem.find('.searchWrap').hide();
                    }
                    else {
                        scope.empty = false;
                        // console.log(false);
                    }
                   
                });                

                
            }

            scope.searchAction = function() {
                if(scope.model.length >= scope.options.clearTextLength) {
                    scope.clearText();
                }
                else {
                    scope.searchCallback();
                }
            };

            scope.selected = false;

            scope.psearchAction = function() {
                if(scope.model.length >= 1 && !scope.selected) {
                    scope.clearText();
                }
                else {
                    // console.log('calling'); console.log(elem.find(':text').val());
                    scope.psearchCallback(elem.find(':text').val());
                    scope.selected = false;
                }
            };

            scope.clearText = function() {
                // console.log('clearText');
                // console.log(elem.find(':text').val());
                elem.find(':text').val('');
                scope.model = '';
                elem.find('.searchArea').removeClass('active');
            };

            scope.keyPressSearch = function($event) {
                if($event.keyCode === 13) {
                    if(scope.type === 'search') {
                        scope.searchCallback();
                    }    
                    else {
                        scope.selected = true;
                        scope.psearchAction();
                        elem.find('.searchArea').removeClass('active');
                    }
                }
            };

            
            scope.optionSelect =  function(item) {
                // console.log('clicked');
                // console.log(item);
                elem.find(':text').val(item);
                elem.find('.searchArea').removeClass('active');
                // console.log('after remove');
                // console.log(elem);
                scope.selected = true;
            };

            scope.optionSelectByKey =  function($event, item) {
                // console.log('optionSelectByKey');
                // console.log($event.keyCode);console.log(item);
                
                if($event.keyCode === 13) {
                    //console.log('selected');
                    elem.find(':text').val(item);
                    elem.find('.searchArea').removeClass('active');
                    // console.log('after remove');
                    // console.log(elem);
                    scope.selected = true;
                }
              
            };
            scope.onsearchBlur = function(){
                //console.log('blur called');
                elem.find('.searchArea').removeClass('active');
            };
            // scope.onpsearchBlur = function(){
            //     console.log('blur called');
            //     if(elem.find('.searchArea').text() !=== ''){
            //         elem.find('.searchArea').removeClass('active');

            //     }else{
            //         elem.find('.searchArea').removeClass('active');    
            //     }
                
            // };
            scope.onsearchFocus = function(){
                elem.find('.searchArea').addClass('active');

            };
            $document.on('click', function() {
                // console.log('document');
                elem.find('.psearch').removeClass('active');
                elem.find('.searchWrap').hide();
                
            });

            
        } 
        
    };
}])
.filter('highlight1', function() {
    return function(text, phrase) {
        // console.log(text);console.log(phrase);
        //console.log('inside highlight');
        var phrases = [];
        phrases = phrase.split(' ');
        //console.log(phrases);


        if (phrase) {
            text.replace('<span>','');
            text.replace('</span>','');
            angular.forEach(phrases,function(phr){

                text = text.replace(new RegExp('('+phr+')', 'gi'), '<span>$1</span>');

            });

            
            // text = text.replace(new RegExp('('+phrase+')', 'gi'), '<span>$1</span>');
        }
        text = '<a href="javascript: void(0);" tabindex="-1">' + text + '</a>';
        return text;
    };
}).filter("mySearchFilter", function(){
    return function(input, searchText){
        //console.log("inside myFilter");
        //console.log(input);
        //console.log(searchText);
        if(searchText){
            var returnArray = [];
            var searchTextSplit = searchText.toLowerCase().split(' ');
            for(var x = 0; x < input.length; x++){
                 var count = 0;
                for(var y = 0; y < searchTextSplit.length; y++){
                    if(input[x].toLowerCase().indexOf(searchTextSplit[y]) !== -1){
                        count++;
                    }
                }
                if(count === searchTextSplit.length){
                     returnArray.push(input[x]);   
                }
            }
            return returnArray;

        }
        
    };
});
app.directive('vmfWpb', [ '$timeout',function($timeout){
		return {
			restrict: 'EA',
			scope: {},
			transclude: true,
			controller: ['$scope', function($scope) {
				var tasks = $scope.tasks = [];
				var currentTaskId = 0;
				this.addTask = function(task) {
					tasks.push(task);
				};

				this.getCurrentTaskId = function () {
					return currentTaskId;
				};

				$scope.select = function(taskId) {
					angular.forEach(tasks, function(task) {
						task.selected = false;
					});
					tasks[taskId].selected = true;

				};		

				$scope.ieselect = function(taskId) {
					angular.forEach(tasks, function(task) {
						task.selected = false;
						$(".task-content").find("vmf-wpb-task[title='"+task.title+"']").children().hide();
					});
					tasks[taskId].selected = true;

					$(".task-content").find("vmf-wpb-task[title='"+tasks[taskId].title+"']").children().show();

				};

				$scope.nextTask = function() {
					// console.log('currentTaskId', currentTaskId);
					currentTaskId = currentTaskId + 1;
					$scope.select(currentTaskId);
					// console.log('calling ieselect');
					$scope.ieselect(currentTaskId);
				};

				$scope.previousTask = function() {
					// console.log('currentTaskId', currentTaskId);
					currentTaskId = currentTaskId - 1;
					$scope.select(currentTaskId);
					$scope.ieselect(currentTaskId);
				};

			}],

			link: {
				post: function(scope, elem, attrs) {
					// console.log('parent', scope);
					scope.$on('vmfWpbNext', function(e, msg) {
						// console.log(msg);
						scope.nextTask();
						console.log('emitting vmfWpbChangeClass');
						scope.$broadcast('vmfWpbChangeNext');
					});

					scope.$on('vmfWpbPrevious', function(e, msg) {
						// console.log(msg);
						scope.previousTask();
						scope.$broadcast('vmfWpbChangePrevious');
					});

					scope.select(0);
					scope.ieselect(0);
					$timeout(function() {
            	angular.element('.vmf-progress-bar ol li:first').addClass('active');
        	});

					// console.log(elem.html());

				}
			},
			template: '<div class="step_by_step_progress_bar shopping_cart_progress num_steps_4 num_items_4"><div class="vmf-progress-bar"><ol><li ng-repeat="task in tasks" class="vmf-progress-section" ng-class="{active:$first, last:$last}" vmf-progress-status><div class="step vmf-progress-step"><span ng-if="!$last" class="number vmf-progress-number-{{$index+1}}"></span><span ng-if="$last" class="number vmf-progress-number-4"></span><span class="title vmf-progress-title">{{task.title}}</span></div></li> </ol></div><div class="task-content" ng-transclude> </div></div>'
		};
	}])
	.directive('vmfWpbTask', [function() {
		return {
			restrict: 'EA',
			require: '^vmfWpb',
			scope: {
				title: '@'
			},
			transclude: true,

			link: function(scope, elem, attrs, wpbCtrl) {
				wpbCtrl.addTask(scope);
				// console.log('added task');
				// console.log('child', scope);
			},


			template: "<div class='vmfWpbTask' ng-show='selected' ng-transclude></div>"
		};
	}])
	.directive('vmfProgressStatus', [function() {
		return {
			restrict: 'A',
			require: '^vmfWpb',
			link: function(scope, elem, attrs, wpbCtrl) {
				// console.log('status');
				// console.log(elem.html());
				// elem.addClass('test');
				// console.log(wpbCtrl.getCurrentTaskId());
				scope.$on('vmfWpbChangeNext', function(e, msg) {
					// console.log(msg);
					// console.log(elem.hasClass('active'));
					// console.log(e.defaultPrevented);
					var currentTaskId = wpbCtrl.getCurrentTaskId();
					

					if(!e.defaultPrevented) {
						angular.element(elem.parent().children()[currentTaskId - 1]).removeClass('active');
						angular.element(elem.parent().children()[currentTaskId - 1]).addClass('visited');
						angular.element(elem.parent().children()[currentTaskId]).addClass('active');
						e.preventDefault();
					}	
					
				});
				

				scope.$on('vmfWpbChangePrevious', function(e, msg) {
					// console.log(msg);
					// console.log(elem.hasClass('active'));
					// console.log(e.defaultPrevented);

					var currentTaskId = wpbCtrl.getCurrentTaskId();
					
					if(!e.defaultPrevented) {
						angular.element(elem.parent().children()[currentTaskId + 1]).removeClass('active');
						angular.element(elem.parent().children()[currentTaskId]).removeClass('visited');
						angular.element(elem.parent().children()[currentTaskId]).addClass('active');
						e.preventDefault();
					}	

				});								
				
			}
			
		};
	}]);
app.directive("vmfBigfooter", function() {
    return {
        restrict : "EA",
        scope : {
            options : "="
        },
        link : function(scope, element, attrs) {
            var temp;
            var theme = "";
            var len = scope.options.navigation.length;
            if(scope.options.theme){
                theme = scope.options.theme;
            }
            temp = '<div class="vmf-bigfooter"><div class="vmf-footerWrap">';
            if(scope.options.mainTitle !== undefined){
                temp += '<div class="main-title">'+scope.options.mainTitle+'</div>';
            }
            temp += '<div class="nav-section '+theme+'">';
			temp += '<div class="nav-section-content '+theme+'">';
            for (var i = 0; i < len; i++) {
                var option = scope.options.navigation[i];
                //temp += "<ul class='col-xs-12 col-md-3 col-sm-6"+(i>0?"'":" first1'")+">";
                temp += "<ul class='"+(i>0?"'":" first'")+">";
                temp += '<li class="title">' + option.title + '</li>';
                for (var k = 0, l = option.links.length; k < l; k++) {
                    var link = option.links[k];
                    if(link.name !== undefined){
                        temp += '<li><a href="' + link.url + '" class="'+(k>0?'"':' first"')+'>'+ link.name + '</a></li>';
                    }
                    else if(link.template !== undefined){
                        temp += '<li>'+link.template+'</li>';
                    }
                }
                temp += "</ul>";
            }
            temp += '</div>';
			temp += '</div>';
            temp += '<div class="common-section">';
            temp += '<div class="copy-right">Copyright &copy; '+new Date().getFullYear() +' VMware,Inc. All rights reserved</div>';
            temp += '<ul class="horizontal-menu">';
            for(var a=0,b=scope.options.commonLinks.length; a<b; a++){
                var cLink = scope.options.commonLinks[a];
                temp += '<li><a href="' + cLink.url + '">' + cLink.name + '</a></li>';
            }
            temp += '</ul>';
            temp += '</div></div>';
            temp += '<div class="footer-bg"></div>';
            temp += '</div>';

            element.append(temp);
            if(scope.options.menuClassMain === "" || scope.options.menuClassMain === undefined){
                $(".nav-section ul").addClass("wide-"+len);
            }
            else{
                $(".nav-section ul").addClass(scope.options.menuClassMain);
            }
            if(scope.options.menuClassResponsive === "" || scope.options.menuClassResponsive === undefined || scope.options.menuClassResponsive.length === 0){
                $(".nav-section ul").addClass("width-half width-full");
            }
            else{
                $(".nav-section ul").addClass(scope.options.menuClassResponsive.join(" "));
            }
        }
    };
});



app.directive("vmfBacklink", function() {
    return {
        restrict : "EA",
        scope : {
            link : "@",
            title : "@"
        },
        link : function(scope, element, attrs) {
            if(scope.link === undefined){
                scope.link = "";
            }
            var temp = '';
            temp +='<div class="vmf-backlink">';
            temp += '<a href="'+scope.link+'"><span></span> Back to '+scope.title+'</a>';
            temp += '</div>';
            element.append(temp);
            if(scope.link ===  ""){
                element.find("a").click(function(){
                   history.back();
                   return false;
                });
            }
        }
    };
});

/* Carousel Directive Starts here */
app.directive("vmfCarousel", function() {
    var template = '<div><div class="vmware-carosuel-wrapper-container">' +
        '<div class="vmware-carosuel-inner-wrapper-container" > ' +
        '<div  class="vmware-carosuel-title">{{config.title}}</div>' +
        '<div class="carosuel-container">' +
        '<div class="carosuel-button prevBtn"><button class="vmware-carosuel-leftNavigation" ng-click="gotoPage(currentPage-1)"></button></div>' +
        '<div class="carosuel-outer-container">' +
        '<div class="carosuel-inner-container">' +
        '<div ng-repeat="items in config.data" class="carosuel-img" ng-style=imageStyle ng-click="oncarouselclick()()" ng-mouseover="oncarouselover()()">' +
        '<img ng-style=imageHeight ng-src="{{items.img}}" >' +
        '<div class="carosuel-img-caption" ng-if="captionshow">' +
        '<p>{{items.caption}}</p>' +
        '</div>' +
        '</div>' +
        '</div>' +
        '</div>' +
        '<div class="carosuel-button nextBtn"><button ng-disabled="buttonDisable && !circularrotate" class="vmware-carosuel-rightNavigation" ng-click="gotoPage(currentPage+1)"></button></div>' +
        '</div>' +
        '</div>' +
        '</div></div>';
    return {
        restrict: "AE",
        replace: true,
        template: template,
        scope: {
            config: '=',
            carouselwidth: '=',
            carouselheight: '=',
            carouselspacing : '=',
            circularrotate : '=?',
            autoplay : '=?',
            captionshow : '=?',
            animationdelay : '=?',
            oncarouselclick : '&?',
            oncarouselover : '&?'
        },
        controller: function($scope,$window,$element,$timeout) {            
             /* Carousel DOM Elements */             
            var windowObject = angular.element($window),
                carosuelGC = $element,
                carosuelOC = $element.find('.carosuel-outer-container'),
                carosuelIC = $element.find('.carosuel-inner-container'),
                carouselBC = $element.find('.carosuel-container'),
                carousalIN = $element.find('.vmware-carosuel-inner-wrapper-container'),

                /* Navigation Button configuration */
                NAV_BUTTON_WIDTH = 30,
                MARGIN_LEFT = 15,
                MARGIN_RIGHT = 15,

                /* Carousel Image configuration */
                IMAGE_TOTAL_COUNT = $scope.config.data.length,
                IMAGE_PADDING = $scope.carouselspacing ,
                IMAGE_WIDTH = $scope.carouselwidth + IMAGE_PADDING,

                /* Carousel Initilazation properties*/
                currentImageShowed = 1,
                imgCountToBeOccupied = 1,
                resizeFlag = false;

            
            /*  auto Configuration property of carousel if not set by user */
            $scope.imageStyle = { "width" : $scope.carouselwidth+"px", "height" : $scope.carouselheight+"px" , "margin-right" : IMAGE_PADDING+"px"};
            $scope.currentPage = 1;
            $scope.autoplay = $scope.autoplay || false;
            $scope.animationdelay = $scope.animationdelay || 7000;
            $scope.circularrotate = $scope.circularrotate || false;
            $scope.captionshow = $scope.captionshow || true;

            $scope.gotoPage = function(page) {
                if (page > $scope.pagination) {
                    page = 1;
                } else if (page < 1) {
                    page = $scope.pagination;
                }
                $scope.currentPage = page;
                currentImageShowed = (imgCountToBeOccupied * --page) +1;
                carosuelIC.stop(false,false);
                carosuelIC.animate({
                    'margin-left': -(IMAGE_WIDTH *  imgCountToBeOccupied) * page+ 'px'
                },$scope.animationdelay);
                $scope.intialLoadNavControl();
            };

            $scope.init = function() {
                var carosuelGC_width = carosuelGC.width(),
                    innerRealestate = carosuelGC_width - (NAV_BUTTON_WIDTH * 2 + MARGIN_LEFT + MARGIN_RIGHT);
                
                imgCountToBeOccupied = parseInt(innerRealestate / IMAGE_WIDTH);
                imgCountToBeOccupied = (imgCountToBeOccupied === 0 )? 1 : imgCountToBeOccupied;
                $scope.pagination = Math.ceil(IMAGE_TOTAL_COUNT / imgCountToBeOccupied);

                var carosuelOCWidth=IMAGE_WIDTH * imgCountToBeOccupied;
                carosuelOCWidth = (carosuelOCWidth <= 0)?IMAGE_WIDTH : carosuelOCWidth;
                carosuelOC.width(carosuelOCWidth);
                carosuelIC.width(IMAGE_WIDTH * IMAGE_TOTAL_COUNT);
                $scope.intialLoadNavControl();
                // carouselBC.css({"min-width":(IMAGE_WIDTH+(NAV_BUTTON_WIDTH*2)+MARGIN_LEFT+MARGIN_RIGHT)+"px"});
                carosuelGC.css({"min-width":(IMAGE_WIDTH+(NAV_BUTTON_WIDTH*2)+MARGIN_LEFT+MARGIN_RIGHT)+"px"});
                if (resizeFlag) {
                    var pageSlot = Math.ceil(currentImageShowed / imgCountToBeOccupied);
                    $scope.gotoPage(pageSlot);    
                }
            };

            $scope.intialLoadNavControl = function() {
                $scope.buttonDisable =false;
                
                $element.find('.vmware-carosuel-leftNavigation').removeClass('buttonvisibility');
                if (currentImageShowed > (IMAGE_TOTAL_COUNT - imgCountToBeOccupied)) {
                    $scope.buttonDisable = true;
                } else if (currentImageShowed <= 1 && !$scope.circularrotate)  {                 
                    $timeout(function(){$element.find('.vmware-carosuel-leftNavigation').addClass('buttonvisibility');});   
                }
            };

            $scope.init();

            windowObject.bind('resize', function() {
                resizeFlag = true;
                $scope.init();
                resizeFlag = false; 
            });

        }
    };
});
app.directive('vmfContentRating', ['$compile',
    function($compile) {
        return {
            restrict: 'EA',
            scope: {
                title: '=',
                options: '=',
                name: '@',
                model: '=',
                maxoption: '=',
                selectedOption: '@'
            },

            link: function(scope, elem, attrs) {
                var temp;
                temp = '<div>';
                temp += '<span class="radingMinus">-</span>';
                temp += '<div class="ratingContent customRadioBox">';

                for (i = 1; i <= scope.maxoption; i++) {
                    if (i === parseInt(scope.selectedOption)) {
                        temp += '<div><span>' + i + '</span> <label class="ratingRadio"><input type="radio" name="' + scope.name + '"  ng-click="getValue(' + i + ')" value=' + i + ' checked="true" /></label></div>';
                    } else {
                        temp += '<div><span>' + i + '</span> <label class="ratingRadio"><input type="radio" name="' + scope.name + '"   ng-click="getValue(' + i + ')" value=' + i + ' /></label></div>';
                    }

                }
                temp += '</div><span class="radingPlus">+</span>';
                temp += '</div>';

                elem.append(temp);
                $compile(elem.contents())(scope);

                /*ng-click is used instead ng-model for IE7 and all browser support 
                otherwise for input we can use ng-model=model 
            */
                scope.getValue = function(val) {
                    //console.log(val);
                    scope.model = val;
                };
            }

        };
    }
]);
app.directive('vmfCustomRadioGroup', ['$compile', '$timeout', function($compile, $timeout) {
    return {
        restrict: 'EA',
        scope: {
            options: '=',
            id: '@',
            ngModel: '='
        },
        priority:1,
        templateUrl: '../../dev/modules/customComponents/vmfCustomRadioGroup.html',
        controller: ['$scope', '$compile', function($scope, $compile) {
            $scope.optionsList = angular.extend({
                titleClass: 'col-md-2',
                listClass: 'col-md-8',
                required: false,
                msg: 'this field is mandatory'
            }, $scope.options);
            $scope.titleClass = $scope.optionsList.titleClass;              
            $scope.listClass = $scope.optionsList.listClass;
            if(typeof $scope.optionsList.title === 'undefined') {
                $('#' + $scope.id + ' .vm-radio-group-title').remove();
            }
            $scope.change = function (value) {
                console.log(value);
                $scope.$apply(function () {
                    $scope.ngModel = value;
                    if(typeof $scope.required !== 'undefined') {
                        $scope.required = false;
                    }
                });
            };
            $scope.getClasses = function (item) {
                var classes = "";
                if(item.checked) {
                    classes += " selected";
                }
                if(item.disabled) {
                    classes += " disabledColor";
                }
                return classes;
            };
            $scope.isDisabled = function (item) {
                if(item.disabled) {
                    return " disabled";
                }
                return "";
            };
        }],
        link: function(scope, elem, attrs) {    
            $timeout(function() {
                if(scope.optionsList.required === true){
                    scope.required = true;
                }
                if(angular.element('#' + scope.id + ' input[name="' + scope.optionsList.name + '"]:checked').size() > 0) {
                    console.log($('#' + scope.id + ' input[name="' + scope.optionsList.name + '"]:checked').val());
                    scope.change($('#' + scope.id + ' input[name="' + scope.optionsList.name + '"]:checked').val());
                }
            },100);
            angular.element(document).on('change', '#' + scope.id + ' input[name="' + scope.optionsList.name + '"]', function(){
                angular.element('#' + scope.id + ' input[name="' + scope.optionsList.name + '"]').closest('label').removeClass('selected');
                $(this).closest('label').addClass('selected');
                console.log($(this).val());
                scope.change($(this).val());
            });
        }
    };
}]);
app.directive('vmfCustomCheckBoxGroup', ['$compile', '$timeout', function($compile, $timeout) {
    return {
        restrict: 'EA',
        scope: {
            options: '=',
            id: '@',
            ngModel: '='
        },
        priority:1,
        templateUrl: '../../dev/modules/customComponents/vmfCustomCheckBoxGroup.html',
        controller: ['$scope', '$compile', function($scope, $compile) {
            $scope.optionsList = angular.extend({
                titleClass: 'col-md-2',
                listClass: 'col-md-8',
                required: false,
                msg: 'this field is mandatory'
            }, $scope.options);
            $scope.titleClass = $scope.optionsList.titleClass;              
            $scope.listClass = $scope.optionsList.listClass;
            if(typeof $scope.optionsList.title === 'undefined') {
                $('#' + $scope.id + ' .vm-radio-group-title').remove();
            }
            $scope.change = function () {
                var val =[];
                angular.element('#' + $scope.id + ' input[name="' + $scope.optionsList.name + '"]:checked').each(function(index, element){
                    val.push($(element).val());
                });
                $scope.$apply(function () {
                    if(val.length === 0) {
                        if(typeof $scope.required !== 'undefined') {
                            $scope.required = true;
                        }
                    } else { 
                        if(typeof $scope.required !== 'undefined') {
                            $scope.required = false;
                        }
                    }
                    $scope.ngModel = val;
                });
            };
            $scope.getClasses = function (item) {
                var classes = "";
                if(item.checked) {
                    classes += " selected";
                }
                if(item.disabled) {
                    classes += " disabledColor";
                }
                return classes;
            };
            $scope.isDisabled = function (item) {
                if(item.disabled) {
                    return " disabled";
                }
                return "";
            };
        }],
        link: function(scope, elem, attrs) {
            $timeout(function() {
                if(scope.optionsList.required === true){
                    scope.required = true;
                }
                if(angular.element('#' + scope.id + ' input[name="' + scope.optionsList.name + '"]:checked').size() > 0) {
                    scope.change($('#' + scope.id + ' input[name="' + scope.optionsList.name + '"]:checked').val());
                }
            });
            angular.element(document).on('change', '#' + scope.id + ' input[name="' + scope.optionsList.name + '"]', function(){
                if(angular.element(this).is(":checked")) {
                    angular.element(this).closest('label').addClass('selected');
                } else {
                    angular.element(this).closest('label').removeClass('selected');
                }
                scope.change();
            });
        }
    };
}]);
app.directive('vmTemplateInsert', ['$compile', '$document', '$window', '$timeout',
    function($compile, $document, $window, $timeout) {
        return {
            restrict: 'A',
            scope: {
                template : '@',
            },
            controller : '@',
            name:"controllerName",
            //hack to get controller name to be set.
            template : '<div ng-include = "getTemplate()" style = "display:table;"></div>',
            link : function(scope,element,attrs){
                    //hack to get template from the scope that is passed.
                    scope.getTemplate = function(){
                        return scope.template;
                    }
                }
        }
    }
]);
app.directive('vmfSelectList', ['$compile', '$document', '$window', '$timeout',
    function($compile, $document, $window, $timeout) {
        return {
            restrict: 'EA',
            scope: {
                dtitle: '@',        // dropdown title on left side
                model: '=',
                list: '=',
                sortby: '@',
                mandatory: '@',
                customClass:'=',
                htitle:'@',         // dropdown header/button title
                sub:'=',            // false if selected value should not substitute header title but shown somewhere else otherwise true by default 
  				//Truncate variables
                truncate: '@',
                listalign: '@',
                enablesearch: '@',
                searchplaceholder: '@',
                //Truncate variables
                preSelectInd: '=',  // pre selected value in dropdown
                titleColMod:'@',
                selectColMod:'@',
                showArrows : '@',
                dropdownType : '@',
                templateUrl : '@',
                controllerName : '@'
            },
            link: function(scope, elem, attrs) {
                //Transformation Logic
                //Transforms multidimentional Array of groups into single dimension array
                //this logic only for seperator based list.
                var listInStandardFormat = [];
                if(attrs.dropdownType == "with_seperators" || attrs.dropdownType == "with_group"){
                    if(scope.list && scope.list[0] && scope.list[0] instanceof Array){
                        angular.forEach(scope.list, function(item,ind){
                            angular.forEach(item, function(arrItem, arrIndex){
                                if(arrIndex == 0){
                                    arrItem.seperator = "true";
                                }
                                listInStandardFormat.push(arrItem);
                            });
                        });
                    }
                    scope.list = listInStandardFormat;
                }
             
                if(scope.list && scope.list[0]){
                    if(typeof scope.list[0] === 'string') {
                        scope.list.sort();
                    }
                    else if(typeof scope.list[0] === 'number') {
                        scope.list.sort(function (a, b) {return a - b;});
                    }
                    else if(typeof scope.list[0] === 'object') {
                    
                        if(scope.sortby === 'value') {
                    
                            if(typeof scope.list[0].value === 'number') {
                                scope.list.sort(function (a, b) {return a.value - b.value;});
                            }
                            else if(typeof scope.list[0].value === 'string') {

                                scope.list.sort(function (a, b) {
                                    if(a.value < b.value) {
                                        return -1;
                                    }
                                    else if(a.value > b.value) {
                                        return 1;
                                    }
                                    else {
                                        return 0;
                                    }
                                });
                            }

                        }
                        else if (attrs.sortby) {
                            scope.list.sort(function (a, b) {
                                if(a.text < b.text) {
                                    return -1;
                                }
                                else if(a.text > b.text) {
                                    return 1;
                                }
                                else {
                                    return 0;
                                }
                            });
                        }
                    }
                }
                scope.initializeScroll = false;

                var template;
                var titleColMod = typeof scope.titleColMod !== "undefined" ? scope.titleColMod : 'col-md-2';
                var selectColMod = typeof scope.selectColMod !== "undefined" ? scope.selectColMod : 'col-md-4';
                //Adding class if truncate 
                var truncateMod = typeof scope.truncate !== "undefined" ? 'vmf-dropdown-truncate' : '';
                var searchMod = typeof scope.enablesearch !== "undefined" ? '<div class="bootstrap-select-searchbox"><input type="text" class="input-block-level form-control search-box search-icon" autocomplete="off" placeholder="{{ searchplaceholder }}" /></div>' : '';

                var showDDArrows = typeof scope.showArrows !== "undefined" ? scope.showArrows : true;
                var sub = typeof scope.sub !== "undefined" ? scope.sub : true;

                if(scope.mandatory === 'true') {
                    if(scope.dtitle) {
                        if(attrs.htitle ==='' || attrs.htitle) {
                            template = '<div class="vmf_drop-down_text"><label class="labelHeader formLabel '+titleColMod+' col-xs-12"><span class="mandatory">*</span>{{dtitle}}</label><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">{{htitle}}</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">' + searchMod;
                           
                        }
                        else if(typeof scope.preSelectInd !== 'undefined') {
                            if(scope.list && scope.list[0] && typeof scope.list[0] === 'object') {
                                template = '<div class="vmf_drop-down_text"><label class="labelHeader formLabel '+titleColMod+' col-xs-12"><span class="mandatory">*</span>{{dtitle}}</label><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">' + scope.list[scope.preSelectInd].text + '</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">' + searchMod;                       
                            }
                            else {
                                template = '<div class="vmf_drop-down_text"><label class="labelHeader formLabel '+titleColMod+' col-xs-12"><span class="mandatory">*</span>{{dtitle}}</label><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">' + scope.list[scope.preSelectInd] + '</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">' + searchMod;   
                            }    
                        }
                        else {
                            template = '<div class="vmf_drop-down_text"><label class="labelHeader formLabel '+titleColMod+' col-xs-12"><span class="mandatory">*</span>{{dtitle}}</label><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">Select</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">'+ searchMod;
                        }

                    }
                    else {
                        if(attrs.htitle ==='' || attrs.htitle) {
                            template = '<div class="vmf_drop-down_text"><span class="mandatory">*</span><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">{{htitle}}</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">'+ searchMod;
                           
                        }
                        else if(typeof scope.preSelectInd !== 'undefined') {
                            if(scope.list && scope.list[0] && typeof scope.list[0] === 'object') {
                                template = '<div class="vmf_drop-down_text"><span class="mandatory">*</span><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">' + scope.list[scope.preSelectInd].text + '</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">' + searchMod;                      
                            }
                            else {
                                template = '<div class="vmf_drop-down_text"><span class="mandatory">*</span><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">' + scope.list[scope.preSelectInd] + '</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">' + searchMod;   
                            }    
                        }

                        else {

                            template = '<div class="vmf_drop-down_text"><span class="mandatory">*</span><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">Select</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">'+ searchMod;  
                        }
                    }
                }

                else {
                    if(scope.dtitle) {
                        if(attrs.htitle ==='' || attrs.htitle) {
                            template = '<div class="vmf_drop-down_text"><label class="labelHeader formLabel '+titleColMod+' col-xs-12">{{dtitle}}</label><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">{{htitle}}</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">' + searchMod;
                        }
                        else if(typeof scope.preSelectInd !== 'undefined') {
                            if(scope.list && scope.list[0] && typeof scope.list[0] === 'object') {
                                template = '<div class="vmf_drop-down_text"><label class="labelHeader formLabel '+titleColMod+' col-xs-12">{{dtitle}}</label><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">' + scope.list[scope.preSelectInd].text + '</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">'+ searchMod;                       
                            }
                            else {
                                template = '<div class="vmf_drop-down_text"><label class="labelHeader formLabel '+titleColMod+' col-xs-12">{{dtitle}}</label><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">' + scope.list[scope.preSelectInd] + '</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">'+ searchMod;   
                            }    
                        }
                        else {
                            template = '<div class="vmf_drop-down_text"><label class="labelHeader formLabel '+titleColMod+' col-xs-12">{{dtitle}}</label><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">Select</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">'+ searchMod;
                        }
                        
                    } 
                    else {
                        if(attrs.htitle ==='' || attrs.htitle) {
                            template = '<div class="vmf_drop-down_text"><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">{{htitle}}</span><ul id="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">'+ searchMod;
                        }
                        
                        else if(typeof scope.preSelectInd !== 'undefined') {
                            if(scope.list && scope.list[0] && typeof scope.list[0] === 'object') {
                                template = '<div class="vmf_drop-down_text"><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">'+ scope.list[scope.preSelectInd].text +'</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">' + searchMod;   
                            }
                            else {                              
                                template = '<div class="vmf_drop-down_text"><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">'+ scope.list[scope.preSelectInd] +'</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">' + searchMod;   
                            }
                                
                        }    
                        else {

                            template = '<div class="vmf_drop-down_text"><div tabindex="0" class="vmf-dropdown '+selectColMod+' col-xs-12" ng-keyDown="keyPressTitle($event);" ng-click="changeClass($event);"><div class="vmf-dropdown-content"><span class="current-selection">Select</span><ul class="dropDownListItems' + (attrs.dropdownType=="mega-dropdown" ? " flexWidth" : "") +'">'+ searchMod;  
                        }    
                    }
                }

                //********************** All truncate functionalities  ********************//
                //Checking IE version
                var isLowerIE = function(){
                    var myNav = navigator.userAgent.toLowerCase();
                    return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;
                }
                //Get truncated text
                var getTruncatedVal = function(text){
                      var limit = scope.truncate;
                      var ellipsis = "...";
                      if (text.length > limit) {
                         // -4 to include the ellipsis size and also since it is an index
                         var trimmedText = text.substring(0, limit - 4); 
                             trimmedText += ellipsis;
                      }else{
                        trimmedText = text;
                      }
                      return trimmedText;
                }
                var detectedCharWidths = {};
                var avgCharWidth = 6.5;

                //Get text length for truncate value
                var detectCharWidth = function(testText){
                    var val = testText || "a b c d e f 1 2 3 4 5 6 A B C D E F ! ! %"; //correct detection depends on this more then anything
                    if(!detectedCharWidths[val]){
                            var $inp = $("<span>", {
                                "text":val,
                                "class":"optionsHolder",
                                "css": {"background":"none", "margin":0, "padding":0, "overflow":"visible", "width":"auto", "color":"#FFF","font":"15px normal arial"}
                            });
                            $("body").append($inp);
                            detectedCharWidths[val] = ($inp.width() / val.length);
                            $inp.remove();
                    }
                    return detectedCharWidths[val];
                };
                //Changing position of option list if align attribute is given
                var resizeOptions = function(){
                    var listLeftPos = "auto";
                    if(scope.listalign === "right"){
                        elem.find('.vmf-dropdown-content').addClass("vmf-dropdown-align-right");
                    }else if(scope.listalign === "center"){
                        var _parentWidth = elem.find('.vmf-dropdown-content').width()/2,
                            _listWidth = ul.width()/2;
                            listLeftPos = (_parentWidth - _listWidth); 
                    }else{
                        elem.find('.vmf-dropdown-content').removeClass("vmf-dropdown-align-right");
                        listLeftPos = 0;
                    }
                    //Setting ul's width
                    if(itemLengthExceed && $document.width() > 768 && elem.find('.vmf-dropdown-truncate').width() < (scope.truncate * avgCharWidth) && elem.find('.vmf-dropdown-truncate ul.dropDownListItems').width() > elem.find('.vmf-dropdown-truncate').width()){
                        ul.css({"width":(scope.truncate * avgCharWidth),"left":listLeftPos});
                    }else{
                        ul.css({"width":"100%","left":"0"});
                    }
                };
                var itemLengthExceed = false;
                if (scope.list && scope.list[0] && typeof scope.list[0] === 'object') {

                    angular.forEach(scope.list, function(item,ind) {
                        var itemText = item.text;
                        template += '<li ';
                        //For manipulating click event on menu items
                        if(item.label == 'true' && item.selectable == 'true'){
                            template += 'ng-click="selectObj($event,' + ind + ');"';
                        }else if(!(item.label == 'true')){
                            template += 'ng-click="selectObj($event,' + ind + ');"';
                        }

                        //For manipulating classes  on menu items for seperator and intendation
                        if(attrs.dropdownType == "with_seperators" && item.seperator == 'true'){
                            template += ' class=" seperator_bar " ';
                        }else if(attrs.dropdownType == "with_group" && item.label == "true"){
                            template += ' class=" main-item" ';
                        }else if(attrs.dropdownType == "with_group" && !item.label){
                            template += ' class=" sub-item" ';
                        }else if(attrs.dropdownType == "with_submenu" && scope.list[ind].submenu && scope.list[ind].submenu){
                            template += ' class=" main-menu" ';
                        }
                        if(scope.truncate){
                          template += 'title="' + item.text +'"';
                          avgCharWidth = detectCharWidth(item.text);
                          //itemText =  getTruncatedVal(item.text);
                          if(!itemLengthExceed && item.text.length > scope.truncate){
                            itemLengthExceed = true;
                          }
                        }
                        template += '>' + itemText + '</li>';
                    });
                } 
                else {

                    angular.forEach(scope.list, function(item) {
                        var itemText = item;
                        template += '<li ng-click="select($event);"';
                        if(scope.truncate){
                          template += 'title="' + item +'"';
                          avgCharWidth = detectCharWidth(item);
                          //itemText =  getTruncatedVal(item);
                          if(!itemLengthExceed && item.length > scope.truncate){
                            itemLengthExceed = true;
                          }
                        }
                        template += '>' + itemText + '</li>';
                    });
                }
                
                //Inserting the dirctive inside the main directive,
                //Shouuld pass the template url and controller name
                if(attrs.templateUrl){
                    var value = '<div vm-template-insert template='+ attrs.templateUrl +' controller-name=' + attrs.controllerName +'></div>';
                    template += value;
                }
                template += '</div></ul></div></div></div>';

                elem.append(template);

                if(scope.customClass){
                    angular.forEach(scope.customClass, function(item) {
                        elem.find(item.selector).addClass(item.cusclass);


                    });
                }

                $compile(elem.contents())(scope);

                if(scope.list && scope.list.length > 15) {
                    scope.initializeScroll = true;
                }

                var ul = elem.find('ul');
                
                var scrollPane, scrollPaneApi;
                //Searchbox functionality
                var searchBox =  elem.find('input.search-box');
                searchBox.on('focus',function(e){
                    e.preventDefault();
                    e.stopPropagation();
                });
                $.expr[':'].icontains = function(obj, index, meta) {
                    return $(obj).text().toUpperCase().indexOf(meta[3].toUpperCase()) >= 0;
                };
                var liveSearchListener = function() {
                    var no_results = $('<li class="search-list no-results" style="display:block;"></li>');
                    var $lis = ul.find("li").not('.no-results');
                    searchBox.on('keyup',function(e){
                        //scope.currentIndex = -1;
                        no_results.html('No results for "'+ searchBox.val() + '"').show();
                        ul.find('li').last().after(no_results);
                        //**** search event ****//
                        if (searchBox.val()) {
                            $lis.not('.is-hidden').removeClass('hide').not(':icontains(' + searchBox.val() + ')').addClass('hide'); 
                            if (!ul.find('li').filter(':visible:not(.no-results)').length) {
                                if (!!no_results.parent().length) no_results.remove();
                                no_results.html('No results for "'+ searchBox.val() + '"').show();
                                ul.find('li').last().after(no_results);
                            } else if (!!no_results.parent().length) {
                                no_results.remove();
                            }
                        } else {
                            $lis.not('.is-hidden').removeClass('hide');
                            if (!!no_results.parent().length) no_results.remove();
                        }
                        ul.find('li.active').removeClass('active');
                        //ul.find('li').filter(':visible:not(.divider)').eq(0).addClass('active').find('a').focus();
                        $(this).focus();

                    });
                };

                liveSearchListener();

                if(scope.initializeScroll) {
                    
                        
                    scrollPane = ul.jScrollPane({
                        autoReinitialise: true,
                        showArrows: showDDArrows,
                        verticalArrowPositions: 'after'
                    });
                

                    scrollPaneApi = scrollPane.data('jsp');
                }

                //** Updating width of UL as per character limit
                var currentSelection = elem.find('span.current-selection');

                ul.hide();

                var options = elem.find('li').not('.no-results, .hide');

                /* scroll bar for exceeding browser edge when scrolling for list with less than 15 items */
                var scrollDestroyed = true;
                /* for list*/
                var scrollDestroyed2 = false;
                var dTop, dBottom, maxHeight, initialHeight = ul.height();

                scope.changeClass = function($event) {
                   
                    if(!angular.element($event.target).hasClass('form-control') && !angular.element($event.target).hasClass('jspDrag') && !angular.element($event.target).hasClass('jspTrack') && !(angular.element($event.target).parents('div[vm-template-insert]').length > 0)) {
                        var dds = $('.vmf-dropdown').find("ul");
                      
                        var i;
                        
                        var ul = elem.find('ul');

                        for(i = 0; i < dds.length; i++) {
                      
                            if(dds[i] !== ul.get(0)) {
                      
                                $(dds[i]).removeClass('active');
                                $(dds[i]).parents(".vmf-dropdown-content").removeClass('_active');
                                
                                if ($(dds[i]).is(":visible"))
                                    $(dds[i]).hide();
                            }
                        }
                    
                        if(elem.find('.vmf-dropdown-content').hasClass('_active')) {
                            elem.find('.vmf-dropdown-content').removeClass('_active');
                        }
                        else {
                            elem.find('.vmf-dropdown-content').addClass('_active');
                        }
                            
    					angular.element('.vmf-dropdown .vmf-dropdown-content').removeClass('has-error');
                        angular.element('.vmf-dropdown').find(".error-msg").remove();
    				
    					elem.find('span.current-selection').toggleClass('_active-drop');
                    
                        elem.find("ul").toggleClass('active');

                        $(elem[0]).closest('.form-group').toggleClass('active');

                        if (ul.is(":visible")) {
                            ul.hide();
                        }    
                        else {
                            resizeOptions();
                            searchBox.val("").trigger("keyup");
                            ul.show();
                            

                            $('.vmf-text-input > form.searchArea').removeClass('active');
                        }

                        /* scroll bar for exceeding browser edge when clicked on dropdown */

                        if(!scope.initializeScroll && elem.find("ul").hasClass('active')) {
                            

                            dTop = ul.offset().top - $document.scrollTop();
                            if($window.innerHeight) {
                                dBottom = $window.innerHeight - dTop - ul.height();
                            }
                            else {
                                /* falling back to jquery $(window) for IE 7, 8 */
                                dBottom = $(window).height() - dTop - ul.height();    
                            }    

                            if(dBottom < 0 && scrollDestroyed) {
                                maxHeight = ul.height() + dBottom;
                                ul.css('max-height', maxHeight);
                                scrollPane = ul.jScrollPane({
                                    autoReinitialise: true,
                                    showArrows: showDDArrows,
                                    verticalArrowPositions: 'after'
                                });
                            
                                scrollPaneApi = scrollPane.data('jsp');
                                scrollDestroyed = false;
                            }
                            else if(dBottom > 0 && !scrollDestroyed) {
                            
                                maxHeight = ul.height() + dBottom;

                                scrollPaneApi.destroy();

                                ul = elem.find('ul');
                                ul.css('max-height', maxHeight);
                            
                                if(initialHeight > ul.height()) {
                                    scrollPane = ul.jScrollPane({
                                        autoReinitialise: true,
                                        showArrows: showDDArrows,
                                        verticalArrowPositions: 'after'
                                    });
                                
                                    scrollPaneApi = scrollPane.data('jsp');
                                    scrollDestroyed = false;
                                }
                                else {
                                    scrollDestroyed = true;    
                                }    
                            }
                            else if(dBottom < 0 && !scrollDestroyed) {
                            
                                maxHeight = ul.height() + dBottom;

                                scrollPaneApi.destroy();

                                ul = elem.find('ul');
                                ul.css('max-height', maxHeight);
                            
                                if(initialHeight > ul.height()) {
                                    scrollPane = ul.jScrollPane({
                                        autoReinitialise: true,
                                        showArrows: showDDArrows,
                                        verticalArrowPositions: 'after'
                                    });
                                
                                    scrollPaneApi = scrollPane.data('jsp');
                                    scrollDestroyed = false;
                                }
                                else {
                                    scrollDestroyed = true;    
                                }    
                            }
                            
                        }
                        else if(scope.initializeScroll && elem.find("ul").hasClass('active')) {
                            

                            dTop = ul.offset().top - $document.scrollTop();
                            if($window.innerHeight) {
                                dBottom = $window.innerHeight - dTop - ul.height();
                            }
                            else {
                                /* falling back to jquery $(window) for IE 7, 8 */
                                dBottom = $(window).height() - dTop - ul.height();    
                            }    

                            if(dBottom < 0 && scrollDestroyed2) {
                                maxHeight = ul.height() + dBottom;
                                ul.css('max-height', maxHeight);
                                scrollPane = ul.jScrollPane({
                                    autoReinitialise: true,
                                    showArrows: showDDArrows,
                                    verticalArrowPositions: 'after'
                                });
                            
                                scrollPaneApi = scrollPane.data('jsp');
                                scrollDestroyed2 = false;
                            }
                            else if(dBottom > 0 && !scrollDestroyed2) {
                            
                                maxHeight = ul.height() + dBottom;
                                

                                    scrollPaneApi.destroy();

                                    ul = elem.find('ul');
                                    ul.addClass('active');
                                    if(maxHeight < 350) {
                                        ul.css('max-height', maxHeight);
                                    }
                                    else {
                                        ul.css('max-height', 350);    
                                    }    
                                
                                    if(initialHeight >= ul.height()) {
                                        scrollPane = ul.jScrollPane({
                                            autoReinitialise: true,
                                            showArrows: showDDArrows,
                                            verticalArrowPositions: 'after'
                                        });
                                    
                                        scrollPaneApi = scrollPane.data('jsp');
                                        scrollDestroyed2 = false;
                                    }
                                    else {
                                        scrollDestroyed2 = true;    
                                    }    
                                    
                            }
                            else if(dBottom < 0 && !scrollDestroyed2) {
                            
                                maxHeight = ul.height() + dBottom;

                                scrollPaneApi.destroy();

                                ul = elem.find('ul');
                                ul.addClass('active');
                                ul.css('max-height', maxHeight);
                            
                                if(initialHeight > ul.height()) {
                                    scrollPane = ul.jScrollPane({
                                        autoReinitialise: true,
                                        showArrows: showDDArrows,
                                        verticalArrowPositions: 'after'
                                    });
                                
                                    scrollPaneApi = scrollPane.data('jsp');
                                    scrollDestroyed2 = false;
                                }
                                else {
                                    scrollDestroyed2 = true;    
                                }    
                            }
                            
                        }
                        
                    }   

                    $event.stopPropagation();
                    
                };

                $document.on('click', function($event) {

                    if(!angular.element($event.target).hasClass('form-control') && !angular.element($event.target).hasClass('jspDrag') && !angular.element($event.target).hasClass('jspTrack')) {
         
                        elem.find('ul').removeClass('active');
                        elem.find('.vmf-dropdown .vmf-dropdown-content').removeClass('_active');

                        /* need to reinitialise ul as scroll may have been destroyed */
                        ul = elem.find('ul');
                        if (ul.is(':visible')) {
                            ul.hide();
                        }
                        $(elem[0]).closest('.form-group').removeClass('active');
                    }    

                });

                /*scroll bar for window resize */

                $window.onresize = function() {

                    if(!scope.initializeScroll && elem.find('ul').hasClass('active')) {
                        dTop = ul.offset().top - $document.scrollTop();
                        if($window.innerHeight) {
                            dBottom = $window.innerHeight - dTop - ul.height();
                        }
                        else {
                            /* falling back to jquery $(window) for IE 7, 8 */
                            dBottom = $(window).height() - dTop - ul.height();    
                        }    

                        if(dBottom < 0 && scrollDestroyed) {
                            maxHeight = ul.height() + dBottom;
                            ul.css('max-height', maxHeight);
                            scrollPane = ul.jScrollPane({
                                autoReinitialise: true,
                                showArrows: showDDArrows,
                                verticalArrowPositions: 'after'
                            });
                        
                            scrollPaneApi = scrollPane.data('jsp');
                            scrollDestroyed = false;
                        }
                        else if(dBottom > 0 && !scrollDestroyed) {
                        
                            maxHeight = ul.height() + dBottom;

                            scrollPaneApi.destroy();

                            ul = elem.find('ul');
                            ul.css('max-height', maxHeight);
                        
                            if(initialHeight > ul.height()) {
                                scrollPane = ul.jScrollPane({
                                    autoReinitialise: true,
                                    showArrows: showDDArrows,
                                    verticalArrowPositions: 'after'
                                });
                            
                                scrollPaneApi = scrollPane.data('jsp');
                                scrollDestroyed = false;
                            }
                            else {
                                scrollDestroyed = true;    
                            }    
                        }
                        else if(dBottom < 0 && !scrollDestroyed) {
                        
                            maxHeight = ul.height() + dBottom;

                            scrollPaneApi.destroy();

                            ul = elem.find('ul');
                            ul.css('max-height', maxHeight);
                        
                            if(initialHeight > ul.height()) {
                                scrollPane = ul.jScrollPane({
                                    autoReinitialise: true,
                                    showArrows: showDDArrows,
                                    verticalArrowPositions: 'after'
                                });
                            
                                scrollPaneApi = scrollPane.data('jsp');
                                scrollDestroyed = false;
                            }
                            else {
                                scrollDestroyed = true;    
                            }    
                        }

                    }
                    else if(scope.initializeScroll && elem.find("ul").hasClass('active')) {
                        

                        dTop = ul.offset().top - $document.scrollTop();
                        if($window.innerHeight) {
                            dBottom = $window.innerHeight - dTop - ul.height();
                        }
                        else {
                            /* falling back to jquery $(window) for IE 7, 8 */
                            dBottom = $(window).height() - dTop - ul.height();    
                        }    

                        if(dBottom < 0 && scrollDestroyed2) {
                            maxHeight = ul.height() + dBottom;
                            ul.css('max-height', maxHeight);
                            scrollPane = ul.jScrollPane({
                                autoReinitialise: true,
                                showArrows: showDDArrows,
                                verticalArrowPositions: 'after'
                            });
                        
                            scrollPaneApi = scrollPane.data('jsp');
                            scrollDestroyed2 = false;
                        }
                        else if(dBottom > 0 && !scrollDestroyed2) {
                        
                            maxHeight = ul.height() + dBottom;
                            

                                scrollPaneApi.destroy();

                                ul = elem.find('ul');
                                if(maxHeight < 350) {
                                    ul.css('max-height', maxHeight);
                                }
                                else {
                                    ul.css('max-height', 350);    
                                }    
                            
                                if(initialHeight >= ul.height()) {
                                    scrollPane = ul.jScrollPane({
                                        autoReinitialise: true,
                                        showArrows: showDDArrows,
                                        verticalArrowPositions: 'after'
                                    });
                                
                                    scrollPaneApi = scrollPane.data('jsp');
                                    scrollDestroyed2 = false;
                                }
                                else {
                                    scrollDestroyed2 = true;    
                                }    
                                
                        }
                        else if(dBottom < 0 && !scrollDestroyed2) {
                        
                            maxHeight = ul.height() + dBottom;

                            scrollPaneApi.destroy();

                            ul = elem.find('ul');
                            ul.addClass('active');
                            ul.css('max-height', maxHeight);
                        
                            if(initialHeight > ul.height()) {
                                scrollPane = ul.jScrollPane({
                                    autoReinitialise: true,
                                    showArrows: showDDArrows,
                                    verticalArrowPositions: 'after'
                                });
                            
                                scrollPaneApi = scrollPane.data('jsp');
                                scrollDestroyed2 = false;
                            }
                            else {
                                scrollDestroyed2 = true;    
                            }    
                        }
                        
                    }
                    resizeOptions();
                };

                /* scroll bar for exceeding browser edge when scrolling */

                angular.element($window).on('scroll', function($event) {
                    
                    if($event.target.nodeName === '#document') {
                        
                        if(!scope.initializeScroll && elem.find('ul').hasClass('active')) {
                            dTop = ul.offset().top - $document.scrollTop();
                            if($window.innerHeight) {
                                dBottom = $window.innerHeight - dTop - ul.height();
                            }
                            else {
                                /* falling back to jquery $(window) for IE 7, 8 */
                                dBottom = $(window).height() - dTop - ul.height();    
                            }    

                            if(dBottom < 0 && scrollDestroyed) {
                                maxHeight = ul.height() + dBottom;
                                ul.css('max-height', maxHeight);
                                scrollPane = ul.jScrollPane({
                                    autoReinitialise: true,
                                    showArrows: showDDArrows,
                                    verticalArrowPositions: 'after'
                                });
                            
                                scrollPaneApi = scrollPane.data('jsp');
                                scrollDestroyed = false;
                            }
                            else if(dBottom > 0 && !scrollDestroyed) {
                            
                                maxHeight = ul.height() + dBottom;

                                scrollPaneApi.destroy();

                                ul = elem.find('ul');
                                ul.css('max-height', maxHeight);
                            
                                if(initialHeight > ul.height()) {
                                    scrollPane = ul.jScrollPane({
                                        autoReinitialise: true,
                                        showArrows: showDDArrows,
                                        verticalArrowPositions: 'after'
                                    });
                                
                                    scrollPaneApi = scrollPane.data('jsp');
                                    scrollDestroyed = false;
                                }
                                else {
                                    scrollDestroyed = true;    
                                }    
                            }
                            else if(dBottom < 0 && !scrollDestroyed) {
                            
                                maxHeight = ul.height() + dBottom;

                                scrollPaneApi.destroy();

                                ul = elem.find('ul');
                                ul.css('max-height', maxHeight);
                            
                                if(initialHeight > ul.height()) {
                                    scrollPane = ul.jScrollPane({
                                        autoReinitialise: true,
                                        showArrows: showDDArrows,
                                        verticalArrowPositions: 'after'
                                    });
                                
                                    scrollPaneApi = scrollPane.data('jsp');
                                    scrollDestroyed = false;
                                }
                                else {
                                    scrollDestroyed = true;    
                                }    
                            }

                        }
                        else if(scope.initializeScroll && elem.find("ul").hasClass('active')) {
                            

                            dTop = ul.offset().top - $document.scrollTop();
                            if($window.innerHeight) {
                                dBottom = $window.innerHeight - dTop - ul.height();
                            }
                            else {
                                /* falling back to jquery $(window) for IE 7, 8 */
                                dBottom = $(window).height() - dTop - ul.height();    
                            }    

                            if(dBottom < 0 && scrollDestroyed2) {
                                maxHeight = ul.height() + dBottom;
                                ul.css('max-height', maxHeight);
                                scrollPane = ul.jScrollPane({
                                    autoReinitialise: true,
                                    showArrows: showDDArrows,
                                    verticalArrowPositions: 'after'
                                });
                            
                                scrollPaneApi = scrollPane.data('jsp');
                                scrollDestroyed2 = false;
                            }
                            else if(dBottom > 0 && !scrollDestroyed2) {
                            
                                maxHeight = ul.height() + dBottom;
                                

                                    scrollPaneApi.destroy();

                                    ul = elem.find('ul');
                                    if(maxHeight < 350) {
                                        ul.css('max-height', maxHeight);
                                    }
                                    else {
                                        ul.css('max-height', 350);    
                                    }    
                                
                                    if(initialHeight >= ul.height()) {
                                        scrollPane = ul.jScrollPane({
                                            autoReinitialise: true,
                                            showArrows: showDDArrows,
                                            verticalArrowPositions: 'after'
                                        });
                                    
                                        scrollPaneApi = scrollPane.data('jsp');
                                        scrollDestroyed2 = false;
                                    }
                                    else {
                                        scrollDestroyed2 = true;    
                                    }    
                                    
                            }
                            else if(dBottom < 0 && !scrollDestroyed2) {
                            
                                maxHeight = ul.height() + dBottom;

                                scrollPaneApi.destroy();

                                ul = elem.find('ul');
                                ul.addClass('active');
                                ul.css('max-height', maxHeight);
                            
                                if(initialHeight > ul.height()) {
                                    scrollPane = ul.jScrollPane({
                                        autoReinitialise: true,
                                        showArrows: showDDArrows,
                                        verticalArrowPositions: 'after'
                                    });
                                
                                    scrollPaneApi = scrollPane.data('jsp');
                                    scrollDestroyed2 = false;
                                }
                                else {
                                    scrollDestroyed2 = true;    
                                }    
                            }
                            
                        }
                    }
                });            


                if(typeof scope.preSelectInd !== 'undefined') {
                    
                    if(scope.list && scope.list[0] && typeof scope.list[0] === 'object') {
                        scope.model = scope.list[scope.preSelectInd].value;
                    }
                    else {
                        scope.model = scope.list[scope.preSelectInd];   
                    }    
                    
                    var list2 = elem.find('li');

                    angular.element(list2[scope.preSelectInd]).addClass('dd-opt-selected');                    
                }

                scope.select = function($event) {
                    var opt = $event.currentTarget;

                    if(sub) {
                        elem.find('span.current-selection').text($(opt).text());
                    }    
                    scope.model = $(opt).text(); 
                    
                    var list = elem.find('li'); 
                    angular.forEach(list, function(item) {
                        
                        angular.element(item).removeClass('dd-opt-selected');
                    });

                    angular.element(opt).addClass('dd-opt-selected');

                    scope.$emit('vmfDDOptionClicked', $event);
                };

                scope.selectObj = function($event, index) {
                    var opt = $event.currentTarget;

                    if(attrs.dropdownType = 'with_submenu'){
                        console.log(scope.list[index].submenu);
                    }
                    if(sub) {
                        elem.find('span.current-selection').text($(opt).text());
                    }    

                    scope.model = scope.list[index].value; 
                    var list = elem.find('li'); 

                    angular.forEach(list, function(item) {
                        
                        angular.element(item).removeClass('dd-opt-selected');
                    });

                    angular.element(opt).addClass('dd-opt-selected');

                    scope.$emit('vmfDDOptionClicked', $event);
                };


                /*
                * fallback event - ng-click events do not propagate on some occassions when dropdown is integrated 
                * with other components
                */

                scope.$on('vmfDDOptionClicked', function(customEvent, $event) {
                    scope.changeClass($event);
                    customEvent.stopPropagation();
                });

                scope.selectByKey = function($event, index) {
                    var currentOptions = elem.find('li').not('.no-results, .hide');
                    if(sub) {
                        elem.find('span.current-selection').text($(currentOptions[index]).text());
                    }    

                    if(scope.list && scope.list[0] &&  typeof scope.list[0] === 'object') {
                        scope.model = scope.list[index].value;
                    }
                    else {
                        scope.model = scope.list[index];
                    }
                        
                    var list = elem.find('li');
                    angular.forEach(list, function(item) {
                        
                        angular.element(item).removeClass('dd-opt-selected');
                    });

                    angular.element(currentOptions[index]).addClass('dd-opt-selected');
                };


                scope.currentIndex = -1;
                var lowestEleIndex = 14;

                scope.keyPressTitle = function($event) {
                    
                    var list = elem.find('li').not(".no-results, .hide");

                    if($event.which === 40) {
                        $event.preventDefault();

                        if(scope.currentIndex < list.length - 1) {

                            scope.currentIndex += 1;
                            scope.selectByKey($event, scope.currentIndex);
                            if(scope.currentIndex >= 15) {
                                scrollPaneApi.scrollToElement(list[scope.currentIndex]);
                                lowestEleIndex = scope.currentIndex;
                            }
                        }
                    
                    }

                    else if($event.which === 38) {
                        $event.preventDefault();

                        if(scope.currentIndex > 0) {
                            scope.currentIndex -= 1;
                            scope.selectByKey($event, scope.currentIndex);
                            if(lowestEleIndex - scope.currentIndex >= 15) {
                                scrollPaneApi.scrollToElement(list[scope.currentIndex]);
                                lowestEleIndex -= 1;
                            }
                        }
                    
                    }

                    else if($event.which === 13 && ul.hasClass('active')) {
                        elem.find('.vmf-dropdown-content').removeClass('_active');
                        elem.find('.current-selection').removeClass('_active-drop');
                        ul.removeClass('active');
                        ul.hide();
                    }

                    else if(($event.which >= 48 && $event.which <= 57) || ($event.which >= 65 && $event.which <= 90) || ($event.which >= 97 && $event.which <= 122)) {
                        
                        var i, text, matchingIndex = -1;
                        if(scope.list && scope.list[0] &&  typeof scope.list[0] === 'object') {
                            for(i = scope.currentIndex + 1; i < scope.list.length; i++) {
                                text = scope.list[i].text;
                                
                                if(text.charCodeAt(0) === $event.which) {
                                    matchingIndex = i;
                                    break;
                                }
                                
                            }
                            
                            if(matchingIndex === -1) {
                                for(i = 0; i < scope.currentIndex; i++) {
                                    text = scope.list[i].text;
                                    
                                    if(text.charCodeAt(0) === $event.which) {
                                        matchingIndex = i;
                                        break;
                                    }
                                    
                                }    
                            }

                            if(matchingIndex !== -1) {
                                if(sub) {
                                    elem.find('span.current-selection').text(text);
                                }    

                                scope.model = scope.list[matchingIndex].value; 
                                scope.currentIndex = matchingIndex;

                                list = elem.find('li'); 

                                angular.forEach(list, function(item) {
                                    
                                    angular.element(item).removeClass('dd-opt-selected');
                                });

                                angular.element(elem.find('li').not(".no-results, .hide")[matchingIndex]).addClass('dd-opt-selected');

                                matchingIndex = -1;
                            }        
    
                        }

                        else if(scope.list && scope.list[0]){
                            for(i = scope.currentIndex + 1; i < scope.list.length; i++) {
                                if(scope.list && scope.list[0] &&  typeof scope.list[0] !== 'string') {
                                    text = scope.list[i].toString();
                                }
                                else {
                                    text = scope.list[i];    
                                }
                                
                                if(text.charCodeAt(0) === $event.which) {
                                    matchingIndex = i;
                                    break;
                                }
                                
                            }

                            if(matchingIndex === -1) {
                                for(i = 0; i < scope.currentIndex; i++) {
                                    text = scope.list[i].toString();
                                    
                                    if(text.charCodeAt(0) === $event.which) {
                                        matchingIndex = i;
                                        break;
                                    }
                                    
                                }    
                            }

                            if(matchingIndex !== -1) {
                                if(sub) {
                                    elem.find('span.current-selection').text(text);
                                }    
                                
                                scope.model = scope.list[i]; 
                                scope.currentIndex = i;
                                
                                list = elem.find('li'); 
                                angular.forEach(list, function(item) {
                                    angular.element(item).removeClass('dd-opt-selected');
                                });
                                angular.element(elem.find('li').not(".no-results, .hide")[i]).addClass('dd-opt-selected');
                                matchingIndex = -1;

                            }    

                        }                            

                    }

                };

                scope.$watch('model', function(n,o) {
                    if(n === null && sub) {
                        $timeout(function() {
                            if(attrs.htitle ==='' || attrs.htitle) {
                                elem.find('span.current-selection').text(scope.htitle);
                            }
                            else {
                                elem.find('span.current-selection').text('Select');    
                            }
                            elem.find('li').removeClass('dd-opt-selected');                     
                        });    

                    }
                });

            }
        };
    }
]);
app.directive('vmfCheckboxGroup', ['$compile', '$timeout', function($compile, $timeout) {
    return {
        restrict: 'EA',
        priority:1,
        replace: true,
        scope: {
            ctitle: '=',
            options: '=',
            name: '=',
            model: '=',
            mandatory: '@',
            customClass: '=',
            type: '@',
            cLabel: '=',
            cDisabled: '=',
            clickCallback: '&',
            append:'@'
        },
        link: function(scope, elem, attrs) {
            
            scope.invoke=function(method,evt) {
                scope.$emit('invoke',{method:method,evt:evt});
            };
            
            var template;
            if(scope.type === '1') {
                if(scope.mandatory === 'true') {
                    template = '<span class="mandatory">*</span>';
                }
                else {
                    template = '';
                }
                if(!scope.cLabel) {                    
                    template += '<label class="custom-checkbox"><span class="customCheckBox icn" ng-disabled="cDisabled"><input type="checkbox" ng-model="model" ng-click="clickCallback({$event:$event})" ng-disabled="cDisabled" /></span></label>';       
                }
                else {
                    template += '<label class="custom-checkbox"><span class="customCheckBox icn" ng-disabled="cDisabled"><input type="checkbox" ng-model="model" ng-click="clickCallback({$event:$event})" ng-disabled="cDisabled" /></span>' + scope.cLabel + '</label>';    
                }
                
                var repl = $compile(template)(scope);
                if(scope.append === "true")
                    elem.append(repl);
                else
                elem.replaceWith(repl);
                
                scope.$watch('model', function(n, o) {
                    if(n) {
                        $timeout(function() { 
                            repl.addClass('selected');
                        });    
                    }
                    else {
                        $timeout(function() {
                            repl.removeClass('selected');
                        });    
                    }
                });


                scope.$watch('cDisabled', function(n, o) {
                    if(n) {
                            $timeout(function() {
                                repl.addClass('disabledColor'); 
                                repl.find('span.customCheckBox').addClass('disabled'); 
                                
                            });        
                        }
                        else {
                            $timeout(function() {
                                repl.removeClass('disabledColor'); 
                                repl.find('span.customCheckBox').removeClass('disabled'); 
                                
                            });           
                        }
                });
            }
            else if(scope.type === '2') {
                if(scope.mandatory === 'true') {
                    if(scope.ctitle) {
                        template = '<div class=" formSection clearfix">  <div class="labelHeader col-md-3"><span class="mandatory">*</span> '
                                    + scope.ctitle 
                                    + '</div><div class="col-md-9"><fieldset>';
                    }   
                    else {
                        template = '<div class=" formSection clearfix no-title">  <div class="mandatoryCB"><span class="mandatory">*</span></div><div class="col-md-9"><fieldset>';
                        console.log('no title');
                    }         
                }
                else {
                    if(scope.ctitle) {
                        template = '<div class=" formSection clearfix">  <div class="labelHeader col-md-3">'
                                    + scope.ctitle 
                                    + '</div><div class="col-md-8"><fieldset>';
                    }                
                    else {
                        template = '<div class=" formSection clearfix no-title"> <div class="col-md-12"><fieldset>';
                        
                    }         

                }                

                angular.forEach(scope.options, function(item, index) {
                      
                    template += '<label class="custom-checkbox"><span class="customCheckBox icn" ng-disabled="options['+ index +'].disabled"><input type="checkbox" ng-model="options[' + index + '].checked" ng-disabled="options['+ index +'].disabled" name="'
                                + scope.name 
                                + '" value="'
                                + item.value
                                + '"></span>'
                                + item.text 
                                + '</label>';                
                    
                });

                template += '</fieldset></div> </div>';

                elem.append($compile(template)(scope));

                if(scope.customClass){
                    angular.forEach(scope.customClass, function(item) {
                        elem.find(item.selector).addClass(item.cusclass);
                        
                        
                    });
                }

                scope.$watch('options', function(n, o) {
                    // console.log(n);console.log(o);
                    angular.forEach(n, function(option, index) {
                        if(option.checked) {
                            $timeout(function() {
                                angular.element(elem.find('label.custom-checkbox')[index]).addClass('selected'); 
                            });     
                        }
                        else {
                            $timeout(function() {
                                angular.element(elem.find('label.custom-checkbox')[index]).removeClass('selected');
                            }); 
                            
                        }

                        if(option.disabled) {
                            $timeout(function() {
                                angular.element(elem.find('label.custom-checkbox')[index]).addClass('disabledColor'); 
                                angular.element(elem.find('span.customCheckBox')[index]).addClass('disabled'); 
                                
                            });        
                        }
                        else {
                            $timeout(function() {
                                angular.element(elem.find('label.custom-checkbox')[index]).removeClass('disabledColor'); 
                                angular.element(elem.find('span.customCheckBox')[index]).removeClass('disabled'); 
                                
                            });           
                        }
                    });
                }, true);
            }

        }

    };
}]);

app.directive('vmfEmptyState',function(){
    return{
        restrict:'EA',
        replace :true,
        transclude:true,
        controller:function($scope){
            // console.log('inside informationMessage controller');
            // $scope.infoMessage="You have successfully completed a request to fund this service with <Fund name>. A confirmation email will be sent to you. This switch will take effect on the next invoice..your current balance for this fund is $0.00. Please add more credit to this fund by XXXXXXX. ";
            // $scope.isInfoMessage=true;

            
        },
        template:
                 "<div class='' > " +
                 "<section class='' >"+
                 "<div ng-transclude></div>"+
                 "</section>"+
                 "</div>",
        scope:{
            
            
            
        },
        compile: function($tElem,$tAttrs){
            return function postLink(scope,iElem,iAttrs){
            // console.log(iAttrs);
            // console.log('inside informationMessage compilers');
                    // scope.hideInfoMessage=function(){console.log('h');
                    //     scope.isInfoMessage=false;
                    // };
            };
        }
    };
  });


app.directive('menu', ['$compile', '$timeout', '$window',
    function($compile, $timeout, $window) {
        return {
            restrict: 'EA',
            scope: {
                navMenu: '=',
                showDetails: '='
            },
            replace: true,

            link: function(scope, element, attrs) {
                var temp;
                temp = '<div class="menuList mainMenulist"><ul class="mainlistItem">';
                angular.forEach(scope.navMenu, function(item, index) {
                    temp += '<li class="level-1" id="' + item.id + '"><a href="javasript:void(0);" class="globalItem">' + item.title + '</a>';
                    temp += '<div class="mainMenu"><h3><a href="#" class="subHeading">' + item.title + '</a></h3>';
                    angular.forEach(item.menu, function(subItem, index) {
                        temp += '<div class="menuContent">';
                        var idx = 0;
                        angular.forEach(subItem, function(key, miniItem) {
                            temp += '<div class="col ' + Object.keys(subItem)[idx] + '">';
                            angular.forEach(key.submenu, function(submenu, index) {
                                console.log("test"+submenu.hasItems);
                                if (submenu.hasItems) {
                                    temp += '<div class="sub-listMenu">';
                                } else {
                                    temp += '<div>';
                                }

                                if (submenu.title) {
                                    temp += '<h4>' + submenu.title + '</h4>';
                                }
                                temp += '<ul class="level-2">';
                                angular.forEach(submenu.items, function(miniItem, index) {
                                    if (!miniItem.href) {
                                        temp += '<li><h5>' + miniItem.title + '</h5></li>';
                                    } else {
                                        temp += '<li><a href="#">' + miniItem.title + '</a></li>';
                                    }
                                });
                                temp += '</ul></div>';
                            });
                            temp += '</div>';
                            idx += 1;
                        });
                        temp += '</div>';
                    });
                    if (item.viewMore !== undefined) {

                        temp += '<a href="#" class="viewMore">' + item.viewMore + '</a>';
                    }
                });
                temp += '</li></ul><div class="clearfix"></div></div>';
                element.append(temp);
                $compile(element.contents())(scope);

                var w = angular.element($window);
                scope.getWindowDimensions = function() {
                    return {
                        'h': w.height(),
                        'w': w.width()
                    };
                };
                scope.$watch(scope.getWindowDimensions, function(newValue, oldValue) {
                    scope.windowHeight = newValue.h;
                    scope.windowWidth = newValue.w;
                    element.find('.globalItem').parent().removeClass('is_active');
                    if (scope.windowWidth <= 992 && !angular.ISIE8 && !angular.ISIE7) {
                        scope.showDetails = false;
                    } else {
                        scope.showDetails = true;
                    }
                }, true);
                w.bind('resize', function() {
                    if (!angular.ISIE8 && !angular.ISIE7) {
                        scope.$apply();
                    }
                });

                $timeout(function() {
                    element.find('.globalItem').parent().bind('click touchstart', function(e) {

                        if (scope.windowWidth < 992) {
                            if (!$(e.target).hasClass('globalItem')) {
                                return;
                            }
                            $(this).toggleClass('is_active');
                            e.preventDefault();
                        }
                    });

                }, 300);
            }
        };
    }
]);

app.directive('modalPopup', function() {
    return {
        restrict: 'E',
        transclude: true,
        replace:true,
        scope: {
            size: '@',
            title:'@',
            buttonTitle:'@',
            back:'@',
            id:'@',
            onback:'&'
        },
        //template:'Helo helo',
        templateUrl: "dev/modules/modal/template/modalTemplate.html",
        link: function(scope, elem) {
            scope.$watch("modalShown", function(newValue, OldValue, scope) {
                //alert(scope.modalShown);
                if (scope.modalShown) {
                    angular.element('html').addClass('modal-open');
                    angular.element('.modalLoad .modal').addClass('in');
                 } else {
                    angular.element('html').removeClass('modal-open');
                    angular.element('.modalLoad .modal').removeClass('in');
                }
            });

            scope.hideModal = function() {
                //console.log(scope.modalSize);
                //console.log('hide/show');  
                scope.modalShown = false;
            };

            scope.primaryBtn = function() {
                //console.log(scope.modalSize);
                //console.log('primaryBtn');
            };

            scope.test = function($event) {
                // console.log($event.which);
                if($event.which === 27) {
                    scope.modalShown = false;
                    elem.find('.modal-backdrop').hide();
                }
            };
            elem.find('.modal-backdrop').hide();
        }
    };
});

/*app.directive('vmfModalOverlay', function() {
    return {
        restrict: 'EAC',
        templateUrl: "dev/modules/modal/template/modalTemplate.html",

        scope: {
            modalTitle: '=title',
            modalContent: '=content',
            modalShown: '=',
            modalSize: '='
        },

        controller: function($scope) {
            console.log('ctr5l');
            $scope.$watch("modalShown", function(newValue, OldValue, scope) {
                console.log('watch');

                if (scope.modalShown) {
                    angular.element('body').addClass('modal-open');
                    angular.element('.modalLoad .modal').addClass('in');
                } else {
                    angular.element('body').removeClass('modal-open');
                    angular.element('.modalLoad .modal').removeClass('in');
                }
            });
        },

        link: function($scope) {

            console.log($scope.modalSize);

        },

        compile: function($tElem, $tAttrs) {
            console.log('compil directive loaded');
            return function(scope, iElem, iAttrs) {
                console.log('c directive loaded');
                scope.hideModal = function() {
                    //console.log(scope.modalSize);
                    console.log('hide/show');
                    scope.modalShown = false;
                };
            };
        }
    };
});*/
app.filter('offset', function() {
    return function(input, start) {
        start = parseInt(start, 10); //console.log(input.slice(start))
        return input.slice(start);
    };
});
app.directive("vmfPagination", function() {

    var template = '<div class="pagination"  ng-show="patternone"><ul>';
    template += '<li ng-class="prevPageDisabled()"><a href ng-click="prevPage()">PREV</a></li>';
    template += '<li ng-repeat="n in range()" ng-class="{active: n == currentPage}" ng-click="setPage(n)">';
    template += '<a href="javascript:void(0)">{{n+1}}</a></li><li ng-class="nextPageDisabled()">';
    template += '<a href ng-click="nextPage()">NEXT</a></li></ul></div><div   ng-show="patterntwo" class="pagination_container"><div  class="pagination_pagination">';
    template += '<span class="pagination_previous_1" ng-class="prevPageDisabled()" ng-click="prevPage()"></span>';
    template += '<span class="pagination_pattern_two">Page<input type="text" class="pagination_page_box" ng-model="currentPageBox" ng-change="setTextbox()">of {{pageCount()+1}}</span>';
    template += '<span class="pagination_next_1" ng-class="nextPageDisabled()" ng-click="nextPage()"></span>';
    template += '<div style="float:right"><div class="pagination_custDD" style="position:relative" ng-click="showPageOptions($event)"><span class="pagination_pagetext">20 per page </span><span class="pagination_arr"><img src="../dev/assets/img/pagination/ar.jpg" /></span></div>';
    template += '<ul class="pagination_custoptions" style="display:none" ng-model="itemsPerPage"><li class="options" ng-repeat="item in selectPerPage" value="{{item}}" selected><a href="javascript:void(0);" ng-click="changePageNumber($event)" pagevalattr = "{{item}}">{{item}} per page</a></li><li value="{{items.length}}"><a href="javascript:void(0);" ng-click="changePageNumber($event)" pagevalattr = "{{items.length}}">Show All</a></li></ul>';
    template += '</div></div>';
    return {
        restrict: "AEC",
        template: template,
        scope: {
            patternone: "=",
            patterntwo: "=",
            totalrecords: "="
        },
        controller: function($scope) {
            $scope.itemsPerPage = 10;
            $scope.selectPerPage = [10, 20, 50, 100];
            $scope.currentPage = 0;
            $scope.currentPageBox = $scope.currentPage + 1;
            $scope.items = [];

            for (var i = 0; i < $scope.totalrecords; i++) {
                $scope.items.push({
                    id: i,
                    name: "name " + i,
                    description: "description " + i
                });
            }

            $scope.range = function() {
                var rangeSize = 10;
                var ret = [];
                var start;

                start = $scope.currentPage;
                if (start > $scope.pageCount() - rangeSize) {
                    start = $scope.pageCount() - rangeSize + 1;
                }

                for (var i = start; i < start + rangeSize; i++) {
                    if (i >= 0) {
                        ret.push(i);
                    }
                }
                return ret;
            };
            $scope.changePageNumber = function(e) {
                var el = e.currentTarget;
                $scope.itemsPerPage = el.getAttribute("pagevalattr");
                $(el).parent().parent().prev().find('span.pagination_pagetext').html($(el).html());
                $(el).parent().parent().slideUp("fast");
            };
            $scope.showPageOptions = function(e) {
                var el = e.currentTarget;
                //var offset = $(el).parent().offset();   console.log(offset.left);    
                if ($(el).next().is(":hidden")) {
                    // $(el).next().css("left",offset.left+"px")
                    $(el).next().slideDown("fast");
                } else {
                    $(el).next().slideUp("fast");
                }
            };

            $scope.prevPage = function() {
                if ($scope.currentPage > 0) {
                    $scope.currentPage--;
                    $scope.currentPageBox--;
                }
            };

            $scope.prevPageDisabled = function() {
                return $scope.currentPage === 0 ? "disabled" : "";
            };

            $scope.pageCount = function() {
                return Math.ceil($scope.items.length / $scope.itemsPerPage) - 1;
            };

            $scope.nextPage = function() {
                if ($scope.currentPage < $scope.pageCount()) {
                    $scope.currentPage++;
                    $scope.currentPageBox++;
                }
            };

            $scope.nextPageDisabled = function() {
                return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
            };

            $scope.setPage = function(n) {
                $scope.currentPage = n;
                $scope.currentPageBox = n + 1;
            };
            $scope.setTextbox = function() {
                if ($scope.currentPageBox >= 1 && $scope.currentPageBox <= ($scope.pageCount() + 1)) {
                    $scope.currentPage = $scope.currentPageBox - 1;
                }

            };
        }
    };
});
app.directive("vmfTooltip", ['$compile', function($compile) {
    return{
        restrict: "EA",
        priority:2,      
        scope: true,
        link: function (scope, element, attrs) {
            scope.userOptions = scope.$eval(attrs.tooltipOptions);
            scope.options = angular.extend({}, {
                skin: 'dark',
                position: "right",
                radius: true,
                size: 'large',
                hideDelay: 500,
                showOn: 'mouseover',
                hideOn: 'mouseleave',
                maxWidth: "180",
                close: false,
                customClass: "tempClass",
                offsetX: 0,
                offsetY: 0
            }, scope.userOptions);
            scope.showTipOn = scope.options.showOn;
            scope.hideTipOn = scope.options.hideOn;
            var targetElement = typeof attrs.targetEle === "undefined" ? element : element.find("."+attrs.targetEle);
            var ele = Tipped.create(targetElement, scope.options.text, {
                skin: scope.options.skin,
                inline: true,
                position: scope.options.position,
                radius: scope.options.radius,
                hideDelay: scope.options.hideDelay,
                size: scope.options.size,
                hideOthers: false,
                hideOn: scope.hideTipOn,
                showOn: scope.showTipOn,
                maxWidth: scope.options.maxWidth,
                close: scope.options.close,
                offset: { x: scope.options.offsetX, y: scope.options.offsetY },
                onShow: function(content, element) {
                    $(element).addClass('highlight');
                    $(content).addClass(scope.options.customClass);
                    $(content).parents(".tpd-tooltip").removeClass("tpd-skin-dark").addClass("tpd-skin-"+scope.options.skin);
                    if($(element).hasClass("disableTooltip")){
                        $(content).parents(".tpd-tooltip").remove();
                    }
                },
                afterHide: function(content, element) {
                    $(element).removeClass('highlight');
                    $(content).removeClass(scope.options.customClass);
                    $(content).parents(".tpd-tooltip").removeClass("tpd-skin-dark").removeClass("tpd-skin-"+scope.options.skin);
                }
            });
            Tipped.hideTooltip = function(element){
                var tempEle = Tipped.get(element);
                var tempEleItems = tempEle.items();
                $(tempEleItems[0]._tooltip).hide();
            };
            Tipped.showTooltip = function(element){
                var tempEle = Tipped.get(element);
                var tempEleItems = tempEle.items();
                $(tempEleItems[0]._tooltip).show();
            };
            Tipped.removeTooltip = function(element){
                Tipped.remove(element);
            };
            Tipped.enableTooltip = function(element){
                $(element).removeClass("disableTooltip");
            };
            Tipped.disableTooltip = function(element){
                $(element).addClass("disableTooltip");
            };
            Tipped.updatePosition = function(element,value) {
                var tempEle = Tipped.get(element);
                var tempEleItems = tempEle.items();
                
                $(tempEleItems[0]._tooltip).find(".tpd-content").text(value);
                Tipped.refresh(element);

                // Tipped.remove(element);
                // Tipped.create(element,value);
                // Tipped.showTooltip(element);

                //$(tempEleItems[0]._tooltip).css({"left":(element.offset().left - ($(tempEleItems[0]._tooltip).width()/2)) + 5,"top":element.offset().top - ($(tempEleItems[0]._tooltip).height())});
                //$(tempEleItems[0]._tooltip).find(".tpd-content").text(value);
            };

        }
    };
}]);
app.directive("vmfProductAlerts", ['$timeout',
    function($timeout) {

        var template = '<div><div class="productAlert_product-bar"  ><div class="productAlert_product-container" ng-click="showHideBoxClick()">';
        template += '<span class="productAlert_product-alerts">{{config.title}}</span>';
        template += '<div  class="productAlert_product-alertImage"><span class="productAlert_product-alertCount">{{config.data.length}}</span></div>';
        template += '</div></div><div class="productAlert_product-parent showHideBox productAlert_disNone"><div class="productAlert_product-close"  ng-click="showHideBoxClick()"><img src="/images/close_new.png"/> </div>';
        template += '<div class="productAlert_product-title">{{config.title}}</div><ul><li class="productAlert_product-accordian" ng-repeat="items in config.data">';
        template += '<a class="productAlert_product-heading" href="javascript:void(0)" ng-click="itemClicked($index,$event)">{{items.name}}</a>';
        template += '<div class="productAlert_product-content titleDesc productAlert_disNone"><span class="productAlert_product-message">{{items.description}}</span>';
        template += '</div></li></ul></div></div>';
        return {
            restrict: "AEC",
            replace: true,
            scope: {
                config: "=options"
            },
            template: template,
            controller: function($scope) {
                $scope.selectedIndex = "-";
                $scope.itemClicked = function($index, $event) {
                    var el = $($event.currentTarget);
                   $("body").find('.productAlert_product-accordian').removeClass('activeAcc');
                    if ($scope.selectedIndex === $index) {
                        console.log('hello');
                        $("body").find(".titleDesc").slideUp();                         
                         $scope.selectedIndex = "-";
                        
                    } else {
                        $scope.selectedIndex = $index;                        
                        $("body").find(".titleDesc").slideUp();                        
                        el.closest(".productAlert_product-accordian").find(".titleDesc").slideDown();
                        el.closest('li').addClass('activeAcc');
                    }
                };
                $scope.showHideBoxClick = function() {
                    $("body").find(".showHideBox").slideToggle();
                    $("body").find(".titleDesc").hide();
                    $scope.selectedIndex = "-";
                };
            },
            link: function(scope, element, attrs) {
                $timeout(function() {
                    $(element).find('.productAlert_product-accordian:last').addClass('lastChild');
                });
            }
        };
    }
]);
/* Pagination directive */
app.directive("vmfPagination2", ['$compile','$timeout', function($compile,$timeout){
 return {
    restrict:"AE",
    scope:{
      type:'@',
      pageData:'=',
      articlesPerPage:'@'
    },    
    link : function(scope, elem, attrs) {
        scope.updatePage = function() {
          elem.html('');
          scope.selectPerPage = [
            {"value":10, "text": "10 per page"},
            {"value":20, "text": "20 per page"},
            {"value":50, "text": "50 per page"},
            {"value":100, "text": "100 per page"}
          ];

          scope.items = [];  

          var showAll = { "value": scope.pageData.articles.length, "text": "Show All"};
          scope.selectPerPage.push(showAll);
          var template = "";
          scope.itemsPerPage = typeof scope.articlesPerPage !== "undefined" ? parseInt(scope.articlesPerPage) : 10;

          for (var i=0; i<scope.pageData.articles.length; i++) {
               scope.items.push(scope.pageData.articles[i]);
          }

          if(scope.type === '1') {
              
              template = '<div class="pagination"><div class="paginationContent">';
              for (var a=0; a<scope.itemsPerPage; a++) {
                  template += scope.pageData.articles[a].article;

              }
              template += '</div>';
              template    +=  '<ul id="testingId" class="pagination2_grid"><li ng-class="prevPageDisabled()"><a class="page_prev_lnk pagination1PrevArrow" href ng-click="prevPage($event)">PREV</a></li>'
                          +  '<li ng-repeat="n in range()" ng-class="{active: n == currentPage}" class="page_lnks" ng-click="setPage(n,$event)">'
                          +  '<a href >{{n+1}}</a></li><li ng-class="nextPageDisabled()">'
                          +  '<a class="page_next_lnk pagination1NextArrow" href ng-click="nextPage($event)">NEXT</a></li></ul></div>';
            }
            if(scope.type === '2') {
              if(scope.items.length <= 10) {
                scope.selectPerPage.splice(0,4);
              }
              else if(scope.items.length <= 20) {
                scope.selectPerPage.splice(1,3);
              }
              else if(scope.items.length <= 50) {
                scope.selectPerPage.splice(2,2);
              }
              // console.log(scope.selectPerPage);
              
              template = '<div class="pagination_container"><div class="paginationContent">';
              for (var k=0; k<scope.itemsPerPage; k++) {
                  template += scope.pageData.articles[k].article;

              }
              template += '</div>';
              template   +=  '<div  class="pagination_pagination"><span class="pagination_previous_1 pagination2PrevArrow" ng-class="prevPageDisabled()" ng-click="prevPage($event)"></span>'
                          +  '<span class="pagination_pattern_two">Page<input type="text" class="pagination_page_box" ng-model="currentPageBox" numbers-only="numbers-only">of {{pageCount()+1}}</span>'
                          +  '<span class="pagination_next_1 pagination2NextArrow" ng-class="nextPageDisabled()" ng-click="nextPage($event)"></span>'
                          +  '<div class="pagination_pattern_two_drop">'
                          +'<div vmf-select-list model="itemsPerPage" list="selectPerPage" pre-select-ind="0" custom-class="customclass"></div>'
                          +  '</div>';
            }
            elem.append(template);
            $compile(elem.contents())(scope);
            scope.$watch('itemsPerPage', function(n, o) {
                if(n !== o) {
                    if(scope.itemsPerPage*scope.currentPage >= scope.items.length) {
                        scope.currentPage = Math.floor((o * scope.currentPage) / n);
                        scope.currentPageBox = scope.currentPage + 1;
                    }

                    scope.renderPage();
                   
                    $timeout(function() {
                      if(parseInt(scope.type) === 2) {
                        if(parseInt(scope.pageCount()) === 0){
                          elem.find(".pagination2NextArrow").addClass("disabled");
                          elem.find(".pagination2PrevArrow").addClass("disabled");
                        }else if(parseInt(scope.currentPage) === parseInt(scope.pageCount())){
                          elem.find(".pagination2NextArrow").addClass("disabled");
                          elem.find(".pagination2PrevArrow").removeClass("disabled");
                        }
                        else if(parseInt(scope.currentPage) === 0){
                          elem.find(".pagination2PrevArrow").addClass("disabled");
                          elem.find(".pagination2NextArrow").removeClass("disabled");
                        } else if(parseInt(scope.currentPage) < parseInt(scope.pageCount())){
                          elem.find(".pagination2NextArrow").removeClass("disabled");
                          elem.find(".pagination2PrevArrow").removeClass("disabled");
                        }
                      }
                    });
                 
                }  
            });
            scope.$watch('currentPageBox', function(n, o) {
                // console.log(scope.pageCount()+" : "+scope.currentPage);  console.log(n + ' :: ' + o);            
                if(n !== o) {
                  
                  if(scope.currentPageBox>=1 && scope.currentPageBox<=(scope.pageCount()+1)){
                      scope.currentPage = scope.currentPageBox-1;
                      scope.renderPage();
                  } else if(parseInt(scope.currentPageBox) === 0) {
                      scope.currentPage = 1;
                       scope.currentPageBox = 1;
                      scope.renderPage();
                  } else if(scope.currentPageBox > (scope.pageCount()+1)) {
                      scope.currentPage = scope.pageCount();
                      scope.currentPageBox = scope.currentPage + 1;
                      scope.renderPage();
                  }

                  
                  $timeout(function() {
                      if(parseInt(scope.type) === 2) {
                        if(parseInt(scope.pageCount()) === 0){
                          elem.find(".pagination2NextArrow").addClass("disabled");
                          elem.find(".pagination2PrevArrow").addClass("disabled");
                        }else if(parseInt(scope.currentPage) === parseInt(scope.pageCount())){
                          elem.find(".pagination2NextArrow").addClass("disabled");
                          elem.find(".pagination2PrevArrow").removeClass("disabled");
                        }
                        else if(parseInt(scope.currentPage) === 0){
                          elem.find(".pagination2PrevArrow").addClass("disabled");
                          elem.find(".pagination2NextArrow").removeClass("disabled");
                        } else if(parseInt(scope.currentPage) < parseInt(scope.pageCount())){
                          elem.find(".pagination2NextArrow").removeClass("disabled");
                          elem.find(".pagination2PrevArrow").removeClass("disabled");
                        }
                      }
                    });
                }
            });

            scope.renderPage = function() {
               
                    var template = '';
                    if(scope.type === '1') {
                        elem.find(".paginationContent").html('');
                        for (var i=scope.itemsPerPage*scope.currentPage; i<scope.itemsPerPage*scope.currentPage + scope.itemsPerPage; i++) {
                            if(i === scope.pageData.articles.length) {
                               break;
                            }
                            template += scope.pageData.articles[i].article;
                            
                        }
                        elem.find(".paginationContent").append(template);
                        $compile(elem.find(".paginationContent").contents())(scope);
                    } else if(scope.type === '2') {
                       elem.find(".paginationContent").html('');
                        for (var v=scope.itemsPerPage*scope.currentPage; v<scope.itemsPerPage*scope.currentPage + scope.itemsPerPage; v++) {
                            if(v === scope.pageData.articles.length) {
                               break;
                            }
                            template += scope.pageData.articles[v].article;
                            
                        }
                        elem.find(".paginationContent").append(template);
                        $compile(elem.find(".paginationContent").contents())(scope);
                    }
                    
            };

          };

          scope.updatePage();

          scope.$watch('pageData', function(n, o) {
              if(n !== o) {
                  scope.updatePage();
              }    
          }, true);

          $timeout(function() {
            if(parseInt(scope.type) === 1) {
              elem.find(".pagination1PrevArrow").parent("li").addClass("disabled");
              elem.find(".pagination ul").find("li").eq(1).addClass("active"); 
            } else if(parseInt(scope.type) === 2) {
                elem.find(".pagination2PrevArrow").addClass("disabled");
            }
          });
    },
  controller:function($scope){
  //$scope.itemsPerPage = 10;
  // $scope.selectPerPage = [10,20,50,100];
  $scope.selectPerPage = [
                            {"value":10, "text": "10 per page"},
                            {"value":20, "text": "20 per page"},
                            {"value":50, "text": "50 per page"},
                            {"value":100, "text": "100 per page"}
                          ];
  $scope.currentPage = 0;
  $scope.currentPageBox = $scope.currentPage+1;
  $scope.items = [];
  
/* clubing all functions start */
$scope.prevPage = function(currEvent) {
  if($scope.currentPage > 0) {
    if($scope.currentPageBox === '') {
        $scope.currentPageBox = $scope.currentPage + 1;
    }
    $scope.currentPage--;
    $scope.currentPageBox--;
  }
  if(parseInt($scope.currentPage) < $scope.pageCount()) {
    
    $timeout(function() {
      if(parseInt($scope.type) === 1) {
        $(currEvent.target).parents("ul").find(".pagination1NextArrow").parent("li").removeClass("disabled");
      } else if(parseInt($scope.type) === 2) {
          $(currEvent.target).parents(".pagination_pagination").find(".pagination2NextArrow").removeClass("disabled");
      }
    });
  }
  if ($scope.currentPage > 0) {
      $scope.renderPage();
      $timeout(function() {
        if(parseInt($scope.type) === 1) {
          $(currEvent.target).parent("li").removeClass("disabled");
        } else if(parseInt($scope.type) === 2) {
            $(currEvent.target).removeClass("disabled");
        }
      });
  } else if($scope.currentPage === 0){
    $scope.renderPage();
    $timeout(function() {
      if(parseInt($scope.type) === 1) {
          $(currEvent.target).parent("li").addClass("disabled");
      } else if(parseInt($scope.type) === 2) {
          $(currEvent.target).addClass("disabled");
      }
    });
  }
  $timeout(function() {
    if(parseInt($scope.type) === 1) {
        $scope.tempVar = $scope.currentPage - $scope.tempStart;
        $(currEvent.target).parents("ul").find("li").each(function(){
          $(this).removeClass("active");
        });
        $(currEvent.target).parents("ul").find("li").eq($scope.tempVar + 1).addClass("active"); 
    }
  });
  
};
$scope.nextPage = function(currEvent) {
  if($scope.currentPage < $scope.pageCount()) {
    if($scope.currentPageBox === '') {
        $scope.currentPageBox = $scope.currentPage + 1;
    }

    $scope.currentPage++;
    
    $scope.currentPageBox++;
  }
  if(parseInt($scope.currentPage) > 0) {
    
    $timeout(function() {
      if(parseInt($scope.type) === 1) {
        $(currEvent.target).parents("ul").find(".pagination1PrevArrow").parent("li").removeClass("disabled");
      } else if(parseInt($scope.type) === 2) {
          $(currEvent.target).parents(".pagination_pagination").find(".pagination2PrevArrow").removeClass("disabled");
      }
    });
  }
  if(parseInt($scope.currentPage) < $scope.pageCount()) {
    
    $timeout(function() {
      if(parseInt($scope.type) === 1) {
        $(currEvent.target).parents("ul").find(".pagination1NextArrow").parent("li").removeClass("disabled");
      } else if(parseInt($scope.type) === 2) {
          $(currEvent.target).parents(".pagination_pagination").find(".pagination2NextArrow").removeClass("disabled");
      }
    });
  }
  if (parseInt($scope.currentPage) < parseInt($scope.pageCount())) {
      $scope.renderPage();
      $timeout(function() {
        if(parseInt($scope.type) === 1) {
          $(currEvent.target).parent("li").removeClass("disabled");
        } else if(parseInt($scope.type) === 2) {
            $(currEvent.target).removeClass("disabled");
        }
      });
  } else if(parseInt($scope.currentPage) === parseInt($scope.pageCount())){
    $scope.renderPage();
    $timeout(function() {
      if(parseInt($scope.type) === 1) {
          $(currEvent.target).parent("li").addClass("disabled");
      } else if(parseInt($scope.type) === 2) {
          $(currEvent.target).addClass("disabled");
      }
    });
  }

  $timeout(function() {
    if(parseInt($scope.type) === 1) {
        $scope.tempVar = $scope.currentPage - $scope.tempStart;
        $(currEvent.target).parents("ul").find("li").each(function(){
          $(this).removeClass("active");
        });
        $(currEvent.target).parents("ul").find("li").eq($scope.tempVar + 1).addClass("active"); 
    }
  });
};

$scope.setPage = function(n,currEvent) {
  $scope.currentPage = n;
  $scope.currentPageBox = n+1;
  $scope.renderPage();
  if(parseInt($scope.currentPage) > 0) {
    
    $timeout(function() {
      if(parseInt($scope.type) === 1) {
        $(currEvent.target).parents("ul").find(".pagination1PrevArrow").parent("li").removeClass("disabled");
      } else if(parseInt($scope.type) === 2) {
          $(currEvent.target).parents(".pagination_pagination").find(".pagination2PrevArrow").removeClass("disabled");
      }
    });
  }
  $timeout(function() {
    $(currEvent.target).parents("ul").find("li").each(function(){
      $(this).removeClass("active");
    });
   $(currEvent.target).parent("li").addClass("active"); 
     
  });
};

$scope.range = function() {
    var rangeSize = 10;
    var ret = [];
    $scope.tempStart = 0;
    if($scope.currentPage % rangeSize === 0)
      $scope.tempStart = $scope.currentPage;
    else {
        $scope.tempStart = rangeSize*Math.floor($scope.currentPage / rangeSize);
    } 
    if ( $scope.tempStart > $scope.pageCount()-rangeSize ) {
      $scope.tempStart = $scope.pageCount()-rangeSize+1;
    }

    for (var i=$scope.tempStart; i<$scope.tempStart+rangeSize; i++) {
      if(i>=0){
      ret.push(i);
    }
    }
    return ret;
  };
  $scope.prevPageDisabled = function() {
    return $scope.currentPage === 0 ? "disabled" : "";
  };

  $scope.pageCount = function() {
    return Math.ceil($scope.items.length/$scope.itemsPerPage)-1;
  };

  $scope.nextPageDisabled = function() {
    return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
  };  
    }
   };  
}]).directive('numbersOnly', function(){
   return {
     require: 'ngModel',
     link: function(scope, element, attrs, modelCtrl) {
       modelCtrl.$parsers.push(function (inputValue) {
           // this next if is necessary for when using ng-required on your input. 
           // In such cases, when a letter is typed first, this parser will be called
           // again, and the 2nd time, the value will be undefined
           if (inputValue === undefined) return ''; 
           var transformedInput = inputValue.replace(/[^0-9]/g, ''); 
           if (transformedInput !== inputValue) {
              modelCtrl.$setViewValue(transformedInput);
              modelCtrl.$render();
           }         

           return transformedInput;         
       });
     }
   };
});
app.directive('vmfRadioGroup', ['$compile', '$timeout', function($compile, $timeout) {
    return {
        restrict: 'EA',
        priority:1,
        scope: {
            rtitle: '=',
            options: '=',
            name: '=',
            model: '=',
            mandatory: '@',
            customClass:'=',
            titleColMod:'@',
            type: '@',
            rLabel: '=',
            rChecked: '=',
            rDisabled: '=',
            rValue: '=',
            clickCallback: '&'
        },
        link: function(scope, elem, attrs) {
            var template;
            
            if(scope.type === "1") {
                if(scope.mandatory === 'true') {
                    if(typeof scope.titleColMod !== "undefined")
                        template = '<div class="formSection clearfix">  <div class="labelHeader {{titleColMod}}"><span class="mandatory">* </span> ';
                    else
                        template = '<div class="formSection clearfix">  <div class="labelHeader col-md-2"><span class="mandatory">* </span> ';
                                
                    if(scope.rtitle) {
                        template += scope.rtitle; 
                    }
                                
                    template += '</div><div class="col-md-8 radioContainer"><fieldset>';
                }
                else {
                    template = '<div class="formSection clearfix">  <div class="labelHeader col-md-2">';
                    if(scope.rtitle) {
                        template += scope.rtitle; 
                    }
                                
                    template += '</div><div class="col-md-8 radioContainer"><fieldset>';
                }                

                angular.forEach(scope.options, function(item, index) {
                    
                    template += '<label class="custom-radio" ng-click="optionClicked(\'' + item.value + '\', ' + index + ')"><span class="customRadioBox icn" ng-disabled="options['+ index +'].disabled"><input type="radio" ng-model="model" vmf-radio-value="'+ item.value +'" ng-disabled="options['+ index +'].disabled" name="'
                        + scope.name 
                        + '" value="'
                        + item.value
                        + '"></span>'
                        + item.text 
                        + '</label>';    
                      
                });

                template += '</fieldset></div> </div>';
                
                elem.append(template);

                if(scope.customClass){
                    angular.forEach(scope.customClass, function(item) {
                        elem.find(item.selector).addClass(item.cusclass);
                        
                        
                    });
                }


                $compile(elem.contents())(scope);

                /*
                * label click for IE7
                */

                scope.optionClicked = function(value, index) {
                   
                    if(!scope.options[index].disabled && scope.model !== value) {
                        scope.model = value;
                    }
                    
                };
                
                scope.$watch('model', function(n, o) {
                    if(n === null) {
                        $timeout(function() {
                            elem.find('label.custom-radio').removeClass('selected');
                            elem.find('span.customRadioBox').removeClass('selected'); 
                            angular.forEach(scope.options, function(item) {
                                item.checked = false;
                            });
                        });    
                    }
                    else {
                        
                        angular.forEach(scope.options, function(item) {
                            item.checked = false;
                        });
                        
                        angular.forEach(scope.options, function(item, index) {
                           
                            if(item.value === scope.model) {
                                item.checked = true;
                                $timeout(function() {
                                    
                                    angular.element(elem.find('label.custom-radio')[index]).addClass('selected'); 
                                    angular.element(elem.find('span.customRadioBox')[index]).addClass('selected'); 
                                    
                                });        
                            }
                            else {
                                $timeout(function() {
                                    
                                    angular.element(elem.find('label.custom-radio')[index]).removeClass('selected'); 
                                    angular.element(elem.find('span.customRadioBox')[index]).removeClass('selected'); 
                                    
                                });           
                            }

                        });
                        
                    }
                  
                });

                scope.$watch('options', function(n, o) {
                                       
                    angular.forEach(n, function(option, index) {
                        if(option.disabled) {
                            if(option.checked) {
                                disableAll = true;
                            }

                            $timeout(function() {
                                angular.element(elem.find('label.custom-radio')[index]).addClass('disabledColor'); 
                                angular.element(elem.find('span.customRadioBox')[index]).addClass('disabled'); 
                                
                            });    
                            
                        }
                        else {
                            $timeout(function() {
                                angular.element(elem.find('label.custom-radio')[index]).removeClass('disabledColor'); 
                                angular.element(elem.find('span.customRadioBox')[index]).removeClass('disabled'); 
                                
                            });           
                        }


                    });

                    

                }, true);            

            }
            else if(scope.type === '2') {
                template = '';
                if(scope.rLabel) {
                    template += '<label class="custom-radio" ng-click="optionClicked(\'' + scope.rValue + '\')"><span class="customRadioBox icn" ng-disabled="rDisabled"><input type="radio" ng-model="model" vmf-radio-value="' + scope.rValue + '" ng-disabled="rDisabled" name="' + scope.name + '" value="' + scope.rValue + '" ng-checked="rChecked" ng-click="clickCallback({$event:$event})" ></span>' + scope.rLabel + '</label>'; 
                }
                else {
                    template += '<label class="custom-radio" ng-click="optionClicked(\'' + scope.rValue + '\')"><span class="customRadioBox icn" ng-disabled="rDisabled"><input type="radio" ng-model="model" vmf-radio-value="' + scope.rValue + '" ng-disabled="rDisabled" name="' + scope.name + '" value="' + scope.rValue + '" ng-checked="rChecked" ng-click="clickCallback({$event:$event})" ></span></label>';     
                }    

                var repl = $compile(template)(scope);
                elem.replaceWith(repl);

                
                /*
                * label click for IE7
                */

                scope.optionClicked = function(value) {
                   
                    if(!scope.rDisabled && scope.model !== value) {
                        scope.model = value;
                    }
                    
                };

                scope.$watch('model', function(n, o) {
                    
                    if(n === null) {
                        $timeout(function() {
                            repl.removeClass('selected');
                            repl.find('span.customRadioBox').removeClass('selected'); 
                            scope.rChecked = false;
                        });    
                    }
                    else {
                        if(scope.rValue === n) {
                    
                            $timeout(function() {
                                repl.addClass('selected');
                                repl.find('span.customRadioBox').addClass('selected'); 
                                scope.rChecked = true;
                            });     
                        }
                        else {
                    
                            $timeout(function() {
                                repl.removeClass('selected');
                                repl.find('span.customRadioBox').removeClass('selected'); 
                                scope.rChecked = false;
                            });     
                        }
                    }
                    
                });

                scope.$watch('rDisabled', function(n, o) {
                    if(scope.rDisabled) {
                        $timeout(function() {
                            repl.addClass('disabledColor'); 
                            repl.find('span.customRadioBox').addClass('disabled'); 
                            
                        });  
                    }
                    else {
                        $timeout(function() {
                            repl.removeClass('disabledColor'); 
                            repl.find('span.customRadioBox').removeClass('disabled'); 
                            
                        });     
                    }
                });
            }

        }
        
    };
}])

/*
* vmfRadioValue directive for programmatic value binding in IE7
*/

.directive('vmfRadioValue', [function() {
    return {
        require: "ngModel",
        restrict: "A",
        link: function(scope, elem, attrs, controller) {

            while (attrs.value !== attrs.vmfRadioValue) {

                attrs.value = attrs.vmfRadioValue;
                controller.$render();
    
            }

        }        
    };
}]);

    /*Product Carousel Directive starts here */
    app.directive('vmfProductcarousel', ['$compile','$window','$timeout','$interval',function($compile,$window,$timeout,$interval) {
        var template = '<div><div class="vmware-product-carosuel-wrapper-container">' +
            '<div class="vmware-product-carosuel-inner-wrapper-container"> ' +
            '<div  class="vmware-product-carosuel-title">{{config.productCarouselTitle}}</div>' +
            '<div class="product-carosuel-container">' +
            '<div class="product-carosuel-button prevBtn"><button ng-style=buttonVisibility class="vmware-product-carosuel-leftNavigation" ng-click="gotoPage(currentPage-1)"></button></div>' +
            '<div class="product-carosuel-outer-container" ng-style=adjustSpaceDimesion>' +
            '<div class="product-carosuel-inner-container">'+
            '<div ng-repeat="products in config.productCarousel"> <div class="product-carosuel-img" ng-style=imageStyle ng-click="oncarouselclick()()" ng-mouseover="oncarouselover()()"   > ' +
            '<div class="product-carosuel-imgContainer" ng-style="imageDimesion"> <img ng-src="{{products.productImageSource}}"> </div>' +
            '<div class="product-carosuel-img-caption">' +
            '<p class="product-carosuel-productname">{{products.ProductName}}</p>' +
            '<p class="product-carosuel-productdescription">{{products.productDescription}}</p>' +
            '<p class="product-carosuel-productoffer">{{products.productOffer}}</p>' +
            '<span >Buy Online</span><span class="product-carosuel-seperator"></span><span>Upgrade</span>' +
            '</div></div> <div class="product-carousel-spaceSeperator" ng-style="spaceDimesion"> </div> </div> </div></div>'+
            '<div class="product-carosuel-button nextBtn"><button ng-disabled="buttonDisable && !circularrotate" class="vmware-product-carosuel-rightNavigation" ng-click="gotoPage(currentPage+1)"></button></div>'+
            '</div><div class="product-carousel-pagination-divider"></div><div class="product-carosuel-pagination-container">' +
            '<span ng-repeat="page in pagination" class="product-carosuel-pagination" ng-click="gotoPage($index+1)"></span>' +
            '</div></div></div></div>';
        return {
            restrict: 'E',
            replace: true,
            template: template,
            scope : {
                config : '=',
                carouselwidth : '=',
                carouselHeight : '=',
                carouselspacing : '=?',
                autoplay : '=?',
                animationdelay : '=?',
                circularrotate : '=?',
                oncarouselclick : '&?',
                oncarouselover : '&?'
            },  
            link : function(scope,element,iattrs) {

                /* Carousel DOM Elements */ 
                var windowObject = angular.element($window),
                    carosuelGC = element.find('.vmware-product-carosuel-wrapper-container'),
                    carosuelOC = element.find('.product-carosuel-outer-container'),
                    carosuelIC = element.find('.product-carosuel-inner-container'),
                    carouselLeftNav =  element.find('.vmware-product-carosuel-leftNavigation'),
                    carouselPagination = element.find('.product-carosuel-pagination-container'),
                    
                    /* Navigation Button configuration */
                    NAV_BUTTON_WIDTH = 30,
                    MARGIN_LEFT = 35,
                    MARGIN_RIGHT = 35,

                    /* Carousel Image configuration */
                    IMAGE_TOTAL_COUNT = scope.config.productCarousel.length,
                    IMAGE_PADDING = scope.carouselspacing,
                    IMAGE_WIDTH = scope.carouselwidth + 110 + 5*2,

                    /* Carousel Initilazation properties*/
                    currentImageShowed = 1,
                    imgCountToBeOccupied = 1,
                    resizeFlag = false;
     
                scope.imageStyle = { "width" : IMAGE_WIDTH };         
                scope.spaceDimesion = {"width" : scope.carouselspacing};
                scope.adjustSpaceDimesion = {"margin-right" : -scope.carouselspacing+5 };
                scope.imageDimesion = {"width" : scope.carouselwidth + 10 , "height" : scope.carouselHeight+10 };

                scope.currentPage = 1;
                scope.carouselspacing = scope.carouselspacing || 70;
                scope.autoplay = scope.autoplay || false;
                scope.animationdelay = scope.animationdelay || 700;
                scope.circularrotate = scope.circularrotate || false;
                
                IMAGE_WIDTH +=  IMAGE_PADDING;

                scope.pageRange = function(n) {
                    var range = [];
                    for (var i = 0; i < n; i++) {
                        range.push(i);
                    }
                    scope.pagination = range;  
                    
                    $timeout(function() {
                        scope.$apply();
                    });
                };

                scope.autoPlayer = function() {
                    if (scope.autoplay === true) {
                        $interval(function() {
                            scope.gotoPage(++scope.currentPage);
                        }, 5000);
                    }
                }();
             
                $timeout(function() { carouselPagination.find('span:eq(0)').addClass('active');  });
                
                scope.gotoPage = function(page) {
                    if (page > scope.pagination.length) {
                        page = 1;
                    } else if (page < 1) {
                        page = scope.pagination.length;
                    }
                    carouselPagination.find('span.active').removeClass('active');
                    scope.currentPage = page;
                    currentImageShowed = (imgCountToBeOccupied * --page) +1;
                    carosuelIC.stop(false,false);
                    carosuelIC.animate({
                        'margin-left': -(IMAGE_WIDTH *  imgCountToBeOccupied) * page+ 'px'
                    },scope.animationdelay);
                    scope.intialLoadNavControl();
                    carouselPagination.find('span').eq(scope.currentPage-1).addClass('active');
                };

                scope.init = function() {
                    var carosuelGC_width = carosuelGC.width(),
                        innerRealestate = carosuelGC_width - (NAV_BUTTON_WIDTH * 2 + MARGIN_LEFT );
                    
                    imgCountToBeOccupied = parseInt(innerRealestate / IMAGE_WIDTH);
                    imgCountToBeOccupied = (imgCountToBeOccupied === 0 )? 1 : imgCountToBeOccupied;
                    pagination = Math.ceil(IMAGE_TOTAL_COUNT / imgCountToBeOccupied);
                    scope.pageRange(pagination);    
                    var carosuelOCWidth=IMAGE_WIDTH * imgCountToBeOccupied;
                    carosuelOCWidth = (carosuelOCWidth <= 0)?IMAGE_WIDTH : carosuelOCWidth;

                    carosuelOC.width(carosuelOCWidth);
                    carosuelIC.width(IMAGE_WIDTH * IMAGE_TOTAL_COUNT);
                    scope.intialLoadNavControl();
                    carosuelGC.css({"min-width":(IMAGE_WIDTH+(NAV_BUTTON_WIDTH*2)+MARGIN_LEFT+MARGIN_RIGHT)+"px"});
                    element.css("overflow","auto");
                    if (resizeFlag) {
                        var pageSlot = Math.ceil(currentImageShowed / imgCountToBeOccupied);
                        scope.gotoPage(pageSlot);    
                    }

                };

                scope.intialLoadNavControl = function() {
                    scope.buttonDisable =false;
                        scope.buttonVisibility = { visibility : "visible" };                        
                    if (currentImageShowed > (IMAGE_TOTAL_COUNT - imgCountToBeOccupied)) {
                        scope.buttonDisable = true;
                    } else if (currentImageShowed <= 1 && !scope.circularrotate)  {                  
                       scope.buttonVisibility ={ "visibility" : "hidden" };
                    }
                };

                scope.init();

                windowObject.bind('resize', function() {
                    resizeFlag = true;
                    scope.init();
                    resizeFlag = false;
                }); 

                carosuelIC.on('mouseenter','.product-carosuel-img-caption span, .product-carosuel-productname',function() {
                    angular.element(this).closest('.product-carosuel-img').find('.product-carosuel-imgContainer').addClass('imageHover');
                }).on('mouseleave', '.product-carosuel-img-caption span, .product-carosuel-productname', function() {
                    angular.element(this).closest('.product-carosuel-img').find('.product-carosuel-imgContainer').removeClass('imageHover');
                });
               
            },
            controller: function($scope,$element) {
               
            }
        };
    }]);

/* Social Media directive */
app.directive("vmfSocialMedia", function(){ 
    var template = '<div class="vmsmedia_container">'+
                    '<div class="vmsmedia_share">'+
                        'SHARE</div>'+
                        '<ul>'+
                            '<li class="vmsmedia_item" ng-repeat="media in config">'+
                                '<a ng-attr-href="{{media.imageURL}}"  target="_blank">'+
                                    '<img ng-src="{{media.imageSource}}" alt="{{media.imageSource}}"/>'+
                                '</a> '+
                            '</li>'+
                        '</ul>'+
                    '</div>';
    return {
        restrict: "EA",
        replace:true,
        scope: {
            config: '=',
            position: '='
        },
        template: template,
        link: function(scope, ele, attr) {   
            angular.element(ele).addClass(scope.position);
        }
    };
});


app.service('ie7hideService',function(){
    var isIE7= {modalShown:false};
    return {
        switchModal:function(){
            console.log("switchModal clicked");
              isIE7.modalShown=!isIE7.modalShown;
        },
        getStatus:function(){
            return isIE7;
        }
    };
})

.directive('vmfSysOne',['ie7hideService',function(ie7hideService){
                    return{
                        restrict    :'EA',
                        replace     :true,
                        transclude  :true,

                        template    :"<div>" +
                                    "<div ng-if='show && sysalert==\"first\"'>"+
                                    "<div class='vmw-modal-overlay'></div>"+
                                    "<div class='vmw-modal-dialog' ng-style='dialogStyle'>"+
                                    "<a href='javascript:void(0);' class='vmw-modal-close' ng-click='hideModal()'></a>"+
                                    "<div class='vmw-modal-dialog-content'>"+
                                    "<div class='vmw-modal-message'>"+
                                    "<span class='vmw-modal-icon'>&nbsp;</span>"+
                                    "<p class='vmw-modal-hdr'>Success!</p>"+
                                    "<p class='vmw-modal-msg-desc'>{{sysMessage}}<span class='vmw_modal_txt_link' ng-transclude></span></p>"+
                                    "</div>"+
                                    "<div class='vmw-modal-actions'>"+
                                   // "<button type='button' class='modal-btn btn-primary' ng-click='hideModal()'>Cancel</button>"+
                                    "<button type='button' class='modal-btn btn-secondary btn_right' ng-click='hideModal()'>Done</button>"+
                                    "</div>"+
                                    "</div>"+
                                    "</div>"+
                                    "</div>"+

                                    "<div ng-if='show && sysalert==\"second\"'>"+
                                    "<div class='sys-modal-overlay'></div>"+
                                    "<div class='sys-modal-dialog' ng-style='dialogStyle'>"+
                                    "<a href='javascript:void(0);' class='sys-modal-close' ng-click='hideModal()'></a>"+
                                    "<div class='sys-modal-dialog-content' >"+
                                    "<div class='sys-modal-message'>"+
                                    "<span class='sys-modal-icon warning'>&nbsp;</span>"+
                                    "<p class='sys-modal-msg-desc'>{{sysMessage}}</p>"+
                                    "</div>"+
                                    "<div class='sys-modal-actions'>"+
                                    //"<button type='button' class='modal-btn btn-primary'  ng-click='hideModal()'>Cancel</button>"+
                                    "<button type='button' class='modal-btn btn-secondary btn_right' ng-click='hideModal()'>OK</button>"+
                                    "</div>"+
                                    "</div>"+
                                    "</div>"+
                                    "</div>" +

                                    "<div ng-if='show && sysalert==\"third\"'>"+
                                    "<div class='sys-modal-overlay'></div>"+
                                    "<div class='sys-modal-dialog' ng-style='dialogStyle'>"+
                                    "<a href='javascript:void(0);' class='sys-modal-close' ng-click='hideModal()'></a>"+
                                    "<div class='sys-modal-dialog-content' >"+
                                    "<div class='sys-modal-message'>"+
                                    "<span class='sys-modal-icon caution'>&nbsp;</span>"+
                                    "<p class='sys-modal-msg-desc'>{{sysMessage}}</p>"+
                                    "</div>"+
                                    "<div class='sys-modal-actions'>"+
                                    "<button type='button' class='modal-btn btn-primary'  ng-click='hideModal()'>Cancel</button>"+
                                    "<button type='button' class='modal-btn btn-secondary btn_right' ng-click='hideModal()'>Continue</button>"+
                                    "</div>"+
                                    "</div>"+
                                    "</div>"+
                                    "</div>" +

                                    "</div>",
                        scope       :{
                                        show: '@',
                                        dialogHeader:'@',
                                        sysMessage:'@',
                                        contentTitle:'@',
                                        contentFooter:'@',
                                        view:'@',
                                        sysalert: '@'
                                     },
                        compile     : function($tElem,$tAttrs){
                            return function postLink (scope,iElem,iAttrs) {


                                scope.show = ie7hideService.getStatus().modalShown;
                        scope.hideModal=function(){
                                        // $(iElem).addClass("ng-hide");

                                // iElem.bind('ng-hide');
                                // iElem.bind('click',function(){
                                //     iElem.toggleClass("ng-hide");
                                // });
                                ie7hideService.switchModal();
                                          // scope.show=false;

                            };

                            };
                        }
                    };
                }])

.directive('informationMessage',function(){
    return{
        restrict:'EA',
        priority:2,
        replace :true,
        controller:function($scope){
            // console.log('inside informationMessage controller');
            $scope.infoMessage="You have successfully completed a request to fund this service with <Fund name>. A confirmation email will be sent to you. This switch will take effect on the next invoice..your current balance for this fund is $0.00. Please add more credit to this fund by XXXXXXX. ";
            // $scope.isInfoMessage=true;


        },
        template:
                "<div class=''>" +
                "<section class='feedback neutral' ng-if='isInfoMessage && infoType==\"neutral\"'>"+
                "<a href='javascript:void(0);' class='feedback_close' ng-click='hideInfoMessage()'></a>"+
                "<span class='feedback_icon'></span>"+
                "<p class='feedback_txt'>{{infoMessage}}</p>"+
                "</section>"+

                "<section class='feedback positive' ng-if='isInfoMessage && infoType==\"positive\"'>"+
                "<a href='javascript:void(0);' class='feedback_close' ng-click='hideInfoMessage()'></a>"+
                "<span class='feedback_icon'></span>"+
                "<p class='feedback_txt'>{{infoMessage}}</p>"+
                "</section>"+

                "<section class='feedback warning' ng-if='isInfoMessage && infoType==\"warning\"'>"+
                "<a href='javascript:void(0);' class='feedback_close' ng-click='hideInfoMessage()'></a>"+
                "<span class='feedback_icon'></span>"+
                "<p class='feedback_txt'>{{infoMessage}}</p>"+
                "</section>"+

                "<section class='feedback critical' ng-if='isInfoMessage && infoType==\"critical\"'>"+
                "<a href='javascript:void(0);' class='feedback_close' ng-click='hideInfoMessage()'></a>"+
                "<span class='feedback_icon'></span>"+
                "<p class='feedback_txt'>{{infoMessage}}</p>"+
                "</section>"+

                "</div>",
        scope:{
            infoMessage: '@',
            isInfoMessage: '=',
            infoType:'@'
        },
        compile: function($tElem,$tAttrs){
            return function postLink(scope,iElem,iAttrs){
            // console.log(iAttrs);
            // console.log('inside informationMessage compilers');
                    scope.hideInfoMessage=function(){console.log('h');
                        scope.isInfoMessage=false;
                    };
            };
        }
    };
  });

/*jshint scripturl:true*/

  app.directive('vmfTabs', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: {},
      controller: function($scope) {
        var panes = $scope.panes = [];
         var currentPane = 0;
        $scope.onKeydown = function(e) { 
          console.log(panes);
          if(e.keyCode === 37){    //left 37
            var i = 0;
            for(;;){
              if (panes[i].selected) {
                break;
              }else{
                i = i + 1;  
              }
            }
            
            
            if(i> 0){
              angular.forEach(panes, function(pane) {
                pane.selected = false;
              });
             
              console.log(i);
              $scope.ieselect(panes[i-1]);
            }
          }
          if(e.keyCode === 39){    //right 39
            var j = 0;
            for(;;){
              if (panes[j].selected) {
                break;
              }else{
                j = j + 1;  
              }
            }
           
            if ((j+1) !== panes.length){
              angular.forEach(panes, function(pane) {
                pane.selected = false;
              });
              $scope.ieselect(panes[j+1]);
            }
          }
         
        };
        $scope.select = function(pane) {
          
          angular.forEach(panes, function(pane) {
            pane.selected = false;
          });
          pane.selected = true;
        };
        // $scope.iflink = function(l){
        //   if(l){
        //     return l;
        //   }else{
        //     return 'javascript: void(0)';
        //   }

        // };
        $scope.ieselect = function(pane,currentIndex,curEvent) {
          angular.forEach(panes, function(pane) {
            pane.selected = false;
            $(".tab-content").find("vmf-pane[tabno="+pane.tabno+"]").children().hide();
          });
          pane.selected = true;
          
          $(".tab-content").find("vmf-pane[tabno="+pane.tabno+"]").children().show();
          //$(".navbar-collapse ul").find("li a").removeClass("activeState");
         // $(".navbar-collapse ul").find("li a").eq(currentIndex).addClass("activeState");
          $(curEvent.target).parents("ul").find("li a").removeClass("activeState");
          $(curEvent.target).addClass("activeState");
        };

        this.addPane = function(pane) {
           $(".tab-content").find("vmf-pane").children().hide();
          if (panes.length === 0) {
            $scope.select(pane);
            
          }
          panes.push(pane);
          $.each($(".tab-content"),function(){
            $(this).children().first().children().show();
          });

          
        };
      },

      template: "<div class=' vmfTab'><div class='navbar-header'><a class='navbar-toggle'></a></div><div class='collapse navbar-collapse' ><ul class=' '><li ng-keyup='onKeydown($event)' ng-repeat='pane in panes' ng-class='{active:pane.selected}'><a href='javascript:void(0);' ng-class='{activeState:pane.selected}' ng-click='select(pane);ieselect(pane,$index,$event);'>{{pane.listlabel}}</a></li></ul></div></div><div class='tab-content' ng-transclude></div>"

    };
  });
  app.directive('vmfPane', function($timeout) {
    return {
      require: '^vmfTabs',
      restrict: 'E',
      transclude: true,
      scope: {
        tabno: '@',
        listlabel:'@',
        link:'@'
      },
      link: function(scope, element, attrs, tabsCtrl) {
        tabsCtrl.addPane(scope);
        $timeout(function() {
          $(".navbar-collapse ul").find("li a").eq(0).addClass("activeState");
        });
        
      },
      template: "<div class='tab-pane' ng-show='selected' ng-transclude></div>"
    };
});


 app.directive('vmfTabsone', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: {},
      controller: function($scope) {
        
        var panes = $scope.panes = [];
         var currentPane = 0;
        $scope.onKeydown = function(e) {
         
          if(e.keyCode === 37){    //left 37
            var i = 0;
            for(;;){
              if (panes[i].selected) {
                break;
              }else{
                i = i + 1;  
              }
              
        
            }
            
            
            if(i> 0){
              angular.forEach(panes, function(pane) {
                pane.selected = false;
              });
             
             
              $scope.ieselect(panes[i-1]);


            }
            

          }
          if(e.keyCode === 39){    //right 39
            var j = 0;
            for(;;){
              if (panes[j].selected) {
                break;
              }else{
                j = j + 1;  
              }
              
        
            }
            
            if ((j+1) !== panes.length){
              angular.forEach(panes, function(pane) {
                pane.selected = false;
              });
             
              
              $scope.ieselect(panes[j+1]);

            }

            
           
           

          }
          
        };
        $scope.select = function(pane) {
          // console.log('select called');
          // console.log(pane);
          // currentPane = index;
          angular.forEach(panes, function(pane) {
            pane.selected = false;
          });
          pane.selected = true;
        };
        $scope.ieselect = function(pane,currentIndex,curEvent) {
          angular.forEach(panes, function(pane) {
            pane.selected = false;
            $(".tab-content").find("vmf-paneone[tabno="+pane.tabno+"]").children().hide();
          });
          pane.selected = true;
          
          $(".tab-content").find("vmf-paneone[tabno="+pane.tabno+"]").children().show();
          //$(".navbar-collapse ul").find("li a").removeClass("activeState");
         //alert(currentIndex);
          //$(".navbar-collapse ul").find("li a").eq(currentIndex).addClass("activeState");
          $(curEvent.target).parents("ul").find("li a").removeClass("activeState");
          $(curEvent.target).addClass("activeState");
        };

        this.addPane = function(pane) {
           $(".tab-content").find("vmf-paneone").children().hide();
          if (panes.length === 0) {
            $scope.select(pane);
            
          }
          panes.push(pane);
          $.each($(".tab-content"),function(){
            $(this).children().first().children().show();
          });

          //$(".navbar-collapse ul").find("li a").eq(0).addClass("activeState");
          //alert("e");
        };

      },

      template: "<div class=' vmfTab vmfTab1'><ul class=''><li ng-keyup='onKeydown($event)' ng-repeat='pane in panes' ng-class='{active:pane.selected}'><a href='javascript:void(0);' ng-class='{activeState:pane.selected}' ng-click='select(pane);ieselect(pane,$index,$event);'>{{pane.listlabel}}</a></li></ul></div><div class='tab-content' ng-transclude></div>"

    };
  });
  app.directive('vmfPaneone', function($timeout) {
    return {
      require: '^vmfTabsone',
      restrict: 'E',
      transclude: true,
      scope: {
        tabno: '@',
        listlabel:'@',
        link:'@'
      },
      link: function(scope, element, attrs, tabsCtrl) {
        tabsCtrl.addPane(scope);
        $timeout(function() {
          $(".vmfTab.vmfTab1 ul").find("li a").eq(0).addClass("activeState");
        });
      },
      template: "<div class='tab-pane' ng-show='selected' ng-transclude></div>"
    };
});

// third navigation

app.directive('vmfTabstwo', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: {
        labelmessage:'@'
      },
      controller: function($scope) {
        
        var panes = $scope.panes = [];
         var currentPane = 0;
        $scope.onKeydown = function(e) {
         
          if(e.keyCode === 37){    //left 37
            var i = 0;
            for(;;){
              if (panes[i].selected) {
                break;
              }else{
                i = i + 1;  
              }
              
        
            }
            
            
            if(i> 0){
              angular.forEach(panes, function(pane) {
                pane.selected = false;
              });
             
             
              $scope.ieselect(panes[i-1]);


            }
            

          }
          if(e.keyCode === 39){    //right 39
            var j = 0;
            for(;;){
              if (panes[j].selected) {
                break;
              }else{
                j = j + 1;  
              }
              
        
            }
            
            if ((j+1) !== panes.length){
              angular.forEach(panes, function(pane) {
                pane.selected = false;
              });
             
              
              $scope.ieselect(panes[j+1]);

            }

            
           
           

          }
          
        };
        $scope.select = function(pane) {
          // console.log('select called');
          // console.log(pane);
          // currentPane = index;
          angular.forEach(panes, function(pane) {
            pane.selected = false;
          });
          pane.selected = true;
        };
        $scope.ieselect = function(pane,currentIndex,curEvent) {
          angular.forEach(panes, function(pane) {
            pane.selected = false;
            $(".tab-content").find("vmf-panetwo[tabno="+pane.tabno+"]").children().hide();
          });
          pane.selected = true;
          
          $(".tab-content").find("vmf-panetwo[tabno="+pane.tabno+"]").children().show();

         // $(".navbar-collapse ul").find("li a").removeClass("activeState");
          //$(".navbar-collapse ul").find("li a").eq(currentIndex).addClass("activeState");
          $(curEvent.target).parents("ul").find("li a").removeClass("activeState");
          $(curEvent.target).addClass("activeState");
        };

        this.addPane = function(pane) {
           $(".tab-content").find("vmf-panetwo").children().hide();
          if (panes.length === 0) {
            $scope.select(pane);
            
          }
          panes.push(pane);
          $.each($(".tab-content"),function(){
            $(this).children().first().children().show();
          });

          
        };
      },

      template: "<div class='  vmfTab2'><span class='tab_head_txt pull-left'>{{labelmessage}}</span><ul class=''><li ng-keyup='onKeydown($event)' ng-repeat='pane in panes' ng-class='{active:pane.selected}'><a href='javascript:void(0);' ng-class='{activeState:pane.selected}' ng-click='select(pane);ieselect(pane,$index,$event);'>{{pane.listlabel}}</a></li></ul></div><div class='tab-content' ng-transclude></div>"

    };
  });
  app.directive('vmfPanetwo', function($timeout) {
    return {
      require: '^vmfTabstwo',
      restrict: 'E',
      transclude: true,
      scope: {
        tabno: '@',
        listlabel:'@',
        link:'@'
      },
      link: function(scope, element, attrs, tabsCtrl) {
        tabsCtrl.addPane(scope);
        $timeout(function() {
          $(".vmfTab2 ul").find("li a").eq(0).addClass("activeState");
        });
      },
      template: "<div class='tab-pane' ng-show='selected' ng-transclude></div>"
    };
});




    app.directive('vmfTextInput', ['$compile', '$document', '$timeout', 
        function($compile, $document, $timeout) {
            return {
                restrict: 'EA',
                scope: {
                    type: '@',
                    optionId: '@',
                    name: '@',
                    title: '@',
                    model: '=',
                    searchCallback: '&',
                    psearchCallback: '=',
                    hint: '@',
                    rows: '@',
                    clearTextLength: '@',
                    searchModel: '=',
                    mandatory: '@',
                    customClass: '=',
                    shortDescription: '@'
                },
                controller: ['$scope',
                    function($scope) {

                        $scope.defaults = {
                            rows: 10,
                            hint: '',
                            clearTextLength: 3

                        };


                        $scope.options = {};
                        
                        if ($scope.rows) {
                            $scope.options.rows = $scope.rows;
                        } else {
                            $scope.options.rows = $scope.defaults.rows;
                        }

                        if ($scope.hint) {
                            $scope.options.hint = $scope.hint;
                        } else {
                            $scope.options.hint = $scope.defaults.hint;
                        }

                        if ($scope.clearTextLength) {
                            $scope.options.clearTextLength = $scope.clearTextLength;
                        } else {
                            $scope.options.clearTextLength = $scope.defaults.clearTextLength;
                        }

                    }
                ],

                link: function(scope, elem, attrs) {
                    var template;

                    var shortDesc;


                    scope.checkDesc = function() {
                        if (scope.shortDescription) {
                            shortDesc = scope.shortDescription;
                        } else {
                            shortDesc = "";
                        }
                        return shortDesc;

                    };

                    if (attrs.type === 'normal') {
                        if (scope.mandatory === 'true') {
                            template = '<div class="formRow"><label class="col-md-3 formLabel"><span class="mandatory">*</span> ' + scope.title + '   <span class="shortDesc">{{ checkDesc()}}</span></label><div class="col-md-4"><input type="text" name="name" ng-model="model" id={{options.optionId}} placeholder={{options.hint}} /></div></div>';
                        } else {
                            template = '<div class="formRow"><label class="col-md-3 formLabel">' + scope.title + '<span class="shortDesc">{{ checkDesc()}}</span></label><div class="col-md-4"><input type="text" id={{options.optionId}} name="name" ng-model="model" placeholder={{options.hint}} /></div></div>';
                        }

                        elem.append(template);
                        if (scope.customClass) {
                            angular.forEach(scope.customClass, function(item) {
                                elem.find(item.selector).addClass(item.cusclass);


                            });
                        }
                        $compile(elem.contents())(scope);

                    } else if (attrs.type === 'password') {
                        
                        if (scope.mandatory === 'true') {
                            template = '<div class="formRow"><label class="col-md-3 formLabel"><span class="mandatory">*</span> ' + scope.title + '</label><div class="col-md-4 placeholderWrap"><input type="password" ng-model="model" id="' + scope.optionId + '" ng-focus="placeholderFocus(this)" ng-blur="placeholderBlur(this)"  /><span class="placeholder" ng-click="placeholderFocusSpan(this)">{{options.hint}}</span></div></div>';
                        } else {
                            template = '<div class="formRow"><label class="col-md-3 formLabel">' + scope.title + '</label><div class="col-md-4 placeholderWrap"><input type="password" id="' + scope.optionId + '" ng-model="model" name="name" ng-focus="placeholderFocus(this)" ng-blur="placeholderBlur(this)" /><span class="placeholder" ng-click="placeholderFocus(this)">{{options.hint}}</span></div></div>';
                        }

                        elem.append(template);
                        if (scope.customClass) {
                            angular.forEach(scope.customClass, function(item) {
                                elem.find(item.selector).addClass(item.cusclass);


                            });
                        }
                        $compile(elem.contents())(scope);

                    } else if (attrs.type === 'search') {
                        template = '<form autocomplete="off" class="searchArea"><input type="text" name="name" ng-model="model" ng-focus="onsearchFocus()" ng-blur="onsearchBlur()" ng-keyup="keyPressSearch($event)" placeholder={{options.hint}} id={{options.optionId}} /><input type="button" class="searchBtn" ng-click="searchAction()"/></form>';
                        elem.append(template);
                        if (scope.customClass) {
                            angular.forEach(scope.customClass, function(item) {
                                elem.find(item.selector).addClass(item.cusclass);


                            });
                        }
                        $compile(elem.contents())(scope);

                        scope.$watch('model', function(n, o) {

                            
                            if (n && n.length >= scope.options.clearTextLength) {
                                elem.find('.searchArea').addClass('active');
                            } else {
                                elem.find('.searchArea').removeClass('active');
                            }

                        });
                    } else if (attrs.type === 'psearch') {

                        template = '<form autocomplete="off" class="searchArea psearch"><input  type="text" ng-model="model" name="name" ng-keyup="keyPressSearch($event)" placeholder={{options.hint}} id={{options.optionId}} /><input type="button" class="searchBtn" ng-click="psearchAction()"/><ul class="searchWrap"><li ng-repeat="item in filteredData = (searchModel | filter:model:comparator)" ng-bind-html="item | highlight:model" ng-click="optionSelect(item)" ng-keyup="optionSelectByKey($event, item)" tabindex="0"></li></ul></form>';
                        elem.append(template);
                        if (scope.customClass) {
                            angular.forEach(scope.customClass, function(item) {
                                elem.find(item.selector).addClass(item.cusclass);


                            });
                        }
                        $compile(elem.contents())(scope);

                        scope.$watch('model', function(n, o) {
                            $timeout(function() {
                                if (n && n.length >= 1) {
                                    elem.find('.searchArea').addClass('active');
                                    if (!scope.empty) {
                                        elem.find('.searchWrap').show();
                                        $(elem[0]).closest('.form-group').addClass('active');
                                    }    
                                } else {
                                    elem.find('.searchArea').removeClass('active');
                                    elem.find('.searchWrap').hide();
                                    $(elem[0]).closest('.form-group').removeClass('active');
                                }
                            });

                        });

                        scope.empty = false;

                        scope.$watchCollection('filteredData', function(n, o) {
                            if (n.length === 0) {
                                scope.empty = true;
                                
                                elem.find('.searchWrap').hide();
                                $(elem[0]).closest('.form-group').removeClass('active');
                            } else {
                                scope.empty = false;
                                
                            }

                        });


                    }


                    scope.searchAction = function() {
                        if (scope.model.length >= scope.options.clearTextLength) {
                            scope.clearText();
                        } else {
                            scope.searchCallback();
                        }
                    };

                    scope.selected = false;

                    scope.psearchAction = function() {
                        if (scope.model.length >= 1 && !scope.selected) {
                            scope.clearText();
                        } else {
                            
                            scope.psearchCallback(elem.find(':text').val());
                            scope.selected = false;
                        }
                    };

                    scope.clearText = function() {
                        
                        elem.find(':text').val('');
                        scope.model = '';
                        elem.find('.searchArea').removeClass('active');
                    };

                    scope.keyPressSearch = function($event) {
                        if ($event.keyCode === 13) {
                            if (scope.type === 'search') {
                                scope.searchCallback();
                            } else {
                                scope.selected = true;
                                scope.psearchAction();
                                elem.find('.searchArea').removeClass('active');
                            }
                        }
                    };


                    scope.optionSelect = function(item) {
                        
                        elem.find(':text').val(item);
                        elem.find('.searchArea').removeClass('active');
                        
                        scope.selected = true;
                    };

                    scope.optionSelectByKey = function($event, item) {
                        

                        if ($event.keyCode === 13) {
                            
                            elem.find(':text').val(item);
                            elem.find('.searchArea').removeClass('active');
                            
                            scope.selected = true;
                        }

                    };
                    scope.onsearchBlur = function() {
                        
                        elem.find('.searchArea').removeClass('active');
                    };
                    
                    scope.onsearchFocus = function() {
                        elem.find('.searchArea').addClass('active');

                    };
                    scope.placeholderFocus = function(target) {
                        
                        $('#' + scope.optionId).closest('.placeholderWrap').find('.placeholder').hide();
                    };
                    scope.placeholderBlur = function(target) {
                        
                        if (scope.model === null || scope.model === "") {
                            $('#' + scope.optionId).closest('.placeholderWrap').find('.placeholder').show();
                        } else {
                            $('#' + scope.optionId).closest('.placeholderWrap').find('.placeholder').hide();
                        }
                    };

                    scope.placeholderFocusSpan = function() {

                        $('#' + scope.optionId).closest('.placeholderWrap').find('.placeholder').hide();
                        $('#' + scope.optionId).focus();

                    };

                    $document.on('click', function() {
                        
                        elem.find('.psearch').removeClass('active');
                        elem.find('.searchWrap').hide();
                        $(elem[0]).closest('.form-group').removeClass('active');

                    });

                    scope.comparator = function(actual, expected) {
                        var actualWords = actual.split(' ');
                        var expectedWords = expected.split(' ');
                        
                        var i, j;

                        var match = true;

                        for (i = 0; i < expectedWords.length; i++) {
                            expectedWords[i] = expectedWords[i].toLowerCase();
                        
                        }

                        for (j = 0; j < actualWords.length; j++) {
                            actualWords[j] = actualWords[j].toLowerCase();
                        }

                        
                        var startingIndex = 0;
                        for (i = 0; i < expectedWords.length; i++) {
                            var found = false;

                            for (j = startingIndex; j < actualWords.length; j++) {
                                
                                if (actualWords[j].indexOf(expectedWords[i]) !== -1) {
                                    found = true;
                                    startingIndex = j + 1;
                                    break;
                                }
                            }

                            if (!found) {
                                return false;
                            }

                        }

                        return true;
                    };

                }

            };
        }
    ])
        .filter('highlight', function() {
            return function(text, phrases) {

                /* returns position of ith occurrence of m in str */
                var getPosition = function(str, m, i) {
                    return str.split(m, i).join(m).length;
                };


                if (phrases) {
                    phrases = phrases.split(' ');

                    angular.forEach(phrases, function(phrase, index) {

                        /* word boundary */
                        var splitIndex = getPosition(text, ' ', index);


                        if (splitIndex !== 0) {
                            var subText = text.substring(splitIndex + 1).replace('<span>', '', 'gi');
                            subText = subText.replace('</span>', '', 'gi');
                            text = text.substring(0, splitIndex + 1) + subText.replace(new RegExp('(' + phrase + ')', 'gi'), '<span>$1</span>');

                        } else {
                            text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span>$1</span>');

                        }

                    });

                }

                text = '<a href="javascript: void(0);" tabindex="-1">' + text + '</a>';
                return text;
            };
        });
app.directive('vmfUtility', ['$compile', function ($compile) {
    return {
        restrict: 'A',
        replace: true,
        scope: {
            country: '@',
            countryhint: '@',
            list: '=',
            searchhint: '@'
        },
        link: function (scope, elem, attrs) {

            var template = '<div class="page-eyebrow"><div class="max-width">' +
                '<a href="javascript:void(0)" class="menu-link menu-link-eyebrow menu-link-quick" ng-click="toggleCustom()">Quick Links</a> <div id="menu-quick" class="menu menu-eyebrow"><ul>';
            var index;
            if (typeof scope.list[0] === 'object') {
                for ( index = 0; index < scope.list.length; index++) {
                    template += '<li><a class="menu-item-quick" href="javasript:void(0)" title="' + scope.list[index].text + '" >' + scope.list[index].text + '</a></li>';
                    
                }
            } else {
                for (index = 0; index < scope.list.length; index++) {
                    template += '<li><a class="menu-item-quick" href="javasript:void(0)" title="' + scope.list[index] + '" >' + scope.list[index] + '</a></li>';
                    
                }
            }
            template += '</ul><div class="menu-item-country"><a class="menu-item-quick" href="javascript:void(0)" title="{{countryhint}}">' +
            '<span class="icon icon-usa"></span>  {{country}}</a></div></div>';

            template += '<div id="menu-search" class="menu"><div class="flexsearch"><div class="flexsearch--wrapper">' +
            '<form id="globalsearch" class="flexsearch--form" method="get" name="frmSearchGLOBAL" action="">' +
            '<div class="flexsearch--input-wrapper"><input type="search" name="q" class="flexsearch--input" placeholder="{{searchhint}}"/></div>' +
            '<input type="submit" value="Submit" class="flexsearch--submit"></form></div></div></div>';
            template += '</div></div>';

            elem.append(template);
            scope.toggleCustom = function () {
                elem.find(".menu-link-quick").toggleClass("is-active");
                elem.find(".menu-eyebrow").toggleClass("is-active");
                elem.find("#menu-quick").toggleClass("toggle_menu_quick");
            };
            $compile(elem.contents())(scope);
        }
    };
}]);



app.directive('checkStrength', function() {
    return {
        replace: false,
        restrict: 'EACM',
        link: function(scope, iElement, iAttrs) {
            var strength = {
                colors: ['#CC0000', '#FF8000', '#AED900', '#00B22D'],
                mesureStrength: function(p) {
                    // return the evaluated strength of the password
               
                    var _force = 0;                    
                    var _regex = /[@$-:-?{-~!"^_`\[\]]/g;

                    var _lowerLetters = /[a-z]+/.test(p);                    
                    var _upperLetters = /[A-Z]+/.test(p);
                    var _numbers = /[0-9]+/.test(p);
                    var _symbols = _regex.test(p);
                                          
                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];                    
                    var _passedMatches = $.grep(_flags, function (el) { return el === true; }).length;                                          
                    
                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);
                    _force += _passedMatches * 10;
                        
                    // penality (short password)
                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;                                      
                    // penality (poor variety of characters)
                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;
                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;
                    _force = (_passedMatches === 3) ? Math.min(_force, 30) : _force;
                    _force = (_passedMatches === 4) ? Math.min(_force, 40) : _force;
                    
                    return _force;
                },
                getColor: function(s) {
                    var idx = 0;
                    if (s <= 10) {
                        idx = 0;
                    } else if (s <= 20) {
                        idx = 1;
                    } else if (s <= 30) {
                        idx = 2;
                    } else if (s <= 40) {
                        idx = 3;
                    } else {
                      idx = 3;
                    } 
                    return {
                        idx: idx + 1,
                        col: this.colors[idx]
                    };
                }
            };

            scope.$watch(iAttrs.checkStrength, function() {

                
                if (scope.pw === '') { 
                    iElement.children('li').css({"background": "#ccc"});
                    iElement.parent(".strengthContainer").children("#strSubHead").text("Password strength");
                } 
                else {
                    var strength1;
                    strength1 = strength.mesureStrength(scope.pw);
                    var c = strength.getColor(strength1);                    
               
                    iElement.children('li').css({"background":
                    "#ccc"}).slice(0, c.idx).css({"background-color": c.col});
                    var strSubHead=iElement.parent(".strengthContainer").children("#strSubHead");
                    switch(c.col)   {
                        case "#CC0000":  
                            strSubHead.text("Too short");
                            break;
                        case "#FF8000":  
                            strSubHead.text("Weak");
                            break;
                        case "#AED900":  
                            strSubHead.text("Good");
                            break;
                        case "#00B22D":  
                            strSubHead.text("Strong");
                            break;
                        default:  
                            break;
                    }
                }
            });
        },
        template: '<li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li>'
    };
});
/*Action Bar controller code*/
app.controller("actionBarCtrl",['$scope',function($scope){
    $scope.actionBar = 'sample';  
	$scope.actionBarlist = [ 
        {'name': 'Manage License Keys', 'icon': 'icon_license_keys.png','notification': 1},
        {'name': 'Get Support', 'icon': 'icon_get_support.png','notification': 0 },
        {'name': 'View notifications', 'icon': 'alerts_icon.png','notification': 3},
        {'name': 'Manage Users & Permissions', 'icon': 'users_icon.png','notification': 0},
        {'name': 'Subscription Services', 'icon': 'subscription_services_icon.png','notification': 0}
    ];

    }
]);
/* AdUnits Controller */
app.controller('adUnitController', ["$scope", function($scope) {
    
    /* Primary Ad-Unit */
    $scope.primary = {
        company: "VMware",
        productName: "PLAYER",
        productSplName: "PLUS",
        versionNumber: "6",
        cost: "$99.99",
        labelBuy: "BUY",
        buyThisInfo: "Buy PLAYER 6 PLUS today",
        upgradeInfo: "Get PLAYER 7 PRO FREE in December"
    };

    /* Promo Ad Unit with expiration date */
    $scope.expiry = {
        offAmount: "Get $200",
        offLabel: "off",
        productName: "For using object storage",
        btnApply: "Apply Now",
        applyByDate: "Apply by July, 15, 2014"
    };

    /*  Secondary Ad unit display */
    $scope.secondaryList = [{
            heading: "Sign up for",
            subHeading: "VMware Vcloud Air Disaster Recovery",
            bulletList: [{
                type: "blue",
                info: "Protect your data in case of emergency"
            }]
        },

        {
            heading: "Sign up for",
            bulletList: [{
                type: "blue",
                info: "Extend your cloud network power"
            }, {
                type: "green",
                info: "Get 90 days free Horizon DaaS"
            }]
        }
    ];

    /* Third Ad unit display */
    $scope.tertiary = {
        heading: "Featured Free Trials",
        listItems: [{
            type: "text",
            info: "Protect your data in case of emergency"
        }, {
            type: "link",
            url: "#abc",
            info: "VMware Horizon Suite"
        }, {
            type: "link",
            url: "#123",
            info: "VMware Operation Management"
        }, {
            type: "link",
            url: "#test3",
            info: "VMware vSphere Data Protection Advanced"
        }],
        btnViewAll: "View All"
    };

    /* buyupgrade Ad-unit */
    $scope.buyUpgrade = {
        company: "VMware",
        productName: "Workstation",
        versionNumber: "10",
        buyThisInfo: "Buy Workstation 10 today.",
        upgradeInfo: "Get Workstation 11 <i>FREE</i> in December",
        btnBuy: "Buy",
        btnUpgrade: "Upgrade"
    };


    /* SID Promotion Ad-unit */
    $scope.sidPromotion = {
        costOff: "300 Off",
        productName: "for Object Storage",
        expiryDate: "Expires on 2014-10-23",
        btnApply: "Apply"
    };


    /* SID Promotion Applied Ad-unit */
/*    $scope.sidPromotionApplied = {
        promotionName: "2014OSBETA",
        appliedSuccessfully: "has been applied",
        startUsing: "Start using today",
        expiryDate: "Expires on 2014-10-23"
    };*/

    /* SID Promotion Applied Ad-unit */
    $scope.modalWindow = {
        modalTitle: "You've got promos!",
        viewPromotionPage: "View Promotions page",
        btnClose: "Close"
    };

    $scope.isAdUnitModalDisplayed = false;

    $scope.showAdUnitModal = function() {
        $scope.isAdUnitModalDisplayed = true;
        $scope.modalWindow.dispModal = true;
    };

    $scope.cancelAdUnitModal = function() {
        $scope.isAdUnitModalDisplayed = false;
    };



}]);
/*app.controller("backlinkController",["$scope",function($scope){
    $scope.toLink = "http://google.com";
    $scope.toTitle = "google";
}]);*/


app.controller("breadCrumbCtrl",['$scope',
function($scope){

$scope.breadcrumbName = 'sample';

$scope.breadcrumbTitle = "vmf-breadCrumb";
    $scope.breadcrumbPath = [{'text': 'home'},
                            {'text': 'Support', 'url':'/home/support' },
                            {'text': 'support Contacts', 'url': '/home/support/supportcontacts'}];

}
]);

/*Action/Command Button controller code*/
app.controller('actionBtnCtrl', ['$scope',
    function($scope) {
        $scope.btnText = 'Actions';
        $scope.btnsize = null;
        $scope.btnContext = 'action';
        $scope.btnType = 'primary';
        $scope.actionClicked = function() {
            console.log("Link Clicked");
        };
        $scope.clickCallback = function(){
        	console.log('handle click callback');
        }
    }
]);
/* breadcrumb controller */

app.controller("breadCrumbCtrl",['$scope',function($scope){
		$scope.breadcrumbName = 'sample';
		$scope.breadcrumbTitle = "vmf-breadCrumb";
		$scope.breadcrumbPath = [{'text': 'home'},
	                            {'text': 'Support', 'url':'/home/support' },
	                            {'text': 'support Contacts', 'url': '/home/support/supportcontacts'}];
}]);
/* Calendar Controller */

app.controller("calendarCtrl", ['$scope',function($scope) {
	$scope.historic = "15/03/2015"; // dd/mm/yyyy
	$scope.startdate = "01/01/1990";
	$scope.enddate = "31/12/2090";
	$scope.startyear = "1990";
	$scope.endyear = "2020";
}]);
/*coachmarks controllers*/
app.controller("coachmarksCtrl", function($scope){
            $scope.config = {
                    "isCoachMarksDisplay":true,
                    "closeOnEscape":true,
                    "clickAnyWhereClose":false,
                    "coachMarksItems":[{
                                        "domReference":".mainlistItem",
                                        "title":"Main Menu Items",
                                        "description":"Lorem ipsum dolor sit amet, qui cu hinc tincidunt. Vel gubergren liberavisse te, pro ut invenire intellegam.",
                                        "descPosition": "left",
                                        "seqOrder":"2"
                                        },{"domReference":"#navMenuMobile",
                                        "title":"Main Menu Items",
                                        "description":"Lorem ipsum dolor sit amet, qui cu hinc tincidunt. Vel gubergren liberavisse te, pro ut invenire intellegam.",
                                        "descPosition": "left",
                                        "seqOrder":"2"
                                        },{
                                        "domReference":"#screenTitle",
                                        "title":"Screen Title",
                                        "description":"Lorem ipsum dolor sit amet, qui cu hinc tincidunt. Vel gubergren liberavisse te, pro ut invenire intellegam. Lorem ipsum dolor sit amet, qui cu hinc tincidunt. Vel gubergren liberavisse te, pro ut invenire intellegam.",
                                        "descPosition": "bottom",
                                        "seqOrder":"3"
                                        },{
                                        "domReference":".vmf-GridProducts",
                                        "title":"Featured Product Section",
                                        "description":"Lorem ipsum dolor sit amet, qui cu hinc tincidunt. Vel gubergren liberavisse te, pro ut invenire intellegam. Lorem ipsum dolor sit amet, qui cu hinc tincidunt. Vel gubergren liberavisse te, pro ut invenire intellegam.",
                                        "descPosition": "right",
                                        "seqOrder":"4"
                                        },{
                                        "domReference":".vware-logo",
                                        "title":"VMWare logo",
                                        "description":"Lorem ipsum dolor sit amet, qui cu hinc tincidunt. Vel gubergren liberavisse te, pro ut invenire intellegam. Lorem ipsum dolor sit amet, qui cu hinc tincidunt. Vel gubergren liberavisse te, pro ut invenire intellegam.",
                                        "descPosition": "down",
                                        "seqOrder":"1"
                                        }]
            };
});
/* combo box Controller */

app.controller('comboBoxCtrl', ['$scope',
    function($scope) {
        $scope.option;
        $scope.option2;
        $scope.list = ['vCenter Operations for View', 'vCenter Operations Manager vCenter Operations Manager', 'vCloud Automation center', 'vFabric Data Director', 'vSphere', 'vSphere ESX and ESXi', 'vSphere Hypervisor', 'vCloud Suite', 'vCloud Connector', 'vCenter Patching esx', 'vCenter Patching host', 'vCenter Patching manager'];
        
    }
]);
/* file uploader  controller*/

app.controller('fileUploadCtrl', ['$scope',
function($scope) {

	$scope.title = "Upload Attachments";
	$scope.options = {
		ftpUrl : "http://www.google.com",
		fileUploadScriptUrl : "/api/uploadFile",
		removeFileUrl : "api/deleteFile"
	};
	$scope.minSpeed = 100;//KB/s;
}]);


/* First run experience controller*/
app.controller('firstrunexperienceCtrl', ['$scope',
    function($scope, $modal) {
        $scope.freShown = false;
        $scope.checkBoxOptions = [{
            'value': '1',
            'text': 'Dont show me again',
            'disabled': false,
            'checked': false
        }];
        //json data for the content(image url, header of the text and content text)
        //Content text is assumed to have html tags for formatting.
        $scope.images = [{
            "url" : "./images/freimages/step1.png",
            "title" : "First Run Experience 1",
            "textVal":""
        },{
            "url" : "./images/freimages/step2.png",
            "title" : "First Run Experience 2",
            "contentheader": "HomePage",
            "textVal":"View a dashboard summary of opportunities based on contract expiration date and renewal status, as well as your company performance for current as well as historical quarters. Use the search feature to locate a specific customer and a contract, or jump-start various requests using quick links."
        },{
            "url" : "./images/freimages/step3.png",
            "title" : "First Run Experience 3",
            "contentheader" : "Find Opportunities Page",
            "textVal": 'View a list of renewal opportunities organized by contract and by customer.<br/><br/>' +
                        '"By Contract" view allows you to:<br/>' +
                        '<p class="paddedText20">•   search contracts based on expiration date <br/></p>' +
                        '<p class="paddedText20">•   search for and download quotes for multiple contracts at once<br/></p>' +
                        '<p class="paddedText20">•   request or download a quote quickly for a particular contract<br/></p>' +
                        '<p class="paddedText20">•   filter the data by renewal status and location<br/><br/></p>' +
                        '"By Customer" view allows you to:<br/>' +
                        '<p class="paddedText20">•   search for targeted customers based on their contract expiration date and renewal statuses<br/></p>'+
                        '<p class="paddedText20">•   request multiple IB reports at once<br/></p>' +
                        '<p class="paddedText20">•   navigate to the EA Details page to learn more about a customer</p>'
},{
            "url" : "./images/freimages/step4.png",
            "title" : "First Run Experience 4",
            "contentheader" : "Customer Details Page",
            "textVal":'This gives you a comprehensive view of a particular customer, including:<br/></p>'+
                        '<p class="paddedText20">•   Procurement and Super User contact of the customer <br/></p>'+
                        '<p class="paddedText20">•   All of the customer’s contracts <br/></p>' +
                        '<p class="paddedText20">•   Available quotes, relevant requests, and details of each contract<br/> </p>' +
                        '<p class="paddedText20">•   Cross-sell/Up-sell opportunities and talking points <br/></p>' +
                        'This view is best used for quickly requesting a consolidated quote for multiple contracts within the same customer account. IB Report can be requested from this EA Details page.<br/>'+

                        '<br/><br/>Making a Request<br/><br/>'+
                        'You can request the following:<br/>'+
                        '<p class="paddedText20">•   single or consolidated contract quotes <br/></p>'+
                        '<p class="paddedText20">•   IB Reports <br/></p>'+
                        '<p class="paddedText20">•   quote revisions <br/></p>'+
                        'VMware automatically searches for available quotes when you make a quote request. If available, you can either download it or make a quote revision request if needed.<br/>'+
                        'You can also click on the New Request link on the top navigation and manually enter the contract or EA number to make a new request.<br/>'
        },{
            "url" : "./images/freimages/step5.png",
            "title" : "First Run Experience 5",
            "textVal":""
        },{
            "url" : "./images/freimages/step6.png",
            "title" : "First Run Experience 6",
            "textVal":""
        }];


        
    }
]);
/*Folder Tree controller code*/
app.controller("folderTreeController", ["$scope",
    function($scope) {

        $scope.rootName1 = {
            'value': '2',
            'text': 'License Folders',
            'disabled': false,
            'checked': false
        };

        $scope.rootName2 = {
            'value': '2',
            'text': 'License Folders2',
            'disabled': false,
            'checked': false
        };

        $scope.folderStructure2 = {
            "folderContent": [{
                    "status": "INACTIVE",
                    "folderType": "ROOT",
                    "fullFolderPath": "HOME1",
                    "rootFolderId": 0,
                    "folderId": "1000",
                    "folderName": "HOME1",
                    "parentFolderId": "0",
                    "folderLevel": 1,
                    "folderAccess": "NONE",
                    "isLeaf": false,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Home vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME1\\African Region1",
                    "rootFolderId": 0,
                    "folderId": "1001",
                    "folderName": "African Region1",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'African Region vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Business Testing2",
                    "rootFolderId": 0,
                    "folderId": "1002",
                    "folderName": "Business Testing2",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Business Testing vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\HORIZON VIEW2",
                    "rootFolderId": 0,
                    "folderId": "1003",
                    "folderName": "HORIZON VIEW2",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'HORIZON VIEW vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "INACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Human Resources",
                    "rootFolderId": 0,
                    "folderId": "1004",
                    "folderName": "Human Resources",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Human Resources vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys",
                    "rootFolderId": 0,
                    "folderId": "1005",
                    "folderName": "Jasons Keys",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Jasons Keys vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing",
                    "rootFolderId": 0,
                    "folderId": "1006",
                    "folderName": "Marketing",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Marketing vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder",
                    "rootFolderId": 0,
                    "folderId": "1007",
                    "folderName": "VMworld test folder",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region1\\Sub-African Region 1",
                    "rootFolderId": 0,
                    "folderId": "1008",
                    "folderName": "Sub-African Region 1",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region1\\Sub-African Region 2",
                    "rootFolderId": 0,
                    "folderId": "1009",
                    "folderName": "Sub-African Region 2",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region1\\Sub-African Region 3",
                    "rootFolderId": 0,
                    "folderId": "1010",
                    "folderName": "Sub-African Region 3",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 1",
                    "rootFolderId": 0,
                    "folderId": "1011",
                    "folderName": "Test Folder 1",
                    "parentFolderId": "1005",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2",
                    "rootFolderId": 0,
                    "folderId": "1012",
                    "folderName": "Test Folder 2",
                    "parentFolderId": "1005",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder",
                    "rootFolderId": 0,
                    "folderId": "1013",
                    "folderName": "Test Sub Folder",
                    "parentFolderId": "1012",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "INACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder\\Test Sub Folder 1",
                    "rootFolderId": 0,
                    "folderId": "1014",
                    "folderName": "Test Sub Folder 1",
                    "parentFolderId": "1013",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder\\Test Sub Folder 2",
                    "rootFolderId": 0,
                    "folderId": "1015",
                    "folderName": "Test Sub Folder 2",
                    "parentFolderId": "1013",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 1",
                    "rootFolderId": 0,
                    "folderId": "1016",
                    "folderName": "Sub-Marketing 1",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 2",
                    "rootFolderId": 0,
                    "folderId": "1017",
                    "folderName": "Sub-Marketing 2",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 3",
                    "rootFolderId": 0,
                    "folderId": "1018",
                    "folderName": "Sub-Marketing 3",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 1",
                    "rootFolderId": 0,
                    "folderId": "1019",
                    "folderName": "Sub-Sub-VMworld test folder 1",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 2",
                    "rootFolderId": 0,
                    "folderId": "1020",
                    "folderName": "Sub-Sub-VMworld test folder 2",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 3",
                    "rootFolderId": 0,
                    "folderId": "1021",
                    "folderName": "Sub-Sub-VMworld test folder 3",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }

            ]
        };

        $scope.folderStructure = {
            "folderContent": [{
                    "status": "INACTIVE",
                    "folderType": "ROOT",
                    "fullFolderPath": "HOME",
                    "rootFolderId": 0,
                    "folderId": "1000",
                    "folderName": "HOME",
                    "parentFolderId": "0",
                    "folderLevel": 1,
                    "folderAccess": "NONE",
                    "isLeaf": false,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Home vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region",
                    "rootFolderId": 0,
                    "folderId": "1001",
                    "folderName": "African Region",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'African Region vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Business Testing",
                    "rootFolderId": 0,
                    "folderId": "1002",
                    "folderName": "Business Testing",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Business Testing vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\HORIZON VIEW",
                    "rootFolderId": 0,
                    "folderId": "1003",
                    "folderName": "HORIZON VIEW",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'HORIZON VIEW vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "INACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Human Resources",
                    "rootFolderId": 0,
                    "folderId": "1004",
                    "folderName": "Human Resources",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Human Resources vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys",
                    "rootFolderId": 0,
                    "folderId": "1005",
                    "folderName": "Jasons Keys",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Jasons Keys vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing",
                    "rootFolderId": 0,
                    "folderId": "1006",
                    "folderName": "Marketing",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Marketing vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder",
                    "rootFolderId": 0,
                    "folderId": "1007",
                    "folderName": "VMworld test folder",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region\\Sub-African Region 1",
                    "rootFolderId": 0,
                    "folderId": "1008",
                    "folderName": "Sub-African Region 1",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region\\Sub-African Region 2",
                    "rootFolderId": 0,
                    "folderId": "1009",
                    "folderName": "Sub-African Region 2",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region\\Sub-African Region 3",
                    "rootFolderId": 0,
                    "folderId": "1010",
                    "folderName": "Sub-African Region 3",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 1",
                    "rootFolderId": 0,
                    "folderId": "1011",
                    "folderName": "Test Folder 1",
                    "parentFolderId": "1005",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2",
                    "rootFolderId": 0,
                    "folderId": "1012",
                    "folderName": "Test Folder 2",
                    "parentFolderId": "1005",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder",
                    "rootFolderId": 0,
                    "folderId": "1013",
                    "folderName": "Test Sub Folder",
                    "parentFolderId": "1012",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "INACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder\\Test Sub Folder 1",
                    "rootFolderId": 0,
                    "folderId": "1014",
                    "folderName": "Test Sub Folder 1",
                    "parentFolderId": "1013",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder\\Test Sub Folder 2",
                    "rootFolderId": 0,
                    "folderId": "1015",
                    "folderName": "Test Sub Folder 2",
                    "parentFolderId": "1013",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 1",
                    "rootFolderId": 0,
                    "folderId": "1016",
                    "folderName": "Sub-Marketing 1",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 2",
                    "rootFolderId": 0,
                    "folderId": "1017",
                    "folderName": "Sub-Marketing 2",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 3",
                    "rootFolderId": 0,
                    "folderId": "1018",
                    "folderName": "Sub-Marketing 3",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 1",
                    "rootFolderId": 0,
                    "folderId": "1019",
                    "folderName": "Sub-Sub-VMworld test folder 1",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 2",
                    "rootFolderId": 0,
                    "folderId": "1020",
                    "folderName": "Sub-Sub-VMworld test folder 2",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 3",
                    "rootFolderId": 0,
                    "folderId": "1021",
                    "folderName": "Sub-Sub-VMworld test folder 3",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ]
                }

            ]
        };
    }
]);

app.service('folderDataService', [function() {

    this.allFolders = [];
}]);

/*Form Elements controller code*/


app.controller('FormElementsController', ["$scope", "ModalService", function ($scope, ModalService) {
    $scope.historic = "15/03/2015";
    $scope.startyear = "1990";
    $scope.endyear = "2020";
    $scope.user = {};
    $scope.user.firstName;
    $scope.user.lastName;
    $scope.user.email;
    $scope.user.company;
    $scope.country;
    $scope.state;
    $scope.postalCode;
    $scope.city;
    $scope.jobTitle;
    $scope.businessPhone;
    $scope.extention;
    $scope.user.duns;
    $scope.user.phone;
    $scope.user.confirm_password;
    $scope.user.password;
    $scope.user.revenue;
    $scope.user.revenue2;
    $scope.user.checkBoxModel1 = false;
    $scope.user.checkBoxModel2 = false;

    $scope.yearsEstabished = [{
            'value': 2000,
            'text': '2000'
        }, {
            'value': 2001,
            'text': '2001'
        }, {
            'value': 2001,
            'text': '2001'
        }, {
            'value': 2001,
            'text': '2001'
        }, {
            'value': 2001,
            'text': '2001'
        }, {
            'value': 2001,
            'text': '2001'
        }, {
            'value': 2001,
            'text': '2001'
        }
    
     ];
    $scope.countryObj = [{
        'value': 'Australia',
        'text': 'Australia'
    }, {
        'value': 'Bangladesh',
        'text': 'Bangladesh'
    }, {
        'value': 'Canada',
        'text': 'Canada'
    }, {
        'value': 'China',
        'text': 'China'
    }, {
        'value': 'Colombia',
        'text': 'Colombia'
    }, {
        'value': 'Cuba',
        'text': 'Cuba'
    }, {
        'value': 'Denmark',
        'text': 'Denmark'
    }, {
        'value': 'Egypt',
        'text': 'Egypt'
    }, {
        'value': 'France',
        'text': 'France'
    }, {
        'value': 'Georgia',
        'text': 'Georgia'
    }, {
        'value': 'Greece',
        'text': 'Greece'
    }, {
        'value': 'Hong Kong',
        'text': 'Hong Kong'
    }, {
        'value': 'India',
        'text': 'India'
    }, {
        'value': 'Italy',
        'text': 'Italy'
    }, {
        'value': 'Japan',
        'text': 'Japan'
    }, {
        'value': 'Kenya',
        'text': 'Kenya'
    }, {
        'value': 'Kuwait',
        'text': 'Kuwait'
    }, {
        'value': 'Libya',
        'text': 'Libya'
    }, {
        'value': 'Malaysia',
        'text': 'Malaysia'
    }, {
        'value': 'Mexico',
        'text': 'Mexico'
    }, {
        'value': 'Nepal',
        'text': 'Nepal'
    }, {
        'value': 'New Zealand',
        'text': 'New Zealand'
    }, {
        'value': 'Russia',
        'text': 'Russia'
    }, {
        'value': 'Singapore',
        'text': 'Singapore'
    }, {
        'value': 'Switzerland',
        'text': 'Switzerland'
    }, {
        'value': 'United Kingdom',
        'text': 'United Kingdom'
    }];

    $scope.statesObj = [{
        "value": "AL",
        "text": "Alabama"
    }, {
        "value": "AK",
        "text": "Alaska"
    }, {
        "value": "AS",
        "text": "American Samoa"
    }, {
        "value": "AZ",
        "text": "Arizona"
    }, {
        "value": "AR",
        "text": "Arkansas"
    }, {
        "value": "CA",
        "text": "California"
    }, {
        "value": "CO",
        "text": "Colorado"
    }, {
        "value": "CT",
        "text": "Connecticut"
    }, {
        "value": "DE",
        "text": "Delaware"
    }, {
        "value": "DC",
        "text": "District Of Columbia"
    }, {
        "value": "FM",
        "text": "Federated States Of Micronesia"
    }, {
        "value": "FL",
        "text": "Florida"
    }, {
        "value": "GA",
        "text": "Georgia"
    }, {
        "value": "GU",
        "text": "Guam"
    }, {
        "value": "HI",
        "text": "Hawaii"
    }, {
        "value": "ID",
        "text": "Idaho"
    }, {
        "value": "IL",
        "text": "Illinois"
    }, {
        "value": "IN",
        "text": "Indiana"
    }, {
        "value": "IA",
        "text": "Iowa"
    }, {
        "value": "KS",
        "text": "Kansas"
    }];

    $scope.defaultOptions = {
        skin: 'dark',
        position: "right",
        radius: true,
        size: 'large',
        hideDelay: 500,
        showOn: 'mouseover',
        hideOn: 'mouseleave',
        maxWidth: "180",
        close: false,
        customClass: "tempClass",
        offsetX: 0,
        offsetY: 0
    };

    $scope.checkBoxOptions = [{
            'value': '1',
            'text': 'Checked',
            'disabled': false,
            'checked': true
        }, {
            'value': '2',
            'text': 'Unchecked <span class="toolTip-icon vmf-tooltip" vmf-tooltip tooltip-options="{\'position\':\'right\',\'text\':\'<h5>Total Revenue</h5> Lorem ipsum dolor sit amet aconsecteututur ullem elit, sed Lorem ipsum dolor sit amet aconsecteututur ullem elit, sed\'}"></span>', 
            'disabled': false,
            'checked': false
        }, {
            'value': '3',
            'text': 'Checked Disabled',
            'disabled': true,
            'checked': true
        }, {
            'value': '4',
            'text': 'Unchecked Disabled',
            'disabled': true,
            'checked': false
        } ];

    $scope.checkBoxName = 'options';

    $scope.checkBoxTitle = "Virtualization Initiatives";

    $scope.checkBoxOptions2 = [{
        'value': '1',
        'text': 'I agree to the terms and conditions outlined in the <a href="#" ng-click="invoke(\'formAgreement\',$event)" class="vmfModal">VMware vCenter Server End-User License Agreement</a>',
        'disabled': false,
        'checked': false
        },
        {
        'value': '2',
        'text': 'Yes, I would like to recieve email communications related to VMware including newsletters and invitation-only events. I understand that any information I provide will be treated in accoedance with the VMware <a href="#" ng-click="invoke(\'privacyPolicy\',$event)" class="vmfModal">Privacy Policy</a>.',
        'disabled': false,
        'checked': false
        }                      
        ];

    $scope.checkBoxName2 = 'options';
    $scope.customclass = [{
        "selector": ".labelHeader",
        "cusclass": "check1"

    }, {
        "selector": ".labelHeader",
        "cusclass": "check2"


    }];

    $scope.radioTitle = "Your Role";

    $scope.radioOptions = [{
        'value': '1',
        'text': 'Primary Business Contact',
        'disabled': false,
        'checked': false
    }, {
        'value': '2',
        'text': 'Primary Technical Contact',
        'disabled': false,
        'checked': false
    }, {
        'value': '3',
        'text': 'Primary Procurement Contact',
        'disabled': false,
        'checked': true
    }];

    $scope.radioName = 'role';

    $scope.radioModel = '3';


    $scope.user.psearchCallback = function (val) {
        //use val for search input not $scope.psearch
        console.log('predictive search callback');
        console.log('search value');
        console.log(val);
    };

    $scope.data = {};
    $scope.data.list = ['vSphere 4', 'vSphere 5', 'vSphere with Operations'];
    $scope.customclass = [{
        "selector": ".formRow",
        "cusclass": "check1"

    }, {
        "selector": ".formRow",
        "cusclass": "check2"


    }];


    $scope.formAgreement = function(e) {

            ModalService.showModal({
                templateUrl: 'dev/modules/formRegistration/template/agreement.html',
                controller: "registarionCtrl"
            }).then(function(modal) {
                modal.element.modal();
            });


        };

    $scope.privacyPolicy = function (e) {

        console.log('hello');

        ModalService.showModal({
            templateUrl: 'dev/modules/formRegistration/template/privacyPolicy.html',
            controller: "registarionCtrl"
        }).then(function (modal) {
            modal.element.modal();
        });


    };

    $scope.$on('invoke', function (evt, data) {
        $scope[data.method](data.evt);
    });


}]);

app.controller("registarionCtrl", ["$scope", function ($scope) {

    $scope.okModal = function () {
        console.log('okModal');
    };
    $scope.print = function () {
        console.log('print');
    };
}]);
/*Form Templates controller code*/
app.controller('formTemplateController', function($scope) {
    $scope.user = {};
    $scope.user.firstName;
    $scope.user.lastName;
    $scope.user.psearch;
    $scope.user.email;
    $scope.user.company;
    $scope.user.country;
    $scope.user.state;
    $scope.user.postalCode;
    $scope.user.city;
    $scope.user.jobTitle;
    $scope.user.businessPhone;
    $scope.user.extention;
    $scope.user.globalvalue;
    $scope.user.radioModel = '3';
    $scope.user.checkBoxModel = null;
    $scope.user.textarea = null;
    $scope.user.checkBoxModel2 = null;
    
    $scope.globalObj = [{
        'value': 'Australia',
        'text': 'Australia'
    }, {
        'value': 'Bangladesh',
        'text': 'Bangladesh'
    }, {
        'value': 'Canada',
        'text': 'Canada'
    }, {
        'value': 'China',
        'text': 'China'
    }, {
        'value': 'Colombia',
        'text': 'Colombia'
    }, {
        'value': 'Cuba',
        'text': 'Cuba'
    }, {
        'value': 'Denmark',
        'text': 'Denmark'
    }, {
        'value': 'Egypt',
        'text': 'Egypt'
    }, {
        'value': 'France',
        'text': 'France'
    }, {
        'value': 'Georgia',
        'text': 'Georgia'
    }, {
        'value': 'Greece',
        'text': 'Greece'
    }, {
        'value': 'Hong Kong',
        'text': 'Hong Kong'
    }, {
        'value': 'India',
        'text': 'India'
    }, {
        'value': 'Italy',
        'text': 'Italy'
    }, {
        'value': 'Japan',
        'text': 'Japan'
    }, {
        'value': 'Kenya',
        'text': 'Kenya'
    }, {
        'value': 'Kuwait',
        'text': 'Kuwait'
    }, {
        'value': 'Libya',
        'text': 'Libya'
    }, {
        'value': 'Malaysia',
        'text': 'Malaysia'
    }, {
        'value': 'Mexico',
        'text': 'Mexico'
    }, {
        'value': 'Nepal',
        'text': 'Nepal'
    }, {
        'value': 'New Zealand',
        'text': 'New Zealand'
    }, {
        'value': 'Russia',
        'text': 'Russia'
    }, {
        'value': 'Singapore',
        'text': 'Singapore'
    }, {
        'value': 'Switzerland',
        'text': 'Switzerland'
    }, {
        'value': 'United Kingdom',
        'text': 'United Kingdom'
    }];

    $scope.statesObj = [{
        "value": "AL",
        "text": "Alabama"
    }, {
        "value": "AK",
        "text": "Alaska"
    }, {
        "value": "AS",
        "text": "American Samoa"
    }, {
        "value": "AZ",
        "text": "Arizona"
    }, {
        "value": "AR",
        "text": "Arkansas"
    }, {
        "value": "CA",
        "text": "California"
    }, {
        "value": "CO",
        "text": "Colorado"
    }, {
        "value": "CT",
        "text": "Connecticut"
    }, {
        "value": "DE",
        "text": "Delaware"
    }, {
        "value": "DC",
        "text": "District Of Columbia"
    }, {
        "value": "FM",
        "text": "Federated States Of Micronesia"
    }, {
        "value": "FL",
        "text": "Florida"
    }, {
        "value": "GA",
        "text": "Georgia"
    }, {
        "value": "GU",
        "text": "Guam"
    }, {
        "value": "HI",
        "text": "Hawaii"
    }, {
        "value": "ID",
        "text": "Idaho"
    }, {
        "value": "IL",
        "text": "Illinois"
    }, {
        "value": "IN",
        "text": "Indiana"
    }, {
        "value": "IA",
        "text": "Iowa"
    }, {
        "value": "KS",
        "text": "Kansas"
    }];

    $scope.defaultOptions = {
        skin: 'dark',
        position: "right",
        radius: true,
        size: 'large',
        hideDelay: 500,
        showOn: 'mouseover',
        hideOn: 'mouseleave',
        maxWidth: "180",
        close: false,
        customClass: "tempClass",
        offsetX: 0,
        offsetY: 0
    };

    $scope.checkBoxOptions = [{
        'value': '1',
        'text': 'Yes, I would like to recieve email communications related to VMware including newsletters and invitation-only events. I understand that any information I provide will be treated in accoedance with the VMware <a href="javascript:void(0)"> Privacy Policy.</a>',
        'disabled': false,
        'checked': false
    }];

    $scope.checkBoxName = 'options';

    $scope.checkBoxTitle = "Virtualization Initiatives";

    $scope.checkBoxOptions2 = [{
        'value': '1',
        'text': 'Checked',
        'disabled': false,
        'checked': true
    }, {
        'value': '2',
        'text': 'Unchecked',
        'disabled': false,
        'checked': false
    }, {
        'value': '3',
        'text': 'Checked Disabled',
        'disabled': true,
        'checked': true
    }, {
        'value': '4',
        'text': 'Unchecked Disabled',
        'disabled': true,
        'checked': false
    }];

    $scope.checkBoxName2 = 'options';
    $scope.customclass = [{
        "selector": ".labelHeader",
        "cusclass": "check1"

    }, {
        "selector": ".labelHeader",
        "cusclass": "check2"


    }];

    $scope.radioTitle = "Your Role";

    $scope.radioOptions = [{
        'value': '1',
        'text': 'Primary Business Contact',
        'disabled': false,
        'checked': false
    }, {
        'value': '2',
        'text': 'Primary Technical Contact',
        'disabled': false,
        'checked': false
    }, {
        'value': '3',
        'text': 'Primary Procurement Contact',
        'disabled': false,
        'checked': true
    }];

    $scope.radioName = 'role';

    


    $scope.user.psearchCallback = function(val) {
        //use val for search input not $scope.psearch
        console.log('predictive search callback');
        console.log('search value');
        console.log(val);
    };

    $scope.data = {};
    $scope.data.list = ['vSphere 4', 'vSphere 5', 'vSphere with Operations'];
    $scope.customclass = [{
        "selector": ".formRow",
        "cusclass": "check1"

    }, {
        "selector": ".formRow",
        "cusclass": "check2"


    }];


});


/* Form Validation Controller  */


app.controller("formValidationController", ["$scope","ModalService",
function($scope,ModalService) {
    $scope.user = {};
    $scope.user.firstName = null;
    $scope.user.lastName = null;
    $scope.user.email = null;
    $scope.user.company = null;
    $scope.user.postalCode = null;
    $scope.user.url = null;
    $scope.user.limits = null;
    $scope.user.duns = null;
    $scope.user.phone = null;
    $scope.user.confirm_password = null;
    $scope.user.password = null;
    $scope.user.revenue = null;
    $scope.user.checkBoxModel = null;
    $scope.user.checkBoxModel2 = null;
    $scope.user.ipAddress = null;
    $scope.user.creditCard = null;
    $scope.user.rangeLength = null;
    $scope.user.equalTo = null;
    $scope.user.alphanumeric = null;
    $scope.user.oneUpperCaseLetter = null;
    $scope.user.oneLowerCaseLetter = null;
    $scope.user.radioModel = null;
    $scope.masterCopy = angular.copy($scope.user);
    $scope.revenuesObj = [
        {'value':350000000, 'text': '&#36;350,000,000'},
        {'value':150000000, 'text': '&#36;150,000,000'},
        {'value':200000000, 'text': '&#36;200,000,000'},
        {'value':850000000, 'text': '&#36;850,000,000'},
        {'value':900000000, 'text': '&#36;900,000,000'},
        {'value':300000000, 'text': '&#36;300,000,000'},
        {'value':400000000, 'text': '&#36;400,000,000'},
        {'value':250000000, 'text': '&#36;250,000,000'},
        {'value':450000000, 'text': '&#36;450,000,000'},
        {'value':700000000, 'text': '&#36;700,000,000'},
        {'value':550000000, 'text': '&#36;550,000,000'},
        {'value':650000000, 'text': '&#36;650,000,000'},
        {'value':600000000, 'text': '&#36;600,000,000'},
        {'value':750000000, 'text': '&#36;750,000,000'},
        {'value':800000000, 'text': '&#36;800,000,000'},
        {'value':500000000, 'text': '&#36;500,000,000'}
    ];
    $scope.warningtype = 'warning';
    $scope.isInfoMessage = false;
    $scope.infomessage = "Please provide information below.";
    
    $scope.radioTitle = "Your Role";
        $scope.radioOptions = [{
            'value': '1',
            'text': 'Primary Business Contact',
            'disabled': false,
            'checked': false
        }, {
            'value': '2',
            'text': 'Primary Technical Contact',
            'disabled': false,
            'checked': false
        }];

        $scope.radioName = 'role';
        
        $scope.checkBoxOptions = [{
        'value': '1',
        'text': 'I agree to the terms and conditions outlined in the <a href="#" ng-click="invoke(\'formAgreement\',$event)" class="vmfModal">VMware vCenter Server End-User License Agreement</a>',
        'disabled': false,
        'checked': false
        },
        {
        'value': '2',
        'text': 'Yes, I would like to recieve email communications related to VMware including newsletters and invitation-only events. I understand that any information I provide will be treated in accoedance with the VMware <a href="#" ng-click="invoke(\'privacyPolicy\',$event)" class="vmfModal">Privacy Policy</a>.',
        'disabled': false,
        'checked': false
        }                      
        ];
     $scope.$on('invoke', function (evt, data) {
        $scope[data.method](data.evt);
    });
    
     $scope.formAgreement = function(e) {

            ModalService.showModal({
                templateUrl: 'dev/modules/formRegistration/template/agreement.html',
                controller: "registarionCtrl"
            }).then(function(modal) {
                modal.element.modal();
            });


        };

    $scope.privacyPolicy = function (e) {

        console.log('hello');

        ModalService.showModal({
            templateUrl: 'dev/modules/formRegistration/template/privacyPolicy.html',
            controller: "registarionCtrl"
        }).then(function (modal) {
            modal.element.modal();
        });


    };

    $scope.formSubmitFunction = function(){
        console.log($scope.user);
    };  
    
    
    
    

}]);

app.controller("registarionCtrl", ["$scope", function ($scope) {

    $scope.okModal = function () {
        console.log('okModal');
    };
    $scope.print = function () {
        console.log('print');
    };
}]);

/*Header Inline Editing controller code*/
app.controller('headerInlineEditingController', ['$scope',
    function($scope) {
        $scope.defaultOptions = {
            skin: 'dark',
            position: "right",
            radius: true,
            size: 'large',
            hideDelay: 5000,
            showOn: 'mouseover',
            hideOn: 'mouseleave',
            maxWidth: "180",
            close: false,
            customClass: "tempClass",
            offsetX: 0,
            offsetY: 3
        };

        $scope.headerText = 'Costco Worldwide Fund';
        $scope.placeholderText = 'Fund Name';
        $scope.ghostText = 'Add a fund name';
    }
]);
/* Modaless overlay Controller */

app.controller('modalessCtrl',['$scope',function  ($scope,$modal) {

	//$scope.flag=modalHideService.getStatus();
	$scope.modalShown=false;
	$scope.toggleModal=function(){
		// $scope.flag=modalHideService.getStatus();
		$scope.modalShown=true;		
	};
 
}]);

// Search controller
app.controller("searchCtrl", ['$scope',function($scope) {
	$scope.sources = ['KB articles', 'VMStar SRs', 'Bugzilla', 'Product Documentation', 'Technical Resources', 'VMware Link'];    
	$scope.selection = ['KB articles', 'VMStar SRs', 'Bugzilla', 'Product Documentation', 'Technical Resources', 'VMware Link'];

	$scope.search = function(keyword) {
		console.log('search function called');
		console.log('keyword: ' + keyword);
		console.log('requesting server with sources');
		console.log($scope.selection);
		// console.log($scope.sortingOrder);
		if ($scope.sortingOrder === 0) {
			console.log('sorting by Relevance');
		}
		else if ($scope.sortingOrder === 1) {
			console.log('sorting by Creation date');	
		}
		else if ($scope.sortingOrder === 2) {
			console.log('sorting by Update date');	
		}
		console.log('filter list 1: ' + $scope.selectedFilterList1); 
		console.log('filter list 2: ' + $scope.selectedFilterList2);
		console.log('filter 3: ' + $scope.filterKeyword3);
		console.log('filter 4: ' + $scope.filterKeyword4);


		return $scope.inputHTML;
	};

	$scope.searchModel;

	$scope.suggest = function() {
		console.log('suggestion requested from server with keyword - ' + $scope.searchModel);
		console.log('requesting server with sources');
		console.log($scope.selection); 

	};

	$scope.keywordList = ['Patching esx', 'Patching host', 'Patching manager', 'Patching non-persistent images'];

	$scope.filterKeyWords1 = ['vCenter Update Manager', 'vCenter Site Recovery Manager', 'vCenter Configurations Manager', 'vCenter Operations Manager', 'vCenter Application Discovery Manager'];

	$scope.filterKeyword1;

	$scope.selectedFilterList1 = [];

	$scope.filterKeyWords2 = ['vCenter Multi-Hypervisior Manager', 'vCenter Operations Manager for view', 'vCenter Application Stack Manager'];

	$scope.filterKeyword2;

	$scope.selectedFilterList2 = [];

	$scope.sortingOrder = 0; 

	$scope.filterKeyword3;

	$scope.filterKeyword3List = [{
						            'value': 1,
						            'text': 'Created in last one month'
						        }, {
						            'value': 2,
						            'text': 'Created in last two months'
						        }, {
						            'value': 4,
						            'text': 'Created in last four months'
						        }, {
						            'value': 6,
						            'text': 'Created in last six months'
						        }];

	$scope.filterKeyword4;

	$scope.filterKeyword4List = [{
						            'value': 350000000,
						            'text': 'dummy1'
						        }, {
						            'value': 150000000,
						            'text': 'dummy2'
						        }, {
						            'value': 200000000,
						            'text': 'dummy3'
						        }, {
						            'value': 850000000,
						            'text': 'dummy4'
						        }];


	$scope.sourcesV = ['KB articles', 'VMStar SRs', 'Bugzilla', 'Product Documentation', 'Technical Resources', 'VMware Link'];    
	$scope.selectionV = ['KB articles', 'VMStar SRs', 'Bugzilla', 'Product Documentation', 'Technical Resources', 'VMware Link'];

	$scope.searchV = function(keyword) {
		console.log('search function called');
		console.log('keyword: ' + keyword);
		console.log('requesting server with sources');
		console.log($scope.selectionV);
		// console.log($scope.sortingOrder);
		if ($scope.sortingOrderV === 0) {
			console.log('sorting by Relevance');
		}
		else if ($scope.sortingOrderV === 1) {
			console.log('sorting by Creation date');	
		}
		
		console.log('filter list 1: ' + $scope.selectedFilterList1V); 
		console.log('filter list 2: ' + $scope.selectedFilterList2V);
		console.log('filter 3: ' + $scope.filterKeyword3V);
		console.log('filter 4: ' + $scope.filterKeyword4V);
		console.log('filter list 5: ' + $scope.selectedFilterList5V); 
		console.log('filter list 6: ' + $scope.selectedFilterList6V);
		console.log('filter 7: ' + $scope.filterKeyword7V);
		console.log('filter 8: ' + $scope.filterKeyword8V);
		console.log('filter 9: ' + $scope.filterKeyword9V);
		console.log('filter list 10: ' + $scope.selectedFilterList10V); 
		console.log('filter list 11: ' + $scope.selectedFilterList11V);

		return $scope.inputHTML;
	};

	$scope.searchModelV;

	$scope.suggestV = function() {
		console.log('suggestion requested from server with keyword - ' + $scope.searchModelV);
		console.log('requesting server with sources');
		console.log($scope.selectionV); 

	};

	$scope.keywordListV = ['Patching esx', 'Patching host', 'Patching manager', 'Patching non-persistent images'];

	$scope.filterKeyWords1V = ['vCenter Update Manager', 'vCenter Site Recovery Manager', 'vCenter Configurations Manager', 'vCenter Operations Manager', 'vCenter Application Discovery Manager'];

	$scope.filterKeyword1V;

	$scope.selectedFilterList1V = [];

	$scope.filterKeyWords2V = ['vCenter Multi-Hypervisior Manager', 'vCenter Operations Manager for view', 'vCenter Application Stack Manager'];

	$scope.filterKeyword2V;

	$scope.selectedFilterList2V = [];

	$scope.sortingOrderV = 0; 

	$scope.filterKeyword3V;

	$scope.filterKeyword3ListV = [{
						            'value': 1,
						            'text': 'Created in last one month'
						        }, {
						            'value': 2,
						            'text': 'Created in last two months'
						        }, {
						            'value': 4,
						            'text': 'Created in last four months'
						        }, {
						            'value': 6,
						            'text': 'Created in last six months'
						        }];

	$scope.filterKeyword4V;

	$scope.filterKeyword4ListV = [{
						            'value': 350000000,
						            'text': 'dummy1'
						        }, {
						            'value': 150000000,
						            'text': 'dummy2'
						        }, {
						            'value': 200000000,
						            'text': 'dummy3'
						        }, {
						            'value': 850000000,
						            'text': 'dummy4'
						        }];				


	$scope.filterKeyWords5V = ['vCenter Update Manager', 'vCenter Site Recovery Manager', 'vCenter Configurations Manager', 'vCenter Operations Manager', 'vCenter Application Discovery Manager'];

	$scope.filterKeyword5V;

	$scope.selectedFilterList5V = [];

	$scope.filterKeyWords6V = ['vCenter Multi-Hypervisior Manager', 'vCenter Operations Manager for view', 'vCenter Application Stack Manager'];

	$scope.filterKeyword6V;

	$scope.selectedFilterList6V = [];						       

	$scope.filterKeyword7V;

	$scope.filterKeyword7ListV = [{
						            'value': 350000000,
						            'text': 'dummy1'
						        }, {
						            'value': 150000000,
						            'text': 'dummy2'
						        }, {
						            'value': 200000000,
						            'text': 'dummy3'
						        }, {
						            'value': 850000000,
						            'text': 'dummy4'
						        }];

	$scope.filterKeyword8V;

	$scope.filterKeyword8ListV = [{
						            'value': 350000000,
						            'text': 'dummy1'
						        }, {
						            'value': 150000000,
						            'text': 'dummy2'
						        }, {
						            'value': 200000000,
						            'text': 'dummy3'
						        }, {
						            'value': 850000000,
						            'text': 'dummy4'
						        }];						        

	$scope.filterKeyword9V;

	$scope.filterKeyword9ListV = [{
						            'value': 350000000,
						            'text': 'dummy1'
						        }, {
						            'value': 150000000,
						            'text': 'dummy2'
						        }, {
						            'value': 200000000,
						            'text': 'dummy3'
						        }, {
						            'value': 850000000,
						            'text': 'dummy4'
						        }];	

	$scope.filterKeyWords10V = ['vCenter Update Manager', 'vCenter Site Recovery Manager', 'vCenter Configurations Manager', 'vCenter Operations Manager', 'vCenter Application Discovery Manager'];

	$scope.filterKeyword10V;

	$scope.selectedFilterList10V = [];						        					        

	$scope.filterKeyWords11V = ['vCenter Update Manager', 'vCenter Site Recovery Manager', 'vCenter Configurations Manager', 'vCenter Operations Manager', 'vCenter Application Discovery Manager'];

	$scope.filterKeyword11V;

	$scope.selectedFilterList11V = [];						        					        

	$scope.inputHTML = {
	    "articles": [
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <a class='author' href='#'>Shibu John(sJohn)</a> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        }
	    ]
	}; 

}]);




/*Home page Hero Carousel controller*/

app.controller('heroCarouselCtrl', ['$scope', '$window',
    function($scope, $window) {
        //$scope.captionShow = true;
        $scope.config = {
            title: "vSphere Topics ",
            data: [{
                "img": "vmw-hro-openstack.jpg",
                "caption": "Virtualization and Cloud"
            }, {
                "img": "One-cloud-16th-hero.jpg",
                "caption": "Server Consolidation"
            }, {
                "img": "vmw-hro_vcloud-air.jpg",
                "caption": "Server Consolidation"
            }, {
                "img": "vmw-hro-virtual-san6.jpg",
                "caption": "Server Consolidation"
            }, {
                "img": "vmw-hro-vsphere6.jpg",
                "caption": "Server Consolidation"
            }]
        };
    }
]);
/*Slider control controller code*/

app.controller('sliderControlCtrl',['$scope',function ($scope) {
	$scope.cpu = {
		min: 0,
		max: 100,
		value: 70
	};
	$scope.ram = {
		min: 0,
		max: 200,
		value: 140
	};
	$scope.standardStorage = {
		min: 0,
		max: 500,
		value: 50
	};
	$scope.accStorage = {
		min: 0,
		max: 100,
		value: 50
	};
	$scope.sliderReset = function(){
		$scope.cpu.value= 0;
		$scope.ram.value= 0;
		$scope.standardStorage.value= 0;
		$scope.accStorage.value= 0;
	};
	$scope.$watch('cpu.value',function(newValue, oldValue){
		if(newValue !== oldValue){
			$scope.ram.value = Math.round(100*(($scope.cpu.value/$scope.cpu.max)*$scope.ram.max))/100;
		}
	});
	$scope.$watch('ram.value',function(newValue, oldValue){
		if(newValue !== oldValue){
			$scope.cpu.value = Math.round(100*(($scope.ram.value/$scope.ram.max)*$scope.cpu.max))/100;
		}
	});
}]);
/*Checkbox controller code*/

app.controller("splitContainerCtrl", ['$scope', '$compile', '$timeout', 'folderDataService',
    function($scope, $compile, $timeout, folderDataService) {
        $scope.rootName = [];

        $scope.rootName.push({
            'value': '2',
            'text': 'License Folders',
            'disabled': false,
            'checked': false
        });

        $scope.references = [];
        $scope.$watch("rootName", function(oldVal, newVal, $scope) {

            if (newVal.length > oldVal.length) {
                $scope.references = [];

                newVal.forEach(function(paneRef, paneIndex) {
                    var refObj = {};

                    refObj.paneIndex = paneIndex;
                    refObj.reference = paneRef.text.split(" ").join("");
                    $scope.references.push(refObj);
                });
            }
        });

        $scope.openContent = function(fileScope) {

            console.log(this);
            console.log();
            $scope.listElements = angular.element(".vmf-folder-content-list li");

            for (var listIndex = 0; listIndex < $scope.listElements.length; listIndex++) {
                if ($scope.listElements.eq(listIndex).text() === fileScope.file) {
                    $scope.listElements.eq(listIndex).addClass("highlight");
                } else {
                    $scope.listElements.eq(listIndex).removeClass("highlight");
                }
            }

            $scope.content = $scope.data;

            $scope.newPaneString = '<vmf-split-container>' +
                '<vmf-split-pane-component paneheight="30%" minwidth="30%" maxwidth="70%">' +
                '<vmf-table  class="basic_nogrouping_table basic_nogrouping"' +
                'data="content"' +
                'columns="columns"' +
                'options="options"' +
                'cell-renderers="cellRenderers">' +
                '</vmf-table>' +
                '</vmf-split-pane-component>' +
                '<vmf-split-pane-divider paneheight="10px" clicks="0" close="bottom"></vmf-split-pane-divider>' +
                '<vmf-split-pane-component>' +
                '<vmf-table class="basic_nogrouping_table basic_nogrouping"' +
                'data="content"' +
                'columns="columns"' +
                'options="options"' +
                'cell-renderers="cellRenderers">' +
                '</vmf-table>' +
                '</vmf-split-pane-component>' +
                '</vmf-split-container>';

            $timeout(function() {
                angular.element(".split-pane-component").eq(angular.element(".split-pane-component").length - 1).append($compile($scope.newPaneString)($scope));
            });
        };

        $scope.createNewTree = function(event, folderScope) {

            console.log(event);
            console.log(folderScope);

            if (folderScope.subfolder.status !== "INACTIVE") {
                //event.preventDefault();

                $scope.updatedFolders = folderDataService.allFolders;
                $scope.contentToDisplay = [];
                $scope.newPaneString = "";

                $scope.currentTree = angular.element(angular.element(event.target).parents(".folderTree")[0]);
                
                /*if ($scope.currentTree.find(".folderSelector.selected").length === 1 && angular.element(".vmf-split-container").length === 1) {
                    
                    $scope.currentTree.find(".folderSelector.selected").removeClass("selected").parents("a").eq(0).removeClass("highlight");
                    angular.element(".vmf-split-container").eq(1).remove();
                }else */
                if ($scope.currentTree.find(".folderSelector.selected").length) {

                    if (angular.element(event.target).hasClass("highlight")) {
                        angular.element(event.target).addClass("tempClass");
                    } else {
                        angular.element(event.target).parents("a").addClass("tempClass");
                    }


                    $scope.currentTree.find("a").not(".tempClass").removeClass("highlight").find(".folderSelector").removeClass("selected");
                    $scope.currentTree.find("a").not(".tempClass").find(".actionEachBox").removeClass("folderSelected");
                    if ($scope.currentTree.find("a.tempClass").find("input").length) {
                        $scope.currentTree.find("a.tempClass").find("input").removeAttr("checked");
                    }
                    $scope.currentTree.find("a.tempClass").removeClass("tempClass");


                    $scope.FolderName = {
                        'value': '2',
                        'text': folderScope.subfolder.folderName,
                        'disabled': false,
                        'checked': false
                    };

                    $scope.files = folderScope.subfolder.files;

                    $scope.newPaneString = $scope.newPaneString + '<vmf-split-container>' +
                        '<vmf-split-pane-component panewidth="30%" minwidth="30%" maxwidth="50%">' +
                        '<div class="pretty-split-pane-component-inner"> ' +
                        '<div class="vmf-folder-content">' +
                        '<div class="vmf-folder-content-heading" ng-bind="FolderName.text"></div>' +
                        '<ul class="vmf-folder-content-list">' +
                        '<li ng-repeat="file in files" ng-click="openContent(this)">{{file}}</li>' +
                        '</ul>' +
                        '</div>' +
                        '</div>' +
                        '</vmf-split-pane-component>' +
                        '<vmf-split-pane-divider panewidth="10px" clicks="0" close="right"></vmf-split-pane-divider>' +
                        '<vmf-split-pane-component>';


                    $scope.newPaneString = $scope.newPaneString + '</vmf-split-pane-component>' +
                        '</vmf-split-container>';

                    if (angular.element(".vmf-split-container").length > 1)
                        angular.element(".vmf-split-container").eq(1).remove();

                    $timeout(function() {
                        angular.element(".split-pane-component").eq(1).append($compile($scope.newPaneString)($scope));
                    });

                    console.log($scope.currentTree.find(".folderSelector.selected").length + " folders selected");
                    
                }
            }
        };

        $scope.panes = [
            [{
                    "status": "INACTIVE",
                    "folderType": "ROOT",
                    "fullFolderPath": "HOME",
                    "rootFolderId": 0,
                    "folderId": "1000",
                    "folderName": "HOME",
                    "parentFolderId": "0",
                    "folderLevel": 1,
                    "folderAccess": "NONE",
                    "isLeaf": false,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Home vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Home Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Home Portal.txt", "Home vSphere ESXi 5.1.csv", "My Home Portal.pdf", "My Home Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region",
                    "rootFolderId": 0,
                    "folderId": "1001",
                    "folderName": "African Region",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'African Region vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My African Region Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My African Region Portal.txt", "African Region vSphere ESXi 5.1.csv", "My African Region Portal.pdf", "My African Region Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Business Testing",
                    "rootFolderId": 0,
                    "folderId": "1002",
                    "folderName": "Business Testing",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Business Testing vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Business Testing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Business Testing Portal.txt", "Business Testing vSphere ESXi 5.1.csv", "My Business Testing Portal.pdf", "My Business Testing Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\HORIZON VIEW",
                    "rootFolderId": 0,
                    "folderId": "1003",
                    "folderName": "HORIZON VIEW",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'HORIZON VIEW vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My HORIZON VIEW Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My HORIZON VIEW Portal.txt", "HORIZON VIEW vSphere ESXi 5.1.csv", "My HORIZON VIEW Portal.pdf", "My HORIZON VIEW Portal.tmp"]
                }, {
                    "status": "INACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Human Resources",
                    "rootFolderId": 0,
                    "folderId": "1004",
                    "folderName": "Human Resources",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Human Resources vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Human Resources Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Human Resources Portal.txt", "Human Resources vSphere ESXi 5.1.csv", "My Human Resources Portal.pdf", "My Human Resources Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys",
                    "rootFolderId": 0,
                    "folderId": "1005",
                    "folderName": "Jasons Keys",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Jasons Keys vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Jasons Keys Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Jasons Keys Portal.txt", "Jasons Keys vSphere ESXi 5.1.csv", "My Jasons Keys Portal.pdf", "My Jasons Keys Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing",
                    "rootFolderId": 0,
                    "folderId": "1006",
                    "folderName": "Marketing",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Marketing vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Marketing Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Marketing Portal.txt", "Marketing vSphere ESXi 5.1.csv", "My Marketing Portal.pdf", "My Marketing Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder",
                    "rootFolderId": 0,
                    "folderId": "1007",
                    "folderName": "VMworld test folder",
                    "parentFolderId": "1000",
                    "folderLevel": 2,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My VMworld test folder Portal.txt", "VMworld test folder vSphere ESXi 5.1.csv", "My VMworld test folder Portal.pdf", "My VMworld test folder Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region\\Sub-African Region 1",
                    "rootFolderId": 0,
                    "folderId": "1008",
                    "folderName": "Sub-African Region 1",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Sub-African Region 1 Portal.txt", "Sub-African Region 1 vSphere ESXi 5.1.csv", "My Sub-African Region 1 Portal.pdf", "My Sub-African Region 1 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region\\Sub-African Region 2",
                    "rootFolderId": 0,
                    "folderId": "1009",
                    "folderName": "Sub-African Region 2",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Sub-African Region 2 Portal.txt", "Sub-African Region 2 vSphere ESXi 5.1.csv", "My Sub-African Region 2 Portal.pdf", "My Sub-African Region 2 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\African Region\\Sub-African Region 3",
                    "rootFolderId": 0,
                    "folderId": "1010",
                    "folderName": "Sub-African Region 3",
                    "parentFolderId": "1001",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-African Region 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-African Region 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Sub-African Region 3 Portal.txt", "Sub-African Region 3 vSphere ESXi 5.1.csv", "My Sub-African Region 3 Portal.pdf", "My Sub-African Region 3 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 1",
                    "rootFolderId": 0,
                    "folderId": "1011",
                    "folderName": "Test Folder 1",
                    "parentFolderId": "1005",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Test Folder 1 Portal.txt", "Test Folder 1 vSphere ESXi 5.1.csv", "My Test Folder 1 Portal.pdf", "My Test Folder 1 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2",
                    "rootFolderId": 0,
                    "folderId": "1012",
                    "folderName": "Test Folder 2",
                    "parentFolderId": "1005",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Test Folder 2 Portal.txt", "Test Folder 2 vSphere ESXi 5.1.csv", "My Test Folder 2 Portal.pdf", "My Test Folder 2 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder",
                    "rootFolderId": 0,
                    "folderId": "1013",
                    "folderName": "Test Sub Folder",
                    "parentFolderId": "1012",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": true,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Test Sub Folder Portal.txt", "Test Sub Folder vSphere ESXi 5.1.csv", "My Test Sub Folder Portal.pdf", "My Test Sub Folder Portal.tmp"]
                }, {
                    "status": "INACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder\\Test Sub Folder 1",
                    "rootFolderId": 0,
                    "folderId": "1014",
                    "folderName": "Test Sub Folder 1",
                    "parentFolderId": "1013",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Delete Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Rename Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Move Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabledClass": "disabled"
                    }],
                    "accessable": false,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Test Sub Folder 1 Portal.txt", "Test Sub Folder 1 vSphere ESXi 5.1.csv", "My Test Sub Folder 1 Portal.pdf", "My Test Sub Folder 1 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Jasons Keys\\Test Folder 2\\Test Sub Folder\\Test Sub Folder 2",
                    "rootFolderId": 0,
                    "folderId": "1015",
                    "folderName": "Test Sub Folder 2",
                    "parentFolderId": "1013",
                    "folderLevel": 4,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Test Sub Folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Test Sub Folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Test Sub Folder 2 Portal.txt", "Test Sub Folder 2 vSphere ESXi 5.1.csv", "My Test Sub Folder 2 Portal.pdf", "My Test Sub Folder 2 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 1",
                    "rootFolderId": 0,
                    "folderId": "1016",
                    "folderName": "Sub-Marketing 1",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Sub-Marketing 1 Portal.txt", "Sub-Marketing 1 vSphere ESXi 5.1.csv", "My Sub-Marketing 1 Portal.pdf", "My Sub-Marketing 1 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 2",
                    "rootFolderId": 0,
                    "folderId": "1017",
                    "folderName": "Sub-Marketing 2",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Sub-Marketing 2 Portal.txt", "Sub-Marketing 2 vSphere ESXi 5.1.csv", "My Sub-Marketing 2 Portal.pdf", "My Sub-Marketing 2 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\Marketing\\Sub-Marketing 3",
                    "rootFolderId": 0,
                    "folderId": "1018",
                    "folderName": "Sub-Marketing 3",
                    "parentFolderId": "1006",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'Sub-Marketing 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My Sub-Marketing 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My Sub-Marketing 3 Portal.txt", "Sub-Marketing 3 vSphere ESXi 5.1.csv", "My Sub-Marketing 3 Portal.pdf", "My Sub-Marketing 3 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 1",
                    "rootFolderId": 0,
                    "folderId": "1019",
                    "folderName": "Sub-Sub-VMworld test folder 1",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 1 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 1 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My VMworld test folder 1 Portal.txt", "VMworld test folder 1 vSphere ESXi 5.1.csv", "My VMworld test folder 1 Portal.pdf", "My VMworld test folder 1 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 2",
                    "rootFolderId": 0,
                    "folderId": "1020",
                    "folderName": "Sub-Sub-VMworld test folder 2",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 2 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 2 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My VMworld test folder 2 Portal.txt", "VMworld test folder 2 vSphere ESXi 5.1.csv", "My VMworld test folder 2 Portal.pdf", "My VMworld test folder 2 Portal.tmp"]
                }, {
                    "status": "ACTIVE",
                    "folderType": "ORDER",
                    "fullFolderPath": "HOME\\VMworld test folder\\Sub-Sub-VMworld test folder 3",
                    "rootFolderId": 0,
                    "folderId": "1021",
                    "folderName": "Sub-Sub-VMworld test folder 3",
                    "parentFolderId": "1007",
                    "folderLevel": 3,
                    "folderAccess": "VIEW",
                    "isLeaf": true,
                    "hasSubFolders": false,
                    "folderOptions": [{
                        "text": "Invite New User",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Share Folder",
                        "disabledClass": "disabled"
                    }, {
                        "text": "Create Folder",
                        "disabled": false
                    }, {
                        "text": "Delete Folder",
                        "disabled": false
                    }, {
                        "text": "Rename Folder",
                        "disabled": false
                    }, {
                        "text": "Move Folder",
                        "disabled": false
                    }, {
                        "text": "Request Permission",
                        "disabled": false
                    }, {
                        "text": "Export to csv",
                        "disabled": false
                    }],
                    "accessable": true,
                    "checked": false,
                    "content": [{
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '3-Medium',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'VMworld test folder 3 vSphere ESXi 5.1',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '2-High',
                            "lastUpdated": '2013-12-12'
                        }, {
                            "product": 'My VMworld test folder 3 Portal',
                            "supportRequest": '434534534534',
                            "status": 'Open',
                            "severity": '4-Low',
                            "lastUpdated": '2013-12-12'
                        }

                    ],
                    "files": ["My VMworld test folder 3 Portal.txt", "VMworld test folder 3 vSphere ESXi 5.1.csv", "My VMworld test folder 3 Portal.pdf", "My VMworld test folder 3 Portal.tmp"]
                }

            ]
        ];
        /* Section for populating table data in the component.*/
        $scope.columns = [{
            title: '',
            field: 'indexColumn',
            indexColumn: true,
            sorted: 'sort-desc',
            thClass: 'snocol',
            draggable: false,
            notResizable: true,
            sort: true,
            width: 40
        }, {
            title: 'Support Request',
            field: 'supportRequest',
            showToolTip: true,
            draggable: false,
            tdClass: 'highlight-font'
        }, {
            title: 'Status',
            field: 'status',
            showToolTip: false,
            draggable: false
        }, {
            title: 'Severity',
            field: 'severity',
            draggable: false
        }, {
            title: 'Last Updated',
            field: 'lastUpdated',
            draggable: false
        }, {
            title: 'Product',
            field: 'product',
            sort: true,
            draggable: false,
            tdClass: 'highlight-font'
        }];

        $scope.cellRenderers = {
            // 'indexColumn':'vmf-index-column-cell-renderer'          
        };

        $scope.options = {
            rowStrips: "true",
            tableTitle: "Support Request History",
            tableClass: "basic-table",
            showManageColumn: true
        };

        $scope.data = [{
                "product": 'My Human Resources Portal',
                "supportRequest": '434534534534',
                "status": 'Open',
                "severity": '3-Medium',
                "lastUpdated": '2013-12-12'
            }, {
                "product": 'Human Resources vSphere ESXi 5.1',
                "supportRequest": '434534534534',
                "status": 'Open',
                "severity": '2-High',
                "lastUpdated": '2013-12-12'
            }, {
                "product": 'My Human Resources Portal',
                "supportRequest": '434534534534',
                "status": 'Open',
                "severity": '2-High',
                "lastUpdated": '2013-12-12'
            }, {
                "product": 'My Human Resources Portal',
                "supportRequest": '434534534534',
                "status": 'Open',
                "severity": '4-Low',
                "lastUpdated": '2013-12-12'
            }, {
                "product": 'My Human Resources Portal',
                "supportRequest": '434534534534',
                "status": 'Open',
                "severity": '2-High',
                "lastUpdated": '2013-12-12'
            }, {
                "product": 'My Human Resources Portal',
                "supportRequest": '434534534534',
                "status": 'Open',
                "severity": '4-Low',
                "lastUpdated": '2013-12-12'
            }

        ];
    }
]);

/*Static table controller code*/
app.controller('BulkActionsTableCtrl',  ['$scope', function($scope) {      	

        $scope.columns = [
            {                
                title: 'Product',
                field: 'product',
                sorted:'sort-asc',
                sort: true,
                draggable: false,
                showToolTip:false,
                notResizable: true,
                colResize: false,
                headerRenderer: 'vmf-table-header-search-renderer',
                checkboxField: 'isCheckboxSelected',
                width: 500,
                tdClass: 'highlight-font'                
            },
            {
                title: 'License Key',
                showToolTip:false,
                field: 'licenseKey',
                draggable: false,
                colResize: false,
                notResizable: true,
                tdClass: 'vmf-bulk-col-highlight'
            },
            {
                title: 'Units',
                field: 'units',
                showToolTip:false,
                draggable: false,
                colResize: false,
                notResizable: true
            }            
        ];

        $scope.data =  [{
            product: "vCenter Server 5 Standard",
            licenseKey: '5',
            units: '120 Instances'
        },
        {
            product: "vCenter Site Recovery Manager (VM)",
            licenseKey: '35',
            units: '2 VMs'
        },
        {
            product: "vCenter Site Recovery Manager 5 Enterprise",
            licenseKey: '4',
            units: '48 VMs'
        },
        {
            product: "vCloud Automation Center (Desktop)",
            licenseKey: '15',
            units: '48 VMs'
        },
        {
            product: "vCloud Automation Center (Server)",
            licenseKey: '25',
            units: '25 Servers'
        },
        {
            product: "vCloud Automation Center (Server) E - 1",
            licenseKey: '25',
            units: '25 Servers'
        },
        {
            product: "vCloud Automation Center (Server) E - 2",
            licenseKey: '25',
            units: '25 Servers'
        },
        {
            product: "vCloud Automation Center (Server) E - 3",
            licenseKey: '25',
            units: '25 Servers'
        },
        {
            product: "vCloud Automation Center (Server) E - 4",
            licenseKey: '25',
            units: '25 Servers'
        },
        {
            product: "vCloud Automation Center Development Kit",
            licenseKey: '28',
            units: '50 Instances'
        },
        {
            product: "vCloud Automation Center Development Kit E - 1",
            licenseKey: '28',
            units: '50 Instances'
        },
        {
            product: "vCloud Automation Center Development Kit E - 2",
            licenseKey: '28',
            units: '50 Instances'
        },
        {
            product: "vCloud Automation Center Development Kit E - 3",
            licenseKey: '28',
            units: '50 Instances'
        }];

        $scope.cellRenderers = {
            "product": 'vmf-table-cell-checkbox-renderer'
        };

        $scope.options = {
            rowStrips:"true",
            tableClass:"basic-table",
            tableTitle: "All Products",
            showManageColumn: true
        };

        $scope.bulkActions = [{
            "title": "Renewal",
            "enableType": "single" /* default/single/multiple */
        }, {
            "title": "Get Support"
        }, {
            "title": "View Users"
        }, {
            "title": "View Folders"
        }, {
            "title": "Request Quote",
            "enableType": "multiple"
        }, {
            "title": "Order History"
        }, {
            "title": "Action 7",
            "enableType": "single"
        }, {
            "title": "Action 8"
        }, {
            "title": "Action 9"
        } ,{
            "title": "Action 10"
        }, {
            "title": "Action 11"
        }, {
            "title": "Action 12"
        }, {
            "title": "Action 13"
        }, {
            "title": "Action 14"
        }, {
            "title": "Action 15"
        }];
        
    }]);

/*Static table controller code*/
app.controller('BasicTableCtrl',  ['$scope',function($scope) {          

        $scope.columns = [
          {
                title: '',
                field: 'indexColumn',
                indexColumn: true,
                sorted:'sort-desc',
                thClass: 'snocol',
                draggable: false,
                notResizable: true,
                colResize:false,
                sort: true,               
                width:40
            },            
            {
                title: 'Support Request',
                field: 'supportRequest',
                showToolTip:true,
                draggable: true,
                tdClass: 'highlight-font'
            },
             {
                title: 'Status',
                field: 'status',                      
                showToolTip:false,
                draggable: true
            },
            {
                title: 'Severity',
                field: 'severity',
                draggable: true
            },
            {
                title: 'Last Updated',
                field: 'lastUpdated',
                draggable: true           
            },
             {
                title: 'Product',
                field: 'product',
                sort:true,
                draggable: true,
                tdClass: 'highlight-font'
            }            
        ];

        $scope.data =  [
                {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534534',
                    status: 'Open',
                    severity: '3-Medium',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'VMWare vSphere ESXi 5.1',                    
                    supportRequest: '434534534534',
                    status: 'Open',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534534',
                    status: 'Open',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534534',
                    status: 'Open',
                    severity: '4-Low',
                    lastUpdated:'2013-12-12'
                }, 
                {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534534',
                    status: 'Open',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534534',
                    status: 'Open',
                    severity: '4-Low',
                    lastUpdated:'2013-12-12'
                }
               
        ];

        $scope.cellRenderers = {      
          // 'indexColumn':'vmf-index-column-cell-renderer'          
        };

        $scope.options = {
            rowStrips:"true",
            tableTitle:"Support Request History",
            tableClass: "basic-table",
            showManageColumn:true
        };
        
    }]);


app.controller('SubscriptionServiceTableCtrl', ['$scope',function($scope) {    
        $scope.columns = [
                
            {
                title: 'Service ID',
                field: 'serviceId'                
            },
             {
                title: 'Service status',
                field: 'serviceStatus'                       
            },
            {
                title: 'Service Type',
                field: 'serviceType'                       
            }, 
            {
                title: 'Customer Name',
                field: 'customerName'                       
            }
        ];

          $scope.data =  [
                {
                    serviceId: '234234234',  
                    serviceStatus: 'Active',                  
                    serviceType: 'vCloud Hybrid Services',
                    customerName: 'In Out'                   
                },
                 {
                    serviceId: '234234234',  
                    serviceStatus: 'active',                  
                    serviceType: 'vCloud Hybrid Services',
                    customerName: 'In Out'                   
                },
                {
                    serviceId: '234234234',  
                    serviceStatus: 'underprovisioning',                  
                    serviceType: 'vCloud Hybrid Services',
                    customerName: 'In Out'                   
                },
                 {
                    serviceId: '234234234',  
                    serviceStatus: 'expired',                  
                    serviceType: 'vCloud Hybrid Services',
                    customerName: 'In Out'                   
                },
                 {
                    serviceId: '234234234',  
                    serviceStatus: 'inactive',                  
                    serviceType: 'vCloud Hybrid Services',
                    customerName: 'In Out'                   
                },
                 {
                    serviceId: '234234234',  
                    serviceStatus: 'underprovisioning',                  
                    serviceType: 'vCloud Hybrid Services',
                    customerName: 'In Out'                   
                }
        ];

        $scope.cellRenderers = {      
            
            'serviceStatus': 'vmf-service-status-cell-renderer'
        };

        $scope.options = {
            rowStrips: "true",
            showManageColumn:true,
            tableTitle:"Subscription Services",
            tableClass:"license-basic-table"
        };
    }]);


/*Static table controller code*/
app.controller('ComparisonTableCtrl',  ['$scope',function($scope) {      
		
         $scope.columns = [
          
            {
                title: 'Product Features',
                field: 'productFeature',    
                showToolTip: true,
                draggable:false,
                notResizable: true,
                 thClass:'selectedcell',
                tdClass:'firstcell'
            },
            {
                title: 'Standard',
                field: 'standard', 
                draggable: false,
                notResizable: true
            },
            {
                title: 'Enterprise',
                field: 'enterprise',
                draggable: false,
                notResizable: true
            },
            {
                title: 'Enterprise Plus',
                field: 'enterprisePlus',
                draggable: false,
                notResizable: true
            }
            
        ];

        $scope.data =  		
			[
				{
					productFeature: 'vMotion',
					standard: 'Available',
					enterprise: 'Available',
					enterprisePlus: 'Available',
					desc:'Reduces downtime Business Continuity and Security',
					type:'Business Continuity and Security'
				 },
				{
					productFeature: 'Storage vMotion',
					standard: 'Available',
					enterprise: 'Available',
					enterprisePlus: 'Available',
					desc:'Reduces downtime Business Continuity and Security',
					type:'Business Continuity and Security'
				 },
				{
					productFeature: 'High Availability',
					standard: 'Available',
					enterprise: 'Available',
					enterprisePlus: 'Available',
					desc:'Reduces downtime Business Continuity and Security',
					type:'Business Continuity and Security'
				 },
				{
					productFeature: 'vSphere Replication',
					standard: 'Available',
					enterprise: 'Available',
					enterprisePlus: 'Available',
					desc:'Reduces downtime Business Continuity and Security',
					type:'Business Continuity and Security'
				 },
				{
					productFeature: 'License Entitlement',
					standard: 'Per 1 CPU',
					enterprise: 'Per 1 CPU',
					enterprisePlus: 'Per 1 CPU',
					desc:'Reduces downtime Business Continuity and Security',
					type:'Product Components'
				 },
				{
					productFeature: 'SUSE Linux Enterprise Server for VMWare',
					standard: 'Available',
					enterprise: 'Available',
					enterprisePlus: 'Available',
					desc:'Reduces downtime Business Continuity and Security',
					type:'Product Components'
				 },
				{
					productFeature: 'vCenter Server (sold separately)',
					standard: 'vCenter Server Foundation vCenter Server Foundation',
					enterprise: 'vCenter Server Foundation vCenter Server Foundation',
					enterprisePlus: 'vCenter Server Foundation vCenter Server Foundation',
					desc:'Reduces downtime Business Continuity and Security',
					type:'Centralized Management Compatibility'
				 }
			];

		$scope.cellRenderers = {
			'productFeature':'vmf-product-feature-cell-renderer',
            'standard':'vmf-status-cell-renderer',
			'enterprise':'vmf-status-cell-renderer',  
			'enterprisePlus':'vmf-status-cell-renderer'  
        };


        
    }]);

/*Accordian Containers controller code*/
app.controller('accordionContainersCtrl', ['$scope',
    function($scope) {
        $scope.tableHeaders = ['Product', 'Release Date', ''];
        $scope.accordionData = [{
            header: 'Standard', 
            contents: [
                ['VMware ESXi 5.5.0 Update 1', '2014-03-11', '<a href="#">Go to Downloads</a>'],
                ['VMware vCenter Server 5.5 Update 1b', '2014-06-12', '<a href="#">Go to Downloads</a>']
            ]
        }, {
            header: 'Advanced',
            contents: [
                ['VMware ESXi 5.5.0 Update 2', '2014-03-11', '<a href="#">Go to Downloads</a>'],
                ['VMware vCenter Server 5.5 Update 2b', '2014-06-12', '<a href="#">Go to Downloads</a>']
            ]
        }, {
            header: 'Enterprise',
            contents: [
                ['VMware ESXi 5.5.0 Update 3', '2014-03-11', '<a href="#">Go to Downloads</a>'],
                ['VMware vCenter Server 5.5 Update 3b', '2014-06-12', '<a href="#">Go to Downloads</a>']
            ]
        }];

        $scope.tableHeaders2 = ['Service ID', 'Region', 'Term Ending', 'Remaining Term'];
        $scope.accordionData2 = [{
            headers: ['M767468761', 'US - Santa Clara', '2015-05-25', '11 Months &#x26; 2 Days', '<button class="vmf-accordion-btn vmf-btn vmf-primary pull-right" ng-click="buttonClick($event, 1)">Select</button>'],
            contents: [
                ['SKU', 'Component', 'Order Type', 'Payment Type', 'Remaining Term', 'Qty'],
                ['HSV-A1AIP-12MT0-C1S', '<p><span>VMware vCloud Hybrid Service </span>- Virtual Private Cloud A1A - Public IP Addresses Subscription - 12 Monthly</p><p><span>Payments</span></p><p>US - Nevada Data Center - 1 Public IP Address', 'Add-on', 'Monthly', '9 Months &#x26; 15 Days', '1'],
                ['HSV-A1AIP-12MT0-C1S', '<p><span>VMware vCloud Hybrid Service</span> - Virtual Private Cloud A1A - Core Subscription - SSD Accelerated - 12 Monthly</p><p><span>Payments</span></p><p>US - Nevada Data Center - 5GHz vCPU 20GB vRAM 2TB SSD-Accelerated Storage 10 Mbps Internet Bandwidth 2 Public IPs and Production Support', 'Add-on', 'Monthly', '9 Months &#x26; 15 Days', '1']
            ]
        }, {
            headers: ['M38349494', 'US - Santa Clara', '2015-05-25', '5 Months &#x26; 5 Days', '<button class="vmf-accordion-btn vmf-btn vmf-primary pull-right" ng-click="buttonClick($event, 2)">Select</button>'],
            contents: [
                ['SKU', 'Component', 'Order Type', 'Payment Type', 'Remaining Term', 'Qty'],
                ['HSV-A1AIP-12MT0-C1S', '<p><span>VMware vCloud Hybrid Service </span>- Virtual Private Cloud A1A - Public IP Addresses Subscription - 12 Monthly</p><p><span>Payments</span></p><p>US - Nevada Data Center - 1 Public IP Address', 'Add-on', 'Monthly', '9 Months &#x26; 15 Days', '1'],
                ['HSV-A1AIP-12MT0-C1S', '<p><span>VMware vCloud Hybrid Service </span>- Virtual Private Cloud A1A - Core Subscription - SSD Accelerated - 12 Monthly</p><p><span>Payments</span></p><p>US - Nevada Data Center - 5GHz vCPU 20GB vRAM 2TB SSD-Accelerated Storage 10 Mbps Internet Bandwidth 2 Public IPs and Production Support', 'Add-on', 'Monthly', '9 Months &#x26; 15 Days', '1']
            ]
        }, {
            headers: ['M48949951', 'US - Santa Clara', '2015-05-25', '11 Months &#x26; 2 Days', '<button class="vmf-accordion-btn vmf-btn vmf-primary pull-right" ng-click="buttonClick($event, 3)">Select</button>'],
            contents: [
                ['SKU', 'Component', 'Order Type', 'Payment Type', 'Remaining Term', 'Qty'],
                ['HSV-A1AIP-12MT0-C1S', '<p><span>VMware vCloud Hybrid Service</span> - Virtual Private Cloud A1A - Public IP Addresses Subscription - 12 Monthly</p><p><span>Payments</span></p><p>US - Nevada Data Center - 1 Public IP Address', 'Add-on', 'Monthly', '9 Months &#x26; 15 Days', '1'],
                ['HSV-A1AIP-12MT0-C1S', '<p><span>VMware vCloud Hybrid Service </span>- Virtual Private Cloud A1A - Core Subscription - SSD Accelerated - 12 Monthly</p><p><span>Payments</span></p><p>US - Nevada Data Center - 5GHz vCPU 20GB vRAM 2TB SSD-Accelerated Storage 10 Mbps Internet Bandwidth 2 Public IPs and Production Support', 'Add-on', 'Monthly', '9 Months &#x26; 15 Days', '1']
            ]
        }];
        $scope.selectedAccordion;
    }
]);
/* table drag drop controller code*/
    app.controller('DragDropTableCtrl', ["$scope",function ($scope) {
        $scope.columns = [
            {
                title: '',                    
                headerCheckboxRenderer:true,//false for single row dnd 
                enableMultiRowsDragAndDrop:true,
                field: 'isCheckboxSelected',
                isCheckboxSelected:false,
                checkboxField:"isCheckboxSelected",
                headerRenderer:'vmf-checkbox-header-renderer',
                sort: false,
                draggable: false,
                visible: true,
                thClass: "checkboxcol",
                tdClass: "fcol",
                colResize:false,
                width:60
            },          
            {                
                title: 'Support Request',
                field: 'supportRequest',
                sorted:'sort-asc',
                sort: true,
                tdClass: 'highlight-font'             
            },
             {
                title: 'Status',
                field: 'status'                       
            },
            {
                title: 'Severity',
                field: 'severity'
            },
            {
                title: 'Last Updated',
                field: 'lastUpdated'  
            },
             {
                title: 'Product',
                field: 'product'
            }            
        ];

        $scope.data =  [
                {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534530',
                    status: 'Open 1',
                    severity: '3-Medium',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'VMWare vSphere ESXi 5.1',                    
                    supportRequest: '434534534532',
                    status: 'Open 2',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534534',
                    status: 'Open 3',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534538',
                    status: 'Open 4',
                    severity: '4-Low',
                    lastUpdated:'2013-12-12'
                }, 
                {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534531',
                    status: 'Open 5',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534533',
                    status: 'Open 6',
                    severity: '4-Low',
                    lastUpdated:'2013-12-12'
                }
               
        ];

        $scope.cellRenderers = {      
          'isCheckboxSelected':'vmf-checkbox-gripper-column-cell-renderer'         
        };

        $scope.options = {
            rowStrips:"true",
            tableTitle:"",
            tableClass:"drag-drop-table",
            colResizeMinWidth:80,
            showManageColumn:true
        };
    }]);


    app.controller('SingleRowDragDropTableCtrl', ["$scope",function ($scope) {
        $scope.columns = [
            {
                title: '',                    
                headerCheckboxRenderer:true,//false for single row dnd 
                enableMultiRowsDragAndDrop:false,
                field: 'isCheckboxSelected',
                isCheckboxSelected:false,
                checkboxField:"isCheckboxSelected",
                headerRenderer:'vmf-checkbox-header-renderer',
                sort: false,
                draggable: false,
                visible: true,
                thClass: "checkboxcol",
                tdClass: "fcol",
                colResize:false,
                width:60
            },          
            {                
                title: 'Support Request',
                field: 'supportRequest',
                sorted:'sort-asc',
                sort: true,
                tdClass: 'highlight-font'             
            },
             {
                title: 'Status',
                field: 'status'                       
            },
            {
                title: 'Severity',
                field: 'severity'
            },
            {
                title: 'Last Updated',
                field: 'lastUpdated'  
            },
             {
                title: 'Product',
                field: 'product'
            }            
        ];

        $scope.data =  [
                {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534530',
                    status: 'Open 1',
                    severity: '3-Medium',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'VMWare vSphere ESXi 5.1',                    
                    supportRequest: '434534534532',
                    status: 'Open 2',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534534',
                    status: 'Open 3',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534538',
                    status: 'Open 4',
                    severity: '4-Low',
                    lastUpdated:'2013-12-12'
                }, 
                {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534531',
                    status: 'Open 5',
                    severity: '2-High',
                    lastUpdated:'2013-12-12'
                },
                 {
                    product: 'My VMWare Portal',                    
                    supportRequest: '434534534533',
                    status: 'Open 6',
                    severity: '4-Low',
                    lastUpdated:'2013-12-12'
                }
               
        ];

        $scope.cellRenderers = {      
          'isCheckboxSelected':'vmf-checkbox-gripper-column-cell-renderer'         
        };

        $scope.options = {
            rowStrips:"true",
            tableTitle:"",
            tableClass:"drag-drop-table",
            colResizeMinWidth:80,
            showManageColumn:true
        };
    }]);
/* tableCtrl */
app.controller("tableCtrl", ['$scope',function($scope) {    

      /* Table Filter Button initialize */
      $scope.startyear = "1990";
      $scope.endyear = "2020";

      $scope.filterData =  [
                        {  tableFilterTitle : "Contract Expiration",
                           name:'level01-filter',
                           type:'default',
                           //url:'data/level01.json',
                           mandatoryDate:true,
                           data:[
                                 { label : 'in fewer than 15 days' , selected :  false,isDateField :false,isWarning:true,isAlert:false},
                                 { label : 'in fewer than 30 days', selected : false,isDateField :false,isWarning:false,isAlert:true },
                                 { label : 'This Quarter 2014 Q1', selected : false,isDateField :false,isWarning:false,isAlert:false },
                                 { label : 'Next Quarter 2013 Q2', selected : false,isDateField :false,isWarning:false,isAlert:false },
                                  { label : '', selected : false,isDateField :true }
                                ]
                        },
                        { tableFilterTitle : "Renewal Status",
                           name:'level02-filter',
                           type:'default',
                          // url:'data/level02.json',
                           mandatoryDate:false,
                           data:[
                                 { label : 'Quote Available' , selected :  false},
                                 { label : 'Quote Note Available', selected : false },
                                 { label : 'Won', selected : false },
                                 { label : 'CDC - Consolidated Child', selected : false },
                                 { label : 'CDP - Consolidated Parent', selected : false },
                                 { label : 'Lost to Others', selected : false },
                                 { label : 'Lost to ELA', selected : false },
                                 { label : 'No Renewal', selected : false }
                                ]
                        },
                        {  tableFilterTitle : "Cross-sell/Up-sell Opportunity",
                           name:'level03-filter',
                           type:'default',
                           //url:'data/level03.json',
                           mandatoryDate:false,
                           data:[
                                 { label : 'With cross-sell/up-sell Oppty.' , selected :  false},
                                 { label : 'Without cross-sell/up-sell oppty.', selected : false }
                                ]
                        },
                        {  tableFilterTitle : "Location",
                           name:'level04-filter',
                           type:'location',
                           //url:'data/level04.json',
                           mandatoryDate:false,
                           data:[
                                 { label : 'in fewer than 15 days' , selected :  false},
                                 { label : 'in fewer than 30 days', selected : false },
                                 { label : 'This Quarter 2014 Q1' , selected :  false},
                                 { label : 'Next Quarter 2013 Q2', selected : false }
                                ]
                        }];

      $scope.autoCompleteData={ "data": [ 
            {"name": "AMER", "code": "AMER", "countries":[
                                  
                  {"name": "Angola", "code": "AO","region":"AMER"},
                  {"name": "Anguilla", "code": "AI","region":"AMER","states":[
                        {"code":"dh","name":"Delhi","countryCode":"AI","region":"AMER"},
                        {"code":"tn","name":"Tamil Nadu","countryCode":"AI","region":"AMER"},
                        {"code":"kl","name":"Kerla","countryCode":"AI","region":"AMER"},
                        {"code":"ad","name":"Andra","countryCode":"AI","region":"AMER"}
                  ]}
              ]
            },
            {"name": "APAC", "code": "APAC","countries":[
                              
                  {"name": "Iceland", "code": "IS","region":"APAC","states":[
                        {"code":"dh","name":"Delhi","countryCode":"IS","region":"APAC"},
                        {"code":"tn","name":"Tamil Nadu","countryCode":"IS","region":"APAC"},
                        {"code":"kl","name":"Kerla","countryCode":"IS","region":"APAC"},
                        {"code":"ad","name":"Andra","countryCode":"IS","region":"APAC"}
                  ]},
                  {"name": "India", "code": "IN", "region":"APAC", "states":[
                        {"code":"dh","name":"Delhi","countryCode":"IN","region":"APAC"},
                        {"code":"tn","name":"Tamil Nadu","countryCode":"IN","region":"APAC"},
                        {"code":"kl","name":"Kerla","countryCode":"IN","region":"APAC"},
                        {"code":"ad","name":"Andra","countryCode":"IN","region":"APAC"}
                  ]}
                ]
            },
            {"name": "EMEA", "code": "EMEA", "countries":[
                  {"region":"EMEA","name": "United Arab Emirates", "code": "AE","states":[
                        {"code":"ca","name":"California","countryCode":"AE","region":"EMEA"},
                        {"code":"nc","name":"Colorado","countryCode":"AE","region":"EMEA"},
                        {"code":"de","name":"Delaware","countryCode":"AE","region":"EMEA"},
                        {"code":"ga","name":"Georgia","countryCode":"AE","region":"EMEA"}
                  ]},
                  {"region":"EMEA","name": "United Kingdom", "code": "GB","states":[
                        {"code":"ca","name":"California","countryCode":"GB","region":"EMEA"},
                        {"code":"nc","name":"Colorado","countryCode":"GB","region":"EMEA"},
                        {"code":"de","name":"Delaware","countryCode":"GB","region":"EMEA"},
                        {"code":"ga","name":"Georgia","countryCode":"GB","region":"EMEA"}
                  ]},
                  {"region":"EMEA","name": "United States", "code": "US", "states":[
                        {"code":"ca","name":"California","countryCode":"US","region":"EMEA"},
                        {"code":"nc","name":"Colorado","countryCode":"US","region":"EMEA"},
                        {"code":"de","name":"Delaware","countryCode":"US","region":"EMEA"},
                        {"code":"ga","name":"Georgia","countryCode":"US","region":"EMEA"}
                  ]}
               ]
            } 
      ]
};
      // User Application can make a service call here based on the filter changed. We have provide the event, target(Name of the filter triggered the event), 
      // items selected in the current filter and all items selected in the entire filters list

      $scope.onItemSelected = function(event, target, itemSelected, allSelectedItems){
          console.log("onItemSelected - IN THE CONFIG CONTROLLER ", event, target, itemSelected , allSelectedItems);
      };

}]);

/* table inline edit controller code*/
 app.controller('InlineEditCtrl',["$scope", function ($scope) {
        $scope.columns = [
         
            {
                title: 'Product',
                field: 'product',
                editable:false,
                draggable:false,
                sort:true            
            },
            {
                title: 'SKU',
                field: 'sku',                
                editable:false,
                draggable:false
            },
            {
                title: 'List price (MSRP)',
                field: 'listPrice',
                editable:true,
                advancedEditOption:false,
                draggable:false
             
            },
             {
                title: 'Customer cost',
                field: 'customerCost',
                editable:true,
                advancedEditOption:true,
                draggable:false
               
            }

            
        ];

        $scope.data =  [
             {
                    product: 'vCloud Director(Server)',
                    productDesc: 'vCloud Director(Server)vCloud Director(Server)vCloud Director(Server)',
                    sku: 'HS-VP1-COM-12MPT1CV1',
                    listPrice: '533.50',
                    customerCost: '533.50',
                    unit:'$'
                },
                {
                    product: 'vCloud Suite',
                    productDesc: 'vCloud Director(Server)vCloud Director(Server)vCloud Director(Server)',
                    sku: 'HS-VP1-COM-12MPT1CV1',
                    listPrice: '5566.70',
                    customerCost: '5566.70',
                    unit:'$'
                },
                {
                    product: 'vSphere with operations management ',
                    productDesc: 'vCloud Director(Server)vCloud Director(Server)vCloud Director(Server)',
                    sku: 'HS-VP1-COM-12MPT1CV1',
                    listPrice: '2345.99',
                    customerCost: '2345.99',
                    unit:'$'
                },
                {
                    product: 'Horizon View',
                    productDesc: 'vCloud Director(Server)vCloud Director(Server)vCloud Director(Server)',
                    sku: 'HS-VP1-COM-12MPT1CV1',
                    listPrice: '354.50',
                    customerCost: '354.50',
                    unit:'$'
                },
                {
                    product: 'vCenter Operations Manager',
                    productDesc: 'vCloud Director(Server)vCloud Director(Server)vCloud Director(Server)',
                    sku: 'HS-VP1-COM-12MPT1CV1',
                    listPrice: '566.20',
                    customerCost: '566.20',
                    unit:'$'
                },
                {
                    product: 'vCenter Server',
                    productDesc: 'vCloud Director(Server)vCloud Director(Server)vCloud Director(Server)',
                    sku: 'HS-VP1-COM-12MPT1CV1',
                    listPrice: '1566.54',
                    customerCost: '1566.54',
                    unit:'$'
                }
        ];
        $scope.cellRenderers = {
                listPrice:'vmf-add-unit',
                customerCost : 'vmf-add-unit'
        };

    }]);
/*Static table controller code*/
app.controller('GroupTableCtrl',['$scope',  function($scope) {
 $scope.columns = [
            {
                title: 'Type',
                field: 'title',
                tdClass: 'contCol'
            },
            {
                title: 'View',
                field: 'size',
                tdClass: 'viewCol'
            }
        ];

        $scope.data = [ 
             { 
              type:'Committee Charters',
              title:'Compensation and Corporate Governance Committee', 
              size : '86.8 KB',
              view:"View"
            },
            { type:'Governance Documents',
              title:'Certificate of Incorporation', 
              size : '219.2 KB',
              view:"View"
            },
            { type:'Governance Documents',
              title:'Bylaws', 
              size : '77.1 KB',
               view:"View"
            },
            { type:'Ethics and Compliance',
              title:'Business Conduct Guidelines', 
              size : '5.4 KB',
               view:"View"
            },
            { type:'Ethics and Compliance',
              title:'VMWare Commitment to Prohibit Slavery and Human Trafficking', 
              size : '58.1 KB',
               view:"View"
            },
            { type:'Committee Charters',
              title:'Audit Committee', 
              size : '98.0 KB',
               view:"View"
            },
            { type:'Committee Charters',
              title:'Mergers and Acquistions Committee', 
              size : '8.2 KB',
               view:"View"
            },
            { type:'Governance Documents',
              title:'Corporate Governance Guidelines', 
              size : '26.0 KB',
               view:"View"
            }
        ];

        $scope.cellRenderers = {
            'title':'vmf-committe-cell-renderer',
            'size':'vmf-size-cell-renderer' 
        };

}]);

app.controller('ProductTableCtrl',['$scope',  function($scope) {

    $scope.columns = [
            {
                title: 'Add-on Service',
                field: 'addonTitle',
                width:550
            },
            {
                title: 'Quantity',
                field: 'productQuantity',
                width:90,
                tdClass: 'controlColumn'
            },
            {
                title: 'Billing Type',
                field: 'billingType',
                width:160,
                tdClass: 'controlColumn'
            },
            {
                title: 'Billing Rate (MSRP)',
                field: 'billingRate',
                width:190,
                tdClass: 'controlColumn'
            }
        ];

       $scope.data = [{
            title:'Compute',
            desc: 'VMWare vCloud Hybrid Service - Virtual Private Cloud A1A - Compute Subscription',
            address:'US _ Nevada Data center 5 GHZ vCPU 20 GB vRAM',
            note:'Must be ordered with production support', 
            subscriptionTitle:'Production Support Subscription',
            subscriptionDesc:'Technical Support 24 Hour Sev 1 Support - 7 days a week',
            discounts : ' Quantity 1-3 :  $400.00 / month Quantity 4-6: $390.00 month/ Quantity 7+: $360.00/month ',
            quantity: '2',
            billingType: 'Monthly',
            billingRate: '$800.00 / month'

        }, {
            title:'Storage',
            desc: 'VMWare vCloud Hybrid Service - Virtual Private Cloud A1A - SSD-Accelerated Storage Subscription',
            address:'US _ Nevada Data center 2 TB SSD-Accelerated Storage',
            note:'',
            subscriptionTitle:'',
            subscriptionDesc:'',
            discounts:'',
            quantity: '',
            billingType: 'Prepaid',
            billingRate: '$3,450.00 for 12 months'

        },
        {
            title:'Bandwidth',
            desc: 'VMWare vCloud Hybrid Service - Virtual Private Cloud A1A - SSD-Accelerated Storage Subscription',
            address:'US _ Nevada Data center 2 TB SSD-Accelerated Storage',
            note:'',
            subscriptionTitle:'',
            subscriptionDesc:'',
            discounts:'',
            quantity: '',
            billingType: 'Prepaid',
            billingRate: '$1,200.00 for 12 months'

        }],

        $scope.cellRenderers = {
            'addonTitle':'vmf-addon-title-cell-renderer', 
            'productQuantity':'vmf-product-quantity-cell-renderer', 
            'billingType': 'vmf-billing-type-cell-renderer',
            'billingRate':  'vmf-billing-rate-cell-renderer'        
        };

     $scope.billingTypeList = ['Monthly','Prepaid'];


    

}]);

app.controller('CallToActionCtrl', function ($scope) {
        $scope.columns = [
           {
                title: 'PRODUCT TITLE',
                field: 'title',
                width:360,
                draggable: false,
                notResizable: true
            },
            {
                title: 'License',
                field: 'license',
                width:100,
                draggable: false,
                notResizable: true
            },
            {
                title: '1 Year Support & Subscription',
                field: 'subscription',
                width:350,
                draggable: false,
                notResizable: true,
                tdClass: 'innerTableCol',
                thClass: 'leftAlignCol'
            },
             {
                title: 'BUY LINK',
                field: 'buy',
                width:190,
                draggable: false,
                notResizable: true,
                tdClass: 'actionCol'
            }
        ];

        $scope.data =  [
                 { title:'vmfware vCloud Suite Standard',
                  desc:'Built on the vSphere Enterprise Plus virtualization platform this edition adds intelligent IT operations and rapid infrastructure provisioning to provide Infrastructre-as-a-Service', 
                  license : '4,995.00',
                  basic: '1,049.00',
                  production : '1,249.00',
                  currency : 'USD'
                },
                { title:'VMware vCloud Suite Advanced',
                  desc:'The advanced edition builds Standards agile and secure Infrastrtucture-as-a-service offering adds compliant IT that makes it easy to meet security and compliance requirements', 
                  license : '7,495.00',
                  basic: '1,574.00',
                  production : '1,874.00',
                  currency : 'USD'
                },
                { title:'VMware vCloud Suite Enterprise',
                  desc:'This edition offers a comprehensive offering for resilient,secure, and compliant private clouds that delivers workload automation to help reduce downtime and accelerate a business solution\'s time to value', 
                  license : '11,495.00',
                  basic: '2,414.00',
                  production : '2,874.00',
                  currency : 'USD'  
                }];


        $scope.cellRenderers = {
            'title':'vmf-title-cell-renderer', 
            'license':'vmf-license-cell-renderer', 
            'subscription': 'vmf-subscription-cell-renderer',
            'buy':  'vmf-buy-cell-renderer'        
        };
    });
/*Pagination table controller code*/
app.controller('QuickViewTableCtrl',['$scope',  function($scope) {

    $scope.columns = [
         
            {
                title: 'Customers',
                field: 'customer',
                draggable:false,
                sort: true,
                sorted:'sort-desc'         
            },
             {
                title: 'Customer ID',
                field: 'customerId',
                draggable:false    
            },
            {
                title: 'Total Order',
                field: 'totalOrder',
                draggable:false                        
            },
            {
                title: 'Total Order Value',
                field: 'totalOrderValue',
                draggable:false,
                editable:true,
                advancedEditOption:false
            }
       ];


    $scope.data = 
         [
          {
                    customer: 'Greenpages Corp.',
                    quickViewTitle: 'Greenpages Corp.',
                    customerId: '23456765436',
                    totalOrder: '45',
                    totalOrderValue: '816,242.56',
                    unit:'$',
                    enableQuickView: {
                        customer: true
                    }

                },
                {
                    customer: 'CDW',
                    quickViewTitle: 'CDW',
                    customerId: '12453456336',
                    totalOrder: '14',
                    totalOrderValue: '5,634.44',
                    unit:'$'        
                },
                {
                    customer: 'Apple Inc',
                    quickViewTitle: 'Apple Inc',
                    customerId: '98754345643',
                    totalOrder: '55',
                    totalOrderValue: '55,543.37',
                    unit:'$',
                    enableQuickView: {
                        customer: true,
                        totalOrder: true
                    }        
                },
                {
                    customer: 'Woodforest National Park',
                    quickViewTitle: 'Woodforest National Park',
                    customerId: '23456767854',
                    totalOrder: '33',
                    totalOrderValue: '845,765.12',
                    unit:'$'        
                },
                {
                    customer: 'Provident Credit Union',
                    quickViewTitle: 'Provident Credit Union',
                    customerId: '65434565467',
                    totalOrder: '43',
                    totalOrderValue: '63,864.23',
                    unit:'$'        
                },
                {
                    customer: 'In-N-Out Burgers, Inc',
                    quickViewTitle: 'In-N-Out Burgers, Inc',
                    customerId: '54345676547',
                    totalOrder: '43',
                    totalOrderValue: '735,646.32',
                    unit:'$'        
                }
        ];
        $scope.cellRenderers = {
                'customer':'vmf-quick-view-cell-renderer',
                'totalOrder': 'vmf-quick-view-cell-renderer',
                'totalOrderValue': 'vmf-add-unit'
        };

        $scope.options = {
            rowStrips:"true",
            tableTitle:"Customers in North America",
            showManageColumn:true
        };
     

    

}]);
/*uiShellCtrl  code controller goes here */
app.controller('uiShellCtrl', function($scope) {
    
});
/*Auto Complete controller code*/
app.controller("autocompleteCtrl", ['$scope',
    function($scope) {
        $scope.user = {};
        $scope.user.firstname;
        $scope.user.lastName;
        $scope.user.search;
        $scope.user.psearch;
        $scope.user.psearchnormal;

        $scope.user.searchCallback = function() {
            //console.log($scope.user.search);
        };

        $scope.user.psearchCallback = function(val) {
            //use val for search input not $scope.psearch
            //console.log(val);
        };

        $scope.data = {};
        $scope.data.list = ['vSphere 4', 'vSphere 5', 'vSphere with Operations', 'Sr. Analyst', 'Sr. Software Engineer', 'Jr. Software Engineer'];
    }
]);
/* wizard progress bar */

app.controller("wizardProgressBarCtrl", ['$scope',
    function($scope) {
        $scope.forward = function() {
            $scope.$broadcast('vmfWpbNext');
        };

        $scope.back = function() {
            $scope.$broadcast('vmfWpbPrevious');
        };

        $scope.radioTitle = "Your Role";

        $scope.radioOptions = [{
            'value': '1',
            'text': 'Primary Business Contact',
            'disabled': false,
            'checked': false
        }, {
            'value': '2',
            'text': 'Primary Technical Contact',
            'disabled': false,
            'checked': false
        }, {
            'value': '3',
            'text': 'Primary Procurement Contact',
            'disabled': false,
            'checked': true
        }];

        $scope.radioName = 'role';
        $scope.radioModel = '3';
        $scope.checkBoxTitle = "Virtualization Initiatives";

        $scope.checkBoxOptions = [{
            'value': '1',
            'text': 'Checked',
            'disabled': false,
            'checked': true
        }, {
            'value': '2',
            'text': 'Unchecked',
            'disabled': false,
            'checked': false
        }, {
            'value': '3',
            'text': 'Checked Disabled',
            'disabled': true,
            'checked': true
        }, {
            'value': '4',
            'text': 'Unchecked Disabled',
            'disabled': true,
            'checked': false
        }];

        $scope.checkBoxName = 'options';
        $scope.user = {};
        $scope.user.firstname;
        $scope.user.lastName;

    }
]);
app.controller("bigFooterController", ["$scope",
function($scope) {
    $scope.footerConfig = {
        navigation : [{
            title : "Vmware Technology",
            links : [{
                name : "Virtualization",
                url : "#"
            }, {
                name : "What is Virtualization?",
                url : "#"
            }, {
                name : "Cloud Computing",
                url : "#"
            }, {
                name : "Software-Defined Data Center",
                url : "#"
            }, {
                name : "End-User Computing",
                url : "#"
            }]
        }, {
            title : "How to Get It",
            links : [{
                name : "Download",
                url : "#"
            }, {
                name : "Contact Sales",
                url : "#"
            }, {
                name : "Find a Partner",
                url : "#"
            }, {
                name : "Buy VMware",
                url : "#"
            }, {
                name : "Learn About Purchase Programs",
                url : "#"
            }, {
                name : "Why choose VMware?",
                url : "#"
            }, {
                name : "Download Partner Products",
                url : "#"
            }]
        }, {
            title : "Get Support",
            links : [{
                name : "Support at VMware",
                url : "#"
            }, {
                name : "Downloads & Patches",
                url : "#"
            }, {
                name : "Search the Knowledge Base",
                url : "#"
            }, {
                name : "Manage Licenses",
                url : "#"
            }, {
                name : "File a Support Request",
                url : "#"
            }, {
                name : "Training",
                url : "#"
            }, {
                name : "Consulting Services",
                url : "#"
            }]
        }, {
            title : "Community",
            links : [{
                name : "VMTN Communities",
                url : "#"
            }, {
                name : "VMWare Blogs",
                url : "#"
            }, {
                name : "VMWare on Twitter",
                url : "#"
            }, {
                name : "VMWare on Facebook",
                url : "https://communities.vmware.com/community/facebook"
            }, {
                name : "VMWare on Youtube",
                url : "#"
            }, {
                name : "Community Terms of Use",
                url : "http://www.vmware.com/community_terms.html"
            }]
        }],
        menuClassMain : "",
        menuClassResponsive : [],
        theme:"",
        commonLinks:[{
            name:"Contact Us",
            url:"#"
        },
        {
            name:"Terms of Use",
            url:"#"
        },
        {
            name:"Privacy",
            url:"#"
        },
        {
            name:"Accessibility",
            url:"#"
        },{
            name:"Site Index",
            url:"#"
        },{
            name:"Help",
            url:"#"
        },
        {
            name:"Feedback",
            url:"#"
        }]
    };
    
    $scope.footerConfig1 = {
        navigation : [{
            title : "Vmware Technology",
            links : [{
                name : "Virtualization",
                url : "#"
            }, {
                name : "What is Virtualization?",
                url : "#"
            }, {
                name : "Cloud Computing",
                url : "#"
            }, {
                name : "Software-Defined Data Center",
                url : "#"
            }, {
                name : "End-User Computing",
                url : "#"
            }]
        }, {
            title : "How to Get It",
            links : [{
                name : "Download",
                url : "#"
            }, {
                name : "Contact Sales",
                url : "#"
            }, {
                name : "Find a Partner",
                url : "#"
            }, {
                name : "Buy VMware",
                url : "#"
            }, {
                name : "Learn About Purchase Programs",
                url : "#"
            }, {
                name : "Why choose VMware?",
                url : "#"
            }, {
                name : "Download Partner Products",
                url : "#"
            }]
        }, {
            title : "Get Support",
            links : [{
                name : "Support at VMware",
                url : "#"
            }, {
                name : "Downloads & Patches",
                url : "#"
            }, {
                name : "Search the Knowledge Base",
                url : "#"
            }, {
                name : "Manage Licenses",
                url : "#"
            }, {
                name : "File a Support Request",
                url : "#"
            }, {
                name : "Training",
                url : "#"
            }, {
                name : "Consulting Services",
                url : "#"
            }]
        }, {
            title : "Community",
            links : [{
                name : "VMTN Communities",
                url : "#"
            }, {
                name : "VMWare Blogs",
                url : "#"
            }, {
                name : "VMWare on Twitter",
                url : "#"
            }, {
                name : "VMWare on Facebook",
                url : "https://communities.vmware.com/community/facebook"
            }, {
                name : "VMWare on Youtube",
                url : "#"
            }, {
                name : "Community Terms of Use",
                url : "http://www.vmware.com/community_terms.html"
            }]
        }],
        menuClassMain : "",
        menuClassResponsive : [],
        theme:"gray",
        commonLinks:[{
            name:"Contact Us",
            url:"#"
        },
        {
            name:"Terms of Use",
            url:"#"
        },
        {
            name:"Privacy",
            url:"#"
        },
        {
            name:"Accessibility",
            url:"#"
        },{
            name:"Site Index",
            url:"#"
        },{
            name:"Help",
            url:"#"
        },
        {
            name:"Feedback",
            url:"#"
        }]
    };

}]);

/*Back Link controller*/

app.controller("backlinkController", ["$scope",
    function($scope) {
        $scope.toLink = "#/Dropdown";
        $scope.toTitle = "Dropdown";
    }
]);
/*carousel Controller starts here*/
app.controller("carouselCtrl", ['$scope', function($scope) {
    $scope.config = {
        "title": "vSphere Topics ",
        "data": [{
                    "img": "../images/carousel/carousel_1.png",
                    "caption": "Virtualization and Cloud"
                }, {
                    "img": "../images/carousel/carousel_2.png",
                    "caption": "Server Consolidation"
                }, {
                    "img": "../images/carousel/carousel_3.png",
                    "caption": "Software-Defined Data"
                }, {
                    "img": "../images/carousel/carousel_4.png",
                    "caption": "Business Continuity"
                }, {
                    "img": "../images/carousel/carousel_1.png",
                    "caption": "Virtualization and Cloud"
                }, {
                    "img": "../images/carousel/carousel_2.png",
                    "caption": "Server Consolidation"
                }, {
                    "img": "../images/carousel/carousel_3.png",
                    "caption": "Software-Defined Data"
                }, {
                    "img": "../images/carousel/carousel_4.png",
                    "caption": "Business Continuity"
                }, {
                    "img": "../images/carousel/carousel_1.png",
                    "caption": "Virtualization and Cloud"
                }, {
                    "img": "../images/carousel/carousel_2.png",
                    "caption": "Server Consolidation"
                }, {
                    "img": "../images/carousel/carousel_3.png",
                    "caption": "Software-Defined Data"
                }, {
                    "img": "../images/carousel/carousel_4.png",
                    "caption": "Business Continuity"
                }, {
                    "img": "../images/carousel/carousel_1.png",
                    "caption": "Virtualization and Cloud"
                }, {
                    "img": "../images/carousel/carousel_2.png",
                    "caption": "Server Consolidation"
                }, {
                    "img": "../images/carousel/carousel_3.png",
                    "caption": "Software-Defined Data"
                }, {
                    "img": "../images/carousel/carousel_4.png",
                    "caption": "Business Continuity"
                }, {
                    "img": "../images/carousel/carousel_1.png",
                    "caption": "Virtualization and Cloud"
                }]
    };
    $scope.carouselClick = function() {
        // definitation of Carousel click event
    };
    $scope.carouselHover = function() {
        // definitation  of Carousel hover event
    };
}]);
/* Content Rating Widget */

app.controller("contentRatingWidgetCtrl", ['$scope',
    function($scope) {

        $scope.recordRating = function() {
            //console.log($scope.radioModel + "-------" + $scope.ratingText);
        };
    }
]);
/*Radio Buttons controller code*/
app.controller("customComponentsController", ['$scope',
    function($scope) {
       $scope.radioButtonGroup1 = {
            name: 'radioButtonGroup1',
            title: 'RadioButtonGroup1',
            required: true,
            msg: "You have to check",
            listClass: 'col-md-8',
            items: [
                {
                    text: "item 1",
                    value: "item value 1",
                    disabled: false,
                    checked: false, 
                    tooltip: false
                },
                {
                    text: "item 2",
                    value: "item value 2",
                    disabled: false,
                    checked: false,
                    tooltip: {
                        'position':'top',
                        'text':'Tooltip on i tag',
                        'skin':'light'
                    }
                },
                {
                    text: "item 3",
                    value: "item value 3",
                    disabled: false,
                    checked: false,
                    tooltip: false
                }
            ]
        };
        $scope.radioButtonGroup2 = {
            name: 'RadioButtonGroup2',
            listClass: 'col-md-8',
            items: [
                {
                    text: "item 1",
                    value: "item value 1",
                    disabled: true,
                    checked: false,
                    tooltip: false
                },
                {
                    text: "item 2",
                    value: "item value 2",
                    disabled: true,
                    checked: true,
                    tooltip: false
                }
            ]
        };
        $scope.radioButtonGroup3 = {
            name: 'RadioButtonGroup3',
            required: true,
            listClass: 'col-md-8',
            items: [
                {
                    text: "item 1",
                    value: "item value 1",
                    disabled: false,
                    checked: false
                }
            ]
        };
        $scope.formData = {};
        $scope.formData.value1 = "";
        $scope.formData.value2 = "";
        $scope.checkBoxGroup1 = {
            name: 'checkBoxGroup1',
            title: 'checkBoxGroup1',
            required: true,
            listClass: 'col-md-8',
            items: [
                {
                    text: "item1",
                    value: "item value 1",
                    disabled: true,
                    checked: true
                },
                {
                    text: "item2",
                    value: "item value 2",
                    disabled: false,
                    checked: false
                },
                {
                    text: "item3",
                    value: "item value 3",
                    disabled: false,
                    checked: true
                }
            ]
        };
        $scope.checkBoxGroup2 = {
            name: 'checkBoxGroup2',
            required: true,
            listClass: 'col-md-8',
            items: [
                {
                    text: "item1",
                    value: "item value 1",
                    disabled: false,
                    checked: false
                }
            ]
        };
    $scope.formData.value3 = "";
    $scope.formData.value4 = "";
    $scope.formData.value5 = "";
    $scope.check = function() {
        console.log($scope.formData);
    };
    }
]);
/*Drop Down List controller code*/

app.controller("dropDownCtrl", ['$scope',
    function($scope) {
        $scope.revenue;
        $scope.revenue2;
        $scope.month;
        $scope.seperatorGroupvalue;
        $scope.indentationGroupvalue;
        $scope.submenuGroupvalue;
        $scope.customclass = [{
            "selector": ".current-selection",
            "cusclass": "check1"

        }, {
            "selector": ".current-selection",
            "cusclass": "check2"
        }];

        $scope.revenues = [350000000, 150000000, 200000000, 300000000, 400000000, 250000000];

         $scope.truncateVals = ["522780245 - Agility Worldwide Inc. With some extra text about 70 chars now",
            "522780245 - Amazing Inc.  Customer Support",
            "522780245 - Worldwide Inc. - Customer Support",
            "522780245 - Agility Worldwide Inc. - Support",
            "522780245 - Agility - Customer Support",
            "522780245 - Agility Worldwide Inc. - Customer Support"];
        $scope.truncateVals2 = ['522780245 - Agility Worldwide Inc. With some extra text about 70 chars now Agility Worldwide Inc. With some extra text about 70 chars now Agility Worldwide Inc. With some extra text about 70 chars now Agility Worldwide Inc. With some extra text about 70 chars now',
            '522780245 - Amazing Inc. - Customer Support',
            '522780245 - Worldwide Inc. - Customer Support',
            '522780245 - Agility Worldwide Inc. - Support',
            '522780245 - Agility - Customer Support',
            '522780245 - Agility Worldwide Inc. - Customer Support'];

         $scope.optionsWithGroup = [
            [
                {
                    "value": "RT00",
                    "text": "About Products",
                    "label" : "true",
                    "selectable":"true"
                },
                {
                    "value": "RT01",
                    "text": "Products and Licenses Details"
                }
            ],
            [
                {
                    "value": "RT02",
                    "text": "Support Contracts",
                    "label" : "true",
                    "selectable":"true"
                },
                {
                    "value": "RT04",
                    "text": "Current Products/Licenses and Users with Access"
                },
                {
                    "value": "RT03",
                    "text": "Product Updates History"
                },
                {
                    "value": "RT08",
                    "text": "Upgradable Products and Licenses Details"
                },
                {
                    "value": "RT09",
                    "text": "All Subscription Services"
                }
            ],
            [
                {
                    "value": "",
                    "text": "About Users & Permissions",
                    "label" : "true"
                },
                {
                    "value": "RT05",
                    "text": "My VMware Account Access Summary"
                },
                {
                    "value": "RT06",
                    "text": "Users and Permissions Details"
                },
                {
                    "value": "RT07",
                    "text": "Users and Permissions History"
                }
            ]
        ];

        $scope.optionsWithSeperator = [
            [
                {
                    "value": "RT00",
                    "text": "About Products"
                },
                {
                    "value": "RT01",
                    "text": "Products and Licenses Details"
                }
            ],
            [
                {
                    "value": "RT02",
                    "text": "Support Contracts"
                },
                {
                    "value": "RT04",
                    "text": "Current Products/Licenses and Users with Access"
                },
                {
                    "value": "RT03",
                    "text": "Product Updates History"
                },
                {
                    "value": "RT08",
                    "text": "Upgradable Products and Licenses Details"
                },
                {
                    "value": "RT09",
                    "text": "All Subscription Services"
                }
            ],
            [
                {
                    "value": "",
                    "text": "About Users & Permissions",
                },
                {
                    "value": "RT05",
                    "text": "My VMware Account Access Summary"
                },
                {
                    "value": "RT06",
                    "text": "Users and Permissions Details"
                },
                {
                    "value": "RT07",
                    "text": "Users and Permissions History"
                }
            ]
        ];



		$scope.submenuarray = [
            {
                'value': 'Small',
                'text': 'Small value',
                'submenu' : [
                    {
                        'value': 150,
                        'text': '&#150'
                    }, {
                        'value': 200,
                        'text': '&#200'
                    }, {
                        'value': 350,
                        'text': '&#350'
                    }, {
                        'value': 400,
                        'text': '&#400'
                    }
                ]
            },
            {
                'value':'Medium',
                'text': 'Medium value',
                'submenu' : [
                    {
                        'value': 500,
                        'text': '&#500'
                    }, {
                        'value': 1000,
                        'text': '&#1,000'
                    }, {
                        'value': 2000,
                        'text': '&#2,000'
                    }, {
                        'value': 3000,
                        'text': '&#3,000'
                    }, {
                        'value': 5000,
                        'text': '&#5,000'
                    }
                ]
            },
            {
                'value': 'High',
                'text': 'High value',
                'submenu' : [
                    {
                        'value': 7000,
                        'text': '&#7,000'
                    }, {
                        'value': 10000,
                        'text': '&#10,000'
                    }, {
                        'value': 20000,
                        'text': '&#20,000'
                    }, {
                        'value': 50000,
                        'text': '&#50,000'
                    }
                ]
            }

        ];

        $scope.monthsObj = [{
                'value': 1,
                'text': 'Jan'
            }, {
                'value': 2,
                'text': 'Feb'
            }, {
                'value': 12,
                'text': 'Dec'
            }, {
                'value': 10,
                'text': 'Oct'
            }, {
                'value': 11,
                'text': 'Nov'
            }, {
                'value': 3,
                'text': 'Mar'
            }, {
                'value': 6,
                'text': 'June'
            }, {
                'value': 8,
                'text': 'Aug'
            }, {
                'value': 4,
                'text': 'Apr'
            }, {
                'value': 7,
                'text': 'Jul'
            }, {
                'value': 9,
                'text': 'Sep'
            }, {
                'value': 5,
                'text': 'May'
            }

        ];

    }
]);
app.controller('HelloCtrl', function ($scope) {
  $scope.hello = "Hello hows r u";
  $scope.clear = "Clear";
  $scope.continue = "Continue";
  $scope.email = "Email";
  $scope.lname = "Last Name";
  $scope.fname = "First Name";
  $scope.help = "Help";
  $scope.addNewUser = "Add User";
  $scope.cancelName = "Cancel";
  $scope.confirm = "Confirm";
  $scope.lastName ="";
  $scope.firstname="";
  $scope.emailid="";
  $scope.emailAddress = "E-mail";


  $scope.submit = function(){
    alert("Submitted");
  }

 $scope.cancel = function(){
    alert("Cancelled");
  }

  $scope.monthsObj = [{
                'value': 1,
                'text': 'Jan'
            }, {
                'value': 2,
                'text': 'Feb'
            }, {
                'value': 12,
                'text': 'Dec'
            }, {
                'value': 10,
                'text': 'Oct'
            }, {
                'value': 11,
                'text': 'Nov'
            }, {
                'value': 3,
                'text': 'Mar'
            }, {
                'value': 6,
                'text': 'June'
            }, {
                'value': 8,
                'text': 'Aug'
            }, {
                'value': 4,
                'text': 'Apr'
            }, {
                'value': 7,
                'text': 'Jul'
            }, {
                'value': 9,
                'text': 'Sep'
            }, {
                'value': 5,
                'text': 'May'
            }

        ];
        
});


/*Checkbox controller code*/

app.controller("checkBoxCtrl", ['$scope',function($scope) {
        
        $scope.checkBoxOptions = [{
            'value': '1',
            'text': 'Checked',
            'disabled': false,
            'checked': true
        }, {
            'value': '2',
            'text': 'Unchecked <span class="toolTip-icon vmf-tooltip" vmf-tooltip tooltip-options="{\'position\':\'right\',\'text\':\'<h5>Total Revenue</h5> Lorem ipsum dolor sit amet aconsecteututur ullem elit, sed Lorem ipsum dolor sit amet aconsecteututur ullem elit, sed\'}"></span>', 
            'disabled': false,
            'checked': false
        }, {
            'value': '3',
            'text': 'Checked Disabled',
            'disabled': true,
            'checked': true
        }, {
            'value': '4',
            'text': 'Unchecked Disabled',
            'disabled': true,
            'checked': false
        }];

        $scope.checkBoxTitle = "Virtualization Initiatives";

        $scope.checkBoxName = 'options';

        $scope.checkBoxOptions2 = [{
            'value': '1',
            'text': 'Checked',
            'disabled': false,
            'checked': true
        }, {
            'value': '2',
            'text': 'Unchecked', 
            'disabled': false,
            'checked': false
        }, {
            'value': '3',
            'text': 'Checked Disabled',
            'disabled': true,
            'checked': true
        }, {
            'value': '4',
            'text': 'Unchecked Disabled',
            'disabled': true,
            'checked': false
        }];

        $scope.customclass = [{
            "selector": ".labelHeader",
            "cusclass": "check1"
        }, {
            "selector": ".labelHeader",
            "cusclass": "check2"
        }];
    }
]);

/* empty state controller */
/* Form Validation Controller  */


app.controller("formRegistrationController", ["$scope", "ModalService",
    function($scope, ModalService) {
        $scope.pw = '';
        $scope.user = {};
        $scope.user.firstName = null;
        $scope.user.lastName = null;
        $scope.user.email = null;
        $scope.user.company = null;
        $scope.user.postalCode = null;
        $scope.user.url = null;
        $scope.user.limits = null;
        $scope.user.duns = null;
        $scope.user.phone = null;
        $scope.user.confirm_password = null;
        $scope.user.password = null;
        $scope.user.revenue = null;
        $scope.user.checkBoxModel = null;
        $scope.user.checkBoxModel2 = null;
        $scope.user.ipAddress = null;
        $scope.user.creditCard = null;
        $scope.user.rangeLength = null;
        $scope.user.equalTo = null;
        $scope.user.alphanumeric = null;
        $scope.user.radioModel = null;
        $scope.user.reEnterPassword = null;
        $scope.masterCopy = angular.copy($scope.user);
        $scope.revenuesObj = [{
            'value': 350000000,
            'text': '&#36;350,000,000'
        }, {
            'value': 150000000,
            'text': '&#36;150,000,000'
        }, {
            'value': 200000000,
            'text': '&#36;200,000,000'
        }, {
            'value': 850000000,
            'text': '&#36;850,000,000'
        }, {
            'value': 900000000,
            'text': '&#36;900,000,000'
        }, {
            'value': 300000000,
            'text': '&#36;300,000,000'
        }, {
            'value': 400000000,
            'text': '&#36;400,000,000'
        }, {
            'value': 250000000,
            'text': '&#36;250,000,000'
        }, {
            'value': 450000000,
            'text': '&#36;450,000,000'
        }, {
            'value': 700000000,
            'text': '&#36;700,000,000'
        }, {
            'value': 550000000,
            'text': '&#36;550,000,000'
        }, {
            'value': 650000000,
            'text': '&#36;650,000,000'
        }, {
            'value': 600000000,
            'text': '&#36;600,000,000'
        }, {
            'value': 750000000,
            'text': '&#36;750,000,000'
        }, {
            'value': 800000000,
            'text': '&#36;800,000,000'
        }, {
            'value': 500000000,
            'text': '&#36;500,000,000'
        }];
        $scope.warningtype = 'warning';
        $scope.isInfoMessage = false;
        $scope.infomessage = "Please provide information below.";

        $scope.radioTitle = "Your Role";
        $scope.radioOptions = [{
            'value': '1',
            'text': 'Primary Business Contact',
            'disabled': false,
            'checked': false
        }, {
            'value': '2',
            'text': 'Primary Technical Contact',
            'disabled': false,
            'checked': false
        }];

        $scope.radioName = 'role';
       $scope.checkBoxOptions2 = [{
        'value': '1',
        'text': '<i class="mandatory">*</i>I agree to the terms and conditions outlined in the <a href="#">VMware vCenter Server End-User License Agreement</a>',
        'disabled': false,
        'checked': false
        },
        {
        'value': '2',
        'text': 'Yes, I would like to recieve email communications related to VMware including newsletters and invitation-only events. I understand that any information I provide will be treated in accoedance with the VMware <a href="#" ng-click="invoke(\'privacyPolicy\',$event)" class="vmfModal">Privacy Policy</a>.',
        'disabled': false,
        'checked': false
        }                      
        ];

        $scope.formSubmitFunction = function() {
            console.log($scope.user);
        };


        $scope.breadcrumbName = 'sample';
        $scope.breadcrumbTitle = "vmf-breadCrumb";
        $scope.breadcrumbPath = [{
            'text': 'Home'
        }, {
            'text': 'Update My Vmware Profile',
            'url': ''
        }];

        $scope.formAgreement = function(e) {

            ModalService.showModal({
                templateUrl: 'dev/modules/formRegistration/template/agreement.html',
                controller: "registarionCtrl"
            }).then(function(modal) {
                modal.element.modal();
            });


        };
        
        $scope.privacyPolicy = function(e) {

            ModalService.showModal({
                templateUrl: 'dev/modules/formRegistration/template/privacyPolicy.html',
                controller: "registarionCtrl"
            }).then(function(modal) {
                modal.element.modal();
            });


        };

        $scope.$on('invoke', function(evt, data) {
            $scope[data.method](data.evt);
        });
        $scope.showRegistration = true;
        $scope.showCheckEmail = false;
        $scope.showPswdReEneter = false;
        $scope.showAccActivated = false;
        $(".registrationPageForm").removeClass("ng-hide").css("display","block");
        $(".checkEmail").addClass("ng-hide").css("display","none");
        $(".passwordForm").addClass("ng-hide").css("display","none");
        $(".activationForm").addClass("ng-hide").css("display","none");
        $scope.registrationFormSubmit = function() {
            $scope.showRegistration = false;
            $scope.showCheckEmail = true;
            $scope.showPswdReEneter = false;
            $scope.showAccActivated = false;
            $(".registrationPageForm").addClass("ng-hide").css("display","none");
            $(".checkEmail").removeClass("ng-hide").css("display","block");
            $(".passwordForm").addClass("ng-hide").css("display","none");
            $(".activationForm").addClass("ng-hide").css("display","none");
            
            Placeholders.enable();
                
        };
        $scope.checkEmailFormSubmit = function() {
            $scope.showRegistration = false;
            $scope.showCheckEmail = false;
            $scope.showPswdReEneter = true;
            $scope.showAccActivated = false;
            $(".registrationPageForm").addClass("ng-hide").css("display","none");
            $(".checkEmail").addClass("ng-hide").css("display","none");
            $(".passwordForm").removeClass("ng-hide").css("display","block");
            $(".activationForm").addClass("ng-hide").css("display","none");
            
            Placeholders.enable();
                
        };
        $scope.pswdConformationFormSubmit = function() {
            $scope.showRegistration = false;
            $scope.showPswdReEneter = false;
            $scope.showCheckEmail = false;
            $scope.showAccActivated = true;
            $(".registrationPageForm").addClass("ng-hide").css("display","none");
            $(".checkEmail").addClass("ng-hide").css("display","none");
            $(".passwordForm").addClass("ng-hide").css("display","none");
            $(".activationForm").removeClass("ng-hide").css("display","block");
        };

    }
]);

app.controller("registarionCtrl", ["$scope",function($scope) {

    $scope.okModal=function() {
        console.log('okModal');
    };
    $scope.print=function() {
        console.log('print');
    };
}]);


/*Global Navigation controller*/

app.controller('globalNavCtrl', function($scope) {
    $scope.showDetails=true;
    $scope.navMenu = [

        {
            "title": "Products",
            "href": "#",
            "id": "products",
            "viewMore": "View Products",
            "menu": [{
                    column1: {
                        submenu: [{
                            "title": "Data Center & Cloud Infrastructure",
                            items: [{
                                "title": "vCloud Suite",
                                "href": "#"
                            }, {
                                "title": "vSphere with Operations Management",
                                "href": "#"
                            }, {
                                "title": "vSphere",
                                "href": "#"
                            }]

                        }, {
                            "title": "Networking & Security",
                            items: [{
                                "title": "NSX",
                                "href": "#"
                            }]

                        }, {
                            "title": "Storage & Availability",
                            items: [{
                                "title": "Virtual SAN",
                                "href": "#"
                            }, {
                                "title": "vCenter Site Recovery Manager",
                                "href": "#"
                            }]

                        }]
                    },
                    column2: {
                        submenu: [{
                            "title": "Infrastructure as a Service",
                            items: [{
                                "title": "vCloud Air Dedicated Cloud",
                                "href": "#"
                            }, {
                                "title": "vCloud Air Virtual Private Cloud",
                                "href": "#"
                            }, {
                                "title": "vCloud Air Disaster Recovery",
                                "href": "#"
                            }]

                        }, {
                            "title": "Data Center & Cloud Management",
                            items: [{
                                "title": "vRealize Suite",
                                "href": "#"
                            }, {
                                "title": "vRealize Operations Insight",
                                "href": "#"
                            }, {
                                "title": "vRealize Automation",
                                "href": "#"
                            }]

                        }, {
                            "title": "Personal Desktop",
                            items: [{
                                "title": "Fusion",
                                "href": "#"
                            }, {
                                "title": "Fusion Pro",
                                "href": "#"
                            }, {
                                "title": "Workstation",
                                "href": "#"
                            }, {
                                "title": "Player Pro",
                                "href": "#"
                            }]

                        }]
                    },
                    column3: {
                        submenu: [{
                            "title": "Desktop & Application Virtualization",
                            items: [{
                                "title": "Horizon (with View)",
                                "href": "#"
                            }, {
                                "title": "Horizon Air Desktops",
                                "href": "#"
                            }, {
                                "title": "Horizon FLEX",
                                "href": "#"
                            }]

                        }, {
                            "title": "Enterprise Mobility Management",
                            items: [{
                                "title": "AirWatch",
                                "href": "#"
                            }]

                        }, {
                            "title": "Hyper-Converged Infrastructure",
                            items: [{
                                "title": "EVO:RAIL",
                                "href": "#"
                            }]

                        }, {
                            "title": "Free Products",
                            items: [{
                                "title": "vSphere Hypervisor",
                                "href": "#"
                            }, {
                                "title": "vCenter Converter",
                                "href": "#"
                            }]

                        }]
                    },
                    column4: {
                        submenu: [{
                            "title": "Related Topics",
                            items: [{
                                "title": "Software-Defined Data Center",
                                "href": "#"
                            }, {
                                "title": "Virtualization",
                                "href": "#"
                            }, {
                                "title": "Cloud Computing",
                                "href": "#"
                            }, {
                                "title": "Virtualization & Cloud Management",
                                "href": "#"
                            }, {
                                "title": "End-User Computing",
                                "href": "#"
                            }, {
                                "title": "Virtualizing Enterprise Applications",
                                "href": "#"
                            }, {
                                "title": "Industry Solutions",
                                "href": "#"
                            }, {
                                "title": "Horizon Solutions",
                                "href": "#"
                            }, {
                                "title": "Small Business Solutions",
                                "href": "#"
                            }]

                        }]
                    }
                }

            ]
        },

        {
            "title": "Support",
            "href": "#",
            "id": "support",
            "menu": [{
                    column1: {
                        submenu: [{
                            "title": "Product Support Centers",
                            items: [{
                                "title": "vSphere",
                                "href": "#"
                            }, {
                                "title": "vCloud Air (formerly vCloud Hybrid Service)",
                                "href": "#"
                            }, {
                                "title": "vSphere with Operations Management",
                                "href": "#"
                            }, {
                                "title": "Horizon (with View)",
                                "href": "#"
                            }, {
                                "title": "vCloud Director",
                                "href": "#"
                            }, {
                                "title": "vRealize Operations",
                                "href": "#"
                            }, {
                                "title": "Fusion",
                                "href": "#"
                            }, {
                                "title": "Workstation",
                                "href": "#"
                            }, {
                                "title": "vSphere Hypervisor (ESXi)",
                                "href": "#"
                            }, {
                                "title": "vCenter Server",
                                "href": "#"
                            }]

                        }]
                    },
                    column2: {
                        submenu: [{
                            "title": "Top Support Tasks",
                            items: [{
                                "title": "Search Knowledge Base",
                                "href": "#"
                            }, {
                                "title": "Login to My VMware",
                                "href": "#"
                            }, {
                                "title": "File a Support Request",
                                "href": "#"
                            }, {
                                "title": "View Filed Support Requests",
                                "href": "#"
                            }, {
                                "title": "Manage Support Contracts",
                                "href": "#"
                            }, {
                                "title": "View Orders",
                                "href": "#"
                            }, {
                                "title": "Register Products",
                                "href": "#"
                            }, {
                                "title": "Manage Your License Keys",
                                "href": "#"
                            }]

                        }]
                    },
                    column3: {
                        submenu: [{
                            "title": "Support Resources",
                            items: [{
                                "title": "Security Advisories",
                                "href": "#"
                            }, {
                                "title": "Product Documentation",
                                "href": "#"
                            }, {
                                "title": "Technical Papers",
                                "href": "#"
                            }, {
                                "title": "Compatibility Guides",
                                "href": "#"
                            }, {
                                "title": "Customer Advocacy",
                                "href": "#"
                            }]

                        }]
                    }
                }

            ]
        }, {
            "title": "Downloads",
            "href": "#",
            "id": "downloads",
            "viewMore": "All Downloads, Drivers & Tools",
            "menu": [{
                    column1: {
                        submenu: [{
                            "title": "Product Downloads",
                            items: [{
                                "title": "vSphere",
                                "href": "#"
                            }, {
                                "title": "vSphere with Operations Management",
                                "href": "#"
                            }, {
                                "title": "vCloud Director",
                                "href": "#"
                            }, {
                                "title": "vCloud Suite",
                                "href": "#"
                            }, {
                                "title": "VMware vSphere Hypervisor (ESXi)",
                                "href": "#"
                            }, {
                                "title": "vCenter Site Recovery Manager",
                                "href": "#"
                            }, {
                                "title": "Horizon (with View)",
                                "href": "#"
                            }, {
                                "title": "Fusion",
                                "href": "#"
                            }, {
                                "title": "Workstation",
                                "href": "#"
                            }]

                        }]
                    },
                    column2: {
                        submenu: [{
                            "title": "Free Product Trials",
                            items: [{
                                "title": "Accelerate Advisory Services",
                                "href": "#"
                            }, {
                                "title": "vSphere",
                                "href": "#"
                            }, {
                                "title": "vSphere with Operations Management",
                                "href": "#"
                            }, {
                                "title": "vCloud Director",
                                "href": "#"
                            }, {
                                "title": "vCenter Site Recovery Manager",
                                "href": "#"
                            }, {
                                "title": "Horizon (with View)",
                                "href": "#"
                            }, {
                                "title": "Fusion",
                                "href": "#"
                            }, {
                                "title": "Workstation",
                                "href": "#"
                            }, {
                                "title": "All Product Trials",
                                "href": "#"
                            }]

                        }]
                    },
                    column3: {
                        submenu: [{
                            "title": "Free Product Downloads",
                            items: [{
                                "title": "vSphere Hypervisor",
                                "href": "#"
                            }, {
                                "title": "vCenter Converter",
                                "href": "#"
                            }, {
                                "title": "Compliance Checker for PCI",
                                "href": "#"
                            }, {
                                "title": "Compliance Checker for vSphere",
                                "href": "#"
                            }, {
                                "title": "Player",
                                "href": "#"
                            }]

                        }]
                    }
                }

            ]
        },

        {
            "title": "Consulting",
            "href": "#",
            "id": "consulting",
            "menu": [{
                    column1: {
                        submenu: [{
                            "title": "Consulting Services",
                            items: [{
                                "title": "Accelerate Advisory Services",
                                "href": "#"
                            }, {
                                "title": "Technology Consulting",
                                "href": "#"
                            }, {
                                "title": "Technical Account Manager Services",
                                "href": "#"
                            }, {
                                "title": "Service Portfolio",
                                "href": "#"
                            }, {
                                "title": "Purchase Training & Consulting Credits",
                                "href": "#"
                            }]

                        }]
                    }
                }

            ]
        }, {
            "title": "Partners",
            "href": "#",
            "id": "partners",
            "menu": [{
                    column1: {
                        submenu: [{
                            "title": "Partner Programs",
                            "hasItems":true,
                            items: [{
                                "title": "Resellers"
                            }, {
                                "title": "VMware Solution Provider Program",
                                "href": "#"
                            }, {
                                "title": "Solution Competencies",
                                "href": "#"
                            }, {
                                "title": "Specializations",
                                "href": "#"
                            }]

                        }, {
                            "hasItems":true,
                           // "title": "Networking & Security",
                            items: [{
                                "title": "Services"
                            }, {
                                "title": "VMware Service Provider Program (VSPP)",
                                "href": "#"
                            }, {
                                "title": "Consulting and Integration Partner Programs (CIPP)",
                                "href": "#"
                            }, {
                                "title": "VMware Authorized Training Centers (VATC)",
                                "href": "#"
                            }]

                        }, {
                            "hasItems":true,
                        //    "title": "Storage & Availability",
                            items: [{
                                "title": "Technology"
                            }, {
                                "title": "Technology Alliance Partner Program (TAP)",
                                "href": "#"
                            }, {
                                "title": "VMware Ready",
                                "href": "#"
                            }, {
                                "title": "Embedded OEM",
                                "href": "#"
                            }, {
                                "title": "ISV Center",
                                "href": "#"
                            }, {
                                "title": "VMware Solution Exchange",
                                "href": "#"
                            }, {
                                "title": "OEM Partner Program",
                                "href": "#"
                            }]

                        }]
                    },
                    column2: {
                        submenu: [{
                            "title": "Partner Resources",
                            items: [{
                                "title": "Partner Central",
                                "href": "#"
                            }, {
                                "title": "Partner University",
                                "href": "#"
                            }, {
                                "title": "Promote Products and Solutions",
                                "href": "#"
                            }, {
                                "title": "My VMware Partner Resources",
                                "href": "#"
                            }]

                        }, {
                            "title": "Global Research and Education",
                            items: [{
                                "title": "VMware IT Academy Program",
                                "href": "#"
                            }, {
                                "title": "VMware Academic Program",
                                "href": "#"
                            }]

                        }, {
                            "title": "Find Partners",
                            items: [{
                                "title": "Global Alliances",
                                "href": "#"
                            }, {
                                "title": "Partner Locator",
                                "href": "#"
                            }, {
                                "title": "Consulting and Integration Partners",
                                "href": "#"
                            }, {
                                "title": "VMware Solution Exchange",
                                "href": "#"
                            }]

                        }]
                    }

                }

            ]
        }, {
            "title": "Company",
            "href": "#",
            "id": "company",
            "menu": [{
                    column1: {
                        submenu: [{
                            "title": "News & Events",
                            items: [{
                                "title": "Newsroom",
                                "href": "#"
                            }, {
                                "title": "Events",
                                "href": "#"
                            }, {
                                "title": "On Demand Webcasts",
                                "href": "#"
                            }]

                        }, {
                            "title": "Company Information",
                            items: [{
                                "title": "Executive Leadership",
                                "href": "#"
                            }, {
                                "title": "Leadership Perspectives",
                                "href": "#"
                            }, {
                                "title": "Careers at VMware",
                                "href": "#"
                            }, {
                                "title": "Executive Resource Center",
                                "href": "#"
                            }, {
                                "title": "Why Choose VMware",
                                "href": "#"
                            }, {
                                "title": "Contact VMware",
                                "href": "#"
                            }, {
                                "title": "Company Merchandise",
                                "href": "#"
                            }]

                        }]
                    },
                    column2: {
                        submenu: [{
                            "title": "Customers",
                            items: [{
                                "title": "Customers",
                                "href": "#"
                            }]

                        }, {
                            "title": "Investor Relations",
                            items: [{
                                "title": "Investor Relations",
                                "href": "#"
                            }]

                        }]
                    }

                }

            ]
        }
    ];
});
/*Login controller */

app.controller('loginController', function($scope, ModalService) {

    $scope.show = function() {
        ModalService.showModal({
            templateUrl: 'dev/modules/login/template/login.html',
            controller: "LoginBoxController"
        }).then(function(modal) {
            modal.element.modal();
        });
    };
});

app.controller('LoginBoxController', function($scope) {

    $scope.rememberMe = true;
    $scope.btn = function() {
        console.log('button');
    };

    $scope.authenticate = function($event) {
      
        var authToken = "token";
        var res_userName = " ";
        var res_password = " ";
        $scope.errorClass1 = false;
        $scope.errorClass2 = false;
        $scope.errorMsg = false;

        var userName = $scope.userName;
        var password = $scope.password;
        var isChecked = $scope.rememberMe;

        console.log(userName + "===" + password + "===" + isChecked);
        angular.element($event.target).closest('form').find('.vmf-text-input').removeClass('error-msg');

        if (userName === "" || userName === undefined) {
            angular.element($event.target).closest('form').find('input[ng-model="userName"]').closest('.vmf-text-input').addClass('error-msg');
        }
        if (password === "" || password === undefined) {
            angular.element($event.target).closest('form').find('input[ng-model="password"]').closest('.vmf-text-input').addClass('error-msg');
        }
    };
});
app.controller("mainCtrl", ['$scope','$http','$rootScope','$location',
    function($scope,$http,$rootScope,$location) {
        console.log($location.path().replace(/\//g, ''));
        $scope.dumphtml = function(url,direc,ctrl){
            console.log('inside mainctrl');
			url = "modules/"+url;
			direc = "modules/"+direc;
			ctrl = "modules/"+ctrl;
			console.log(url);
			console.log(direc);
			console.log(ctrl);
			$scope.component = "Select Component";

			$http.get('/api/filecontent/' + '?url=' + url)
			.success(function(data) {
				$scope.html = data;
				// console.log(data);

			})
			.error(function(data) {
				console.log('Error: ' + data);
			});
			$http.get('/api/filecontent/' + '?url=' + direc)
			.success(function(data) {
				$scope.direc = data;
				// console.log(data);

			})
			.error(function(data) {
				console.log('Error: ' + data);
			});
			$http.get('/api/filecontent/' + '?url=' + ctrl)
			.success(function(data) {
				$scope.ctrl = data;
				// console.log(data);

			})
			.error(function(data) {
				console.log('Error: ' + data);
			});
        };

    }
]);

/*Modal Overlay controller code*/

app.controller('modalCtrl', ['$scope',
    function($scope, $modal) {
        $scope.modalShown = false;
        $scope.toggleModal = function() {
            $scope.modalShown = true;
        };
        $scope.backFun = function(p) {
            console.log("back called", p);
        };
    }
]);
app.controller("paginationCtrl", function($scope) {  

});
/*ToolTip controller code*/

app.controller('toolTipController', function($scope) {
    $scope.defaultOptions = {
        skin: 'dark',
        position: "right",
        radius: true,
        size: 'large',
        hideDelay: 3000,
        showOn: 'mouseover',
        hideOn: 'mouseleave',
        //showOn: 'click',
        //hideOn: 'click',
        maxWidth: "180",
        close: false,
        customClass: "tempClass",
        offsetX: 0,
        offsetY: 0
    };
    $scope.revenues = [350000000, 150000000, 200000000, 300000000, 400000000, 250000000];

    $scope.revenuesObj = [{
        'value': 350000000,
        'text': '&#36;350,000,000'
    }, {
        'value': 150000000,
        'text': '&#36;150,000,000'
    }, {
        'value': 200000000,
        'text': '&#36;200,000,000'
    }, {
        'value': 850000000,
        'text': '&#36;850,000,000'
    }, {
        'value': 900000000,
        'text': '&#36;900,000,000'
    }, {
        'value': 300000000,
        'text': '&#36;300,000,000'
    }, {
        'value': 400000000,
        'text': '&#36;400,000,000'
    }, {
        'value': 250000000,
        'text': '&#36;250,000,000'
    }, {
        'value': 450000000,
        'text': '&#36;450,000,000'
    }, {
        'value': 700000000,
        'text': '&#36;700,000,000'
    }, {
        'value': 550000000,
        'text': '&#36;550,000,000'
    }, {
        'value': 650000000,
        'text': '&#36;650,000,000'
    }, {
        'value': 600000000,
        'text': '&#36;600,000,000'
    }, {
        'value': 750000000,
        'text': '&#36;750,000,000'
    }, {
        'value': 800000000,
        'text': '&#36;800,000,000'
    }, {
        'value': 500000000,
        'text': '&#36;500,000,000'
    }];

    $scope.checkBoxTitle = "Virtualization <span class='tempClassCheck'>Initiatives</span>";

    $scope.checkBoxOptions = [{
        'value': '1',
        'text': 'Checked',
        'disabled': false,
        'checked': true
    }, {
        'value': '2',
        'text': 'Unchecked',
        'disabled': false,
        'checked': false
    }, {
        'value': '3',
        'text': 'Checked Disabled',
        'disabled': true,
        'checked': true
    }, {
        'value': '4',
        'text': 'Unchecked Disabled',
        'disabled': true,
        'checked': false
    }];

    $scope.checkBoxName = 'options';
});
/* Product Alerts Controller */

app.controller('productAlertsController', function($scope) {
    $scope.config = {
        title: "Alerts",
        data: [{
            "name": "vcenter server 5.1 startup may be slow",
            "description": "vmware and EMC have identified two issues with powerpath/VE 5.7"
        }, {
            "name": "vcenter server 5.1 startup may be slow",
            "description": "vmware and EMC have identified two issues with powerpath/VE 5.7"
        }, {
            "name": "vcenter server 5.1 startup may be slow",
            "description": "vmware and EMC have identified two issues with powerpath/VE 5.7"
        }, {
            "name": "vcenter server 5.1 startup may be slow",
            "description": "vmware and EMC have identified two issues with powerpath/VE 5.7"
        }, {
            "name": "vcenter server 5.1 startup may be slow",
            "description": "vmware and EMC have identified two issues with powerpath/VE 5.7"
        }]
    };
});
/* Pagination Controller */

app.controller('paginationCtrl', ['$scope', '$timeout', function($scope, $timeout) {
	$scope.input = {
	    "articles": [
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        },
	        {
	            "article": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis congue finibus. Cras justo risus, faucibus nec enim quis, lobortis porta purus. Maecenas tincidunt dui vitae elit consequat convallis. Nam condimentum iaculis nibh. Integer consequat felis ut ultrices finibus. Quisque hendrerit condimentum laoreet. Mauris ullamcorper vitae nisl sed vehicula. Mauris rutrum, nulla eget placerat iaculis, mi magna interdum urna, quis semper tellus neque vestibulum diam. Ut non convallis nibh. Nunc mi diam, egestas sit amet sollicitudin at, finibus id diam. Proin diam massa, consequat sed mauris non, auctor ullamcorper massa. Nullam id rhoncus ligula. Sed egestas mauris a mauris dapibus consectetur."
	        }
	    ]
	};

	$scope.inputHTML = {
	    "articles": [
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        },
	        {
	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a></div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	        }
	    ]
	}; 

	// $timeout(function() {
	// 	$scope.inputHTML = {
	// 	    "articles": [
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>1</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>2</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>3</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>4</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>5</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>6</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>7</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>8</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>9</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>10</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>11</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>12</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        },
	// 	        {
	// 	            "article": "<div class='result'><div  class='contentHeading'><a href=''>[Archived] ESX Server 3.0.2, Patch ESX-1002425; Updates to hostd-exs(1002425)</a>13</div><div  class='contentDesc'>...Flushing ice devices:[device names]System halted. Deployment Consideration. A restart of the host engine is required  after applying  this patch. ...</div><div class='contentLink'><a href=''>http://kb.vmware.com/kb/1096733</a></div><div class='contentMeta'><div class='star_1 ratings_vote'></div><div class='star_2 ratings_vote'></div><div class='star_3 ratings_stars'></div><div class='star_4 ratings_stars'></div><div class='star_5 ratings_stars'></div><span class='rate'>&nbsp;2</span> Rating |  Author: <span class='author'>Shibu John(sJohn)</span> | Created date: <span class='dateCreated'>10/28/10</span></div></div>"
	// 	        }
	// 	    ]
	// 	};
	// }, 5000); 

}]);
/*Radio Buttons controller code*/
app.controller("radioCtrl", ['$scope',
    function($scope) {
        $scope.radioTitle = "Your Role";
        $scope.radioOptions = [{
            'value': '1',
            'text': 'Primary Business Contact',
            'disabled': false,
            'checked': false
        }, {
            'value': '2',
            'text': 'Primary Technical Contact',
            'disabled': false,
            'checked': false
        }, {
            'value': '3',
            'text': 'Primary Procurement Contact',
            'disabled': false,
            'checked': true
        }];

        $scope.radioName = 'role';
        $scope.radioModel = '3';
        $scope.radioTitle2 = "";
        $scope.radioOptions2 = [{
            'value': 'win',
            'text': 'Windows PC',
            'disabled': true,
            'checked': false
        }, {
            'value': 'mac',
            'text': 'Mac OS',
            'disabled': true,
            'checked': true
        }];

        $scope.radioName2 = 'os';
        $scope.radioModel2 = 'mac';
        $scope.customclass = [{
            "selector": ".labelHeader",
            "cusclass": "check1"
        }, {
            "selector": ".labelHeader",
            "cusclass": "checkl"
        }];


       $scope.radioOptions3 = [{
            'value': '1',
            'text': 'Business Contact',
            'disabled': false,
            'checked': false
        }, {
            'value': '2',
            'text': 'Technical Contact <span class="toolTip-icon vmf-tooltip" vmf-tooltip tooltip-options="{\'position\':\'right\',\'text\':\'<h5>Total Revenue</h5> Lorem ipsum dolor sit amet aconsecteututur ullem elit, sed Lorem ipsum dolor sit amet aconsecteututur ullem elit, sed\'}"></span>',
            'disabled': false,
            'checked': false
        }, {
            'value': '3',
            'text': 'Procurement Contact',
            'disabled': false,
            'checked': true
        }];

        $scope.radioModel3 = '1';


    }
]);
/* Product Carousel Controller Block starts here */
app.controller('productCarouselController',['$scope',function($scope) {
	$scope.config = {
		productCarouselTitle : "Featured Products",
		productCarousel : [
			{
				productImageSource : "../images/productCarousel/product_carousel_1.png",
				ProductName : "VMware Fusion 6 Professional",
				productDescription : "Virtural Machines on Mac or Pc",
				productOffer : "30% off Decemeber only"
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_2.png",
				ProductName : "vSphere Essential Plus kit",
				productDescription : "Taking Virtual Machine to the Next Level",
				productOffer : ""
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_3.png",
				ProductName : "VmWare Workstation 10",
				productDescription : "Taking Virtual Machine to the Next Level",
				productOffer : ""
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_4.png",
				ProductName : "Vmware Mirage",
				productDescription : "Taking Virtual Machine to the Next Level",
				productOffer : ""
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_5.png",
				ProductName : "VMware Fusion 6 Professional",
				productDescription : "Virtural Machines on Mac or Pc",
				productOffer : "30% off Decemeber only"
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_6.png",
				ProductName : "vSphere Essential Plus kit",
				productDescription : "Taking Virtual Machine to the Next Level",
				productOffer : ""
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_1.png",
				ProductName : "VmWare Workstation 10",
				productDescription : "Taking Virtual Machine to the Next Level",
				productOffer : ""
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_2.png",
				ProductName : "Vmware Mirage",
				productDescription : "Taking Virtual Machine to the Next Level",
				productOffer : ""
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_3.png",
				ProductName : "VMware Fusion 6 Professional",
				productDescription : "Virtural Machines on Mac or Pc",
				productOffer : "30% off Decemeber only"
			},
			{
				productImageSource : "../images/productCarousel/product_carousel_4.png",
				ProductName : "vSphere Essential Plus kit",
				productDescription : "Taking Virtual Machine to the Next Level",
				productOffer : ""
			}
		]
	};

	$scope.carouselClick = function() {
		// definitation of Carousel click event
	};
	$scope.carouselHover = function() {
		// definitation  of Carousel hover event
	};
}]);
/* Social media controller */
app.controller('socialMediaController',['$scope',function($scope) {
	$scope.config = [
		{
		  imageSource : "../images/social/media_facebook.png",
		  imageURL : "https://facebook.com/vmware"
		},
		{
		  imageSource : "../images/social/media-twitter.png",
		  imageURL : "https://twitter.com/vmware"	
		},
		{
		  imageSource : "../images/social/media-google.png",
		  imageURL : "https://plus.google.com/vmware"
		},
		{
		  imageSource : "../images/social/media-linkedin.png",
		  imageURL : "http://www.linkedin.com/vmware"
		}
	];

	$scope.positionClass = "vmsmedia_position";

}]);
/*System Alerts controller code*/

app.controller('systemCtrl', ['$scope', 'ie7hideService',
    function($scope, ie7hideService) {
        $scope.someThing = 'hi';
        $scope.modalShown = false;
        $scope.flag = ie7hideService.getStatus();
        $scope.toggleAlert = function() {
            ie7hideService.switchModal();
            $scope.sysalert = "first";
            $scope.sysMessage = "You have successfully completed a request to fund this service with <Fund name>. A confirmation email will be sent to you. This switch will take effect on the next invoice..your current balance for this fund is $0.00. Please add more credit to this fund by XXXXXXX.";
        };
        $scope.toggleAlert2 = function() {
            ie7hideService.switchModal();
            $scope.sysalert = "second";
            $scope.sysMessage = "The system encountered a problem. Please try again later.";
        };
        $scope.toggleAlert3 = function() {
            ie7hideService.switchModal();
            $scope.sysalert = "third";
            $scope.sysMessage = "Your Session will expire if you navigate away from this page. Do you want to proceed?";
        };
        $scope.selectNeutral = function() {
            $scope.warningtype = 'neutral';
        };
        $scope.selectPositive = function() {
            $scope.warningtype = 'positive';
        };
        $scope.selectWarning = function() {
            $scope.warningtype = 'warning';
        };
        $scope.selectCritical = function() {
            $scope.warningtype = 'critical';
        };
    }
]);
app.controller('systemalertCtrl', ['$scope', 'ie7hideService',
    function($scope, ie7hideService) {
        $scope.selectNeutral = function() {
            console.log('neutral');
            $scope.isInfoMessage = true;
            $scope.warningtype = 'neutral';
            $scope.infomessage = "Pricing changes will be reflected when this Add-on Request is approved.";
        };
        $scope.selectPositive = function() {
            $scope.warningtype = 'positive';
            $scope.isInfoMessage = true;
            $scope.infomessage = "Your file was uploaded successfully.";
        };
        $scope.selectWarning = function() {
            $scope.warningtype = 'warning';
            $scope.isInfoMessage = true;
            $scope.infomessage = "Your subscription services is expiring in 3 days.";
        };
        $scope.selectCritical = function() {
            $scope.warningtype = 'critical';
            $scope.isInfoMessage = true;
            $scope.infomessage = "The connection has timeout. Please login again.";
        };
    }
]);

/*Text Input Box controller code*/

app.controller("textInputCtrl", ['$scope',
    function($scope) {
        $scope.user = {};
        $scope.user.firstname;
        $scope.user.lastName;
        $scope.user.search;
        $scope.user.psearch;
        $scope.user.searchCallback = function() {
            console.log($scope.user.search);
        };
        $scope.user.psearchCallback = function(val) {
            //use val for search input not $scope.psearch
            console.log(val);
        };
        /*$scope.$watch('user.psearch', function(n, o) {
            if(n) {
                // console.log(n);
                // send suggestion request to the server with value n
                // repopulate $scope.data.list with suggestion results from the server
            }
        });*/
        $scope.data = {};
        $scope.data.list = ['vSphere 4', 'vSphere 5', 'vSphere with Operations', 'Sr. Software Engineer', 'Sr. Architect Engineer', 'Sr. Network Engineer', 'Sr. Civil Engineer'];
        // $scope.data.list2 = ['Sr. Software Engineer', 'Sr. Architect Engineer', 'Sr. Network Engineer', 'Sr. Civil Engineer'];
        $scope.customclass = [{
            "selector": ".formRow",
            "cusclass": "check1"
        }, {
            "selector": ".formRow",
            "cusclass": "check2"
        }];
    }
]);
/*Checkbox controller code*/

app.controller("utilityCtrl", ['$scope',function($scope) {
    $scope.navList = [
        {'value':'', 'text': 'MyVMWare'},
        {'value':'', 'text': 'Partner Central'},
        {'value':'', 'text': 'Training'},
        {'value':'', 'text': 'Community'},
        {'value':'', 'text': 'Store'}
    ];
}]);
/* Password Strength */

app.controller("pwdStrengthCtrl", ['$scope', function($scope) {
    	$scope.pw = '';
    $scope.user = {};
    $scope.user.confirm_password="";
    
    	$scope.heading= "Forgot Your Password?";
    	 $scope.forward = function() {
    	 	//console.log('calling forward');

        	if(angular.element('.has-error').size() === 0){
        		$scope.heading = "Reset Password";
            	$scope.$broadcast('vmfWpbNext'); 
            }
        };
        $scope.serviceCall = function(){
        		//console.log("You have sucessfully reset your Password ");
        		//$scope.$broadcast('vmfWpbNext');
        		$scope.heading = "Reset Password";
        		$scope.$broadcast('vmfWpbNext'); 
        };
    }
]);